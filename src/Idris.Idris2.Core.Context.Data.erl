-module('Idris.Idris2.Core.Context.Data').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in addData-1513'/20,
  'case--addData-1428'/17,
  'case--case block in addData,addDataConstructors-1251'/21,
  'case--addData,addDataConstructors-1204'/18,
  'case--case block in getPs-941'/10,
  'case--getPs-914'/6,
  'case--updateParams,mergeArg-742'/15,
  'case--updateParams,couldBeParam-675'/5,
  'case--dropReps,toNothing-572'/14,
  'nested--6500-553--in--un--toNothing'/8,
  'nested--6818-842--in--un--shrink'/12,
  'nested--6629-717--in--un--mergeArg'/6,
  'nested--7012-1013--in--un--justPos'/4,
  'nested--6629-661--in--un--couldBeParam'/5,
  'nested--7173-1169--in--un--conVisibility'/10,
  'nested--7173-1168--in--un--allDet'/10,
  'nested--7173-1170--in--un--addDataConstructors'/12,
  'un--updateParams'/4,
  'un--toPos'/2,
  'un--paramPos'/3,
  'un--getPs'/5,
  'un--getConPs'/5,
  'un--dropReps'/2,
  'un--addData'/5
]).
'case--case block in addData-1513'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V9 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V19, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addData-1428'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = (('nested--7173-1170--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 0, V4, V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V50 = begin (V49 = ('erlang':'put'(V8, case V9 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V22, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E30} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V52) -> {'Idris.Prelude.Types.Right', V17} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addData,addDataConstructors-1251'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--7173-1170--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V15 + 1) rem 9223372036854775808), V13, V18)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V12, V11}, V22)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addData,addDataConstructors-1204'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V11, V14))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> case V23 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--7173-1170--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V15 + 1) rem 9223372036854775808), V13, V19))(V20)) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V12, V11}, V20)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getPs-941'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V13}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--updateParams'(V0, V1, V4, V8)), V10)) end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', V4} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getPs-914'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V8, V9, V10) -> ('case--case block in getPs-941'(V0, V1, V2, V3, V4, V8, V9, V10, V7, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V10, V3)))) end(E2, E3, E4)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', V4} end end end(E0, E1)); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', V4} end end.
'case--updateParams,mergeArg-742'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V13, V12, V10}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateParams,couldBeParam-675'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V5, V6, V7}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--dropReps,toNothing-572'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> {'Idris.Prelude.Types.Nothing'}; 1 -> V12; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6500-553--in--un--toNothing'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Core.TT.Local', E1, E2, E3} -> (fun (V9, V10, V11) -> begin (V12 = {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V9, V10, V11}}), ('case--dropReps,toNothing-572'('erased', V1, 'erased', 'erased', V4, V5, V6, 'erased', V9, V10, V11, 'erased', V12, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V1, V11)))) end end(E1, E2, E3)); _ -> V7 end end(E0)); _ -> V7 end.
'nested--6818-842--in--un--shrink'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V12, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6629-717--in--un--mergeArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.TT.Local', E1, E2, E3} -> (fun (V7, V8, V9) -> case V5 of {'Idris.Core.TT.Local', E4, E5, E6} -> (fun (V10, V11, V12) -> ('case--updateParams,mergeArg-742'(V0, V1, V2, V3, 'erased', V10, V11, V12, 'erased', 'erased', V9, 'erased', V8, V7, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V9, V12)))) end(E4, E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--7012-1013--in--un--justPos'(V0, V1, V2, V3) -> case V3 of [] -> []; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Types.Just', E2} -> (fun (V6) -> [V2 | ('nested--7012-1013--in--un--justPos'('erased', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2)), V5))] end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--7012-1013--in--un--justPos'('erased', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2)), V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6629-661--in--un--couldBeParam'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise':'un--etaContract'(V0, V1, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Core.TT.Local', E2, E3, E4} -> (fun (V8, V9, V10) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V8, V9, V10}} end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--7173-1169--in--un--conVisibility'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.TT.Export'} -> (fun () -> {'Idris.Core.TT.Private'} end()); _ -> V9 end.
'nested--7173-1168--in--un--allDet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> []; _ -> begin (V10 = (V9 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range__Nat'(0, V10)) end end.
'nested--7173-1170--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', V11} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Core.Context.MkCon', E2, E3, E4, E5} -> (fun (V15, V16, V17, V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--newDef'(V15, V16, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), V7, V18, ('nested--7173-1169--in--un--conVisibility'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V6)), {'Idris.Core.Context.DCon', V9, V17, {'Idris.Prelude.Types.Nothing'}}))), fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Context':'un--addCtxt'(V16, V19, V11))(V20))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V24, V25) -> begin (V26 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, V11))(V20))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> case V28 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--7173-1170--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V14, V25))(V20)) end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V15, V16}, V20)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateParams'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--dropReps'('erased', V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V8) -> fun (V9) -> ('nested--6629-661--in--un--couldBeParam'(V0, V1, V3, V8, V9)) end end, V3, [])), V4)) end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--dropReps'('erased', ('Idris.Idris2.Data.List':'un--zipWith'('erased', 'erased', 'erased', fun (V12) -> fun (V13) -> ('nested--6629-717--in--un--mergeArg'(V0, V1, V10, V3, V12, V13)) end end, V10, V3))))} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPos'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('nested--7012-1013--in--un--justPos'('erased', V2, 0, V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--paramPos'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('un--getConPs'(V0, [], {'Idris.Prelude.Types.Nothing'}, V1, V5)) end, V2, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.List':'un--intersectAll'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V11, V12)) end end}, V8))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getPs'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V17 = (('un--getPs'(V0, [V6 | V1], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V16)) end, V15)) end, V14)) end, V2)), V3, V8))(V13))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V21) -> ('nested--6818-842--in--un--shrink'(V0, V1, V5, V9, V10, V11, V12, V6, V8, V3, V2, V21)) end, V20)) end, V19))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> ('case--getPs-914'(V0, V1, V4, V3, V2, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V4)))) end end(E0, E1, E2, E3)); _ -> ('case--getPs-914'(V0, V1, V4, V3, V2, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V4)))) end.
'un--getConPs'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (('un--getPs'(V0, V1, V2, V3, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E12} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V16) -> (('un--getConPs'(V0, [V6 | V1], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V19)) end, V18)) end, V17)) end, V16)), V3, V8))(V13)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11)); {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V20, V21, V22, V23) -> ('un--getConPs'(V0, V1, V2, V3, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'('erased', 'erased', V22, V8)))) end(E14, E15, E16, E17)); _ -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> {'Idris.Prelude.Types.Right', ('un--toPos'('erased', V27))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--getPs'(V0, V1, V2, V3, V4)), V24)) end end end(E2, E3, E4, E5)); _ -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V29) -> case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> {'Idris.Prelude.Types.Right', ('un--toPos'('erased', V31))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--getPs'(V0, V1, V2, V3, V4)), V28)) end end.
'un--dropReps'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E2} -> (fun (V4) -> case V4 of {'Idris.Core.TT.Local', E3, E4, E5} -> (fun (V5, V6, V7) -> [{'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V5, V6, V7}} | ('un--dropReps'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('nested--6500-553--in--un--toNothing'('erased', V7, 'erased', 'erased', V6, V5, V3, V8)) end, V3))))] end(E3, E4, E5)); _ -> [V2 | ('un--dropReps'('erased', V3))] end end(E2)); _ -> [V2 | ('un--dropReps'('erased', V3))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addData'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Context.MkData', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Core.Context.MkCon', E2, E3, E4, E5} -> (fun (V7, V8, V9, V10) -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getNextTypeTag'(V0, V11))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = ('nested--7173-1168--in--un--allDet'(V10, V9, V8, V7, V6, V3, V2, V1, V0, V9))), begin (V25 = (('un--paramPos'(V0, {'Idris.Core.Name.Resolved', V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> case V20 of {'Idris.Core.Context.MkCon', E10, E11, E12, E13} -> (fun (V21, V22, V23, V24) -> V24 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6))))(V11))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V19 end, V27))), begin (V30 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"declare.data.parameters"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Positions of parameters for datatype"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": ["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V29)) end, V28)))), <<"]"/utf8>>)))))))) end))(V11))), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--newDef'(V7, V8, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), V1, V10, V2, {'Idris.Core.Context.TCon', V18, V9, V28, V19, ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V33) -> case V33 of {'Idris.Core.Context.MkCon', E18, E19, E20, E21} -> (fun (V34, V35, V36, V37) -> V35 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)), {'Idris.Prelude.Types.Nothing'}}))), begin (V65 = (('Idris.Idris2.Core.Context':'un--addCtxt'(V8, V38, case V15 of {'Idris.Core.Context.MkDefs', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V39 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V65 of {'Idris.Prelude.Types.Left', E48} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V68, V69) -> begin (V70 = (('nested--7173-1170--in--un--addDataConstructors'(V10, V9, V8, V7, V6, V3, V2, V1, V0, 0, V6, V69))(V11))), case V70 of {'Idris.Prelude.Types.Left', E52} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V72) -> begin (V100 = begin (V99 = ('erlang':'put'(V0, case V15 of {'Idris.Core.Context.MkDefs', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> {'Idris.Core.Context.MkDefs', V72, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98} end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V99} end), case V100 of {'Idris.Prelude.Types.Left', E80} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V102) -> {'Idris.Prelude.Types.Right', V68} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
