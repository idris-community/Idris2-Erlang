-module('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToErlangSource').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--genCatchClause-4881'/10,
  'case--genCaseClause-4798'/6,
  'case--genFunClause-4703'/7,
  'case--genExpr-4599'/9,
  'case--genExpr-4544'/8,
  'case--genExpr-4493'/7,
  'case--genExpr-4378'/4,
  'case--genBitSegment-3763'/8,
  'case--genBitEndianness-3662'/1,
  'case--genBitSignedness-3654'/1,
  'case--genBitType-3632'/1,
  'nested--4252-5023--in--un--clauseToFunHead'/6,
  'un--sepBy'/2,
  'un--genTypeSpecifierList'/1,
  'un--genPattern'/1,
  'un--genMapFieldExact'/3,
  'un--genMapFieldAssoc'/3,
  'un--genLiteral'/1,
  'un--genGuardAlt'/1,
  'un--genGuard'/1,
  'un--genFunClause'/2,
  'un--genExpr'/1,
  'un--genExportFun'/1,
  'un--genDecl'/1,
  'un--genCharlist'/1,
  'un--genCatchClause'/1,
  'un--genCaseClause'/1,
  'un--genBitUnit'/1,
  'un--genBitType'/1,
  'un--genBitSize'/1,
  'un--genBitSignedness'/1,
  'un--genBitSegment'/3,
  'un--genBitPattern'/1,
  'un--genBitEndianness'/1,
  'un--genAtom'/1
]).
'case--genCatchClause-4881'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V2 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> ('un--genGuardAlt'(V10)) end, V2)))) | []]]} end.
'case--genCaseClause-4798'(V0, V1, V2, V3, V4, V5) -> case V2 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('un--genGuardAlt'(V6)) end, V2)))) | []]]} end.
'case--genFunClause-4703'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('un--genGuardAlt'(V7)) end, V3)))) | []]]} end.
'case--genExpr-4599'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V1 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V9) -> ('un--genExpr'(V9)) end, V1)))) | []]]} end.
'case--genExpr-4544'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" catch "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('un--genCatchClause'(V8)) end, V2)))) | []]]} end.
'case--genExpr-4493'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('un--genCaseClause'(V7)) end, V3)))) | []]]} end.
'case--genExpr-4378'(V0, V1, V2, V3) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', E0, E1} -> (fun (V4, V5) -> begin (V17 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('un--genExpr'(V6)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V14, V15, V16)) end end end end end}))(V5))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--genExpr'(V4)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V17 | []]]]]} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--genBitSegment-3763'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showSep'(<<"-"/utf8>>, V7)))) end.
'case--genBitEndianness-3662'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBig'} -> (fun () -> <<"big"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABLittle'} -> (fun () -> <<"little"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABNative'} -> (fun () -> <<"native"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--genBitSignedness-3654'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUnsigned'} -> (fun () -> <<"unsigned"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSigned'} -> (fun () -> <<"signed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--genBitType-3632'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABInteger'} -> (fun () -> <<"integer"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABFloat'} -> (fun () -> <<"float"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBinary'} -> (fun () -> <<"binary"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBytes'} -> (fun () -> <<"bytes"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBitstring'} -> (fun () -> <<"bitstring"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBits'} -> (fun () -> <<"bits"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf8'} -> (fun () -> <<"utf8"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf16'} -> (fun () -> <<"utf16"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf32'} -> (fun () -> <<"utf32"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4252-5023--in--un--clauseToFunHead'(V0, V1, V2, V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genAtom'(V3))} | [('un--genFunClause'('erased', V5)) | []]]}.
'un--sepBy'(V0, V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'('erased', {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V0}, V1))}.
'un--genTypeSpecifierList'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__Maybe'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__Maybe'('erased', 'erased', V13, V14, V15)) end end end end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V5) -> ('un--genBitSignedness'(V5)) end, V1)))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__Maybe'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__Maybe'('erased', 'erased', V24, V25, V26)) end end end end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V16) -> ('un--genBitEndianness'(V16)) end, V2)))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__Maybe'('erased', 'erased', V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__Maybe'('erased', 'erased', V35, V36, V37)) end end end end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V27) -> ('un--genBitType'(V27)) end, V3)))), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__Maybe'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__Maybe'('erased', 'erased', V46, V47, V48)) end end end end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V38) -> ('un--genBitUnit'(V38)) end, V4)))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.APLiteral', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))} end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', E1, E2} -> (fun (V2, V3) -> begin (V6 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('un--genBitSegment'('erased', fun (V5) -> ('un--genBitPattern'(V5)) end, V4)) end, V3))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"<<"/utf8>>} | [V6 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<">>"/utf8>>} | []]]]} end end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APCons', E3, E4, E5} -> (fun (V7, V8, V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genPattern'(V8)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genPattern'(V9)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]} end(E3, E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APMap', E6, E7} -> (fun (V10, V11) -> begin (V14 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V12) -> ('un--genMapFieldExact'('erased', fun (V13) -> ('un--genPattern'(V13)) end, V12)) end, V11))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"#{"/utf8>>} | [V14 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APNil', E8} -> (fun (V15) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>} end(E8)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', E9, E10} -> (fun (V16, V17) -> begin (V19 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('un--genPattern'(V18)) end, V17))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V19 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APUniversal', E11} -> (fun (V20) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"_"/utf8>>} end(E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', E12, E13} -> (fun (V21, V22) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V22} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldExact'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkExact', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [(V1(V4)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" := "/utf8>>} | [(V1(V5)) | []]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldAssoc'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkAssoc', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [(V1(V4)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" => "/utf8>>} | [(V1(V5)) | []]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genLiteral'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', E0, E1} -> (fun (V1, V2) -> ('un--genAtom'(V2)) end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALChar', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeChar'(V4, <<""/utf8>>)))) end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALFloat', E4, E5} -> (fun (V5, V6) -> ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V6)) end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', E6, E7} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V8)) end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALCharlist', E8, E9} -> (fun (V9, V10) -> ('un--genCharlist'(V10)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genGuardAlt'(V0) -> ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V1) -> ('un--genGuard'(V1)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V9, V10, V11)) end end end end end}))(V0)))))).
'un--genGuard'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AGLiteral', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))} end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGCons', E1, E2, E3} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genGuard'(V3)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genGuard'(V4)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]} end(E1, E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', E4, E5, E6} -> (fun (V5, V6, V7) -> begin (V9 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('un--genGuard'(V8)) end, V7))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(erlang:"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--genAtom'(V6)), <<"("/utf8>>))))} | [V9 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"))"/utf8>>} | []]]]} end end(E4, E5, E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGNil', E7} -> (fun (V10) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>} end(E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genGuard'(V13)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, <<" "/utf8>>))))} | [('un--genGuard'(V14)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]} end(E8, E9, E10, E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGTuple', E12, E13} -> (fun (V15, V16) -> begin (V18 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V17) -> ('un--genGuard'(V17)) end, V16))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V18 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', E14, E15} -> (fun (V19, V20) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V20} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genFunClause'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> begin (V17 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('un--genPattern'(V6)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V14, V15, V16)) end end end end end}))(V3))))))), begin (V19 = case V4 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('un--genGuardAlt'(V18)) end, V4)))) | []]]} end), begin (V31 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> ('un--genExpr'(V20)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V28, V29, V30)) end end end end end}))(V5))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V17 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | [V19 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V31 | []]]]]]]} end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExpr'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))} end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', E1, E2} -> (fun (V2, V3) -> begin (V6 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('un--genBitSegment'('erased', fun (V5) -> ('un--genExpr'(V5)) end, V4)) end, V3))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"<<"/utf8>>} | [V6 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<">>"/utf8>>} | []]]]} end end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBlock', E3, E4} -> (fun (V7, V8) -> begin (V20 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V9) -> ('un--genExpr'(V9)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V17, V18, V19)) end end end end end}))(V8))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"begin "/utf8>>} | [V20 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]} end end(E3, E4)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECase', E5, E6, E7} -> (fun (V21, V22, V23) -> begin (V24 = ('un--genExpr'(V22))), begin (V36 = ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> ('un--genCaseClause'(V25)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V33, V34, V35)) end end end end end}))(V23))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"case "/utf8>>} | [V24 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [V36 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]]} end end end(E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECons', E8, E9, E10} -> (fun (V37, V38, V39) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genExpr'(V38)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genExpr'(V39)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]} end(E8, E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', E11, E12, E13} -> (fun (V40, V41, V42) -> begin (V54 = ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V43) -> ('un--genFunClause'('erased', V43)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V46, V47, V48)) end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V51, V52, V53)) end end end end end}))(V42))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"fun "/utf8>>} | [V54 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]} end end(E11, E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', E14, E15, E16} -> (fun (V55, V56, V57) -> begin (V58 = ('un--genExpr'(V56))), begin (V60 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V59) -> ('un--genExpr'(V59)) end, V57))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V58 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V60 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"))"/utf8>>} | []]]]]]} end end end(E14, E15, E16)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AERemoteRef', E17, E18, E19} -> (fun (V61, V62, V63) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [('un--genExpr'(V62)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [('un--genExpr'(V63)) | []]]]} end(E17, E18, E19)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMapNew', E20, E21} -> (fun (V64, V65) -> begin (V68 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V66) -> ('un--genMapFieldAssoc'('erased', fun (V67) -> ('un--genExpr'(V67)) end, V66)) end, V65))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"#{"/utf8>>} | [V68 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E20, E21)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', E22, E23, E24} -> (fun (V69, V70, V71) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genPattern'(V70)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" = "/utf8>>} | [('un--genExpr'(V71)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]} end(E22, E23, E24)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AENil', E25} -> (fun (V72) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>} end(E25)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', E26, E27, E28, E29} -> (fun (V73, V74, V75, V76) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genExpr'(V75)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V74, <<" "/utf8>>))))} | [('un--genExpr'(V76)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]} end(E26, E27, E28, E29)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEReceive', E30, E31, E32} -> (fun (V77, V78, V79) -> begin (V81 = ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V80) -> ('un--genCaseClause'(V80)) end, V78))))), begin (V96 = case V79 of {'Idris.Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', E33, E34} -> (fun (V82, V83) -> begin (V95 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V84) -> ('un--genExpr'(V84)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V92, V93, V94)) end end end end end}))(V83))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--genExpr'(V82)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V95 | []]]]]} end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"receive "/utf8>>} | [V81 | [V96 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]} end end end(E30, E31, E32)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', E35, E36} -> (fun (V97, V98) -> begin (V100 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V99) -> ('un--genExpr'(V99)) end, V98))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V100 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E35, E36)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETry', E37, E38, E39, E40, E41} -> (fun (V101, V102, V103, V104, V105) -> begin (V117 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V106) -> ('un--genExpr'(V106)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V114, V115, V116)) end end end end end}))(V102))))))), begin (V119 = case V103 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V118) -> ('un--genCaseClause'(V118)) end, V103)))) | []]]} end), begin (V121 = case V104 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" catch "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V120) -> ('un--genCatchClause'(V120)) end, V104)))) | []]]} end), begin (V123 = case V105 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V122) -> ('un--genExpr'(V122)) end, V105)))) | []]]} end), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"try "/utf8>>} | [V117 | [V119 | [V121 | [V123 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]]]} end end end end end(E37, E38, E39, E40, E41)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', E42, E43} -> (fun (V124, V125) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V125} end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExportFun'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--genAtom'(V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V2)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genDecl'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ADExport', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-export([\x{a}  "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showSep'(<<",\x{a}  "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V3) -> ('un--genExportFun'(V3)) end, V2)))), <<"\x{a}])."/utf8>>))))} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADModule', E2, E3} -> (fun (V4, V5) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-module("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--genAtom'(V5)), <<")."/utf8>>))))} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADFunDef', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [('un--sepBy'(<<";\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> ('nested--4252-5023--in--un--clauseToFunHead'('erased', V8, V9, V7, V6, V10)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end}))(V9)))))) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"."/utf8>>} | []]]} end(E4, E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADAttribute', E8, E9, E10} -> (fun (V21, V22, V23) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V22, <<"("/utf8>>))))} | [('Idris.Idris2.Compiler.Erlang.Utils.PrimTerm':'un--primTermToCS'(V23)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")."/utf8>>} | []]]]} end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCharlist'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<""/utf8>>)), <<"\x{22}"/utf8>>)))).
'un--genCatchClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCatchClause', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--genPattern'(V2))), begin (V8 = ('un--genPattern'(V3))), begin (V9 = ('un--genPattern'(V4))), begin (V11 = case V5 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> ('un--genGuardAlt'(V10)) end, V5)))) | []]]} end), begin (V23 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V12) -> ('un--genExpr'(V12)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V20, V21, V22)) end end end end end}))(V6))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [V7 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [V8 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [V9 | [V11 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V23 | []]]]]]]]]} end end end end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCaseClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCaseClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> begin (V5 = ('un--genPattern'(V2))), begin (V7 = case V3 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('un--genGuardAlt'(V6)) end, V3)))) | []]]} end), begin (V19 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('un--genExpr'(V8)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V16, V17, V18)) end end end end end}))(V4))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [V5 | [V7 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V19 | []]]]]} end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitUnit'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"unit:"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'((('Idris.Idris2.Data.Fin':'dn--un--cast_Cast__(Fin $n)_Integer'('erased', V0)) + 1))))).
'un--genBitType'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABInteger'} -> (fun () -> <<"integer"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABFloat'} -> (fun () -> <<"float"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBinary'} -> (fun () -> <<"binary"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBytes'} -> (fun () -> <<"bytes"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBitstring'} -> (fun () -> <<"bitstring"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBits'} -> (fun () -> <<"bits"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf8'} -> (fun () -> <<"utf8"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf16'} -> (fun () -> <<"utf16"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf32'} -> (fun () -> <<"utf32"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSize'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V2))} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', E2, E3} -> (fun (V3, V4) -> {'Idris.Prelude.Types.Just', V4} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSignedness'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUnsigned'} -> (fun () -> <<"unsigned"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSigned'} -> (fun () -> <<"signed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSegment'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V8 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":"/utf8>>, V7)) end end, ('un--genBitSize'(V5))))), begin (V9 = ('case--genBitSegment-3763'('erased', V4, V6, V5, V3, V1, V8, ('un--genTypeSpecifierList'(V6))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [(V1(V4)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', V8} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', V9} | []]]]} end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V2))} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPFloat', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V4))} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPCharlist', E4, E5} -> (fun (V5, V6) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genCharlist'(V6))} end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', E6} -> (fun (V7) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"_"/utf8>>} end(E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', E7, E8} -> (fun (V8, V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V9} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitEndianness'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBig'} -> (fun () -> <<"big"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABLittle'} -> (fun () -> <<"little"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABNative'} -> (fun () -> <<"native"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genAtom'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<""/utf8>>)), <<"\x{27}"/utf8>>)))).
