-module('Idris.Idris2.TTImp.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--uniqueName-1237'/4,
  'case--uniqueName,next-1207'/5,
  'case--uniqueName,usedName-1184'/4,
  'case--case block in nameNum-1138'/4,
  'case--nameNum-1110'/2,
  'case--case block in substNames\x{27}-849'/5,
  'case--substNames\x{27}-832'/5,
  'case--case block in substNames\x{27}-794'/5,
  'case--substNames\x{27}-777'/5,
  'case--findAllNames-651'/7,
  'case--findAllNames-613'/7,
  'case--findAllNames-588'/4,
  'case--findBindableNames-500'/9,
  'case--findBindableNames-454'/9,
  'case--findBindableNames-421'/5,
  'case--getUnique-397'/3,
  'nested--6759-1172--in--un--usedName'/4,
  'nested--6759-1173--in--un--next'/4,
  'un--uniqueName'/4,
  'un--substNamesTy\x{27}'/4,
  'un--substNamesDecl\x{27}'/4,
  'un--substNamesData\x{27}'/4,
  'un--substNamesClause\x{27}'/4,
  'un--substNamesClause'/3,
  'un--substNames\x{27}'/4,
  'un--substNames'/3,
  'un--substLocTy'/2,
  'un--substLocDecl'/2,
  'un--substLocData'/2,
  'un--substLocClause'/2,
  'un--substLoc'/2,
  'un--substBindVars'/3,
  'un--nameNum'/1,
  'un--getUnique'/2,
  'un--findIBindVars'/1,
  'un--findBindableNames'/4,
  'un--findAllNames'/2
]).
'case--uniqueName-1237'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> ('un--uniqueName'(V2, V1, ('nested--6759-1173--in--un--next'(V0, V1, V2, V0)), V4)) end; 1 -> fun (V5) -> {'Idris.Prelude.Types.Right', V0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--uniqueName,next-1207'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(((V6 + 1) rem 9223372036854775808))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--uniqueName,usedName-1184'(V0, V1, V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V6, V7)) end end}, V0, V1)); _ -> 0 end.
'case--case block in nameNum-1138'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V4 of $_ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--pack'(V5)))), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__String_Int'(('Idris.Idris2.Prelude.Types':'un--reverse'(V1))))}; _ -> {'Idris.Builtin.MkPair', V0, 0} end end(E0, E1)); _ -> {'Idris.Builtin.MkPair', V0, 0} end.
'case--nameNum-1110'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of <<""/utf8>> -> {'Idris.Builtin.MkPair', V0, 0}; _ -> ('case--case block in nameNum-1138'(V0, V2, V3, ('Idris.Idris2.Prelude.Types':'un--unpack'(V3)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in substNames\x{27}-849'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> V5 end(E0)); _ -> {'Idris.TTImp.TTImp.IBindVar', V1, V0} end.
'case--substNames\x{27}-832'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('case--case block in substNames\x{27}-849'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V7, V8)) end end}, {'Idris.Core.Name.UN', V0}, V2)))); 1 -> {'Idris.TTImp.TTImp.IBindVar', V1, V0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in substNames\x{27}-794'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> V5 end(E0)); _ -> {'Idris.TTImp.TTImp.IVar', V1, V0} end.
'case--substNames\x{27}-777'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('case--case block in substNames\x{27}-794'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V7, V8)) end end}, V0, V2)))); 1 -> {'Idris.TTImp.TTImp.IVar', V1, V0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findAllNames-651'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V6 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> [V7 | V6] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findAllNames-613'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V6 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> [V7 | V6] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findAllNames-588'(V0, V1, V2, V3) -> case V3 of 0 -> [V0 | []]; 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findBindableNames-500'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V7 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> [V9 | V7] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findBindableNames-454'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V7 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> [V9 | V7] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findBindableNames-421'(V0, V1, V2, V3, V4) -> case V4 of 0 -> [{'Idris.Builtin.MkPair', V0, ('un--getUnique'(V2, V0))} | []]; 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getUnique-397'(V0, V1, V2) -> case V2 of 0 -> ('un--getUnique'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<"\x{27}"/utf8>>)))); 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6759-1172--in--un--usedName'(V0, V1, V2, V3) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--lookupTyName'({'Idris.Core.Name.UN', V0}, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V30 of {'Idris.Prelude.Types.Left', E26} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V32) -> {'Idris.Prelude.Types.Right', case V32 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V35, V36)) end end}, V0, V1)); _ -> 0 end} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--6759-1173--in--un--next'(V0, V1, V2, V3) -> ('case--uniqueName,next-1207'(V0, V1, V2, V3, ('un--nameNum'(V3)))).
'un--uniqueName'(V0, V1, V2, V3) -> begin (V4 = ('nested--6759-1172--in--un--usedName'(V2, V1, V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 0 -> ('un--uniqueName'(V0, V1, ('nested--6759-1173--in--un--next'(V2, V1, V0, V2)), V3)); 1 -> {'Idris.Prelude.Types.Right', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--substNamesTy\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2} -> (fun (V4, V5, V6) -> {'Idris.TTImp.TTImp.MkImpTy', V4, V5, ('un--substNames\x{27}'(V0, V1, V2, V6))} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesDecl\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IClaim', V4, V5, V6, V7, ('un--substNamesTy\x{27}'(V0, V1, V2, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IDef', V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V12) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V12)) end, V11))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V13, V14, V15) -> {'Idris.TTImp.TTImp.IData', V13, V14, ('un--substNamesData\x{27}'(V0, V1, V2, V15))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V16, V17, V18) -> {'Idris.TTImp.TTImp.INamespace', V16, V17, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V19)) end, V18))} end(E11, E12, E13)); _ -> V3 end.
'un--substNamesData\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.MkImpData', V4, V5, ('un--substNames\x{27}'(V0, V1, V2, V6)), V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V9) -> ('un--substNamesTy\x{27}'(V0, V1, V2, V9)) end, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V10, V11, V12) -> {'Idris.TTImp.TTImp.MkImpLater', V10, V11, ('un--substNames\x{27}'(V0, V1, V2, V12))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V4, V5, V6) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> {'Idris.Core.Name.UN', V7} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V8)) end, ('un--findBindableNames'(0, V1, [], V5)))))), V1))), {'Idris.TTImp.TTImp.PatClause', V4, ('un--substNames\x{27}'(V0, [], [], V5)), ('un--substNames\x{27}'(V0, V9, V2, V6))} end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7} -> (fun (V10, V11, V12, V13, V14) -> begin (V17 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> {'Idris.Core.Name.UN', V15} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V16)) end, ('un--findBindableNames'(0, V1, [], V11)))))), V1))), {'Idris.TTImp.TTImp.WithClause', V10, ('un--substNames\x{27}'(V0, [], [], V11)), ('un--substNames\x{27}'(V0, V17, V2, V12)), V13, V14} end end(E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ImpossibleClause', E8, E9} -> (fun (V18, V19) -> {'Idris.TTImp.TTImp.ImpossibleClause', V18, ('un--substNames\x{27}'(V0, V1, [], V19))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause'(V0, V1, V2) -> ('un--substNamesClause\x{27}'(1, V0, V1, V2)).
'un--substNames\x{27}'(V0, V1, V2, V3) -> case V0 of 1 -> case V3 of {'Idris.TTImp.TTImp.IVar', E114, E115} -> (fun (V4, V5) -> ('case--substNames\x{27}-777'(V5, V4, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V8, V9)) end end}, V5, V1)))))) end(E114, E115)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E57, E58, E59, E60, E61, E62} -> (fun (V10, V11, V12, V13, V14, V15) -> begin (V17 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V16) -> [V16 | V1] end end, V13))), {'Idris.TTImp.TTImp.IPi', V10, V11, V12, V13, ('un--substNames\x{27}'(V0, V1, V2, V14)), ('un--substNames\x{27}'(V0, V17, V2, V15))} end end(E57, E58, E59, E60, E61, E62)); {'Idris.TTImp.TTImp.ILam', E63, E64, E65, E66, E67, E68} -> (fun (V18, V19, V20, V21, V22, V23) -> begin (V25 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V24) -> [V24 | V1] end end, V21))), {'Idris.TTImp.TTImp.ILam', V18, V19, V20, V21, ('un--substNames\x{27}'(V0, V1, V2, V22)), ('un--substNames\x{27}'(V0, V25, V2, V23))} end end(E63, E64, E65, E66, E67, E68)); {'Idris.TTImp.TTImp.ILet', E69, E70, E71, E72, E73, E74} -> (fun (V26, V27, V28, V29, V30, V31) -> begin (V32 = [V28 | V1]), {'Idris.TTImp.TTImp.ILet', V26, V27, V28, ('un--substNames\x{27}'(V0, V1, V2, V29)), ('un--substNames\x{27}'(V0, V1, V2, V30)), ('un--substNames\x{27}'(V0, V32, V2, V31))} end end(E69, E70, E71, E72, E73, E74)); {'Idris.TTImp.TTImp.ICase', E75, E76, E77, E78} -> (fun (V33, V34, V35, V36) -> {'Idris.TTImp.TTImp.ICase', V33, ('un--substNames\x{27}'(V0, V1, V2, V34)), ('un--substNames\x{27}'(V0, V1, V2, V35)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V37) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V37)) end, V36))} end(E75, E76, E77, E78)); {'Idris.TTImp.TTImp.ILocal', E79, E80, E81} -> (fun (V38, V39, V40) -> begin (V41 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V39)), V1))), {'Idris.TTImp.TTImp.ILocal', V38, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V42) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V42)) end, V39)), ('un--substNames\x{27}'(V0, V41, V2, V40))} end end(E79, E80, E81)); {'Idris.TTImp.TTImp.IApp', E82, E83, E84} -> (fun (V43, V44, V45) -> {'Idris.TTImp.TTImp.IApp', V43, ('un--substNames\x{27}'(V0, V1, V2, V44)), ('un--substNames\x{27}'(V0, V1, V2, V45))} end(E82, E83, E84)); {'Idris.TTImp.TTImp.INamedApp', E85, E86, E87, E88} -> (fun (V46, V47, V48, V49) -> {'Idris.TTImp.TTImp.INamedApp', V46, ('un--substNames\x{27}'(V0, V1, V2, V47)), V48, ('un--substNames\x{27}'(V0, V1, V2, V49))} end(E85, E86, E87, E88)); {'Idris.TTImp.TTImp.IAutoApp', E89, E90, E91} -> (fun (V50, V51, V52) -> {'Idris.TTImp.TTImp.IAutoApp', V50, ('un--substNames\x{27}'(V0, V1, V2, V51)), ('un--substNames\x{27}'(V0, V1, V2, V52))} end(E89, E90, E91)); {'Idris.TTImp.TTImp.IWithApp', E92, E93, E94} -> (fun (V53, V54, V55) -> {'Idris.TTImp.TTImp.IWithApp', V53, ('un--substNames\x{27}'(V0, V1, V2, V54)), ('un--substNames\x{27}'(V0, V1, V2, V55))} end(E92, E93, E94)); {'Idris.TTImp.TTImp.IAlternative', E95, E96, E97} -> (fun (V56, V57, V58) -> {'Idris.TTImp.TTImp.IAlternative', V56, V57, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V59) -> ('un--substNames\x{27}'(V0, V1, V2, V59)) end, V58))} end(E95, E96, E97)); {'Idris.TTImp.TTImp.ICoerced', E98, E99} -> (fun (V60, V61) -> {'Idris.TTImp.TTImp.ICoerced', V60, ('un--substNames\x{27}'(V0, V1, V2, V61))} end(E98, E99)); {'Idris.TTImp.TTImp.IAs', E100, E101, E102, E103} -> (fun (V62, V63, V64, V65) -> {'Idris.TTImp.TTImp.IAs', V62, V63, V64, ('un--substNames\x{27}'(V0, V1, V2, V65))} end(E100, E101, E102, E103)); {'Idris.TTImp.TTImp.IMustUnify', E104, E105, E106} -> (fun (V66, V67, V68) -> {'Idris.TTImp.TTImp.IMustUnify', V66, V67, ('un--substNames\x{27}'(V0, V1, V2, V68))} end(E104, E105, E106)); {'Idris.TTImp.TTImp.IDelayed', E107, E108, E109} -> (fun (V69, V70, V71) -> {'Idris.TTImp.TTImp.IDelayed', V69, V70, ('un--substNames\x{27}'(V0, V1, V2, V71))} end(E107, E108, E109)); {'Idris.TTImp.TTImp.IDelay', E110, E111} -> (fun (V72, V73) -> {'Idris.TTImp.TTImp.IDelay', V72, ('un--substNames\x{27}'(V0, V1, V2, V73))} end(E110, E111)); {'Idris.TTImp.TTImp.IForce', E112, E113} -> (fun (V74, V75) -> {'Idris.TTImp.TTImp.IForce', V74, ('un--substNames\x{27}'(V0, V1, V2, V75))} end(E112, E113)); _ -> V3 end end; 0 -> case V3 of {'Idris.TTImp.TTImp.IBindVar', E173, E174} -> (fun (V76, V77) -> ('case--substNames\x{27}-832'(V77, V76, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V80, V81)) end end}, {'Idris.Core.Name.UN', V77}, V1)))))) end(E173, E174)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E116, E117, E118, E119, E120, E121} -> (fun (V82, V83, V84, V85, V86, V87) -> begin (V89 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V88) -> [V88 | V1] end end, V85))), {'Idris.TTImp.TTImp.IPi', V82, V83, V84, V85, ('un--substNames\x{27}'(V0, V1, V2, V86)), ('un--substNames\x{27}'(V0, V89, V2, V87))} end end(E116, E117, E118, E119, E120, E121)); {'Idris.TTImp.TTImp.ILam', E122, E123, E124, E125, E126, E127} -> (fun (V90, V91, V92, V93, V94, V95) -> begin (V97 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V96) -> [V96 | V1] end end, V93))), {'Idris.TTImp.TTImp.ILam', V90, V91, V92, V93, ('un--substNames\x{27}'(V0, V1, V2, V94)), ('un--substNames\x{27}'(V0, V97, V2, V95))} end end(E122, E123, E124, E125, E126, E127)); {'Idris.TTImp.TTImp.ILet', E128, E129, E130, E131, E132, E133} -> (fun (V98, V99, V100, V101, V102, V103) -> begin (V104 = [V100 | V1]), {'Idris.TTImp.TTImp.ILet', V98, V99, V100, ('un--substNames\x{27}'(V0, V1, V2, V101)), ('un--substNames\x{27}'(V0, V1, V2, V102)), ('un--substNames\x{27}'(V0, V104, V2, V103))} end end(E128, E129, E130, E131, E132, E133)); {'Idris.TTImp.TTImp.ICase', E134, E135, E136, E137} -> (fun (V105, V106, V107, V108) -> {'Idris.TTImp.TTImp.ICase', V105, ('un--substNames\x{27}'(V0, V1, V2, V106)), ('un--substNames\x{27}'(V0, V1, V2, V107)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V109) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V109)) end, V108))} end(E134, E135, E136, E137)); {'Idris.TTImp.TTImp.ILocal', E138, E139, E140} -> (fun (V110, V111, V112) -> begin (V113 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V111)), V1))), {'Idris.TTImp.TTImp.ILocal', V110, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V114) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V114)) end, V111)), ('un--substNames\x{27}'(V0, V113, V2, V112))} end end(E138, E139, E140)); {'Idris.TTImp.TTImp.IApp', E141, E142, E143} -> (fun (V115, V116, V117) -> {'Idris.TTImp.TTImp.IApp', V115, ('un--substNames\x{27}'(V0, V1, V2, V116)), ('un--substNames\x{27}'(V0, V1, V2, V117))} end(E141, E142, E143)); {'Idris.TTImp.TTImp.INamedApp', E144, E145, E146, E147} -> (fun (V118, V119, V120, V121) -> {'Idris.TTImp.TTImp.INamedApp', V118, ('un--substNames\x{27}'(V0, V1, V2, V119)), V120, ('un--substNames\x{27}'(V0, V1, V2, V121))} end(E144, E145, E146, E147)); {'Idris.TTImp.TTImp.IAutoApp', E148, E149, E150} -> (fun (V122, V123, V124) -> {'Idris.TTImp.TTImp.IAutoApp', V122, ('un--substNames\x{27}'(V0, V1, V2, V123)), ('un--substNames\x{27}'(V0, V1, V2, V124))} end(E148, E149, E150)); {'Idris.TTImp.TTImp.IWithApp', E151, E152, E153} -> (fun (V125, V126, V127) -> {'Idris.TTImp.TTImp.IWithApp', V125, ('un--substNames\x{27}'(V0, V1, V2, V126)), ('un--substNames\x{27}'(V0, V1, V2, V127))} end(E151, E152, E153)); {'Idris.TTImp.TTImp.IAlternative', E154, E155, E156} -> (fun (V128, V129, V130) -> {'Idris.TTImp.TTImp.IAlternative', V128, V129, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V131) -> ('un--substNames\x{27}'(V0, V1, V2, V131)) end, V130))} end(E154, E155, E156)); {'Idris.TTImp.TTImp.ICoerced', E157, E158} -> (fun (V132, V133) -> {'Idris.TTImp.TTImp.ICoerced', V132, ('un--substNames\x{27}'(V0, V1, V2, V133))} end(E157, E158)); {'Idris.TTImp.TTImp.IAs', E159, E160, E161, E162} -> (fun (V134, V135, V136, V137) -> {'Idris.TTImp.TTImp.IAs', V134, V135, V136, ('un--substNames\x{27}'(V0, V1, V2, V137))} end(E159, E160, E161, E162)); {'Idris.TTImp.TTImp.IMustUnify', E163, E164, E165} -> (fun (V138, V139, V140) -> {'Idris.TTImp.TTImp.IMustUnify', V138, V139, ('un--substNames\x{27}'(V0, V1, V2, V140))} end(E163, E164, E165)); {'Idris.TTImp.TTImp.IDelayed', E166, E167, E168} -> (fun (V141, V142, V143) -> {'Idris.TTImp.TTImp.IDelayed', V141, V142, ('un--substNames\x{27}'(V0, V1, V2, V143))} end(E166, E167, E168)); {'Idris.TTImp.TTImp.IDelay', E169, E170} -> (fun (V144, V145) -> {'Idris.TTImp.TTImp.IDelay', V144, ('un--substNames\x{27}'(V0, V1, V2, V145))} end(E169, E170)); {'Idris.TTImp.TTImp.IForce', E171, E172} -> (fun (V146, V147) -> {'Idris.TTImp.TTImp.IForce', V146, ('un--substNames\x{27}'(V0, V1, V2, V147))} end(E171, E172)); _ -> V3 end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V148, V149, V150, V151, V152, V153) -> begin (V155 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V154) -> [V154 | V1] end end, V151))), {'Idris.TTImp.TTImp.IPi', V148, V149, V150, V151, ('un--substNames\x{27}'(V0, V1, V2, V152)), ('un--substNames\x{27}'(V0, V155, V2, V153))} end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V156, V157, V158, V159, V160, V161) -> begin (V163 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V162) -> [V162 | V1] end end, V159))), {'Idris.TTImp.TTImp.ILam', V156, V157, V158, V159, ('un--substNames\x{27}'(V0, V1, V2, V160)), ('un--substNames\x{27}'(V0, V163, V2, V161))} end end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ILet', E12, E13, E14, E15, E16, E17} -> (fun (V164, V165, V166, V167, V168, V169) -> begin (V170 = [V166 | V1]), {'Idris.TTImp.TTImp.ILet', V164, V165, V166, ('un--substNames\x{27}'(V0, V1, V2, V167)), ('un--substNames\x{27}'(V0, V1, V2, V168)), ('un--substNames\x{27}'(V0, V170, V2, V169))} end end(E12, E13, E14, E15, E16, E17)); {'Idris.TTImp.TTImp.ICase', E18, E19, E20, E21} -> (fun (V171, V172, V173, V174) -> {'Idris.TTImp.TTImp.ICase', V171, ('un--substNames\x{27}'(V0, V1, V2, V172)), ('un--substNames\x{27}'(V0, V1, V2, V173)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V175) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V175)) end, V174))} end(E18, E19, E20, E21)); {'Idris.TTImp.TTImp.ILocal', E22, E23, E24} -> (fun (V176, V177, V178) -> begin (V179 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V177)), V1))), {'Idris.TTImp.TTImp.ILocal', V176, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V180) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V180)) end, V177)), ('un--substNames\x{27}'(V0, V179, V2, V178))} end end(E22, E23, E24)); {'Idris.TTImp.TTImp.IApp', E25, E26, E27} -> (fun (V181, V182, V183) -> {'Idris.TTImp.TTImp.IApp', V181, ('un--substNames\x{27}'(V0, V1, V2, V182)), ('un--substNames\x{27}'(V0, V1, V2, V183))} end(E25, E26, E27)); {'Idris.TTImp.TTImp.INamedApp', E28, E29, E30, E31} -> (fun (V184, V185, V186, V187) -> {'Idris.TTImp.TTImp.INamedApp', V184, ('un--substNames\x{27}'(V0, V1, V2, V185)), V186, ('un--substNames\x{27}'(V0, V1, V2, V187))} end(E28, E29, E30, E31)); {'Idris.TTImp.TTImp.IAutoApp', E32, E33, E34} -> (fun (V188, V189, V190) -> {'Idris.TTImp.TTImp.IAutoApp', V188, ('un--substNames\x{27}'(V0, V1, V2, V189)), ('un--substNames\x{27}'(V0, V1, V2, V190))} end(E32, E33, E34)); {'Idris.TTImp.TTImp.IWithApp', E35, E36, E37} -> (fun (V191, V192, V193) -> {'Idris.TTImp.TTImp.IWithApp', V191, ('un--substNames\x{27}'(V0, V1, V2, V192)), ('un--substNames\x{27}'(V0, V1, V2, V193))} end(E35, E36, E37)); {'Idris.TTImp.TTImp.IAlternative', E38, E39, E40} -> (fun (V194, V195, V196) -> {'Idris.TTImp.TTImp.IAlternative', V194, V195, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V197) -> ('un--substNames\x{27}'(V0, V1, V2, V197)) end, V196))} end(E38, E39, E40)); {'Idris.TTImp.TTImp.ICoerced', E41, E42} -> (fun (V198, V199) -> {'Idris.TTImp.TTImp.ICoerced', V198, ('un--substNames\x{27}'(V0, V1, V2, V199))} end(E41, E42)); {'Idris.TTImp.TTImp.IAs', E43, E44, E45, E46} -> (fun (V200, V201, V202, V203) -> {'Idris.TTImp.TTImp.IAs', V200, V201, V202, ('un--substNames\x{27}'(V0, V1, V2, V203))} end(E43, E44, E45, E46)); {'Idris.TTImp.TTImp.IMustUnify', E47, E48, E49} -> (fun (V204, V205, V206) -> {'Idris.TTImp.TTImp.IMustUnify', V204, V205, ('un--substNames\x{27}'(V0, V1, V2, V206))} end(E47, E48, E49)); {'Idris.TTImp.TTImp.IDelayed', E50, E51, E52} -> (fun (V207, V208, V209) -> {'Idris.TTImp.TTImp.IDelayed', V207, V208, ('un--substNames\x{27}'(V0, V1, V2, V209))} end(E50, E51, E52)); {'Idris.TTImp.TTImp.IDelay', E53, E54} -> (fun (V210, V211) -> {'Idris.TTImp.TTImp.IDelay', V210, ('un--substNames\x{27}'(V0, V1, V2, V211))} end(E53, E54)); {'Idris.TTImp.TTImp.IForce', E55, E56} -> (fun (V212, V213) -> {'Idris.TTImp.TTImp.IForce', V212, ('un--substNames\x{27}'(V0, V1, V2, V213))} end(E55, E56)); _ -> V3 end end.
'un--substNames'(V0, V1, V2) -> ('un--substNames\x{27}'(1, V0, V1, V2)).
'un--substLocTy'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.TTImp.TTImp.MkImpTy', V0, V3, ('un--substLoc'(V0, V4))} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocDecl'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.IClaim', V0, V3, V4, V5, ('un--substLocTy'(V0, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V7, V8, V9) -> {'Idris.TTImp.TTImp.IDef', V0, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> ('un--substLocClause'(V0, V10)) end, V9))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V11, V12, V13) -> {'Idris.TTImp.TTImp.IData', V0, V12, ('un--substLocData'(V0, V13))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V14, V15, V16) -> {'Idris.TTImp.TTImp.INamespace', V0, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V17) -> ('un--substLocDecl'(V0, V17)) end, V16))} end(E11, E12, E13)); _ -> V1 end.
'un--substLocData'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.MkImpData', V0, V3, ('un--substLoc'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('un--substLocTy'(V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V8, V9, V10) -> {'Idris.TTImp.TTImp.MkImpLater', V0, V9, ('un--substLoc'(V0, V10))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocClause'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.TTImp.TTImp.PatClause', V0, ('un--substLoc'(V0, V3)), ('un--substLoc'(V0, V4))} end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9) -> {'Idris.TTImp.TTImp.WithClause', V0, ('un--substLoc'(V0, V6)), ('un--substLoc'(V0, V7)), V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> ('un--substLocClause'(V0, V10)) end, V9))} end(E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ImpossibleClause', E8, E9} -> (fun (V11, V12) -> {'Idris.TTImp.TTImp.ImpossibleClause', V0, ('un--substLoc'(V0, V12))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLoc'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> {'Idris.TTImp.TTImp.IVar', V0, V3} end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> {'Idris.TTImp.TTImp.IPi', V0, V5, V6, V7, ('un--substLoc'(V0, V8)), ('un--substLoc'(V0, V9))} end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.ILam', V0, V11, V12, V13, ('un--substLoc'(V0, V14)), ('un--substLoc'(V0, V15))} end(E8, E9, E10, E11, E12, E13)); {'Idris.TTImp.TTImp.ILet', E14, E15, E16, E17, E18, E19} -> (fun (V16, V17, V18, V19, V20, V21) -> {'Idris.TTImp.TTImp.ILet', V0, V17, V18, ('un--substLoc'(V0, V19)), ('un--substLoc'(V0, V20)), ('un--substLoc'(V0, V21))} end(E14, E15, E16, E17, E18, E19)); {'Idris.TTImp.TTImp.ICase', E20, E21, E22, E23} -> (fun (V22, V23, V24, V25) -> {'Idris.TTImp.TTImp.ICase', V0, ('un--substLoc'(V0, V23)), ('un--substLoc'(V0, V24)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V26) -> ('un--substLocClause'(V0, V26)) end, V25))} end(E20, E21, E22, E23)); {'Idris.TTImp.TTImp.ILocal', E24, E25, E26} -> (fun (V27, V28, V29) -> {'Idris.TTImp.TTImp.ILocal', V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V30) -> ('un--substLocDecl'(V0, V30)) end, V28)), ('un--substLoc'(V0, V29))} end(E24, E25, E26)); {'Idris.TTImp.TTImp.IApp', E27, E28, E29} -> (fun (V31, V32, V33) -> {'Idris.TTImp.TTImp.IApp', V0, ('un--substLoc'(V0, V32)), ('un--substLoc'(V0, V33))} end(E27, E28, E29)); {'Idris.TTImp.TTImp.INamedApp', E30, E31, E32, E33} -> (fun (V34, V35, V36, V37) -> {'Idris.TTImp.TTImp.INamedApp', V0, ('un--substLoc'(V0, V35)), V36, ('un--substLoc'(V0, V37))} end(E30, E31, E32, E33)); {'Idris.TTImp.TTImp.IAutoApp', E34, E35, E36} -> (fun (V38, V39, V40) -> {'Idris.TTImp.TTImp.IAutoApp', V0, ('un--substLoc'(V0, V39)), ('un--substLoc'(V0, V40))} end(E34, E35, E36)); {'Idris.TTImp.TTImp.IWithApp', E37, E38, E39} -> (fun (V41, V42, V43) -> {'Idris.TTImp.TTImp.IWithApp', V0, ('un--substLoc'(V0, V42)), ('un--substLoc'(V0, V43))} end(E37, E38, E39)); {'Idris.TTImp.TTImp.IAlternative', E40, E41, E42} -> (fun (V44, V45, V46) -> {'Idris.TTImp.TTImp.IAlternative', V0, V45, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V47) -> ('un--substLoc'(V0, V47)) end, V46))} end(E40, E41, E42)); {'Idris.TTImp.TTImp.ICoerced', E43, E44} -> (fun (V48, V49) -> {'Idris.TTImp.TTImp.ICoerced', V0, ('un--substLoc'(V0, V49))} end(E43, E44)); {'Idris.TTImp.TTImp.IAs', E45, E46, E47, E48} -> (fun (V50, V51, V52, V53) -> {'Idris.TTImp.TTImp.IAs', V0, V51, V52, ('un--substLoc'(V0, V53))} end(E45, E46, E47, E48)); {'Idris.TTImp.TTImp.IMustUnify', E49, E50, E51} -> (fun (V54, V55, V56) -> {'Idris.TTImp.TTImp.IMustUnify', V0, V55, ('un--substLoc'(V0, V56))} end(E49, E50, E51)); {'Idris.TTImp.TTImp.IDelayed', E52, E53, E54} -> (fun (V57, V58, V59) -> {'Idris.TTImp.TTImp.IDelayed', V0, V58, ('un--substLoc'(V0, V59))} end(E52, E53, E54)); {'Idris.TTImp.TTImp.IDelay', E55, E56} -> (fun (V60, V61) -> {'Idris.TTImp.TTImp.IDelay', V0, ('un--substLoc'(V0, V61))} end(E55, E56)); {'Idris.TTImp.TTImp.IForce', E57, E58} -> (fun (V62, V63) -> {'Idris.TTImp.TTImp.IForce', V0, ('un--substLoc'(V0, V63))} end(E57, E58)); _ -> V1 end.
'un--substBindVars'(V0, V1, V2) -> ('un--substNames\x{27}'(0, V0, V1, V2)).
'un--nameNum'(V0) -> ('case--nameNum-1110'(V0, ('Idris.Idris2.Data.Strings':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))).
'un--getUnique'(V0, V1) -> ('case--getUnique-397'(V1, V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V4, V5)) end end}, V1, V0)))).
'un--findIBindVars'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V5)), ('un--findIBindVars'(V6)))) end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V11)), ('un--findIBindVars'(V12)))) end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IApp', E12, E13, E14} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V14)), ('un--findIBindVars'(V15)))) end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamedApp', E15, E16, E17, E18} -> (fun (V16, V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V17)), ('un--findIBindVars'(V19)))) end(E15, E16, E17, E18)); {'Idris.TTImp.TTImp.IAutoApp', E19, E20, E21} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V21)), ('un--findIBindVars'(V22)))) end(E19, E20, E21)); {'Idris.TTImp.TTImp.IWithApp', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V24)), ('un--findIBindVars'(V25)))) end(E22, E23, E24)); {'Idris.TTImp.TTImp.IBindVar', E25, E26} -> (fun (V26, V27) -> [{'Idris.Core.Name.UN', V27} | []] end(E25, E26)); {'Idris.TTImp.TTImp.IDelayed', E27, E28, E29} -> (fun (V28, V29, V30) -> ('un--findIBindVars'(V30)) end(E27, E28, E29)); {'Idris.TTImp.TTImp.IDelay', E30, E31} -> (fun (V31, V32) -> ('un--findIBindVars'(V32)) end(E30, E31)); {'Idris.TTImp.TTImp.IForce', E32, E33} -> (fun (V33, V34) -> ('un--findIBindVars'(V34)) end(E32, E33)); {'Idris.TTImp.TTImp.IAlternative', E34, E35, E36} -> (fun (V35, V36, V37) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V45, V46, V47)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V48, V49)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V50) -> ('un--findIBindVars'(V50)) end))(V37)) end(E34, E35, E36)); _ -> [] end.
'un--findBindableNames'(V0, V1, V2, V3) -> case V0 of 0 -> case V3 of {'Idris.TTImp.TTImp.IVar', E98, E99} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E149} -> (fun (V6) -> ('case--findBindableNames-421'(V6, V4, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V9, V10)) end end}, {'Idris.Core.Name.UN', V6}, V1)))), fun () -> ('Idris.Idris2.Utils.String':'un--lowerFirst'(V6)) end)))) end(E149)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E100, E101, E102, E103, E104, E105} -> (fun (V11, V12, V13, V14, V15, V16) -> begin (V18 = case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E106} -> (fun (V17) -> [V17 | V1] end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V15)), ('un--findBindableNames'(0, V18, V2, V16)))) end end(E100, E101, E102, E103, E104, E105)); {'Idris.TTImp.TTImp.ILam', E107, E108, E109, E110, E111, E112} -> (fun (V19, V20, V21, V22, V23, V24) -> begin (V26 = case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E113} -> (fun (V25) -> [V25 | V1] end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V23)), ('un--findBindableNames'(0, V26, V2, V24)))) end end(E107, E108, E109, E110, E111, E112)); {'Idris.TTImp.TTImp.IApp', E114, E115, E116} -> (fun (V27, V28, V29) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V28)), ('un--findBindableNames'(0, V1, V2, V29)))) end(E114, E115, E116)); {'Idris.TTImp.TTImp.INamedApp', E117, E118, E119, E120} -> (fun (V30, V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V31)), ('un--findBindableNames'(0, V1, V2, V33)))) end(E117, E118, E119, E120)); {'Idris.TTImp.TTImp.IAutoApp', E121, E122, E123} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V35)), ('un--findBindableNames'(0, V1, V2, V36)))) end(E121, E122, E123)); {'Idris.TTImp.TTImp.IWithApp', E124, E125, E126} -> (fun (V37, V38, V39) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V38)), ('un--findBindableNames'(0, V1, V2, V39)))) end(E124, E125, E126)); {'Idris.TTImp.TTImp.IAs', E127, E128, E129, E130} -> (fun (V40, V41, V42, V43) -> case V42 of {'Idris.Core.Name.UN', E131} -> (fun (V44) -> [{'Idris.Builtin.MkPair', V44, ('un--getUnique'(V2, V44))} | ('un--findBindableNames'(V0, V1, V2, V43))] end(E131)); _ -> ('un--findBindableNames'(V0, V1, V2, V43)) end end(E127, E128, E129, E130)); {'Idris.TTImp.TTImp.IMustUnify', E132, E133, E134} -> (fun (V45, V46, V47) -> ('un--findBindableNames'(V0, V1, V2, V47)) end(E132, E133, E134)); {'Idris.TTImp.TTImp.IDelayed', E135, E136, E137} -> (fun (V48, V49, V50) -> ('un--findBindableNames'(V0, V1, V2, V50)) end(E135, E136, E137)); {'Idris.TTImp.TTImp.IDelay', E138, E139} -> (fun (V51, V52) -> ('un--findBindableNames'(V0, V1, V2, V52)) end(E138, E139)); {'Idris.TTImp.TTImp.IForce', E140, E141} -> (fun (V53, V54) -> ('un--findBindableNames'(V0, V1, V2, V54)) end(E140, E141)); {'Idris.TTImp.TTImp.IQuote', E142, E143} -> (fun (V55, V56) -> ('un--findBindableNames'(V0, V1, V2, V56)) end(E142, E143)); {'Idris.TTImp.TTImp.IUnquote', E144, E145} -> (fun (V57, V58) -> ('un--findBindableNames'(V0, V1, V2, V58)) end(E144, E145)); {'Idris.TTImp.TTImp.IAlternative', E146, E147, E148} -> (fun (V59, V60, V61) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V69, V70, V71)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V72, V73)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V74) -> ('un--findBindableNames'(V0, V1, V2, V74)) end))(V61)) end(E146, E147, E148)); _ -> [] end end end(E98, E99)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E49, E50, E51, E52, E53, E54} -> (fun (V75, V76, V77, V78, V79, V80) -> begin (V82 = case V78 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E55} -> (fun (V81) -> [V81 | V1] end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V79)), ('un--findBindableNames'(0, V82, V2, V80)))) end end(E49, E50, E51, E52, E53, E54)); {'Idris.TTImp.TTImp.ILam', E56, E57, E58, E59, E60, E61} -> (fun (V83, V84, V85, V86, V87, V88) -> begin (V90 = case V86 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E62} -> (fun (V89) -> [V89 | V1] end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V87)), ('un--findBindableNames'(0, V90, V2, V88)))) end end(E56, E57, E58, E59, E60, E61)); {'Idris.TTImp.TTImp.IApp', E63, E64, E65} -> (fun (V91, V92, V93) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V92)), ('un--findBindableNames'(0, V1, V2, V93)))) end(E63, E64, E65)); {'Idris.TTImp.TTImp.INamedApp', E66, E67, E68, E69} -> (fun (V94, V95, V96, V97) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V95)), ('un--findBindableNames'(0, V1, V2, V97)))) end(E66, E67, E68, E69)); {'Idris.TTImp.TTImp.IAutoApp', E70, E71, E72} -> (fun (V98, V99, V100) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V99)), ('un--findBindableNames'(0, V1, V2, V100)))) end(E70, E71, E72)); {'Idris.TTImp.TTImp.IWithApp', E73, E74, E75} -> (fun (V101, V102, V103) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V102)), ('un--findBindableNames'(0, V1, V2, V103)))) end(E73, E74, E75)); {'Idris.TTImp.TTImp.IAs', E76, E77, E78, E79} -> (fun (V104, V105, V106, V107) -> case V106 of {'Idris.Core.Name.UN', E80} -> (fun (V108) -> [{'Idris.Builtin.MkPair', V108, ('un--getUnique'(V2, V108))} | ('un--findBindableNames'(V0, V1, V2, V107))] end(E80)); _ -> ('un--findBindableNames'(V0, V1, V2, V107)) end end(E76, E77, E78, E79)); {'Idris.TTImp.TTImp.IMustUnify', E81, E82, E83} -> (fun (V109, V110, V111) -> ('un--findBindableNames'(V0, V1, V2, V111)) end(E81, E82, E83)); {'Idris.TTImp.TTImp.IDelayed', E84, E85, E86} -> (fun (V112, V113, V114) -> ('un--findBindableNames'(V0, V1, V2, V114)) end(E84, E85, E86)); {'Idris.TTImp.TTImp.IDelay', E87, E88} -> (fun (V115, V116) -> ('un--findBindableNames'(V0, V1, V2, V116)) end(E87, E88)); {'Idris.TTImp.TTImp.IForce', E89, E90} -> (fun (V117, V118) -> ('un--findBindableNames'(V0, V1, V2, V118)) end(E89, E90)); {'Idris.TTImp.TTImp.IQuote', E91, E92} -> (fun (V119, V120) -> ('un--findBindableNames'(V0, V1, V2, V120)) end(E91, E92)); {'Idris.TTImp.TTImp.IUnquote', E93, E94} -> (fun (V121, V122) -> ('un--findBindableNames'(V0, V1, V2, V122)) end(E93, E94)); {'Idris.TTImp.TTImp.IAlternative', E95, E96, E97} -> (fun (V123, V124, V125) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V128, V129, V130)) end end end end end, fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V133, V134, V135)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V136, V137)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V138) -> ('un--findBindableNames'(V0, V1, V2, V138)) end))(V125)) end(E95, E96, E97)); _ -> [] end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V139, V140, V141, V142, V143, V144) -> begin (V146 = case V142 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V145) -> [V145 | V1] end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V143)), ('un--findBindableNames'(0, V146, V2, V144)))) end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E7, E8, E9, E10, E11, E12} -> (fun (V147, V148, V149, V150, V151, V152) -> begin (V154 = case V150 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V153) -> [V153 | V1] end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V151)), ('un--findBindableNames'(0, V154, V2, V152)))) end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.IApp', E14, E15, E16} -> (fun (V155, V156, V157) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V156)), ('un--findBindableNames'(0, V1, V2, V157)))) end(E14, E15, E16)); {'Idris.TTImp.TTImp.INamedApp', E17, E18, E19, E20} -> (fun (V158, V159, V160, V161) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V159)), ('un--findBindableNames'(0, V1, V2, V161)))) end(E17, E18, E19, E20)); {'Idris.TTImp.TTImp.IAutoApp', E21, E22, E23} -> (fun (V162, V163, V164) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V163)), ('un--findBindableNames'(0, V1, V2, V164)))) end(E21, E22, E23)); {'Idris.TTImp.TTImp.IWithApp', E24, E25, E26} -> (fun (V165, V166, V167) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V166)), ('un--findBindableNames'(0, V1, V2, V167)))) end(E24, E25, E26)); {'Idris.TTImp.TTImp.IAs', E27, E28, E29, E30} -> (fun (V168, V169, V170, V171) -> case V170 of {'Idris.Core.Name.UN', E31} -> (fun (V172) -> [{'Idris.Builtin.MkPair', V172, ('un--getUnique'(V2, V172))} | ('un--findBindableNames'(V0, V1, V2, V171))] end(E31)); _ -> ('un--findBindableNames'(V0, V1, V2, V171)) end end(E27, E28, E29, E30)); {'Idris.TTImp.TTImp.IMustUnify', E32, E33, E34} -> (fun (V173, V174, V175) -> ('un--findBindableNames'(V0, V1, V2, V175)) end(E32, E33, E34)); {'Idris.TTImp.TTImp.IDelayed', E35, E36, E37} -> (fun (V176, V177, V178) -> ('un--findBindableNames'(V0, V1, V2, V178)) end(E35, E36, E37)); {'Idris.TTImp.TTImp.IDelay', E38, E39} -> (fun (V179, V180) -> ('un--findBindableNames'(V0, V1, V2, V180)) end(E38, E39)); {'Idris.TTImp.TTImp.IForce', E40, E41} -> (fun (V181, V182) -> ('un--findBindableNames'(V0, V1, V2, V182)) end(E40, E41)); {'Idris.TTImp.TTImp.IQuote', E42, E43} -> (fun (V183, V184) -> ('un--findBindableNames'(V0, V1, V2, V184)) end(E42, E43)); {'Idris.TTImp.TTImp.IUnquote', E44, E45} -> (fun (V185, V186) -> ('un--findBindableNames'(V0, V1, V2, V186)) end(E44, E45)); {'Idris.TTImp.TTImp.IAlternative', E46, E47, E48} -> (fun (V187, V188, V189) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V192, V193, V194)) end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V197, V198, V199)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V200, V201)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V202) -> ('un--findBindableNames'(V0, V1, V2, V202)) end))(V189)) end(E46, E47, E48)); _ -> [] end end.
'un--findAllNames'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> ('case--findAllNames-588'(V3, V2, V0, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V6, V7)) end end}, V3, V0)))))) end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> begin (V15 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V14) -> [V14 | V0] end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V12)), ('un--findAllNames'(V15, V13)))) end end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21) -> begin (V23 = case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E15} -> (fun (V22) -> [V22 | V0] end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V23, V20)), ('un--findAllNames'(V23, V21)))) end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.IApp', E16, E17, E18} -> (fun (V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V25)), ('un--findAllNames'(V0, V26)))) end(E16, E17, E18)); {'Idris.TTImp.TTImp.INamedApp', E19, E20, E21, E22} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V28)), ('un--findAllNames'(V0, V30)))) end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.IAutoApp', E23, E24, E25} -> (fun (V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V32)), ('un--findAllNames'(V0, V33)))) end(E23, E24, E25)); {'Idris.TTImp.TTImp.IWithApp', E26, E27, E28} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V35)), ('un--findAllNames'(V0, V36)))) end(E26, E27, E28)); {'Idris.TTImp.TTImp.IAs', E29, E30, E31, E32} -> (fun (V37, V38, V39, V40) -> [V39 | ('un--findAllNames'(V0, V40))] end(E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IMustUnify', E33, E34, E35} -> (fun (V41, V42, V43) -> ('un--findAllNames'(V0, V43)) end(E33, E34, E35)); {'Idris.TTImp.TTImp.IDelayed', E36, E37, E38} -> (fun (V44, V45, V46) -> ('un--findAllNames'(V0, V46)) end(E36, E37, E38)); {'Idris.TTImp.TTImp.IDelay', E39, E40} -> (fun (V47, V48) -> ('un--findAllNames'(V0, V48)) end(E39, E40)); {'Idris.TTImp.TTImp.IForce', E41, E42} -> (fun (V49, V50) -> ('un--findAllNames'(V0, V50)) end(E41, E42)); {'Idris.TTImp.TTImp.IQuote', E43, E44} -> (fun (V51, V52) -> ('un--findAllNames'(V0, V52)) end(E43, E44)); {'Idris.TTImp.TTImp.IUnquote', E45, E46} -> (fun (V53, V54) -> ('un--findAllNames'(V0, V54)) end(E45, E46)); {'Idris.TTImp.TTImp.IAlternative', E47, E48, E49} -> (fun (V55, V56, V57) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V65, V66, V67)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V68, V69)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V70) -> ('un--findAllNames'(V0, V70)) end))(V57)) end(E47, E48, E49)); _ -> [] end.
