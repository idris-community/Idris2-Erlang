-module('Idris.Idris2.Control.ANSI.SGR').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--2110-3651--in--un--toCode'/2,
  'dn--un--cast_Cast__Style_String'/1,
  'dn--un--cast_Cast__Color_String'/1,
  'dn--un--cast_Cast__Blink_String'/1,
  'un--escapeSGR'/1
]).
'nested--2110-3651--in--un--toCode'(V0, V1) -> case V1 of {'Idris.Control.ANSI.SGR.Reset'} -> (fun () -> <<"0"/utf8>> end()); {'Idris.Control.ANSI.SGR.SetForeground', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"38;5;"/utf8>>, ('dn--un--cast_Cast__Color_String'(V2)))) end(E0)); {'Idris.Control.ANSI.SGR.SetBackground', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"48;5;"/utf8>>, ('dn--un--cast_Cast__Color_String'(V3)))) end(E1)); {'Idris.Control.ANSI.SGR.SetStyle', E2} -> (fun (V4) -> ('dn--un--cast_Cast__Style_String'(V4)) end(E2)); {'Idris.Control.ANSI.SGR.SetBlink', E3} -> (fun (V5) -> ('dn--un--cast_Cast__Blink_String'(V5)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--cast_Cast__Style_String'(V0) -> case V0 of {'Idris.Control.ANSI.SGR.Bold'} -> (fun () -> <<"1"/utf8>> end()); {'Idris.Control.ANSI.SGR.Faint'} -> (fun () -> <<"2"/utf8>> end()); {'Idris.Control.ANSI.SGR.NotBoldOrFaint'} -> (fun () -> <<"22"/utf8>> end()); {'Idris.Control.ANSI.SGR.Italic'} -> (fun () -> <<"3"/utf8>> end()); {'Idris.Control.ANSI.SGR.SingleUnderline'} -> (fun () -> <<"4"/utf8>> end()); {'Idris.Control.ANSI.SGR.DoubleUnderline'} -> (fun () -> <<"21"/utf8>> end()); {'Idris.Control.ANSI.SGR.NoUnderline'} -> (fun () -> <<"24"/utf8>> end()); {'Idris.Control.ANSI.SGR.Striked'} -> (fun () -> <<"9"/utf8>> end()); {'Idris.Control.ANSI.SGR.NotStriked'} -> (fun () -> <<"29"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--cast_Cast__Color_String'(V0) -> case V0 of {'Idris.Control.ANSI.SGR.Black'} -> (fun () -> <<"0"/utf8>> end()); {'Idris.Control.ANSI.SGR.Red'} -> (fun () -> <<"1"/utf8>> end()); {'Idris.Control.ANSI.SGR.Green'} -> (fun () -> <<"2"/utf8>> end()); {'Idris.Control.ANSI.SGR.Yellow'} -> (fun () -> <<"3"/utf8>> end()); {'Idris.Control.ANSI.SGR.Blue'} -> (fun () -> <<"4"/utf8>> end()); {'Idris.Control.ANSI.SGR.Magenta'} -> (fun () -> <<"5"/utf8>> end()); {'Idris.Control.ANSI.SGR.Cyan'} -> (fun () -> <<"6"/utf8>> end()); {'Idris.Control.ANSI.SGR.White'} -> (fun () -> <<"7"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightBlack'} -> (fun () -> <<"8"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightRed'} -> (fun () -> <<"9"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightGreen'} -> (fun () -> <<"10"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightYellow'} -> (fun () -> <<"11"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightBlue'} -> (fun () -> <<"12"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightMagenta'} -> (fun () -> <<"13"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightCyan'} -> (fun () -> <<"14"/utf8>> end()); {'Idris.Control.ANSI.SGR.BrightWhite'} -> (fun () -> <<"15"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--cast_Cast__Blink_String'(V0) -> case V0 of {'Idris.Control.ANSI.SGR.Slow'} -> (fun () -> <<"5"/utf8>> end()); {'Idris.Control.ANSI.SGR.Rapid'} -> (fun () -> <<"6"/utf8>> end()); {'Idris.Control.ANSI.SGR.NoBlink'} -> (fun () -> <<"25"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--escapeSGR'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{1b}["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V13, V14, V15)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V16, V17)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(('Idris.Idris2.Data.List':'un--intersperse'('erased', <<";"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V3, V4)) end end end end, fun (V5) -> ('nested--2110-3651--in--un--toCode'(V0, V5)) end, V0)))))), <<"m"/utf8>>)))).
