-module('Idris.Idris2.TTImp.Elab.Delayed').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--runDelays-5868'/10,
  'case--runDelays-5824'/15,
  'case--runDelays-5772'/16,
  'case--case block in retryDelayed\x{27}-5504'/17,
  'case--case block in case block in retryDelayed\x{27}-5374'/18,
  'case--case block in retryDelayed\x{27}-5336'/16,
  'case--retryDelayed\x{27}-5107'/14,
  'case--contra-4783'/14,
  'case--contra-4696'/14,
  'case--mismatchNF-4513'/14,
  'case--mismatchNF-4426'/14,
  'case--case block in delayElab-4289'/19,
  'case--delayElab-4195'/15,
  'case--case block in case block in delayOnFailure-4008'/22,
  'case--case block in delayOnFailure-3881'/17,
  'case--delayOnFailure-3818'/16,
  'case--deeper-3751'/6,
  'case--deeper-3709'/9,
  'case--mkClosedElab-3609'/7,
  'case--mkClosedElab-3557'/4,
  'nested--10177-3579--in--un--newBinder'/7,
  'nested--10803-4119--in--un--mkExpected'/12,
  'nested--12463-5627--in--un--hasPri'/10,
  'dn--un--show_Show__RetryError'/1,
  'dn--un--showPrec_Show__RetryError'/2,
  'dn--un--__Impl_Show_RetryError'/0,
  'un--runDelays'/9,
  'un--retryDelayed\x{27}'/8,
  'un--retryDelayed'/7,
  'un--recoverable'/2,
  'un--mkClosedElab'/4,
  'un--mismatchNF'/5,
  'un--mismatch'/4,
  'un--delayOnFailure'/13,
  'un--delayElab'/12,
  'un--deeper'/5,
  'un--contra'/5,
  'un--ambiguous'/1
]).
'case--runDelays-5868'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.UnifyState.MkUState', V10, V11, V12, V13, V14, V15, V16, V17, [], V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--runDelays-5824'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V12 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> {'Idris.Core.UnifyState.MkUState', V15, V16, V17, V18, V19, V20, V21, V22, V9, V24} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--runDelays-5772'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> {'Idris.Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V24, V9)), V25} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in retryDelayed\x{27}-5504'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, [], V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in retryDelayed\x{27}-5374'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V13, V18)) end; 1 -> ('un--retryDelayed\x{27}'(V0, V10, V9, V8, V7, V15, [V4 | V6], V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in retryDelayed\x{27}-5336'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V7 of {'Idris.TTImp.Elab.Delayed.RecoverableErrors'} -> (fun () -> fun (V16) -> begin (V17 = (('un--recoverable'(V11, V14))(V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = {'Idris.TTImp.Elab.Delayed.RecoverableErrors'}), (('case--case block in case block in retryDelayed\x{27}-5374'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12, V13, V14, V15, V20, V19, ('Idris.Idris2.Prelude.Basics':'un--not'(V19))))(V16)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.TTImp.Elab.Delayed.AllErrors'} -> (fun () -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V14, V21)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--retryDelayed\x{27}-5107'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> case V14 of {'Idris.Core.Context.Delayed'} -> (fun () -> fun (V15) -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V11, V10, V9, V8, fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V20) -> begin (V37 = begin (V21 = (('Idris.Idris2.Core.Context':'un--getFullName'(V11, {'Idris.Core.Name.Resolved', V2}))(V16))), case V21 of {'Idris.Prelude.Types.Left', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V23) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(case V20 of {'Idris.TTImp.Elab.Check.MkEState', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V33 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": Retrying delayed hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V23)))))) end))(V16)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V37 of {'Idris.Prelude.Types.Left', E18} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V39) -> begin (V41 = begin (V40 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> begin (V55 = begin (V54 = ('erlang':'put'(V9, case V43 of {'Idris.Core.UnifyState.MkUState', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.UnifyState.MkUState', V44, V45, V46, V47, V48, V49, V50, V51, [], V53} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E32} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V57) -> begin (V58 = (V3(V16))), case V58 of {'Idris.Prelude.Types.Left', E34} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V60) -> begin (V62 = begin (V61 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E36} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V64) -> begin (V75 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', case V64 of {'Idris.Core.UnifyState.MkUState', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V73 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V5))), begin (V77 = ('Idris.Idris2.Core.Context':'un--updateDef'(V11, {'Idris.Core.Name.Resolved', V2}, fun (V76) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.PMDef', {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V60}, {'Idris.Core.CaseTree.STerm', 0, V60}, []}} end, V16))), case V77 of {'Idris.Prelude.Types.Left', E48} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V11, <<"elab.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Resolved delayed hole "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V2)))) end, V60, V16))), case V80 of {'Idris.Prelude.Types.Left', E50} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V82) -> begin (V83 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V11, <<"elab.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Resolved delayed hole NF "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V2)))) end, {'Idris.Core.Env.Nil'}, V60))(V16))), case V83 of {'Idris.Prelude.Types.Left', E52} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V85) -> begin (V86 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V9, V2, V16))), case V86 of {'Idris.Prelude.Types.Left', E54} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V88) -> (('un--retryDelayed\x{27}'(V0, V11, V10, V9, V8, V7, V6, V75))(V16)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V89) -> fun (V90) -> begin (V94 = begin (V91 = (('Idris.Idris2.Core.Context':'un--getFullName'(V11, {'Idris.Core.Name.Resolved', V2}))(V90))), case V91 of {'Idris.Prelude.Types.Left', E56} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V93) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__RetryError'(V7)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":Error in "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V93)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show__Error'(V89)))))))))) end))(V90)) end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V94 of {'Idris.Prelude.Types.Left', E58} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V96) -> begin (V97 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Delayed'}}), case V7 of {'Idris.TTImp.Elab.Delayed.RecoverableErrors'} -> (fun () -> begin (V98 = (('un--recoverable'(V11, V89))(V90))), case V98 of {'Idris.Prelude.Types.Left', E60} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V100) -> begin (V101 = {'Idris.TTImp.Elab.Delayed.RecoverableErrors'}), (('case--case block in case block in retryDelayed\x{27}-5374'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12, V97, V89, V96, V101, V100, ('Idris.Idris2.Prelude.Basics':'un--not'(V100))))(V90)) end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.TTImp.Elab.Delayed.AllErrors'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V89, V90)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V15)) end end()); _ -> ('un--retryDelayed\x{27}'(V0, V11, V10, V9, V8, V7, V6, V5)) end end(E0)); _ -> ('un--retryDelayed\x{27}'(V0, V11, V10, V9, V8, V7, V6, V5)) end.
'case--contra-4783'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'un--zip'('erased', 'erased', V7, V9)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--contra-4696'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'un--zip'('erased', 'erased', V3, V7)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mismatchNF-4513'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'un--zip'('erased', 'erased', V7, V9)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mismatchNF-4426'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'un--zip'('erased', 'erased', V5, V8)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in delayElab-4289'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.UnifyState.MkUState', V19, V20, V21, V22, V23, V24, V25, V26, [{'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V14, ('un--mkClosedElab'(V0, V6, V4, V1))}} | V27], V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--delayElab-4195'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V10, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Postponing elaborator "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V12)), <<" for"/utf8>>)))) end, V4, V13, V17))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V36 = begin (V35 = ('erlang':'put'(V8, case V24 of {'Idris.Core.UnifyState.MkUState', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.UnifyState.MkUState', V25, V26, V27, V28, V29, V30, V31, V32, [{'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V15, ('un--mkClosedElab'(V0, V6, V4, V1))}} | V33], V34} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E16} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V16, V13}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in delayOnFailure-4008'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.UnifyState.MkUState', V22, V23, V24, V25, V26, V27, V28, V29, [{'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V16, ('un--mkClosedElab'(V0, V7, V5, fun (V32) -> ('un--deeper'('erased', 'erased', V8, (V1(0)), V32)) end))}} | V30], V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in delayOnFailure-3881'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V11, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Postponing elaborator "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V15)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V7)), <<" for"/utf8>>)))))))) end, V5, V4, V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Due to error "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show__Error'(V13)))) end))(V19))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V42 = begin (V41 = ('erlang':'put'(V9, case V29 of {'Idris.Core.UnifyState.MkUState', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.UnifyState.MkUState', V30, V31, V32, V33, V34, V35, V36, V37, [{'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V17, ('un--mkClosedElab'(V0, V7, V5, fun (V40) -> ('un--deeper'('erased', 'erased', V8, (V1(0)), V40)) end))}} | V38], V39} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E18} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V4}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--delayOnFailure-3818'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> fun (V16) -> begin (V17 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V11, V9, <<"delayed"/utf8>>, V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V27 = begin (V20 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V4))(V16))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> (('Idris.Idris2.Core.UnifyState':'un--newDelayed'(V0, V9, V11, V7, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V5, V19, V22))(V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V30, V31) -> begin (V32 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V11, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Postponing elaborator "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V19)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V7)), <<" for"/utf8>>)))))))) end, V5, V4, V16))), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> begin (V35 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Due to error "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show__Error'(V13)))) end))(V16))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E12} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V41) -> begin (V54 = begin (V53 = ('erlang':'put'(V9, case V41 of {'Idris.Core.UnifyState.MkUState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.UnifyState.MkUState', V42, V43, V44, V45, V46, V47, V48, V49, [{'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V30, ('un--mkClosedElab'(V0, V7, V5, fun (V52) -> ('un--deeper'('erased', 'erased', V8, (V1(0)), V52)) end))}} | V50], V51} end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E24} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V31, V4}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V13, V57)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--deeper-3751'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.TTImp.Elab.Check.MkEState', V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V5)), V16, V17, V18} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--deeper-3709'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.TTImp.Elab.Check.MkEState', V9, V10, V11, V12, V13, V14, V15, V16, V17, V5, V19, V20, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkClosedElab-3609'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V9 = ('nested--10177-3579--in--un--newBinder'(V0, V1, V2, V3, V4, V5, V3))), fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V5, V0, V9, V7}, ('Idris.Idris2.Core.Normalise':'un--gErased'('erased', V5))}} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkClosedElab-3557'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V4} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10177-3579--in--un--newBinder'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> V6 end(E0, E1, E2, E3)); _ -> {'Idris.Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'('erased', V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V6)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V6))} end.
'nested--10803-4119--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', V12} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V10, V8, <<"delayTy"/utf8>>, V14))), case V15 of {'Idris.Prelude.Types.Left', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V17) -> begin (V22 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V10, V8, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V4, V17, {'Idris.Core.TT.TType', V6}, V14))), case V22 of {'Idris.Prelude.Types.Left', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V24))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12463-5627--in--un--hasPri'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Integer'(V10, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__RetryError'(V0) -> case V0 of {'Idris.TTImp.Elab.Delayed.RecoverableErrors'} -> (fun () -> <<"RecoverableErrors"/utf8>> end()); {'Idris.TTImp.Elab.Delayed.AllErrors'} -> (fun () -> <<"AllErrors"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__RetryError'(V0, V1) -> ('dn--un--show_Show__RetryError'(V1)).
'dn--un--__Impl_Show_RetryError'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__RetryError'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__RetryError'(V1, V2)) end end}.
'un--runDelays'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V23 = case V12 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V21 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V35 = begin (V34 = ('erlang':'put'(V4, case V12 of {'Idris.Core.UnifyState.MkUState', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.UnifyState.MkUState', V24, V25, V26, V27, V28, V29, V30, V31, [], V33} end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E22} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V37) -> begin (V38 = (V7(V8))), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V44) -> begin (V45 = (('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab.delay"/utf8>>, (1 + (1 + 0)), fun () -> <<"Rerunning delayed in elaborator"/utf8>> end))(V8))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> begin (V79 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V1, V2, V3, V4, V5, fun (V48) -> begin (V60 = (('un--retryDelayed\x{27}'(V1, V2, V3, V4, V5, {'Idris.TTImp.Elab.Delayed.AllErrors'}, [], ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V49) -> ('nested--12463-5627--in--un--hasPri'('erased', V1, V7, V6, V5, V4, V3, V2, 'erased', V49)) end, case V44 of {'Idris.Core.UnifyState.MkUState', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V58 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V48))), case V60 of {'Idris.Prelude.Types.Left', E40} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V63) -> fun (V64) -> begin (V76 = begin (V75 = ('erlang':'put'(V4, case V44 of {'Idris.Core.UnifyState.MkUState', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> {'Idris.Core.UnifyState.MkUState', V65, V66, V67, V68, V69, V70, V71, V72, V23, V74} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E52} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V63, V64)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V8))), case V79 of {'Idris.Prelude.Types.Left', E54} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V81) -> begin (V83 = begin (V82 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E56} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V85) -> begin (V97 = begin (V96 = ('erlang':'put'(V4, case V85 of {'Idris.Core.UnifyState.MkUState', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> {'Idris.Core.UnifyState.MkUState', V86, V87, V88, V89, V90, V91, V92, V93, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V94, V23)), V95} end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E68} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V99) -> {'Idris.Prelude.Types.Right', V40} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V6))} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V13}, case V19 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V20 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> begin (V49 = {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V13, V14}}), case V48 of {'Idris.Prelude.Types.Just', E36} -> (fun (V50) -> case V50 of {'Idris.Core.Context.Delayed'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V1, V2, V3, V4, fun (V51) -> begin (V53 = begin (V52 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E37} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V55) -> begin (V72 = begin (V56 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V13}))(V51))), case V56 of {'Idris.Prelude.Types.Left', E39} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V58) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(case V55 of {'Idris.TTImp.Elab.Check.MkEState', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V68 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": Retrying delayed hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V58)))))) end))(V51)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E54} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E56} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V78) -> begin (V90 = begin (V89 = ('erlang':'put'(V3, case V78 of {'Idris.Core.UnifyState.MkUState', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Core.UnifyState.MkUState', V79, V80, V81, V82, V83, V84, V85, V86, [], V88} end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E68} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V92) -> begin (V93 = (V14(V51))), case V93 of {'Idris.Prelude.Types.Left', E70} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V95) -> begin (V97 = begin (V96 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E72} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V99) -> begin (V110 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', case V99 of {'Idris.Core.UnifyState.MkUState', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> V108 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V10))), begin (V112 = ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V13}, fun (V111) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.PMDef', {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V95}, {'Idris.Core.CaseTree.STerm', 0, V95}, []}} end, V51))), case V112 of {'Idris.Prelude.Types.Left', E84} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V114) -> begin (V115 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"elab.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Resolved delayed hole "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V13)))) end, V95, V51))), case V115 of {'Idris.Prelude.Types.Left', E86} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V117) -> begin (V118 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"elab.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Resolved delayed hole NF "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V13)))) end, {'Idris.Core.Env.Nil'}, V95))(V51))), case V118 of {'Idris.Prelude.Types.Left', E88} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V120) -> begin (V121 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V3, V13, V51))), case V121 of {'Idris.Prelude.Types.Left', E90} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V123) -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V110))(V51)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V124) -> fun (V125) -> begin (V129 = begin (V126 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V13}))(V125))), case V126 of {'Idris.Prelude.Types.Left', E92} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V128) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__RetryError'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":Error in "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V128)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show__Error'(V124)))))))))) end))(V125)) end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V129 of {'Idris.Prelude.Types.Left', E94} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V131) -> begin (V132 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Delayed'}}), case V5 of {'Idris.TTImp.Elab.Delayed.RecoverableErrors'} -> (fun () -> begin (V133 = (('un--recoverable'(V1, V124))(V125))), case V133 of {'Idris.Prelude.Types.Left', E96} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V135) -> begin (V136 = {'Idris.TTImp.Elab.Delayed.RecoverableErrors'}), (('case--case block in case block in retryDelayed\x{27}-5374'(V0, V11, V13, V14, V49, V10, V6, V4, V3, V2, V1, V19, V132, V124, V131, V136, V135, ('Idris.Idris2.Prelude.Basics':'un--not'(V135))))(V125)) end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.TTImp.Elab.Delayed.AllErrors'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V124, V125)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V15)) end()); _ -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V10))(V15)) end end(E36)); _ -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V10))(V15)) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--retryDelayed'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, {'Idris.TTImp.Elab.Delayed.RecoverableErrors'}, [], V5))(V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, {'Idris.TTImp.Elab.Delayed.AllErrors'}, [], V13))(V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--recoverable'(V0, V1) -> case V1 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V2, V11, V4, V5))(V7))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V2, V11, V4, V6))(V7))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> begin (V18 = (('un--contra'(V0, V2, V11, V14, V17))(V7))), case V18 of {'Idris.Prelude.Types.Left', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--not'(V20))} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Core.CantSolveEq', E13, E14, E15, E16, E17} -> (fun (V21, V22, V23, V24, V25) -> fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V21, V30, V23, V24))(V26))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> begin (V34 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V21, V30, V23, V25))(V26))), case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> begin (V37 = (('un--contra'(V0, V21, V30, V33, V36))(V26))), case V37 of {'Idris.Prelude.Types.Left', E24} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V39) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--not'(V39))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14, E15, E16, E17)); {'Idris.Core.Core.UndefinedName', E26, E27} -> (fun (V40, V41) -> fun (V42) -> {'Idris.Prelude.Types.Right', 1} end end(E26, E27)); {'Idris.Core.Core.LinearMisuse', E28, E29, E30, E31} -> (fun (V43, V44, V45, V46) -> fun (V47) -> {'Idris.Prelude.Types.Right', 1} end end(E28, E29, E30, E31)); {'Idris.Core.Core.InType', E32, E33, E34} -> (fun (V48, V49, V50) -> ('un--recoverable'(V0, V50)) end(E32, E33, E34)); {'Idris.Core.Core.InCon', E35, E36, E37} -> (fun (V51, V52, V53) -> ('un--recoverable'(V0, V53)) end(E35, E36, E37)); {'Idris.Core.Core.InLHS', E38, E39, E40} -> (fun (V54, V55, V56) -> ('un--recoverable'(V0, V56)) end(E38, E39, E40)); {'Idris.Core.Core.InRHS', E41, E42, E43} -> (fun (V57, V58, V59) -> ('un--recoverable'(V0, V59)) end(E41, E42, E43)); {'Idris.Core.Core.WhenUnifying', E44, E45, E46, E47, E48, E49} -> (fun (V60, V61, V62, V63, V64, V65) -> ('un--recoverable'(V0, V65)) end(E44, E45, E46, E47, E48, E49)); _ -> fun (V66) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--mkClosedElab'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', V8} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E4 | E5] -> (fun (V10, V11) -> case V2 of {'Idris.Core.Env.::', E6, E7} -> (fun (V12, V13) -> ('un--mkClosedElab'(V11, V1, V13, fun (V14) -> begin (V15 = (V3(V14))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V18, V19) -> begin (V20 = ('nested--10177-3579--in--un--newBinder'(V10, V11, V13, V12, V3, V1, V12))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V1, V10, V20, V18}, ('Idris.Idris2.Core.Normalise':'un--gErased'('erased', V1))}} end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14) -> ('case--mismatchNF-4426'(V1, V10, V13, V5, V8, V9, V7, V6, V14, V12, V11, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V6, V11)))) end(E5, E6, E7, E8, E9)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Core.Value.NDCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> ('case--mismatchNF-4513'(V1, V21, V22, V24, V16, V17, V19, V20, V18, V25, V23, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V18, V23)))) end(E15, E16, E17, E18, E19)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V27, V28) -> case V4 of {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Constant'(V28, V30))} end end(E22, E23)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end end(E20, E21)); {'Idris.Core.Value.NDelayed', E24, E25, E26} -> (fun (V33, V34, V35) -> case V4 of {'Idris.Core.Value.NDelayed', E27, E28, E29} -> (fun (V36, V37, V38) -> ('un--mismatchNF'(V0, V1, V2, V35, V38)) end(E27, E28, E29)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', 1} end end end(E24, E25, E26)); {'Idris.Core.Value.NDelay', E30, E31, E32, E33} -> (fun (V40, V41, V42, V43) -> case V4 of {'Idris.Core.Value.NDelay', E34, E35, E36, E37} -> (fun (V44, V45, V46, V47) -> fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V43))(V48))), case V49 of {'Idris.Prelude.Types.Left', E38} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V47))(V48))), case V52 of {'Idris.Prelude.Types.Left', E40} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V54) -> (('un--mismatchNF'(V0, V1, V2, V51, V54))(V48)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34, E35, E36, E37)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', 1} end end end(E30, E31, E32, E33)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--mismatch'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V5))(V6))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('un--mismatchNF'(V0, V1, V2, V9, V12))(V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--delayOnFailure'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V1, V2, V3, V4, (V11(1)), fun (V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> (('case--delayOnFailure-3818'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V16, V17, V22, (V9(V17))))(V18)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--delayElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayed"/utf8>>, V11))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = (('nested--10803-4119--in--un--mkExpected'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V8))(V11))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V29 = begin (V22 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V21))(V11))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> (('Idris.Idris2.Core.UnifyState':'un--newDelayed'(V0, V3, V1, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V7, V18, V24))(V11)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V32, V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Postponing elaborator "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V18)), <<" for"/utf8>>)))) end, V7, V21, V11))), case V34 of {'Idris.Prelude.Types.Left', E12} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V36) -> begin (V38 = begin (V37 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E14} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V40) -> begin (V52 = begin (V51 = ('erlang':'put'(V3, case V40 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.UnifyState.MkUState', V41, V42, V43, V44, V45, V46, V47, V48, [{'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V32, ('un--mkClosedElab'(V0, V5, V7, V10))}} | V49], V50} end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E26} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V33, V21}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--deeper'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V22 = case V8 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V18 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V37 = begin (V36 = ('erlang':'put'(V2, case V8 of {'Idris.TTImp.Elab.Check.MkEState', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.TTImp.Elab.Check.MkEState', V23, V24, V25, V26, V27, V28, V29, V30, V31, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V22)), V33, V34, V35} end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E28} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V39) -> begin (V40 = (V3(V4))), case V40 of {'Idris.Prelude.Types.Left', E30} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E32} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V46) -> begin (V61 = begin (V60 = ('erlang':'put'(V2, case V46 of {'Idris.TTImp.Elab.Check.MkEState', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> {'Idris.TTImp.Elab.Check.MkEState', V47, V48, V49, V50, V51, V52, V53, V54, V55, V22, V57, V58, V59} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E47} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V63) -> {'Idris.Prelude.Types.Right', V42} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--contra'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14) -> ('case--contra-4696'(V1, V10, V5, V9, V8, V7, V6, V14, V13, V12, V11, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V6, V11)))) end(E5, E6, E7, E8, E9)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Core.Value.NDCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> ('case--contra-4783'(V1, V21, V22, V24, V16, V17, V19, V20, V18, V25, V23, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V18, V23)))) end(E15, E16, E17, E18, E19)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V26, V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', 0} end end(E20, E21)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', 1} end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V30, V31) -> case V4 of {'Idris.Core.Value.NPrimVal', E24, E25} -> (fun (V32, V33) -> fun (V34) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Constant'(V31, V33))} end end(E24, E25)); {'Idris.Core.Value.NDCon', E26, E27, E28, E29, E30} -> (fun (V35, V36, V37, V38, V39) -> fun (V40) -> {'Idris.Prelude.Types.Right', 0} end end(E26, E27, E28, E29, E30)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', 1} end end end(E22, E23)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--ambiguous'(V0) -> case V0 of {'Idris.Core.Core.AmbiguousElab', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> 0 end(E0, E1, E2, E3)); {'Idris.Core.Core.AmbiguousName', E4, E5} -> (fun (V5, V6) -> 0 end(E4, E5)); {'Idris.Core.Core.AmbiguityTooDeep', E6, E7, E8} -> (fun (V7, V8, V9) -> 0 end(E6, E7, E8)); {'Idris.Core.Core.InType', E9, E10, E11} -> (fun (V10, V11, V12) -> ('un--ambiguous'(V12)) end(E9, E10, E11)); {'Idris.Core.Core.InCon', E12, E13, E14} -> (fun (V13, V14, V15) -> ('un--ambiguous'(V15)) end(E12, E13, E14)); {'Idris.Core.Core.InLHS', E15, E16, E17} -> (fun (V16, V17, V18) -> ('un--ambiguous'(V18)) end(E15, E16, E17)); {'Idris.Core.Core.InRHS', E18, E19, E20} -> (fun (V19, V20, V21) -> ('un--ambiguous'(V21)) end(E18, E19, E20)); {'Idris.Core.Core.WhenUnifying', E21, E22, E23, E24, E25, E26} -> (fun (V22, V23, V24, V25, V26, V27) -> ('un--ambiguous'(V27)) end(E21, E22, E23, E24, E25, E26)); _ -> 1 end.
