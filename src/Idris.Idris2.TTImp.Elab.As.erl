-module('Idris.Idris2.TTImp.Elab.As').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in checkAs-11390'/30,
  'case--case block in case block in case block in case block in checkAs-11298'/32,
  'case--case block in case block in case block in checkAs-11131'/24,
  'case--case block in case block in checkAs-11074'/21,
  'case--case block in checkAs-11018'/21,
  'case--checkAs-10953'/15,
  'case--checkAs,rigAs\x{27}-10888'/15,
  'case--checkAs,rigAs\x{27}-10817'/15,
  'case--checkAs,rigPat\x{27}-10745'/15,
  'case--checkAs,rigPat\x{27}-10674'/15,
  'nested--10519-10659--in--un--rigPat\x{27}'/15,
  'nested--10519-10660--in--un--rigPat'/14,
  'nested--10519-10661--in--un--rigAs\x{27}'/15,
  'nested--10519-10662--in--un--rigAs'/14,
  'un--checkAs'/14
]).
'case--case block in case block in case block in case block in checkAs-11390'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.TTImp.Elab.Check.MkEState', V30, V31, V32, V33, begin (V43 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V43, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V23, V24, V20}} | V34] end, begin (V44 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V44, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V23, V25, V20}} | V35] end, V36, V37, V38, V39, V40, V41, V42} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in checkAs-11298'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V31 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V32, V33) -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V5, V4, V32, V20}, V21}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkAs-11131'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V26, V27) -> fun (V28) -> begin (V119 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V30, V31)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V34, V35)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V38, V39)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V41) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V42, V43)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V44) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V45, V46)) end end}}, V40)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V50, V51)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V53, V54)) end end}}, V47, V48)) end end}}, V36)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V58, V59)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V61) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V62, V63)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V65, V66)) end end}}, V60)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V70, V71)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V72)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V73, V74)) end end}}, V67, V68)) end end}}, V55, V56)) end end}}, V32)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V78, V79)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V82, V83)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V84) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V85) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V86, V87)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V89, V90)) end end}}, V84)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V94, V95)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V96) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V97, V98)) end end}}, V91, V92)) end end}}, V80)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V101) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V102, V103)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V106, V107)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V109, V110)) end end}}, V104)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V114, V115)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V116) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V117, V118)) end end}}, V111, V112)) end end}}, V99, V100)) end end}}, V75, V76)) end end}}, {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', ('nested--10519-10662--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Builtin.MkPair', V24, {'Idris.Builtin.MkPair', V26, V27}}}})))) end))(V28))), case V119 of {'Idris.Prelude.Types.Left', E4} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V121) -> begin (V123 = begin (V122 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V122} end), case V123 of {'Idris.Prelude.Types.Left', E6} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V125) -> begin (V127 = begin (V126 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E8} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V129) -> begin (V146 = begin (V145 = ('erlang':'put'(V10, case V129 of {'Idris.TTImp.Elab.Check.MkEState', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142) -> {'Idris.TTImp.Elab.Check.MkEState', V130, V131, V132, V133, begin (V143 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V143, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V24, V26, V20}} | V134] end, begin (V144 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V144, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V24, V27, V20}} | V135] end, V136, V137, V138, V139, V140, V141, V142} end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V145} end), case V146 of {'Idris.Prelude.Types.Left', E23} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V148) -> begin (V149 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V13, V11, V10, V9, V8, V6, V5, V24, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V6, V26)), {'Idris.Prelude.Types.Just', V21}))(V28))), case V149 of {'Idris.Prelude.Types.Left', E25} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V151) -> case V151 of {'Idris.Builtin.MkPair', E27, E28} -> (fun (V152, V153) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V5, V4, V152, V20}, V21}} end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkAs-11074'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V30 = (('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--mkPatternHole'(V0, V10, V13, V11, V5, V9, V17, V6, case V8 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V24, V25, V26, V27, V28, V29) -> V25 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V23))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V33, V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> begin (V127 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V38, V39)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V42, V43)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V45) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V46, V47)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V50, V51)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V53, V54)) end end}}, V48)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V58, V59)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V60) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V61, V62)) end end}}, V55, V56)) end end}}, V44)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V66, V67)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V70, V71)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V72)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V73, V74)) end end}}, V68)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V78, V79)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V81, V82)) end end}}, V75, V76)) end end}}, V63, V64)) end end}}, V40)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V86, V87)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V89) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V89)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V90, V91)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V94, V95)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V96) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V97, V98)) end end}}, V92)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V101) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V102, V103)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V105, V106)) end end}}, V99, V100)) end end}}, V88)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V110, V111)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V114, V115)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V116) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V117, V118)) end end}}, V112)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V122, V123)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V124) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V124)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V125, V126)) end end}}, V119, V120)) end end}}, V107, V108)) end end}}, V83, V84)) end end}}, {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', ('nested--10519-10662--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Builtin.MkPair', V33, {'Idris.Builtin.MkPair', V35, V36}}}})))) end))(V23))), case V127 of {'Idris.Prelude.Types.Left', E14} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V129) -> begin (V131 = begin (V130 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V130} end), case V131 of {'Idris.Prelude.Types.Left', E16} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V133) -> begin (V135 = begin (V134 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E18} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V137) -> begin (V154 = begin (V153 = ('erlang':'put'(V10, case V137 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150) -> {'Idris.TTImp.Elab.Check.MkEState', V138, V139, V140, V141, begin (V151 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V151, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V33, V35, V21}} | V142] end, begin (V152 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V152, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V33, V36, V21}} | V143] end, V144, V145, V146, V147, V148, V149, V150} end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V153} end), case V154 of {'Idris.Prelude.Types.Left', E33} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V156) -> begin (V157 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V13, V11, V10, V9, V8, V6, V5, V33, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V6, V35)), {'Idris.Prelude.Types.Just', V22}))(V23))), case V157 of {'Idris.Prelude.Types.Left', E35} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V159) -> case V159 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V160, V161) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V5, V4, V160, V21}, V22}} end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAs-11018'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> begin (V22 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V13, V12, V11, V10, ('nested--10519-10660--in--un--rigPat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), V8, V7, V6, V2, V1))(V21))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V25, V26) -> begin (V33 = (('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--mkPatternHole'(V0, V10, V13, V11, V5, V9, V17, V6, case V8 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V27, V28, V29, V30, V31, V32) -> V28 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V21))), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V36, V37) -> case V37 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V38, V39) -> begin (V130 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V41, V42)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V45, V46)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V49, V50)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V53, V54)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V55) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V56, V57)) end end}}, V51)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V60) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V61, V62)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V64, V65)) end end}}, V58, V59)) end end}}, V47)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V69, V70)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V72)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V73, V74)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V76, V77)) end end}}, V71)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V81, V82)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V84, V85)) end end}}, V78, V79)) end end}}, V66, V67)) end end}}, V43)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V89, V90)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V93, V94)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V96) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V97, V98)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V100, V101)) end end}}, V95)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V105, V106)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V108, V109)) end end}}, V102, V103)) end end}}, V91)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V113, V114)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V116) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V117, V118)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V120, V121)) end end}}, V115)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V124) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V124)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V125, V126)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V127) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V128, V129)) end end}}, V122, V123)) end end}}, V110, V111)) end end}}, V86, V87)) end end}}, {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', ('nested--10519-10662--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Builtin.MkPair', V36, {'Idris.Builtin.MkPair', V38, V39}}}})))) end))(V21))), case V130 of {'Idris.Prelude.Types.Left', E16} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V132) -> begin (V134 = begin (V133 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V133} end), case V134 of {'Idris.Prelude.Types.Left', E18} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V136) -> begin (V138 = begin (V137 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E20} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V140) -> begin (V157 = begin (V156 = ('erlang':'put'(V10, case V140 of {'Idris.TTImp.Elab.Check.MkEState', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> {'Idris.TTImp.Elab.Check.MkEState', V141, V142, V143, V144, begin (V154 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V154, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V36, V38, V25}} | V145] end, begin (V155 = V0), [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--10519-10662--in--un--rigAs'(V155, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.Core.TT.Explicit'}, V36, V39, V25}} | V146] end, V147, V148, V149, V150, V151, V152, V153} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V156} end), case V157 of {'Idris.Prelude.Types.Left', E35} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V159) -> begin (V160 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V13, V11, V10, V9, V8, V6, V5, V36, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V6, V38)), {'Idris.Prelude.Types.Just', V26}))(V21))), case V160 of {'Idris.Prelude.Types.Left', E37} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V162) -> case V162 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V163, V164) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V5, V4, V163, V25}, V26}} end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E41} -> (fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NonLinearPattern', V5, V3}, V166)) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs-10953'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.Elab.Check.InLHS', E2} -> (fun (V15) -> fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> begin (V34 = {'Idris.Core.Name.PV', V3, case V20 of {'Idris.TTImp.Elab.Check.MkEState', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V22 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V35 = (('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'('erased', V10, V14, V3))(V16))), case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'('erased', V10, V34, V16))), case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> begin (V41 = {'Idris.TTImp.Elab.Check.InLHS', V15}), (('case--case block in checkAs-11018'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V41, V20, V34, V37, V40, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V44, V45)) end end}, V34, case V20 of {'Idris.TTImp.Elab.Check.MkEState', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V50 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V16)) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> fun (V59) -> begin (V60 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"elab.as"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Bad @-pattern "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V2)))) end))(V59))), case V60 of {'Idris.Prelude.Types.Left', E0} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V5, <<"@-patterns only allowed in pattern clauses"/utf8>>}, V59)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkAs,rigAs\x{27}-10888'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs,rigAs\x{27}-10817'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs,rigPat\x{27}-10745'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs,rigPat\x{27}-10674'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10519-10659--in--un--rigPat\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.TT.UseLeft'} -> (fun () -> ('case--checkAs,rigPat\x{27}-10674'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V21, V22)) end end}}, V9)))) end()); {'Idris.Core.TT.UseRight'} -> (fun () -> ('case--checkAs,rigPat\x{27}-10745'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V29, V30)) end end}}, V9)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10519-10660--in--un--rigPat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('nested--10519-10659--in--un--rigPat\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V4)).
'nested--10519-10661--in--un--rigAs\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.TT.UseLeft'} -> (fun () -> ('case--checkAs,rigAs\x{27}-10817'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V21, V22)) end end}}, V9)))) end()); {'Idris.Core.TT.UseRight'} -> (fun () -> ('case--checkAs,rigAs\x{27}-10888'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V29, V30)) end end}}, V9)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10519-10662--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('nested--10519-10661--in--un--rigAs\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V4)).
'un--checkAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V20 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V14, V15, V16, V17, V18, V19) -> V14 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.TTImp.Elab.Check.InLHS', E8} -> (fun (V21) -> fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V26) -> begin (V40 = {'Idris.Core.Name.PV', V11, case V26 of {'Idris.TTImp.Elab.Check.MkEState', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V28 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V41 = (('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'('erased', V4, V20, V11))(V22))), case V41 of {'Idris.Prelude.Types.Left', E24} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'('erased', V4, V40, V22))), case V44 of {'Idris.Prelude.Types.Left', E26} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V46) -> begin (V47 = {'Idris.TTImp.Elab.Check.InLHS', V21}), (('case--case block in checkAs-11018'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V21, V47, V26, V40, V43, V46, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V50, V51)) end end}, V40, case V26 of {'Idris.TTImp.Elab.Check.MkEState', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V56 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V22)) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> fun (V65) -> begin (V66 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.as"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Bad @-pattern "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V12)))) end))(V65))), case V66 of {'Idris.Prelude.Types.Left', E6} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V68) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V9, <<"@-patterns only allowed in pattern clauses"/utf8>>}, V65)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
