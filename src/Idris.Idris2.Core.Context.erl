-module('Idris.Idris2.Core.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--recordWarning-21804'/3,
  'case--setSession-21753'/3,
  'case--setDebugElabCheck-21681'/3,
  'case--setLogTimings-21606'/3,
  'case--withLogLevel-21525'/6,
  'case--withLogLevel-21452'/9,
  'case--addLogLevel-21343'/3,
  'case--isEqualTy-21167'/4,
  'case--isPairType-21050'/4,
  'case--addNameDirective-21023'/6,
  'case--setFromChar-20965'/3,
  'case--setFromString-20914'/3,
  'case--setFromInteger-20863'/3,
  'case--setRewrite-20804'/7,
  'case--setPair-20731'/9,
  'case--setAutoImplicitLimit-20590'/3,
  'case--setAmbigLimit-20522'/3,
  'case--setDefaultTotalityOption-20455'/3,
  'case--setPrefixRecordProjections-20388'/3,
  'case--setUnboundImplicits-20321'/3,
  'case--lazyActive-20254'/3,
  'case--checkUnambig-20133'/5,
  'case--setExtension-20106'/3,
  'case--setPrefix-20054'/3,
  'case--getWorkingDir-19979'/1,
  'case--case block in setWorkingDir-19939'/6,
  'case--setWorkingDir-19875'/5,
  'case--setSourceDir-19837'/3,
  'case--setOutputDir-19767'/3,
  'case--setBuildDir-19697'/3,
  'case--addLibDir-19617'/3,
  'case--addDataDir-19537'/3,
  'case--addExtraDir-19457'/3,
  'case--addPkgDir-19377'/3,
  'case--addPkg-19286'/3,
  'case--setCG-19211'/3,
  'case--setPPrint-19137'/3,
  'case--getFullName-19050'/4,
  'case--resetFirstEntry-19027'/2,
  'case--setNextEntry-18966'/3,
  'case--setAllPublic-18860'/3,
  'case--setVisible-18780'/3,
  'case--extendNS-18620'/3,
  'case--getNextTypeTag-18563'/2,
  'case--getDirectives,getDir-18453'/6,
  'case--case block in addDirective-18410'/5,
  'case--addDirective-18348'/5,
  'case--addImported-18308'/3,
  'case--setNestedNS-18235'/3,
  'case--setNS-18185'/3,
  'case--clearSavedHints-18133'/2,
  'case--case block in case block in addTransform-18038'/10,
  'case--case block in case block in addTransform-17947'/9,
  'case--case block in addTransform-17891'/10,
  'case--addTransform-17843'/5,
  'case--setOpenHints-17824'/3,
  'case--dropOpenHint-17770'/4,
  'case--addOpenHint-17707'/4,
  'case--addGlobalHint-17631'/5,
  'case--case block in addHintFor-17534'/10,
  'case--case block in addHintFor-17453'/10,
  'case--addHintFor-17399'/10,
  'case--addHintFor-17354'/10,
  'case--case block in case block in setExternal-17248'/15,
  'case--case block in setExternal-17219'/8,
  'case--setExternal-17204'/6,
  'case--case block in case block in setUniqueSearch-17113'/15,
  'case--case block in setUniqueSearch-17084'/8,
  'case--setUniqueSearch-17069'/6,
  'case--case block in setDetags-16983'/8,
  'case--setDetags-16968'/6,
  'case--case block in setDetermining-16873'/8,
  'case--setDetermining-16858'/6,
  'case--setDetermining,getPos-16723'/15,
  'case--dropMutData-16681'/3,
  'case--addMutData-16624'/3,
  'case--case block in setMutWith-16513'/8,
  'case--setMutWith-16498'/6,
  'case--case block in getSearchData-16271'/16,
  'case--case block in getSearchData-16202'/16,
  'case--getSearchData-16164'/6,
  'case--getVisibility-16097'/5,
  'case--case block in hide-16029'/7,
  'case--hide-15975'/5,
  'case--case block in setVisibility-15928'/7,
  'case--setVisibility-15882'/6,
  'case--getSizeChange-15835'/5,
  'case--getTotality-15788'/5,
  'case--case block in setTerminating-15739'/7,
  'case--setTerminating-15691'/6,
  'case--case block in setCovering-15641'/7,
  'case--setCovering-15593'/6,
  'case--case block in setTotality-15544'/7,
  'case--setTotality-15498'/6,
  'case--case block in setSizeChange-15449'/7,
  'case--setSizeChange-15403'/6,
  'case--hasFlag-15350'/6,
  'case--case block in unsetFlag-15300'/8,
  'case--unsetFlag-15246'/6,
  'case--case block in setNameFlag-15167'/10,
  'case--setNameFlag-15101'/6,
  'case--case block in setFlag-15051'/8,
  'case--setFlag-14995'/6,
  'case--lookupNameBy-14755'/6,
  'case--lookupExactBy-14704'/5,
  'case--addToSave-14676'/4,
  'case--addName-14539'/4,
  'case--resolveName-14499'/4,
  'case--setCtxt-14473'/3,
  'case--case block in setLinearCheck-14406'/6,
  'case--setLinearCheck-14362'/5,
  'case--case block in setNamedCompiled-14319'/6,
  'case--setNamedCompiled-14275'/5,
  'case--case block in setCompiled-14232'/6,
  'case--setCompiled-14188'/5,
  'case--case block in updateTy-14147'/6,
  'case--updateTy-14103'/5,
  'case--case block in case block in updateDef-14058'/7,
  'case--case block in updateDef-13991'/7,
  'case--updateDef-13976'/5,
  'case--case block in addContextAlias-13892'/6,
  'case--addContextAlias-13843'/5,
  'case--case block in addContextEntry-13811'/7,
  'case--addContextEntry-13756'/5,
  'case--case block in addDef-13724'/7,
  'case--case block in addDef-13633'/9,
  'case--addDef-13600'/5,
  'case--case block in getUserHoles,isHole-13511'/6,
  'case--getUserHoles,isHole-13500'/4,
  'case--clearUserHole-13481'/3,
  'case--addUserHole-13428'/3,
  'case--initHash-13378'/2,
  'case--addHash-13320'/5,
  'case--case block in aliasName-13234'/5,
  'case--aliasName-13220'/4,
  'case--aliasName,findAlias-13175'/7,
  'case--canonicalName-13095'/5,
  'case--clearCtxt-13071'/3,
  'case--clearCtxt,resetElab-13021'/2,
  'case--clearDefs-12951'/1,
  'case--resolved-10110'/8,
  'case--full-10014'/8,
  'case--resolved-9831'/3,
  'case--full-9812'/3,
  'case--resolved-8868'/8,
  'case--full-8764'/8,
  'case--resolved-8034'/8,
  'case--resolved-7984'/6,
  'case--full-7787'/6,
  'case--resolved-7735'/3,
  'case--full-7711'/3,
  'case--getFnName-7631'/6,
  'case--case block in commitCtxt-7585'/2,
  'case--case block in commitCtxt-7555'/4,
  'case--commitCtxt-7511'/2,
  'case--branchCtxt-7480'/1,
  'case--hideName-7457'/2,
  'case--case block in lookupCtxtName-7418'/4,
  'case--case block in lookupCtxtName-7374'/3,
  'case--lookupCtxtName-7359'/3,
  'case--case block in case block in lookupCtxtName,lookupPossibles-7275'/10,
  'case--case block in lookupCtxtName,lookupPossibles-7246'/8,
  'case--lookupCtxtName,lookupPossibles-7221'/8,
  'case--case block in case block in lookupCtxtName,lookupPossibles-7141'/9,
  'case--case block in lookupCtxtName,lookupPossibles-7114'/7,
  'case--lookupCtxtName,lookupPossibles-7091'/7,
  'case--lookupContextEntry-7042'/3,
  'case--case block in lookupContextEntry-7007'/5,
  'case--lookupContextEntry-6965'/3,
  'case--lookupCtxtExact-6935'/3,
  'case--case block in case block in lookupCtxtExact-6868'/8,
  'case--case block in lookupCtxtExact-6850'/5,
  'case--case block in lookupCtxtExact-6789'/5,
  'case--lookupCtxtExact-6774'/3,
  'case--lookupCtxtExactI-6750'/3,
  'case--case block in lookupCtxtExactI-6716'/5,
  'case--lookupCtxtExactI-6675'/3,
  'case--case block in returnDef-6623'/8,
  'case--returnDef-6607'/3,
  'case--case block in case block in addEntry-6580'/6,
  'case--case block in addEntry-6549'/4,
  'case--case block in addEntry-6499'/4,
  'case--addEntry-6483'/4,
  'case--case block in case block in addCtxt-6458'/6,
  'case--case block in addCtxt-6427'/4,
  'case--case block in addCtxt-6377'/4,
  'case--addCtxt-6361'/4,
  'case--case block in newAlias-6333'/6,
  'case--newAlias-6306'/4,
  'case--getPosition-6275'/3,
  'case--newEntry-6241'/6,
  'case--case block in addAlias-6141'/6,
  'case--addAlias-6115'/5,
  'case--case block in addPossible-6076'/5,
  'case--addPossible-6054'/4,
  'case--show-3415'/3,
  'nested--23793-18879--in--un--visible'/3,
  'nested--13352-9314--in--un--resolvedNamesPat'/7,
  'nested--11178-7061--in--un--resn'/3,
  'nested--17339-13006--in--un--resetElab'/2,
  'nested--11178-7062--in--un--lookupPossibles'/4,
  'nested--17860-13489--in--un--isHole'/4,
  'nested--20766-16138--in--un--isDefault'/5,
  'nested--13669-9509--in--un--insertAll'/5,
  'nested--13668-9477--in--un--insertAll'/5,
  'nested--21368-16697--in--un--getPos'/8,
  'nested--23331-18436--in--un--getDir'/3,
  'nested--13351-9173--in--un--fullNamesPat'/7,
  'nested--17500-13160--in--un--findAlias'/3,
  'nested--20766-16139--in--un--direct'/5,
  'nested--11651-7483--in--un--commitStaged'/3,
  'dn--un--show_Show__SizeChange'/1,
  'dn--un--show_Show__SCCall'/1,
  'dn--un--show_Show__DefFlag'/1,
  'dn--un--show_Show__Def'/1,
  'dn--un--show_Show__Clause'/1,
  'dn--un--showPrec_Show__SizeChange'/2,
  'dn--un--showPrec_Show__SCCall'/2,
  'dn--un--showPrec_Show__DefFlag'/2,
  'dn--un--showPrec_Show__Def'/2,
  'dn--un--showPrec_Show__Clause'/2,
  'dn--un--resolved_HasNames__Transform'/2,
  'dn--un--resolved_HasNames__Totality'/2,
  'dn--un--resolved_HasNames__Terminating'/2,
  'dn--un--resolved_HasNames__SCCall'/3,
  'dn--un--resolved_HasNames__Pat'/2,
  'dn--un--resolved_HasNames__PartialReason'/2,
  'dn--un--resolved_HasNames__Name'/2,
  'dn--un--resolved_HasNames__GlobalDef'/3,
  'dn--un--resolved_HasNames__Def'/2,
  'dn--un--resolved_HasNames__Covering'/2,
  'dn--un--resolved_HasNames__Clause'/2,
  'dn--un--resolved_HasNames__(Term $vars)'/3,
  'dn--un--resolved_HasNames__(NameMap $a)'/3,
  'dn--un--resolved_HasNames__(Maybe $a)'/4,
  'dn--un--resolved_HasNames__(CaseTree $vars)'/3,
  'dn--un--resolved_HasNames__(CaseAlt $vars)'/3,
  'dn--un--resolved_HasNames__((Env Term) $vars)'/3,
  'dn--un--full_HasNames__Transform'/2,
  'dn--un--full_HasNames__Totality'/2,
  'dn--un--full_HasNames__Terminating'/2,
  'dn--un--full_HasNames__SCCall'/3,
  'dn--un--full_HasNames__Pat'/2,
  'dn--un--full_HasNames__PartialReason'/2,
  'dn--un--full_HasNames__Name'/2,
  'dn--un--full_HasNames__GlobalDef'/3,
  'dn--un--full_HasNames__Def'/2,
  'dn--un--full_HasNames__Covering'/2,
  'dn--un--full_HasNames__Clause'/2,
  'dn--un--full_HasNames__(Term $vars)'/3,
  'dn--un--full_HasNames__(NameMap $a)'/3,
  'dn--un--full_HasNames__(Maybe $a)'/4,
  'dn--un--full_HasNames__(CaseTree $vars)'/3,
  'dn--un--full_HasNames__(CaseAlt $vars)'/3,
  'dn--un--full_HasNames__((Env Term) $vars)'/3,
  'dn--un--__Impl_Show_SizeChange'/0,
  'dn--un--__Impl_Show_SCCall'/0,
  'dn--un--__Impl_Show_DefFlag'/0,
  'dn--un--__Impl_Show_Def'/0,
  'dn--un--__Impl_Show_Clause'/0,
  'dn--un--__Impl_HasNames_Transform'/0,
  'dn--un--__Impl_HasNames_Totality'/0,
  'dn--un--__Impl_HasNames_Terminating'/0,
  'dn--un--__Impl_HasNames_SCCall'/0,
  'dn--un--__Impl_HasNames_Pat'/0,
  'dn--un--__Impl_HasNames_PartialReason'/0,
  'dn--un--__Impl_HasNames_Name'/0,
  'dn--un--__Impl_HasNames_GlobalDef'/0,
  'dn--un--__Impl_HasNames_Def'/0,
  'dn--un--__Impl_HasNames_Covering'/0,
  'dn--un--__Impl_HasNames_Clause'/0,
  'dn--un--__Impl_HasNames_(Term $vars)'/1,
  'dn--un--__Impl_HasNames_(NameMap $a)'/1,
  'dn--un--__Impl_HasNames_(Maybe $a)'/2,
  'dn--un--__Impl_HasNames_(CaseTree $vars)'/1,
  'dn--un--__Impl_HasNames_(CaseAlt $vars)'/1,
  'dn--un--__Impl_HasNames_((Env Term) $vars)'/1,
  'dn--un--__Impl_Eq_SizeChange'/0,
  'dn--un--__Impl_Eq_SCCall'/0,
  'dn--un--__Impl_Eq_DefFlag'/0,
  'dn--un--==_Eq__SizeChange'/2,
  'dn--un--==_Eq__SCCall'/2,
  'dn--un--==_Eq__DefFlag'/2,
  'dn--un--/=_Eq__SizeChange'/2,
  'dn--un--/=_Eq__SCCall'/2,
  'dn--un--/=_Eq__DefFlag'/2,
  'un--withLogLevel'/5,
  'un--visibleInAny'/3,
  'un--visibleIn'/3,
  'un--updateTy'/4,
  'un--updateDef'/4,
  'un--unsetFlag'/5,
  'un--toResolvedNames'/5,
  'un--toFullNames'/5,
  'un--sndName'/2,
  'un--setWorkingDir'/3,
  'un--setVisible'/3,
  'un--setVisibility'/5,
  'un--setUniqueSearch'/5,
  'un--setUnboundImplicits'/3,
  'un--setTotality'/5,
  'un--setTerminating'/5,
  'un--setSourceDir'/3,
  'un--setSizeChange'/5,
  'un--setSession'/3,
  'un--setRewrite'/5,
  'un--setPrefixRecordProjections'/3,
  'un--setPrefix'/3,
  'un--setPair'/6,
  'un--setPPrint'/3,
  'un--setOutputDir'/3,
  'un--setOpenHints'/3,
  'un--setNextEntry'/3,
  'un--setNestedNS'/3,
  'un--setNamedCompiled'/4,
  'un--setNameFlag'/5,
  'un--setNS'/3,
  'un--setMutWith'/5,
  'un--setLogTimings'/3,
  'un--setLinearCheck'/4,
  'un--setFromString'/3,
  'un--setFromInteger'/3,
  'un--setFromChar'/3,
  'un--setFlag'/5,
  'un--setExternal'/5,
  'un--setExtension'/3,
  'un--setDetermining'/5,
  'un--setDetags'/5,
  'un--setDefaultTotalityOption'/3,
  'un--setDebugElabCheck'/3,
  'un--setCtxt'/3,
  'un--setCovering'/5,
  'un--setCompiled'/4,
  'un--setCG'/3,
  'un--setBuildDir'/3,
  'un--setAutoImplicitLimit'/3,
  'un--setAmbigLimit'/3,
  'un--setAllPublic'/3,
  'un--returnDef'/3,
  'un--resolved'/2,
  'un--resolveName'/2,
  'un--resetFirstEntry'/2,
  'un--refersToRuntime'/1,
  'un--refersTo'/1,
  'un--reducibleInAny'/3,
  'un--reducibleIn'/3,
  'un--recordWarning'/3,
  'un--prettyName'/2,
  'un--newEntry'/2,
  'un--newDef'/7,
  'un--newAlias'/4,
  'un--lookupTyName'/3,
  'un--lookupTyExact'/3,
  'un--lookupNameBy'/5,
  'un--lookupExactBy'/5,
  'un--lookupDefTyExact'/3,
  'un--lookupDefName'/3,
  'un--lookupDefExact'/3,
  'un--lookupCtxtName'/2,
  'un--lookupCtxtExactI'/2,
  'un--lookupCtxtExact'/2,
  'un--lookupContextEntry'/2,
  'un--lazyActive'/3,
  'un--isVisible'/3,
  'un--isUnboundImplicits'/2,
  'un--isPrefixRecordProjections'/2,
  'un--isPairType'/3,
  'un--isLazyActive'/2,
  'un--isExtension'/2,
  'un--isEqualTy'/3,
  'un--isAllPublic'/2,
  'un--initSize'/0,
  'un--initHash'/2,
  'un--initDefs'/1,
  'un--initCtxtS'/2,
  'un--initCtxt'/1,
  'un--inCurrentNS'/2,
  'un--holeInit'/1,
  'un--hideName'/2,
  'un--hide'/4,
  'un--hasFlag'/5,
  'un--getWorkingDir'/1,
  'un--getVisible'/2,
  'un--getVisibility'/4,
  'un--getUserHoles'/2,
  'un--getTotality'/4,
  'un--getSizeChange'/4,
  'un--getSession'/2,
  'un--getSearchData'/5,
  'un--getRewrite'/2,
  'un--getResolvedAs'/1,
  'un--getPrimitiveNames'/2,
  'un--getPosition'/2,
  'un--getPPrint'/2,
  'un--getNextTypeTag'/2,
  'un--getNextEntry'/2,
  'un--getNestedNS'/2,
  'un--getNameID'/2,
  'un--getNS'/2,
  'un--getImported'/2,
  'un--getFullName'/2,
  'un--getFnName'/1,
  'un--getDirs'/2,
  'un--getDirectives'/3,
  'un--getDefaultTotalityOption'/2,
  'un--getContent'/1,
  'un--getAutoImplicitLimit'/2,
  'un--getAmbigLimit'/2,
  'un--full'/2,
  'un--fstName'/2,
  'un--fromStringName'/2,
  'un--fromIntegerName'/2,
  'un--fromCharName'/2,
  'un--findSetTotal'/1,
  'un--extendNS'/3,
  'un--dumpStaging'/2,
  'un--dropOpenHint'/3,
  'un--dropMutData'/3,
  'un--depth'/2,
  'un--defaultPI'/0,
  'un--defaultFlags'/0,
  'un--decode'/4,
  'un--commitCtxt'/1,
  'un--commit'/2,
  'un--clearUserHole'/3,
  'un--clearSavedHints'/2,
  'un--clearDefs'/2,
  'un--clearCtxt'/2,
  'un--checkUnambig'/4,
  'un--canonicalName'/4,
  'un--branchCtxt'/2,
  'un--branch'/2,
  'un--allNames'/1,
  'un--aliasName'/3,
  'un--addUserHole'/3,
  'un--addTransform'/4,
  'un--addToSave'/3,
  'un--addPossible'/3,
  'un--addPkgDir'/3,
  'un--addPkg'/3,
  'un--addOpenHint'/3,
  'un--addNameDirective'/5,
  'un--addName'/2,
  'un--addMutData'/3,
  'un--addLogLevel'/3,
  'un--addLibDir'/3,
  'un--addImported'/3,
  'un--addHintFor'/7,
  'un--addHashWithNames'/6,
  'un--addHash'/5,
  'un--addGlobalHint'/4,
  'un--addExtraDir'/3,
  'un--addEntry'/3,
  'un--addDirective'/4,
  'un--addDef'/4,
  'un--addDataDir'/3,
  'un--addCtxt'/3,
  'un--addContextEntry'/4,
  'un--addContextAlias'/4,
  'un--addBuiltin'/7,
  'un--addAlias'/4,
  'un--Grow'/0
]).
'case--recordWarning-21804'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, [V0 | V28]} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setSession-21753'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V0, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setDebugElabCheck-21681'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V31 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, {'Idris.Core.Options.MkSessionOpts', V38, V39, V40, V41, V42, V43, V44, V45, V46, V0, V48, V49, V50, V51}, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setLogTimings-21606'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V31 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, {'Idris.Core.Options.MkSessionOpts', V38, V39, V40, V41, V42, V43, V44, V45, V0, V47, V48, V49, V50, V51}, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--withLogLevel-21525'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V10 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V34 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, {'Idris.Core.Options.MkOptions', V32, V33, {'Idris.Core.Options.MkSessionOpts', V41, V42, V43, V44, V45, V46, V47, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V2))(V5)), V49, V50, V51, V52, V53, V54}, V35, V36, V37, V38, V39, V40}, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--withLogLevel-21452'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V13 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V47, V48, V49, V50, V5, V52, V53, V54, V55, V56, V57}, V38, V39, V40, V41, V42, V43}, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addLogLevel-21343'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V31 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, {'Idris.Core.Options.MkSessionOpts', V38, V39, V40, V41, V42, V43, V44, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V0))(V45)), V46, V47, V48, V49, V50, V51}, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--isEqualTy-21167'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--getFullName'(V1, V0))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V12 = (('un--getFullName'(V1, case V5 of {'Idris.Core.Options.MkRewriteNs', E3, E4} -> (fun (V10, V11) -> V10 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V9, V14))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--isPairType-21050'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--getFullName'(V1, V0))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V13 = (('un--getFullName'(V1, case V5 of {'Idris.Core.Options.MkPairNs', E3, E4, E5} -> (fun (V10, V11, V12) -> V10 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V9, V15))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addNameDirective-21023'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, V0, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromChar-20965'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromChar'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromString-20914'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromString'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromInteger-20863'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setRewrite-20804'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setRewrite'(V6, V5, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPair-20731'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, ('Idris.Idris2.Core.Options':'un--setPair'(V6, V7, V8, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setAutoImplicitLimit-20590'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V32 of {'Idris.Core.Options.MkElabDirectives', E35, E36, E37, E38, E39, E40} -> (fun (V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, {'Idris.Core.Options.MkElabDirectives', V38, V39, V40, V41, V0, V43}, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setAmbigLimit-20522'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V32 of {'Idris.Core.Options.MkElabDirectives', E35, E36, E37, E38, E39, E40} -> (fun (V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, {'Idris.Core.Options.MkElabDirectives', V38, V39, V40, V0, V42, V43}, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setDefaultTotalityOption-20455'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V32 of {'Idris.Core.Options.MkElabDirectives', E35, E36, E37, E38, E39, E40} -> (fun (V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, {'Idris.Core.Options.MkElabDirectives', V38, V39, V0, V41, V42, V43}, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPrefixRecordProjections-20388'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V32 of {'Idris.Core.Options.MkElabDirectives', E35, E36, E37, E38, E39, E40} -> (fun (V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, {'Idris.Core.Options.MkElabDirectives', V38, V39, V40, V41, V42, V0}, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setUnboundImplicits-20321'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V32 of {'Idris.Core.Options.MkElabDirectives', E35, E36, E37, E38, E39, E40} -> (fun (V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, {'Idris.Core.Options.MkElabDirectives', V38, V0, V40, V41, V42, V43}, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lazyActive-20254'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V32 of {'Idris.Core.Options.MkElabDirectives', E35, E36, E37, E38, E39, E40} -> (fun (V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, {'Idris.Core.Options.MkElabDirectives', V0, V39, V40, V41, V42, V43}, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkUnambig-20133'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V5)) end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V7 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V10}} end; _ -> fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V14)) end, V4))}, V13)) end end end(E4, E5)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16)) end, V4))}, V15)) end end end(E2, E3)); _ -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V4))}, V17)) end end end(E0, E1)); _ -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V20)) end, V4))}, V19)) end end.
'case--setExtension-20106'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setExtension'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPrefix-20054'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V40, V41, V0, V43, V44, V45, V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getWorkingDir-19979'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> fun (V2) -> {'Idris.Prelude.Types.Right', V1} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V3)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setWorkingDir-19939'(V0, V1, V2, V3, V4, V5) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V10 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V32 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V4, V42, V43, V44, V45, V46, V47, V48, V49}, V33, V34, V35, V36, V37, V38, V39, V40}, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setWorkingDir-19875'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V51 = ('erlang':'put'(V1, case V2 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V5, V43, V44, V45, V46, V47, V48, V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V52)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setSourceDir-19837'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V0, V40, V41, V42, V43, V44, V45, V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOutputDir-19767'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V40, V0, V42, V43, V44, V45, V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setBuildDir-19697'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V0, V41, V42, V43, V44, V45, V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addLibDir-19617'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V40, V41, V42, V43, V44, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V45, [V0 | []])), V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDataDir-19537'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V40, V41, V42, V43, V44, V45, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V46, [V0 | []]))}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addExtraDir-19457'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V40, V41, V42, V43, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V44, [V0 | []])), V45, V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPkgDir-19377'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V29 of {'Idris.Core.Options.MkDirs', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V38, V39, V40, V41, V42, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V43, [V0 | []])), V44, V45, V46}, V30, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPkg-19286'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V31 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, {'Idris.Core.Options.MkSessionOpts', V38, V39, V40, V41, V42, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V43, [V0 | []])), V44, V45, V46, V47, V48, V49, V50, V51}, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCG-19211'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V31 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, {'Idris.Core.Options.MkSessionOpts', V38, V39, V40, V0, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51}, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPPrint-19137'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V0, V31, V32, V33, V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFullName-19050'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V7 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V0}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resetFirstEntry-19027'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V2 of {'Idris.Core.Context.MkContext', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', case case V1 of {'Idris.Core.Context.MkDefs', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V39 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V66 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNextEntry-18966'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V3 of {'Idris.Core.Context.MkContext', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V29, V0, V31, V32, V33, V34, V35, V36, V37, V38, V39}, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setAllPublic-18860'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V3 of {'Idris.Core.Context.MkContext', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V29, V30, V31, V32, V33, V34, V35, V36, V0, V38, V39}, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setVisible-18780'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V3 of {'Idris.Core.Context.MkContext', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V29, V30, V31, V32, V33, V34, V35, [V0 | V36], V37, V38, V39}, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extendNS-18620'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V5, V0)), V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNextTypeTag-18563'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, ((V8 + 1) rem 9223372036854775808), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDirectives,getDir-18453'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V4}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addDirective-18410'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, begin (V31 = {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30}), [{'Idris.Builtin.MkPair', case V31 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V34 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V4, V1}} | V24] end, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDirective-18348'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unknown code generator "/utf8>>, V2))))(V5))), {'Idris.Prelude.Types.Right', V33} end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V34) -> fun (V35) -> begin (V89 = ('erlang':'put'(V0, case V3 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> {'Idris.Core.Context.MkDefs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, begin (V62 = {'Idris.Core.Context.MkDefs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61}), [{'Idris.Builtin.MkPair', case V62 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> V65 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V34, V1}} | V55] end, V56, V57, V58, V59, V60, V61} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V89} end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addImported-18308'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, [V0 | V20], V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNestedNS-18235'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V0, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNS-18185'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V0, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearSavedHints-18133'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, [], [], V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in addTransform-18038'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V6 | V9], V22)), [{'Idris.Builtin.MkPair', V7, V8} | V23], V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in addTransform-17947'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V6 | []], V21)), [{'Idris.Builtin.MkPair', V7, V8} | V22], V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addTransform-17891'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V37 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V6 | []], V23)), [{'Idris.Builtin.MkPair', V7, V8} | V24], V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end end()); {'Idris.Prelude.Types.Just', E26} -> (fun (V38) -> fun (V39) -> begin (V66 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.MkDefs', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V6 | V38], V52)), [{'Idris.Builtin.MkPair', V7, V8} | V53], V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V66} end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addTransform-17843'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames__Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames__Name'(V9, V10)) end end}, V5, V6))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V18 = ('un--toResolvedNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V14) -> fun (V15) -> ('dn--un--full_HasNames__Transform'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--resolved_HasNames__Transform'(V16, V17)) end end}, V0, V6))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> begin (V25 = ('un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('dn--un--full_HasNames__Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--resolved_HasNames__Name'(V23, V24)) end end}, V5, V6))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> begin (V32 = ('un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V28) -> fun (V29) -> ('dn--un--full_HasNames__Transform'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('dn--un--resolved_HasNames__Transform'(V30, V31)) end end}, V0, V6))), case V32 of {'Idris.Prelude.Types.Left', E7} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V34) -> (('case--case block in addTransform-17891'(V0, V1, V2, V3, V5, V13, V20, V27, V34, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V13, case V3 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V47 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V61) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, <<"LHS of a transformation must be a function application"/utf8>>}, V61)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpenHints-17824'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V0, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dropOpenHint-17770'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Data.NameMap':'un--delete'('erased', V3, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addOpenHint-17707'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addGlobalHint-17631'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V4, V0, V13)), V14, V15, [{'Idris.Builtin.MkPair', V4, V0} | V16], V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addHintFor-17534'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V6, [{'Idris.Builtin.MkPair', V7, V0} | V8], V17)), V18, V19, [{'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V7, V0}} | V20], V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addHintFor-17453'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V6, [{'Idris.Builtin.MkPair', V7, V0} | V8], V17)), V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHintFor-17399'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of 0 -> fun (V10) -> begin (V37 = ('erlang':'put'(V5, case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V7, [{'Idris.Builtin.MkPair', V8, V1} | V9], V18)), V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end; 1 -> fun (V38) -> begin (V65 = ('erlang':'put'(V5, case V6 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkDefs', V39, V40, V41, V42, V43, V44, V45, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V7, [{'Idris.Builtin.MkPair', V8, V1} | V9], V46)), V47, V48, [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V8, V1}} | V49], V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V65} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHintFor-17354'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> V10 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in setExternal-17248'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.Core.Context.MkTypeFlags', E0, E1} -> (fun (V15, V16) -> {'Idris.Core.Context.MkTypeFlags', V15, V0} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setExternal-17219'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.MkTypeFlags', E29, E30} -> (fun (V16, V17) -> {'Idris.Core.Context.MkTypeFlags', V16, V0} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--setExternal-17204'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setExternal-17219'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V29)) end end.
'case--case block in case block in setUniqueSearch-17113'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.Core.Context.MkTypeFlags', E0, E1} -> (fun (V15, V16) -> {'Idris.Core.Context.MkTypeFlags', V0, V16} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setUniqueSearch-17084'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.MkTypeFlags', E29, E30} -> (fun (V16, V17) -> {'Idris.Core.Context.MkTypeFlags', V0, V17} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--setUniqueSearch-17069'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setUniqueSearch-17084'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V29)) end end.
'case--case block in setDetags-16983'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> ('un--updateDef'(V3, V1, fun (V17) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V12, V13, V14, V0}} end, V16)) end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V18)) end end.
'case--setDetags-16968'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setDetags-16983'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V29)) end end.
'case--case block in setDetermining-16873'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> begin (V38 = (('nested--21368-16697--in--un--getPos'(V0, V1, V2, V3, 'erased', 0, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V19 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V38 of {'Idris.Prelude.Types.Left', E50} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V40) -> ('un--updateDef'(V3, V1, fun (V41) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V40, V12, V13, V14, V15}} end, V16)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V44 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V42)) end end.
'case--setDetermining-16858'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setDetermining-16873'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V29)) end end.
'case--setDetermining,getPos-16723'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> begin (V17 = (('nested--21368-16697--in--un--getPos'(V0, V1, V2, V3, 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V13)), ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V16, V10)) end, V12)), V11))(V15))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Right', [V13 | V19]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('nested--21368-16697--in--un--getPos'(V0, V1, V2, V3, 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V13)), V12, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dropMutData-16681'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V29, V0)) end, V4)), V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addMutData-16624'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, [V0 | V4], V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setMutWith-16513'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> ('un--updateDef'(V3, V1, fun (V17) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V12, V0, V14, V15}} end, V16)) end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setMutWith]"/utf8>>))}, V18)) end end.
'case--setMutWith-16498'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setMutWith-16513'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V29)) end end.
'case--case block in getSearchData-16271'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V1 of 0 -> begin (V44 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V17) -> ('nested--20766-16138--in--un--isDefault'(V0, V1, V2, V3, V17)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V26 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 1, V44} | []]}} end end; 1 -> begin (V73 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V56 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V102 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V74) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V74)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V75) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--20766-16138--in--un--isDefault'(V0, V1, V2, V3, V75)))) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V84 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), begin (V105 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V103) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V103)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V104) -> ('nested--20766-16139--in--un--direct'(V0, V1, V2, V3, V104)) end, V15))))), begin (V108 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V106) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V106)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V107) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--20766-16139--in--un--direct'(V0, V1, V2, V3, V107)))) end, V15))))), fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V12, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V110) -> ('Idris.Idris2.Data.List':'un--isCons'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V110)))) end, [{'Idris.Builtin.MkPair', 1, V73} | [{'Idris.Builtin.MkPair', 1, V102} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Basics':'un--not'(case V11 of {'Idris.Core.Context.MkTypeFlags', E78, E79} -> (fun (V111, V112) -> V111 end(E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V105} | [{'Idris.Builtin.MkPair', 0, V108} | []]]]]))}} end end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getSearchData-16202'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> V16 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSearchData-16164'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14) -> fun (V15) -> begin (V20 = ('un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> ('dn--un--full_HasNames__Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('dn--un--resolved_HasNames__Name'(V18, V19)) end end}, V0, V15))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> begin (V50 = begin (V23 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V7, V8, V9, V10, V11, V12, V13, V14}}), ('case--case block in getSearchData-16202'(V0, V1, V2, V3, V4, V7, V8, V9, V12, V13, V14, V11, V10, V23, V22, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V22, case V4 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V31 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), case V1 of 0 -> begin (V79 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V51) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V51)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V52) -> ('nested--20766-16138--in--un--isDefault'(V0, V1, V2, V3, V52)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78) -> V61 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 1, V79} | []]}} end; 1 -> begin (V107 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V80) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V80)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V90 end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V136 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V108) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V108)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V109) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--20766-16138--in--un--isDefault'(V0, V1, V2, V3, V109)))) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135) -> V118 end(E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), begin (V139 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V137) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V137)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V138) -> ('nested--20766-16139--in--un--direct'(V0, V1, V2, V3, V138)) end, V50))))), begin (V142 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V140) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V140)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V141) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--20766-16139--in--un--direct'(V0, V1, V2, V3, V141)))) end, V50))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V10, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V143) -> ('Idris.Idris2.Data.List':'un--isCons'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V143)))) end, [{'Idris.Builtin.MkPair', 1, V107} | [{'Idris.Builtin.MkPair', 1, V136} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Basics':'un--not'(case V11 of {'Idris.Core.Context.MkTypeFlags', E115, E116} -> (fun (V144, V145) -> V144 end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V139} | [{'Idris.Builtin.MkPair', 0, V142} | []]]]]))}} end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V146) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V0}, V146)) end end end(E0)); _ -> fun (V147) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V0}, V147)) end end.
'case--getVisibility-16097'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V16 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in hide-16029'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V5, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--hide-15975'(V0, V1, V2, V3, V4) -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V6 of [] -> fun (V9) -> begin (V36 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V7, V10)), V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end end; _ -> fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V38)) end, V4))}, V37)) end end end(E2, E3)); _ -> fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V40)) end, V4))}, V39)) end end end(E0, E1)); [] -> fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V41)) end; _ -> fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V43) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V43)) end, V4))}, V42)) end end.
'case--case block in setVisibility-15928'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setVisibility-15882'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V29 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V0, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V29 of {'Idris.Prelude.Types.Left', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V32)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSizeChange-15835'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V27 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getTotality-15788'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V17 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setTerminating-15739'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V17 of {'Idris.Core.TT.MkTotality', E21, E22} -> (fun (V28, V29) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Idris.Core.TT.MkTotality', V0, V29}, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setTerminating-15691'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V31 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V18 of {'Idris.Core.TT.MkTotality', E22, E23} -> (fun (V29, V30) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Core.TT.MkTotality', V0, V30}, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V31 of {'Idris.Prelude.Types.Left', E24} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V34)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setCovering-15641'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V17 of {'Idris.Core.TT.MkTotality', E21, E22} -> (fun (V28, V29) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Idris.Core.TT.MkTotality', V28, V0}, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCovering-15593'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V31 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V18 of {'Idris.Core.TT.MkTotality', E22, E23} -> (fun (V29, V30) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Core.TT.MkTotality', V29, V0}, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V31 of {'Idris.Prelude.Types.Left', E24} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V34)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setTotality-15544'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V0, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setTotality-15498'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V29 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V0, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V29 of {'Idris.Prelude.Types.Left', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V32)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setSizeChange-15449'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V0} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setSizeChange-15403'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V29 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V0} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V29 of {'Idris.Prelude.Types.Left', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V32)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--hasFlag-15350'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('dn--un--==_Eq__DefFlag'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--/=_Eq__DefFlag'(V10, V11)) end end}, V0, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V23 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V33)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unsetFlag-15300'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V7, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unsetFlag-15246'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V29 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V7) -> ('dn--un--/=_Eq__DefFlag'(V7, V0)) end, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V19 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V30) -> begin (V52 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkGlobalDef', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V29, V43, V44, V45, V46, V47, V48, V49, V50, V51} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V30))), case V52 of {'Idris.Prelude.Types.Left', E43} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V55)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setNameFlag-15167'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkGlobalDef', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V9, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNameFlag-15101'(V0, V1, V2, V3, V4, V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V7 of [] -> begin (V34 = [V0 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V12) -> ('dn--un--/=_Eq__DefFlag'(V12, V0)) end, case V11 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V24 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), fun (V35) -> begin (V57 = ('un--addDef'(V3, {'Idris.Core.Name.Resolved', V10}, case V11 of {'Idris.Core.Context.MkGlobalDef', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkGlobalDef', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V34, V48, V49, V50, V51, V52, V53, V54, V55, V56} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V35))), case V57 of {'Idris.Prelude.Types.Left', E48} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V61) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V61)) end, V5))}, V60)) end end end(E4, E5)); _ -> fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V63) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V63)) end, V5))}, V62)) end end end(E2, E3)); _ -> fun (V64) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V65)) end, V5))}, V64)) end end end(E0, E1)); [] -> fun (V66) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V66)) end; _ -> fun (V67) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V68) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V68)) end, V5))}, V67)) end end.
'case--case block in setFlag-15051'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V7, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFlag-14995'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V29 = [V0 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V7) -> ('dn--un--/=_Eq__DefFlag'(V7, V0)) end, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V19 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), fun (V30) -> begin (V52 = ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkGlobalDef', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V29, V43, V44, V45, V46, V47, V48, V49, V50, V51} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V30))), case V52 of {'Idris.Prelude.Types.Left', E43} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V55)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupNameBy-14755'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V8, (V3(V9))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupExactBy-14704'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (V3(V5))}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addToSave-14676'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V9)), V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V25)), V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addName-14539'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('un--setCtxt'(V1, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V4} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolveName-14499'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('un--setCtxt'(V1, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V4} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCtxt-14473'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V0, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setLinearCheck-14406'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V0, V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setLinearCheck-14362'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V28 = ('un--addDef'(V2, {'Idris.Core.Name.Resolved', V1}, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V0, V24, V25, V26, V27} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setNamedCompiled-14319'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, {'Idris.Prelude.Types.Just', V0}, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNamedCompiled-14275'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V28 = ('un--addDef'(V2, V1, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, {'Idris.Prelude.Types.Just', V0}, V27} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setCompiled-14232'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, {'Idris.Prelude.Types.Just', V0}, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCompiled-14188'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V28 = ('un--addDef'(V2, V1, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, {'Idris.Prelude.Types.Just', V0}, V26, V27} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateTy-14147'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V0, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateTy-14103'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V28 = ('un--addDef'(V2, {'Idris.Core.Name.Resolved', V1}, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V0, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in updateDef-14058'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V6, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateDef-13991'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> begin (V31 = ('un--addDef'(V2, V1, case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkGlobalDef', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V8, V28, V29, V30} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateDef-13976'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in updateDef-13991'(V0, V1, V2, V3, V5, V6, (V0(case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V24 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addContextAlias-13892'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V5, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addContextAlias-13843'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> begin (V32 = ('un--newAlias'(V1, V0, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V32 of {'Idris.Prelude.Types.Left', E26} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V34) -> begin (V61 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> {'Idris.Core.Context.MkDefs', V34, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V61} end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in addContextEntry-13811'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V5, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addContextEntry-13756'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V35 = begin (V34 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V6, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Right', V5} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addDef-13724'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V5, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addDef-13633'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Context.None'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Core.Context.Hole', E21, E22} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E21, E22)); _ -> fun (V13) -> ('un--clearUserHole'(V2, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V15 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13)) end end.
'case--addDef-13600'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V35 = begin (V34 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V6, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> begin (V60 = begin (V38 = {'Idris.Builtin.MkPair', V5, V6}), (('case--case block in addDef-13633'(V0, V1, V2, V3, V5, V6, V38, V37, case V0 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V56 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7)) end), case V60 of {'Idris.Prelude.Types.Left', E51} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V62) -> {'Idris.Prelude.Types.Right', V5} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getUserHoles,isHole-13511'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.None'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Core.Context.Hole', E0, E1} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> fun (V10) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--getUserHoles,isHole-13500'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = {'Idris.Prelude.Types.Just', V4}), ('case--case block in getUserHoles,isHole-13511'(V0, V1, V2, V4, V5, case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V23 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearUserHole-13481'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Data.NameMap':'un--delete'('erased', V0, V25)), V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addUserHole-13428'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V25)), V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--initHash-13378'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, 5381, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHash-13320'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, case V1 of {'Idris.Core.Hash.dn--un--__mkHashable', E26, E27} -> (fun (V31, V32) -> ((V32(case V4 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V48 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in aliasName-13234'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('nested--17500-13160--in--un--findAlias'(V0, V1, V5)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--aliasName-13220'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('case--case block in aliasName-13234'(V0, V1, V2, V4, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V4, case case V2 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V5 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V34 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V42) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--aliasName,findAlias-13175'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Right', V4} end; 1 -> ('nested--17500-13160--in--un--findAlias'(V0, V1, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--canonicalName-13095'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V5)) end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V7 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', V8} end; _ -> fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V14)) end, V4))}, V13)) end end end(E4, E5)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16)) end, V4))}, V15)) end end end(E2, E3)); _ -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V4))}, V17)) end end end(E0, E1)); _ -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V20)) end, V4))}, V19)) end end.
'case--clearCtxt-13071'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('nested--17339-13006--in--un--resetElab'(V0, case V1 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V33 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, case V1 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V79 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearCtxt,resetElab-13021'(V0, V1) -> case V1 of {'Idris.Core.Options.MkOptions', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Options.MkOptions', V2, V3, V4, ('Idris.Idris2.Core.Options':'un--defaultElab'()), V6, V7, V8, V9, V10} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearDefs-12951'(V0) -> case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V1 of {'Idris.Core.Context.MkContext', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V27, V28, V29, V30, V31, V32, V33, V34, V35, 0, V37}, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-10110'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V2, V11, V12, V13, V14, V15, V16, V17, V4, V19, V5, V6, V22, V23, V24, V3, V26, V27, V7} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-10014'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V2, V11, V12, V13, V14, V15, V16, V17, V4, V19, V5, V6, V22, V23, V24, V3, V26, V27, V7} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-9831'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Context.MkSCCall', V2, V4} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-9812'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Context.MkSCCall', V2, V4} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-8868'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', {'Idris.Core.Name.Resolved', V8}, V3, V1, V6}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V4, V3, V1, V6}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-8764'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', case V8 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V11 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V1, V6}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V4, V3, V1, V6}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-8034'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V4, V3, V8, V6}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V4, V3, V2, V6}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-7984'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, {'Idris.Core.Name.Resolved', V6}}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, V1}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-7787'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V9 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, {'Idris.Core.Name.Resolved', V1}}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-7735'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-7711'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', case V3 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V6 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V0}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFnName-7631'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.Prelude.Types.Just', V8} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in commitCtxt-7585'(V0, V1) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V1, V8, V9, V10, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in commitCtxt-7555'(V0, V1, V2, V3) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Core.Context.MkContext', V4, V5, V6, V7, V8, 0, ('Idris.Idris2.Data.IntMap':'un--empty'('erased')), V11, V12, V13, V14} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--commitCtxt-7511'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', V0} end; _ -> begin (V3 = (V1 - 1)), case V3 of 0 -> begin (V15 = case V0 of {'Idris.Core.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V8 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E22} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V20) -> begin (V33 = begin (V32 = (('nested--11651-7483--in--un--commitStaged'(V0, ('Idris.Idris2.Data.IntMap':'un--toList'('erased', case V0 of {'Idris.Core.Context.MkContext', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V27 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V20))(V16))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E35} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V35) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, 0, ('Idris.Idris2.Data.IntMap':'un--empty'('erased')), V43, V44, V45, V46} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkContext', V48, V49, V50, V51, V52, V3, V54, V55, V56, V57, V58} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end.
'case--branchCtxt-7480'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> {'Idris.Core.Context.MkContext', V1, V2, V3, V4, V5, (1 + V6), V7, V8, V9, V10, V11} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--hideName-7457'(V0, V1) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V1, {'Idris.Builtin.MkUnit'}, V12))} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName-7418'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, [], V4)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName-7374'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V4, V5}} | []]} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtName-7359'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V4 = (('un--lookupCtxtExactI'(V1, V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V8, V9}} | []]} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V10) -> ('case--case block in lookupCtxtName-7418'(V0, V1, V10, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V10, case V0 of {'Idris.Core.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V14 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in lookupCtxtName,lookupPossibles-7275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, V7}} | V6], V5)); 1 -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V6, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName,lookupPossibles-7246'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V9 = {'Idris.Prelude.Types.Just', V8}), ('case--case block in case block in lookupCtxtName,lookupPossibles-7275'(V0, V1, V2, V3, V4, V5, V6, V8, V9, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V4)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V12, V13)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> ('nested--11178-7061--in--un--resn'(V0, V1, V14)) end, V6)))))) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V6, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtName,lookupPossibles-7221'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V9 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, V0))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> begin (V13 = {'Idris.Prelude.Types.Just', V12}), (('case--case block in case block in lookupCtxtName,lookupPossibles-7275'(V0, V1, V2, V3, V4, V5, V6, V12, V13, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V4)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V16, V17)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('nested--11178-7061--in--un--resn'(V0, V1, V18)) end, V6)))))) end))))(V8)) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V6, V5))(V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V6, V5)) end.
'case--case block in case block in lookupCtxtName,lookupPossibles-7141'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, V6}} | V5], V4)); 1 -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V5, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName,lookupPossibles-7114'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = {'Idris.Prelude.Types.Just', V7}), ('case--case block in case block in lookupCtxtName,lookupPossibles-7141'(V0, V1, V2, V3, V4, V5, V7, V8, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V3)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V11, V12)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> ('nested--11178-7061--in--un--resn'(V0, V1, V13)) end, V5)))))) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V5, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtName,lookupPossibles-7091'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V8 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, V0))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E2} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), (('case--case block in case block in lookupCtxtName,lookupPossibles-7141'(V0, V1, V2, V3, V4, V5, V11, V12, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V3)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V15, V16)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V17) -> ('nested--11178-7061--in--un--resn'(V0, V1, V17)) end, V5)))))) end))))(V7)) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V5, V4))(V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--11178-7062--in--un--lookupPossibles'(V0, V1, V5, V4)) end.
'case--lookupContextEntry-7042'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--lookupContextEntry'({'Idris.Core.Name.Resolved', V3}, V0)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupContextEntry-7007'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, V5}}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupContextEntry-6965'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, V3}}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V16 = case V1 of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V9 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V16))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> begin (V23 = begin (V22 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V21, V0))(V17))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> case V25 of {'Idris.Prelude.Types.Just', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, V26}}} end(E16)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExact-6935'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V5}} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in lookupCtxtExact-6868'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtExact-6850'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--decode'(V1, V0, 0, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V10 = {'Idris.Prelude.Types.Just', V5}), (('case--case block in case block in lookupCtxtExact-6868'(V0, V1, V2, V3, V5, V10, V9, ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V20 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V9))))(V6)) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtExact-6789'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V8}} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExact-6774'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--decode'(V1, V0, 0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> (('case--case block in lookupCtxtExact-6789'(V0, V1, V3, V7, ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V17 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V7))))(V4)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V30 = case V1 of {'Idris.Core.Context.MkContext', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V23 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V30))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V35) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V35, V0))(V31))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E29} -> (fun (V40) -> begin (V41 = (('un--decode'(V1, V0, 0, V40))(V31))), case V41 of {'Idris.Prelude.Types.Left', E30} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in case block in lookupCtxtExact-6868'(V0, V1, V30, V35, V40, V44, V43, ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V54 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V43))))(V31)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExactI-6750'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--lookupCtxtExactI'({'Idris.Core.Name.Resolved', V3}, V0)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtExactI-6716'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--decode'(V1, V0, 0, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V19 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V9))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExactI-6675'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--decode'(V1, V0, 0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V17 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V7))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V30 = case V1 of {'Idris.Core.Context.MkContext', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V23 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V30))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V35) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V35, V0))(V31))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E29} -> (fun (V40) -> begin (V41 = (('un--decode'(V1, V0, 0, V40))(V31))), case V41 of {'Idris.Prelude.Types.Left', E30} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V43) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V53 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V43))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in returnDef-6623'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--returnDef-6607'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> ('case--case block in returnDef-6623'(V0, V1, V4, V5, V6, V7, V3, case V3 of {'Idris.Core.Context.MkPMDefInfo', E5, E6} -> (fun (V8, V9) -> V9 end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in case block in addEntry-6580'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V3, V1, V12)), V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addEntry-6549'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.Context.MkContext', V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V4, V1, V13)), V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addEntry-6499'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V17 = case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> begin (V24 = begin (V23 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V22, V4, V1))(V18))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V5}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addEntry-6483'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V5 = (('un--getPosition'(V2, V0))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V21 = case V9 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V23 = begin (V22 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = begin (V26 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V25, V8, V1))(V4))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V30) -> begin (V31 = (('un--getPosition'(V2, V0))(V30))), case V31 of {'Idris.Prelude.Types.Left', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V34, V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V34, case V35 of {'Idris.Core.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, V41, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V34, V1, V42)), V43, V44, V45, V46} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in addCtxt-6458'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V3, {'Idris.Core.Context.Decoded', V1}, V12)), V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addCtxt-6427'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.Context.MkContext', V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V4, {'Idris.Core.Context.Decoded', V1}, V13)), V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addCtxt-6377'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V17 = case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> begin (V24 = begin (V23 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V22, V4, {'Idris.Core.Context.Decoded', V1}))(V18))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V5}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addCtxt-6361'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V5 = (('un--getPosition'(V2, V0))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V21 = case V9 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V23 = begin (V22 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = begin (V26 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V25, V8, {'Idris.Core.Context.Decoded', V1}))(V4))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V30) -> begin (V31 = (('un--getPosition'(V2, V0))(V30))), case V31 of {'Idris.Prelude.Types.Left', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V34, V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V34, case V35 of {'Idris.Core.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, V41, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V34, {'Idris.Core.Context.Decoded', V1}, V42)), V43, V44, V45, V46} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in newAlias-6333'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, V7, V8, ('un--addAlias'(V2, V1, V3, V9)), V10, V11, V12, V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--newAlias-6306'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.Context.MkContext', V7, V8, V9, ('un--addAlias'(V2, V1, V4, V10)), V11, V12, V13, V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getPosition-6275'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V0}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--newEntry'(V1, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--newEntry-6241'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, ((V2 + 1) rem 9223372036854775808), ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V1, V2, V8)), ('un--addPossible'(V1, V2, V9)), V10, V11, V12, V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addAlias-6141'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V4, [{'Idris.Core.Context.Alias', V3, V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V4, [{'Idris.Core.Context.Alias', V3, V2, V1} | V6], V0)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addAlias-6115'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('case--case block in addAlias-6141'(V0, V1, V2, V3, V5, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V5, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addPossible-6076'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V3, [{'Idris.Core.Context.Direct', V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V3, [{'Idris.Core.Context.Direct', V2, V1} | V5], V0)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPossible-6054'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('case--case block in addPossible-6076'(V0, V1, V2, V4, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V4, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--show-3415'(V0, V1, V2) -> case V2 of 0 -> <<" [impl]"/utf8>>; 1 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--23793-18879--in--un--visible'(V0, V1, V2) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V2, V0)).
'nested--13352-9314--in--un--resolvedNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('dn--un--resolved_HasNames__((Env Term) $vars)'('erased', V5, V9))(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V5, V11))(V13))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V5, V12))(V13))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11178-7061--in--un--resn'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17339-13006--in--un--resetElab'(V0, V1) -> case V1 of {'Idris.Core.Options.MkOptions', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Options.MkOptions', V2, V3, V4, ('Idris.Idris2.Core.Options':'un--defaultElab'()), V6, V7, V8, V9, V10} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11178-7062--in--un--lookupPossibles'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V2))} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Context.Direct', E2, E3} -> (fun (V7, V8) -> ('case--lookupCtxtName,lookupPossibles-7091'(V0, V1, V8, V7, V6, V2, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V7, case V0 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V19 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E2, E3)); {'Idris.Core.Context.Alias', E15, E16, E17} -> (fun (V20, V21, V22) -> ('case--lookupCtxtName,lookupPossibles-7221'(V0, V1, V22, V21, V20, V6, V2, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V21, case V0 of {'Idris.Core.Context.MkContext', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V33 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17860-13489--in--un--isHole'(V0, V1, V2, V3) -> begin (V30 = (('un--lookupCtxtExact'(V2, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V30 of {'Idris.Prelude.Types.Left', E26} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Just', E28} -> (fun (V33) -> begin (V34 = {'Idris.Prelude.Types.Just', V33}), (('case--case block in getUserHoles,isHole-13511'(V0, V2, V1, V33, V34, case V33 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V52 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end end(E28)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--20766-16138--in--un--isDefault'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V4)).
'nested--13669-9509--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames__Name'(V2, V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> (('nested--13669-9509--in--un--insertAll'('erased', V1, V2, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V13, V9, V3)), V7))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13668-9477--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('dn--un--full_HasNames__Name'(V2, V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> (('nested--13668-9477--in--un--insertAll'('erased', V1, V2, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V13, V9, V3)), V7))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21368-16697--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> ('case--setDetermining,getPos-16723'(V0, V1, V2, V3, 'erased', V8, V12, V13, V14, V15, V9, V11, V6, V5, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V18, V19)) end end}, V9, V6)))) end(E4, E5, E6, E7)); _ -> case V6 of [] -> fun (V20) -> {'Idris.Prelude.Types.Right', []} end; _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V22)) end, V6))))))}, V21)) end end end end(E0, E1, E2, E3)); _ -> case V6 of [] -> fun (V23) -> {'Idris.Prelude.Types.Right', []} end; _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V25)) end, V6))))))}, V24)) end end end.
'nested--23331-18436--in--un--getDir'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('case--getDirectives,getDir-18453'(V0, V1, V3, V5, V6, ('Idris.Idris2.Core.Options':'dn--un--==_Eq__CG'(V0, V5)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13351-9173--in--un--fullNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('dn--un--full_HasNames__((Env Term) $vars)'('erased', V5, V9))(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = (('dn--un--full_HasNames__(Term $vars)'('erased', V5, V11))(V13))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (('dn--un--full_HasNames__(Term $vars)'('erased', V5, V12))(V13))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17500-13160--in--un--findAlias'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', V0} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Core.Context.Alias', E2, E3, E4} -> (fun (V6, V7, V8) -> ('case--aliasName,findAlias-13175'(V0, V1, V8, V7, V6, V5, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V7, V0)))) end(E2, E3, E4)); _ -> ('nested--17500-13160--in--un--findAlias'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--20766-16139--in--un--direct'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V4)).
'nested--11651-7483--in--un--commitStaged'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Idris.Builtin.MkUnit'} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V2, V6, V7))(V8))), (('nested--11651-7483--in--un--commitStaged'(V0, V5, V2))(V8)) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__SizeChange'(V0) -> case V0 of {'Idris.Core.Context.Smaller'} -> (fun () -> <<"Smaller"/utf8>> end()); {'Idris.Core.Context.Same'} -> (fun () -> <<"Same"/utf8>> end()); {'Idris.Core.Context.Unknown'} -> (fun () -> <<"Unknown"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__SCCall'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V6, V7)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V8) -> ('dn--un--show_Show__SizeChange'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--showPrec_Show__SizeChange'(V9, V10)) end end}}, V4)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V14, V15)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V16) -> ('dn--un--show_Show__SizeChange'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show__SizeChange'(V17, V18)) end end}}, V11, V12)) end end}, V3)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V23, V24)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V25) -> ('dn--un--show_Show__SizeChange'(V25)) end, fun (V26) -> fun (V27) -> ('dn--un--showPrec_Show__SizeChange'(V26, V27)) end end}}, V21)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V31, V32)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('dn--un--show_Show__SizeChange'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show__SizeChange'(V34, V35)) end end}}, V28, V29)) end end}, V19, V20)) end end}, case V0 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V36, V37) -> V37 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'dn--un--show_Show__DefFlag'(V0) -> case V0 of {'Idris.Core.Context.Inline'} -> (fun () -> <<"inline"/utf8>> end()); {'Idris.Core.Context.Invertible'} -> (fun () -> <<"invertible"/utf8>> end()); {'Idris.Core.Context.Overloadable'} -> (fun () -> <<"overloadable"/utf8>> end()); {'Idris.Core.Context.TCInline'} -> (fun () -> <<"tcinline"/utf8>> end()); {'Idris.Core.Context.SetTotal', E0} -> (fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__TotalReq'(V1)) end(E0)); {'Idris.Core.Context.BlockedHint'} -> (fun () -> <<"blockedhint"/utf8>> end()); {'Idris.Core.Context.Macro'} -> (fun () -> <<"macro"/utf8>> end()); {'Idris.Core.Context.PartialEval', E1} -> (fun (V2) -> <<"partialeval"/utf8>> end(E1)); {'Idris.Core.Context.AllGuarded'} -> (fun () -> <<"allguarded"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__Def'(V0) -> case V0 of {'Idris.Core.Context.None'} -> (fun () -> <<"undefined"/utf8>> end()); {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V7, V8)) end end}, V2)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<";\x{a}Compile time tree: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show__(CaseTree $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}Run time tree: "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show__(CaseTree $vars)'(V2, V4)))))))))) end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"DataCon "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V9)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V10)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V12) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Bool'(V14, V15)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V17, V18)) end end}}, V12)), <<")"/utf8>>)))) end end, V11)))))))))) end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TyCon "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V19)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V20)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" params: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V28, V29)) end end}, V21)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" constructors: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V31, V32)) end end}, V25)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" mutual with: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V34, V35)) end end}, V24)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" detaggable by: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V38, V39)) end end}, V36)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V43, V44)) end end}, V40, V41)) end end}, V26)))))))))))))))))))))))) end(E8, E9, E10, E11, E12, E13, E14, E15)); {'Idris.Core.Context.ExternDef', E16} -> (fun (V45) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"<external def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V45)), <<">"/utf8>>)))) end(E16)); {'Idris.Core.Context.ForeignDef', E17, E18} -> (fun (V46, V47) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"<foreign def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V46)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__String'(V49, V50)) end end}, V47)), <<">"/utf8>>)))))))) end(E17, E18)); {'Idris.Core.Context.Builtin', E19, E20} -> (fun (V51, V52) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"<builtin with arith "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V51)), <<">"/utf8>>)))) end(E19, E20)); {'Idris.Core.Context.Hole', E21, E22} -> (fun (V53, V54) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Hole"/utf8>>, ('case--show-3415'(V53, V54, case V54 of {'Idris.Core.Context.MkHoleFlags', E23, E24} -> (fun (V55, V56) -> V55 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E21, E22)); {'Idris.Core.Context.BySearch', E25, E26, E27} -> (fun (V57, V58, V59) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Search in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V59)))) end(E25, E26, E27)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V60, V61, V62) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Guess "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'([], V60)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" when "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V64, V65)) end end}, V62)))))))) end(E28, E29, E30)); {'Idris.Core.Context.ImpBind'} -> (fun () -> <<"Bound name"/utf8>> end()); {'Idris.Core.Context.Delayed'} -> (fun () -> <<"Delayed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__Clause'(V0) -> case V0 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V6, V7)) end end}, V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V1, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V1, V4)))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__SizeChange'(V0, V1) -> ('dn--un--show_Show__SizeChange'(V1)).
'dn--un--showPrec_Show__SCCall'(V0, V1) -> ('dn--un--show_Show__SCCall'(V1)).
'dn--un--showPrec_Show__DefFlag'(V0, V1) -> ('dn--un--show_Show__DefFlag'(V1)).
'dn--un--showPrec_Show__Def'(V0, V1) -> ('dn--un--show_Show__Def'(V1)).
'dn--un--showPrec_Show__Clause'(V0, V1) -> ('dn--un--show_Show__Clause'(V1)).
'dn--un--resolved_HasNames__Transform'(V0, V1) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames__Name'(V0, V3))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames__((Env Term) $vars)'('erased', V0, V4))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V5))(V7))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V6))(V7))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V2, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__Totality'(V0, V1) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('dn--un--resolved_HasNames__Terminating'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames__Covering'(V0, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__Terminating'(V0, V1) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = (('dn--un--resolved_HasNames__PartialReason'(V0, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames__SCCall'(V0, V1, V2) -> begin (V5 = (('dn--un--resolved_HasNames__Name'(V0, case V1 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames__Pat'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V2} end, V7)) end, ('dn--un--resolved_HasNames__Name'(V0, V3)), V6)) end, ('dn--un--resolved_HasNames__Pat'(V0, V4)), V5)) end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V13, V14, V15, V16, V17) -> fun (V18) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V23) -> {'Idris.Prelude.Types.Right', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> {'Idris.Core.CaseTree.PCon', V24, V25, V26, V27, V28} end end end end end} end, fun (V29) -> {'Idris.Prelude.Types.Right', V13} end, V22)) end, ('dn--un--resolved_HasNames__Name'(V0, V14)), V21)) end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V20)) end, fun (V31) -> {'Idris.Prelude.Types.Right', V16} end, V19)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V32) -> ('dn--un--resolved_HasNames__Pat'(V0, V32)) end, V17, [])), V18)) end end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V33, V34, V35, V36) -> fun (V37) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V41) -> {'Idris.Prelude.Types.Right', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> {'Idris.Core.CaseTree.PTyCon', V42, V43, V44, V45} end end end end} end, fun (V46) -> {'Idris.Prelude.Types.Right', V33} end, V40)) end, ('dn--un--resolved_HasNames__Name'(V0, V34)), V39)) end, fun (V47) -> {'Idris.Prelude.Types.Right', V35} end, V38)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('dn--un--resolved_HasNames__Pat'(V0, V48)) end, V36, [])), V37)) end end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V49, V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', V1} end end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V52, V53, V54, V55) -> fun (V56) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V57) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V59) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V60) -> {'Idris.Prelude.Types.Right', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> {'Idris.Core.CaseTree.PArrow', V61, V62, V63, V64} end end end end} end, fun (V65) -> {'Idris.Prelude.Types.Right', V52} end, V59)) end, ('dn--un--resolved_HasNames__Name'(V0, V53)), V58)) end, ('dn--un--resolved_HasNames__Pat'(V0, V54)), V57)) end, ('dn--un--resolved_HasNames__Pat'(V0, V55)), V56)) end end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V66, V67, V68, V69) -> fun (V70) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V71) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V74) -> {'Idris.Prelude.Types.Right', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> {'Idris.Core.CaseTree.PDelay', V75, V76, V77, V78} end end end end} end, fun (V79) -> {'Idris.Prelude.Types.Right', V66} end, V73)) end, fun (V80) -> {'Idris.Prelude.Types.Right', V67} end, V72)) end, ('dn--un--resolved_HasNames__Pat'(V0, V68)), V71)) end, ('dn--un--resolved_HasNames__Pat'(V0, V69)), V70)) end end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V81, V82) -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V84) -> case V84 of {'Idris.Prelude.Types.Left', E24} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V81, V86}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--resolved_HasNames__Name'(V0, V82)), V83)) end end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V87, V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E28} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V87, V92}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V88)), V89)) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__PartialReason'(V0, V1) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--resolved_HasNames__Name'(V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames__Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__Name'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V2}} end end(E0)); _ -> ('case--resolved-7735'(V1, V0, ('un--getNameID'(V1, V0)))) end.
'dn--un--resolved_HasNames__GlobalDef'(V0, V1, V2) -> begin (V24 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V24 of {'Idris.Prelude.Types.Left', E21} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V26) -> begin (V48 = (('dn--un--resolved_HasNames__Def'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V44 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V48 of {'Idris.Prelude.Types.Left', E44} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V50) -> begin (V72 = (('dn--un--resolved_HasNames__Totality'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V72 of {'Idris.Prelude.Types.Left', E67} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V74) -> begin (V100 = (('dn--un--resolved_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('dn--un--full_HasNames__(NameMap $a)'('erased', V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--resolved_HasNames__(NameMap $a)'('erased', V77, V78)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V91 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V100 of {'Idris.Prelude.Types.Left', E90} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V102) -> begin (V128 = (('dn--un--resolved_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('dn--un--full_HasNames__(NameMap $a)'('erased', V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--resolved_HasNames__(NameMap $a)'('erased', V105, V106)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V120 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V128 of {'Idris.Prelude.Types.Left', E113} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V130) -> begin (V154 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V131) -> fun (V132) -> ('dn--un--resolved_HasNames__SCCall'(V0, V131, V132)) end end, case V1 of {'Idris.Core.Context.MkGlobalDef', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V153 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V154 of {'Idris.Prelude.Types.Left', E136} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V156) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> {'Idris.Core.Context.MkGlobalDef', V157, V158, V26, V160, V161, V162, V163, V164, V165, V166, V74, V168, V102, V130, V171, V172, V173, V50, V175, V176, V156} end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames__Def'(V0, V1) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V0, V4))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V0, V5))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> ('nested--13352-9314--in--un--resolvedNamesPat'(V6, V3, V5, V4, V2, V0, V14)) end, V6, []))(V7))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.PMDef', V2, V3, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('dn--un--resolved_HasNames__Name'(V0, V27)) end, V23, []))(V26))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('dn--un--resolved_HasNames__Name'(V0, V31)) end, V24, []))(V26))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.TCon', V18, V19, V20, V21, V22, V30, V34, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V35, V36, V37) -> fun (V38) -> begin (V39 = (('dn--un--resolved_HasNames__Name'(V0, V37))(V38))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.BySearch', V35, V36, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> fun (V45) -> begin (V46 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V42))(V45))), case V46 of {'Idris.Prelude.Types.Left', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Guess', V48, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames__Covering'(V0, V1) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames__Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__Clause'(V0, V1) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> fun (V11) -> fun (V12) -> {'Idris.Core.Context.MkClause', V2, V10, V11, V12} end end end} end, ('dn--un--resolved_HasNames__((Env Term) $vars)'('erased', V0, V3)), V8)) end, ('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V4)), V7)) end, ('dn--un--resolved_HasNames__(Term $vars)'('erased', V0, V5)), V6)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(Term $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> ('case--resolved-7984'('erased', V5, V4, V3, V1, ('un--getNameID'(V5, V1)))) end(E0, E1, E2)); {'Idris.Core.TT.Meta', E3, E4, E5, E6} -> (fun (V6, V7, V8, V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> (('case--resolved-8034'('erased', V9, V8, V7, V6, V1, V14, ('un--getNameID'(V7, V1))))(V10)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5, E6)); {'Idris.Core.TT.Bind', E9, E10, E11, E12} -> (fun (V15, V16, V17, V18) -> fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V20) -> ('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V20)) end, V17))(V19))), case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> begin (V24 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V18))(V19))), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V15, V16, V23, V26}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12)); {'Idris.Core.TT.App', E17, E18, E19} -> (fun (V27, V28, V29) -> fun (V30) -> begin (V31 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V28))(V30))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> begin (V34 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V29))(V30))), case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V27, V33, V36}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17, E18, E19)); {'Idris.Core.TT.As', E24, E25, E26, E27} -> (fun (V37, V38, V39, V40) -> fun (V41) -> begin (V42 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V39))(V41))), case V42 of {'Idris.Prelude.Types.Left', E28} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V44) -> begin (V45 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V40))(V41))), case V45 of {'Idris.Prelude.Types.Left', E30} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V37, V38, V44, V47}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25, E26, E27)); {'Idris.Core.TT.TDelayed', E32, E33, E34} -> (fun (V48, V49, V50) -> fun (V51) -> begin (V52 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V50))(V51))), case V52 of {'Idris.Prelude.Types.Left', E35} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V48, V49, V54}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34)); {'Idris.Core.TT.TDelay', E37, E38, E39, E40} -> (fun (V55, V56, V57, V58) -> fun (V59) -> begin (V60 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V57))(V59))), case V60 of {'Idris.Prelude.Types.Left', E41} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V62) -> begin (V63 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V58))(V59))), case V63 of {'Idris.Prelude.Types.Left', E43} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V55, V56, V62, V65}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37, E38, E39, E40)); {'Idris.Core.TT.TForce', E45, E46, E47} -> (fun (V66, V67, V68) -> fun (V69) -> begin (V70 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V68))(V69))), case V70 of {'Idris.Prelude.Types.Left', E48} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V66, V67, V72}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47)); _ -> fun (V73) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--resolved_HasNames__(NameMap $a)'(V0, V1, V2) -> ('nested--13669-9509--in--un--insertAll'('erased', V2, V1, ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--toList'('erased', V2)))).
'dn--un--resolved_HasNames__(Maybe $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V9 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V7, V8) -> (((V8(V2))(V5))(V6)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(CaseTree $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames__(CaseAlt $vars)'('erased', V1, V11)) end, V6, []))(V7))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V10, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V20}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--resolved_HasNames__(CaseAlt $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V1, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> (('case--resolved-8868'('erased', V5, V6, V4, V3, V1, V10, ('un--getNameID'(V3, V1))))(V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E6, E7, E8} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V15 = (('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V1, V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V11, V12, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8)); {'Idris.Core.CaseTree.ConstCase', E11, E12} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = (('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V1, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V18, V23}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12)); {'Idris.Core.CaseTree.DefaultCase', E15} -> (fun (V24) -> fun (V25) -> begin (V26 = (('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V1, V24))(V25))), case V26 of {'Idris.Prelude.Types.Left', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V28}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__((Env Term) $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V7) -> ('dn--un--resolved_HasNames__(Term $vars)'('erased', V1, V7)) end, V4))(V6))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames__((Env Term) $vars)'('erased', V1, V5))(V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V10, V13}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__Transform'(V0, V1) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames__Name'(V0, V3))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--full_HasNames__((Env Term) $vars)'('erased', V0, V4))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = (('dn--un--full_HasNames__(Term $vars)'('erased', V0, V5))(V7))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = (('dn--un--full_HasNames__(Term $vars)'('erased', V0, V6))(V7))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V2, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__Totality'(V0, V1) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('dn--un--full_HasNames__Terminating'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = (('dn--un--full_HasNames__Covering'(V0, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__Terminating'(V0, V1) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = (('dn--un--full_HasNames__PartialReason'(V0, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames__SCCall'(V0, V1, V2) -> begin (V5 = (('dn--un--full_HasNames__Name'(V0, case V1 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames__Pat'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V2} end, V7)) end, ('dn--un--full_HasNames__Name'(V0, V3)), V6)) end, ('dn--un--full_HasNames__Pat'(V0, V4)), V5)) end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V13, V14, V15, V16, V17) -> fun (V18) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V23) -> {'Idris.Prelude.Types.Right', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> {'Idris.Core.CaseTree.PCon', V24, V25, V26, V27, V28} end end end end end} end, fun (V29) -> {'Idris.Prelude.Types.Right', V13} end, V22)) end, ('dn--un--full_HasNames__Name'(V0, V14)), V21)) end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V20)) end, fun (V31) -> {'Idris.Prelude.Types.Right', V16} end, V19)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V32) -> ('dn--un--full_HasNames__Pat'(V0, V32)) end, V17, [])), V18)) end end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V33, V34, V35, V36) -> fun (V37) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V41) -> {'Idris.Prelude.Types.Right', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> {'Idris.Core.CaseTree.PTyCon', V42, V43, V44, V45} end end end end} end, fun (V46) -> {'Idris.Prelude.Types.Right', V33} end, V40)) end, ('dn--un--full_HasNames__Name'(V0, V34)), V39)) end, fun (V47) -> {'Idris.Prelude.Types.Right', V35} end, V38)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('dn--un--full_HasNames__Pat'(V0, V48)) end, V36, [])), V37)) end end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V49, V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', V1} end end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V52, V53, V54, V55) -> fun (V56) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V57) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V59) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V60) -> {'Idris.Prelude.Types.Right', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> {'Idris.Core.CaseTree.PArrow', V61, V62, V63, V64} end end end end} end, fun (V65) -> {'Idris.Prelude.Types.Right', V52} end, V59)) end, ('dn--un--full_HasNames__Name'(V0, V53)), V58)) end, ('dn--un--full_HasNames__Pat'(V0, V54)), V57)) end, ('dn--un--full_HasNames__Pat'(V0, V55)), V56)) end end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V66, V67, V68, V69) -> fun (V70) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V71) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V74) -> {'Idris.Prelude.Types.Right', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> {'Idris.Core.CaseTree.PDelay', V75, V76, V77, V78} end end end end} end, fun (V79) -> {'Idris.Prelude.Types.Right', V66} end, V73)) end, fun (V80) -> {'Idris.Prelude.Types.Right', V67} end, V72)) end, ('dn--un--full_HasNames__Pat'(V0, V68)), V71)) end, ('dn--un--full_HasNames__Pat'(V0, V69)), V70)) end end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V81, V82) -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V84) -> case V84 of {'Idris.Prelude.Types.Left', E24} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V81, V86}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--full_HasNames__Name'(V0, V82)), V83)) end end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V87, V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E28} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V87, V92}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--full_HasNames__(Term $vars)'('erased', V0, V88)), V89)) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__PartialReason'(V0, V1) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--full_HasNames__Name'(V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--full_HasNames__Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__Name'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V9 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V2}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames__GlobalDef'(V0, V1, V2) -> begin (V24 = (('dn--un--full_HasNames__(Term $vars)'('erased', V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V24 of {'Idris.Prelude.Types.Left', E21} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V26) -> begin (V48 = (('dn--un--full_HasNames__Def'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V44 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V48 of {'Idris.Prelude.Types.Left', E44} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V50) -> begin (V72 = (('dn--un--full_HasNames__Totality'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V72 of {'Idris.Prelude.Types.Left', E67} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V74) -> begin (V100 = (('dn--un--full_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('dn--un--full_HasNames__(NameMap $a)'('erased', V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--resolved_HasNames__(NameMap $a)'('erased', V77, V78)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V91 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V100 of {'Idris.Prelude.Types.Left', E90} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V102) -> begin (V128 = (('dn--un--full_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('dn--un--full_HasNames__(NameMap $a)'('erased', V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--resolved_HasNames__(NameMap $a)'('erased', V105, V106)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V120 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V128 of {'Idris.Prelude.Types.Left', E113} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V130) -> begin (V154 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V131) -> fun (V132) -> ('dn--un--full_HasNames__SCCall'(V0, V131, V132)) end end, case V1 of {'Idris.Core.Context.MkGlobalDef', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V153 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V154 of {'Idris.Prelude.Types.Left', E136} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V156) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> {'Idris.Core.Context.MkGlobalDef', V157, V158, V26, V160, V161, V162, V163, V164, V165, V166, V74, V168, V102, V130, V171, V172, V173, V50, V175, V176, V156} end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames__Def'(V0, V1) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames__(CaseTree $vars)'('erased', V0, V4))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--full_HasNames__(CaseTree $vars)'('erased', V0, V5))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> ('nested--13351-9173--in--un--fullNamesPat'(V6, V3, V5, V4, V2, V0, V14)) end, V6, []))(V7))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.PMDef', V2, V3, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('dn--un--full_HasNames__Name'(V0, V27)) end, V23, []))(V26))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('dn--un--full_HasNames__Name'(V0, V31)) end, V24, []))(V26))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.TCon', V18, V19, V20, V21, V22, V30, V34, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V35, V36, V37) -> fun (V38) -> begin (V39 = (('dn--un--full_HasNames__Name'(V0, V37))(V38))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.BySearch', V35, V36, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> fun (V45) -> begin (V46 = (('dn--un--full_HasNames__(Term $vars)'('erased', V0, V42))(V45))), case V46 of {'Idris.Prelude.Types.Left', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Guess', V48, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames__Covering'(V0, V1) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--full_HasNames__(Term $vars)'('erased', V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--full_HasNames__Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__Clause'(V0, V1) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> begin (V7 = (('dn--un--full_HasNames__((Env Term) $vars)'('erased', V0, V3))(V6))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('dn--un--full_HasNames__(Term $vars)'('erased', V0, V4))(V6))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('dn--un--full_HasNames__(Term $vars)'('erased', V0, V5))(V6))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V2, V9, V12, V15}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(Term $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case V5 of {'Idris.Core.Name.Resolved', E3} -> (fun (V6) -> fun (V7) -> begin (V8 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V6}, V1))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, case V11 of {'Idris.Core.Context.MkGlobalDef', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V13 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, {'Idris.Core.Name.Resolved', V6}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', V2} end end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E28, E29, E30, E31} -> (fun (V34, V35, V36, V37) -> fun (V38) -> begin (V40 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V39) -> ('dn--un--full_HasNames__(Term $vars)'('erased', V1, V39)) end, V37, []))(V38))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V34, V35, V36, V42}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30, E31)); {'Idris.Core.TT.Bind', E34, E35, E36, E37} -> (fun (V43, V44, V45, V46) -> fun (V47) -> begin (V49 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V48) -> ('dn--un--full_HasNames__(Term $vars)'('erased', V1, V48)) end, V45))(V47))), case V49 of {'Idris.Prelude.Types.Left', E38} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V51) -> begin (V52 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V46))(V47))), case V52 of {'Idris.Prelude.Types.Left', E40} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V43, V44, V51, V54}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34, E35, E36, E37)); {'Idris.Core.TT.App', E42, E43, E44} -> (fun (V55, V56, V57) -> fun (V58) -> begin (V59 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V56))(V58))), case V59 of {'Idris.Prelude.Types.Left', E45} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V61) -> begin (V62 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V57))(V58))), case V62 of {'Idris.Prelude.Types.Left', E47} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V55, V61, V64}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E42, E43, E44)); {'Idris.Core.TT.As', E49, E50, E51, E52} -> (fun (V65, V66, V67, V68) -> fun (V69) -> begin (V70 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V67))(V69))), case V70 of {'Idris.Prelude.Types.Left', E53} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V72) -> begin (V73 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V68))(V69))), case V73 of {'Idris.Prelude.Types.Left', E55} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V65, V66, V72, V75}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49, E50, E51, E52)); {'Idris.Core.TT.TDelayed', E57, E58, E59} -> (fun (V76, V77, V78) -> fun (V79) -> begin (V80 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V78))(V79))), case V80 of {'Idris.Prelude.Types.Left', E60} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V76, V77, V82}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E57, E58, E59)); {'Idris.Core.TT.TDelay', E62, E63, E64, E65} -> (fun (V83, V84, V85, V86) -> fun (V87) -> begin (V88 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V85))(V87))), case V88 of {'Idris.Prelude.Types.Left', E66} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V90) -> begin (V91 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V86))(V87))), case V91 of {'Idris.Prelude.Types.Left', E68} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V83, V84, V90, V93}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62, E63, E64, E65)); {'Idris.Core.TT.TForce', E70, E71, E72} -> (fun (V94, V95, V96) -> fun (V97) -> begin (V98 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V96))(V97))), case V98 of {'Idris.Prelude.Types.Left', E73} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V94, V95, V100}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70, E71, E72)); _ -> fun (V101) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--full_HasNames__(NameMap $a)'(V0, V1, V2) -> ('nested--13668-9477--in--un--insertAll'('erased', V2, V1, ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--toList'('erased', V2)))).
'dn--un--full_HasNames__(Maybe $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V9 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V7, V8) -> (((V7(V2))(V5))(V6)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(CaseTree $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--full_HasNames__(CaseAlt $vars)'('erased', V1, V11)) end, V6, []))(V7))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V10, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('dn--un--full_HasNames__(Term $vars)'('erased', V1, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V20}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--full_HasNames__(CaseAlt $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames__(CaseTree $vars)'('erased', V1, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = (('un--lookupCtxtExact'(V3, V1))(V7))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Just', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', case V14 of {'Idris.Core.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V16 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5, V10}} end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V3, V4, V5, V10}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E30, E31, E32} -> (fun (V36, V37, V38) -> fun (V39) -> begin (V40 = (('dn--un--full_HasNames__(CaseTree $vars)'('erased', V1, V38))(V39))), case V40 of {'Idris.Prelude.Types.Left', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V36, V37, V42}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30, E31, E32)); {'Idris.Core.CaseTree.ConstCase', E35, E36} -> (fun (V43, V44) -> fun (V45) -> begin (V46 = (('dn--un--full_HasNames__(CaseTree $vars)'('erased', V1, V44))(V45))), case V46 of {'Idris.Prelude.Types.Left', E37} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V43, V48}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35, E36)); {'Idris.Core.CaseTree.DefaultCase', E39} -> (fun (V49) -> fun (V50) -> begin (V51 = (('dn--un--full_HasNames__(CaseTree $vars)'('erased', V1, V49))(V50))), case V51 of {'Idris.Prelude.Types.Left', E40} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V53}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__((Env Term) $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V7) -> ('dn--un--full_HasNames__(Term $vars)'('erased', V1, V7)) end, V4))(V6))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = (('dn--un--full_HasNames__((Env Term) $vars)'('erased', V1, V5))(V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V10, V13}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Show_SizeChange'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__SizeChange'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__SizeChange'(V1, V2)) end end}.
'dn--un--__Impl_Show_SCCall'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__SCCall'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__SCCall'(V1, V2)) end end}.
'dn--un--__Impl_Show_DefFlag'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__DefFlag'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__DefFlag'(V1, V2)) end end}.
'dn--un--__Impl_Show_Def'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__Def'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__Def'(V1, V2)) end end}.
'dn--un--__Impl_Show_Clause'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__Clause'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__Clause'(V1, V2)) end end}.
'dn--un--__Impl_HasNames_Transform'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Transform'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Transform'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Totality'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Totality'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Totality'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Terminating'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Terminating'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Terminating'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_SCCall'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__SCCall'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__SCCall'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Pat'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Pat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Pat'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_PartialReason'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__PartialReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__PartialReason'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Name'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Name'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_GlobalDef'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__GlobalDef'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__GlobalDef'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Def'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Def'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Def'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Covering'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Covering'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Covering'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Clause'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__Clause'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__Clause'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(Term $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__(Term $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames__(Term $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_(NameMap $a)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__(NameMap $a)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames__(NameMap $a)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_(Maybe $a)'(V0, V1) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames__(Maybe $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__(Maybe $a)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_HasNames_(CaseTree $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__(CaseTree $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames__(CaseTree $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_(CaseAlt $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__(CaseAlt $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames__(CaseAlt $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_((Env Term) $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__((Env Term) $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames__((Env Term) $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_Eq_SizeChange'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__SizeChange'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__SizeChange'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SCCall'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__SCCall'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__SCCall'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DefFlag'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__DefFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__DefFlag'(V2, V3)) end end}.
'dn--un--==_Eq__SizeChange'(V0, V1) -> case V0 of {'Idris.Core.Context.Smaller'} -> (fun () -> case V1 of {'Idris.Core.Context.Smaller'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Same'} -> (fun () -> case V1 of {'Idris.Core.Context.Same'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Unknown'} -> (fun () -> case V1 of {'Idris.Core.Context.Unknown'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--==_Eq__SCCall'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V4, V5) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V12, V13)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq__SizeChange'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq__SizeChange'(V16, V17)) end end}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V22, V23)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('dn--un--==_Eq__SizeChange'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('dn--un--/=_Eq__SizeChange'(V26, V27)) end end}, V18, V19)) end end}, V6, V7)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V34, V35)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V36) -> fun (V37) -> ('dn--un--==_Eq__SizeChange'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--/=_Eq__SizeChange'(V38, V39)) end end}, V30, V31)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V44, V45)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V46) -> fun (V47) -> ('dn--un--==_Eq__SizeChange'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--/=_Eq__SizeChange'(V48, V49)) end end}, V40, V41)) end end}, V28, V29)) end end}, case V0 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V50, V51) -> V51 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.MkSCCall', E6, E7} -> (fun (V52, V53) -> V53 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end)).
'dn--un--==_Eq__DefFlag'(V0, V1) -> case V0 of {'Idris.Core.Context.Inline'} -> (fun () -> case V1 of {'Idris.Core.Context.Inline'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Invertible'} -> (fun () -> case V1 of {'Idris.Core.Context.Invertible'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Overloadable'} -> (fun () -> case V1 of {'Idris.Core.Context.Overloadable'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.TCInline'} -> (fun () -> case V1 of {'Idris.Core.Context.TCInline'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.SetTotal', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Context.SetTotal', E1} -> (fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq__TotalReq'(V2, V3)) end(E1)); _ -> 1 end end(E0)); {'Idris.Core.Context.BlockedHint'} -> (fun () -> case V1 of {'Idris.Core.Context.BlockedHint'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Macro'} -> (fun () -> case V1 of {'Idris.Core.Context.Macro'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.PartialEval', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Context.PartialEval', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V24, V25)) end end}, V16, V17)) end end}, V4, V5)) end(E3)); _ -> 1 end end(E2)); {'Idris.Core.Context.AllGuarded'} -> (fun () -> case V1 of {'Idris.Core.Context.AllGuarded'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq__SizeChange'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__SizeChange'(V0, V1)))).
'dn--un--/=_Eq__SCCall'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__SCCall'(V0, V1)))).
'dn--un--/=_Eq__DefFlag'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__DefFlag'(V0, V1)))).
'un--withLogLevel'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V58 = case case case V8 of {'Idris.Core.Context.MkDefs', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V13 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V37 end(E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V51 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V109 = begin (V108 = ('erlang':'put'(V1, case V8 of {'Idris.Core.Context.MkDefs', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> case V63 of {'Idris.Core.Options.MkOptions', E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93) -> case V87 of {'Idris.Core.Options.MkSessionOpts', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> {'Idris.Core.Context.MkDefs', V59, V60, V61, V62, {'Idris.Core.Options.MkOptions', V85, V86, {'Idris.Core.Options.MkSessionOpts', V94, V95, V96, V97, V98, V99, V100, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V2))(V58)), V102, V103, V104, V105, V106, V107}, V88, V89, V90, V91, V92, V93}, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V108} end), case V109 of {'Idris.Prelude.Types.Left', E100} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V111) -> begin (V112 = (V3(V4))), case V112 of {'Idris.Prelude.Types.Left', E102} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V114) -> begin (V116 = begin (V115 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V115} end), case V116 of {'Idris.Prelude.Types.Left', E104} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V118) -> begin (V169 = begin (V168 = ('erlang':'put'(V1, case V118 of {'Idris.Core.Context.MkDefs', E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> case V123 of {'Idris.Core.Options.MkOptions', E132, E133, E134, E135, E136, E137, E138, E139, E140} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153) -> case V147 of {'Idris.Core.Options.MkSessionOpts', E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154} -> (fun (V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167) -> {'Idris.Core.Context.MkDefs', V119, V120, V121, V122, {'Idris.Core.Options.MkOptions', V145, V146, {'Idris.Core.Options.MkSessionOpts', V154, V155, V156, V157, V158, V159, V160, V58, V162, V163, V164, V165, V166, V167}, V148, V149, V150, V151, V152, V153}, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144} end(E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E132, E133, E134, E135, E136, E137, E138, E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V168} end), case V169 of {'Idris.Prelude.Types.Left', E155} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V171) -> {'Idris.Prelude.Types.Right', V114} end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--visibleInAny'(V0, V1, V2) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V10, V11, V12)) end end end end end}, fun (V13) -> ('un--visibleIn'(V13, V1, V2)) end))(V0)).
'un--visibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V2 of {'Idris.Core.TT.Private'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--updateTy'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> begin (V59 = ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkGlobalDef', V38, V39, V2, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V59 of {'Idris.Prelude.Types.Left', E52} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> begin (V38 = {'Idris.Prelude.Types.Just', V37}), (('case--case block in updateDef-13991'(V2, V1, V0, V7, V37, V38, (V2(case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V56 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unsetFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V61 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V39) -> ('dn--un--/=_Eq__DefFlag'(V39, V3)) end, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V51 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V83 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.MkGlobalDef', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V61, V74, V75, V76, V77, V78, V79, V80, V81, V82} end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V83 of {'Idris.Prelude.Types.Left', E73} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V85) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--toResolvedNames'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V2 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V10(case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--toFullNames'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V2 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V9(case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sndName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V9 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V14 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V40 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setWorkingDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V66 = begin (V65 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}))(V2))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E4} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V68) -> case V68 of {'Idris.Prelude.Types.Just', E6} -> (fun (V69) -> begin (V114 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> case V74 of {'Idris.Core.Options.MkOptions', E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104) -> case V96 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113) -> {'Idris.Core.Context.MkDefs', V70, V71, V72, V73, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V69, V106, V107, V108, V109, V110, V111, V112, V113}, V97, V98, V99, V100, V101, V102, V103, V104}, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95} end(E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V114} end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V7 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V33, V34, V35, V36, V37, V38, V39, [V1 | V40], V41, V42, V43}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisibility'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V60 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> {'Idris.Core.Context.MkGlobalDef', V39, V40, V41, V42, V43, V44, V45, V46, V47, V3, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V60 of {'Idris.Prelude.Types.Left', E52} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUniqueSearch'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in setUniqueSearch-17084'(V3, V2, V1, V0, V8, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUnboundImplicits'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, {'Idris.Core.Options.MkElabDirectives', V42, V1, V44, V45, V46, V47}, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTotality'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V60 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> {'Idris.Core.Context.MkGlobalDef', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V3, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V60 of {'Idris.Prelude.Types.Left', E52} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTerminating'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V62 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> case V49 of {'Idris.Core.TT.MkTotality', E52, E53} -> (fun (V60, V61) -> {'Idris.Core.Context.MkGlobalDef', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, {'Idris.Core.TT.MkTotality', V3, V61}, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V62 of {'Idris.Prelude.Types.Left', E54} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSourceDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V1, V44, V45, V46, V47, V48, V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSizeChange'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V60 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> {'Idris.Core.Context.MkGlobalDef', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V3} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V60 of {'Idris.Prelude.Types.Left', E52} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSession'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V42 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V1, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setRewrite'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V3, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('un--checkUnambig'(V0, V1, V2, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V41 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V15, V16, V17, V18, ('Idris.Idris2.Core.Options':'un--setRewrite'(V14, V11, V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefixRecordProjections'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, {'Idris.Core.Options.MkElabDirectives', V42, V43, V44, V45, V46, V1}, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefix'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V44, V45, V1, V47, V48, V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPair'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--checkUnambig'(V0, V1, V2, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('un--checkUnambig'(V0, V1, V3, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('un--checkUnambig'(V0, V1, V4, V5))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V45 = ('erlang':'put'(V0, case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', V19, V20, V21, V22, ('Idris.Idris2.Core.Options':'un--setPair'(V12, V15, V18, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V45} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPPrint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V42 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V1, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOutputDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V44, V1, V46, V47, V48, V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOpenHints'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V1, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNextEntry'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V7 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V33, V1, V35, V36, V37, V38, V39, V40, V41, V42, V43}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNestedNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V1, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNamedCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> begin (V59 = ('un--addDef'(V0, V1, case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkGlobalDef', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, {'Idris.Prelude.Types.Just', V2}, V58} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V59 of {'Idris.Prelude.Types.Left', E52} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNameFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtName'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of [E30 | E31] -> (fun (V38, V39) -> case V38 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V40, V41) -> case V41 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V42, V43) -> case V39 of [] -> begin (V66 = [V3 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V44) -> ('dn--un--/=_Eq__DefFlag'(V44, V3)) end, case V43 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V56 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), begin (V88 = ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V42}, case V43 of {'Idris.Core.Context.MkGlobalDef', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> {'Idris.Core.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V66, V79, V80, V81, V82, V83, V84, V85, V86, V87} end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V88 of {'Idris.Prelude.Types.Left', E78} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V91) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V91)) end, V37))}, V4)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V92) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V92)) end, V37))}, V4)) end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V93) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V93)) end, V37))}, V4)) end end(E30, E31)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V94) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V94)) end, V37))}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V1, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setMutWith'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in setMutWith-16513'(V3, V2, V1, V0, V8, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLogTimings'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V56 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V35 of {'Idris.Core.Options.MkSessionOpts', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, {'Idris.Core.Options.MkSessionOpts', V42, V43, V44, V45, V46, V47, V48, V49, V1, V51, V52, V53, V54, V55}, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V56} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLinearCheck'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> begin (V59 = ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkGlobalDef', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V2, V55, V56, V57, V58} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V59 of {'Idris.Prelude.Types.Left', E52} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromString'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromString'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromInteger'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromChar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromChar'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V61 = [V3 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V39) -> ('dn--un--/=_Eq__DefFlag'(V39, V3)) end, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V51 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), begin (V83 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.MkGlobalDef', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V61, V74, V75, V76, V77, V78, V79, V80, V81, V82} end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V83 of {'Idris.Prelude.Types.Left', E73} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V85) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExternal'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in setExternal-17219'(V3, V2, V1, V0, V8, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExtension'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setExtension'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetermining'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in setDetermining-16873'(V3, V2, V1, V0, V8, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetags'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in setDetags-16983'(V3, V2, V1, V0, V8, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDefaultTotalityOption'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, {'Idris.Core.Options.MkElabDirectives', V42, V43, V1, V45, V46, V47}, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDebugElabCheck'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V56 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V35 of {'Idris.Core.Options.MkSessionOpts', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, {'Idris.Core.Options.MkSessionOpts', V42, V43, V44, V45, V46, V47, V48, V49, V50, V1, V52, V53, V54, V55}, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V56} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCtxt'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V1, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCovering'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> begin (V62 = ('un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> case V49 of {'Idris.Core.TT.MkTotality', E52, E53} -> (fun (V60, V61) -> {'Idris.Core.Context.MkGlobalDef', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, {'Idris.Core.TT.MkTotality', V60, V3}, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V62 of {'Idris.Prelude.Types.Left', E54} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> begin (V59 = ('un--addDef'(V0, V1, case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkGlobalDef', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, {'Idris.Prelude.Types.Just', V2}, V57, V58} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V59 of {'Idris.Prelude.Types.Left', E52} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCG'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V56 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V35 of {'Idris.Core.Options.MkSessionOpts', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, {'Idris.Core.Options.MkSessionOpts', V42, V43, V44, V1, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55}, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V56} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setBuildDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V1, V45, V46, V47, V48, V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAutoImplicitLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, {'Idris.Core.Options.MkElabDirectives', V42, V43, V44, V45, V1, V47}, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAmbigLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, {'Idris.Core.Options.MkElabDirectives', V42, V43, V44, V1, V46, V47}, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAllPublic'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V7 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V33, V34, V35, V36, V37, V38, V39, V40, V1, V42, V43}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--returnDef'(V0, V1, V2) -> case V0 of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}}; 0 -> ('case--returnDef-6607'(V2, V1, case V2 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolved'(V0, V1) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V2, V3) -> fun (V4) -> fun (V5) -> ((V3(V4))(V5)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveName'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E34} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V2} end end(E34)); _ -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--getPosition'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V38, V39) -> begin (V40 = ('un--setCtxt'(V0, V39, V4))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', V38} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--resetFirstEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V80 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V6 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', case case V5 of {'Idris.Core.Context.MkDefs', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V43 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> V70 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42}, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V80} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--refersToRuntime'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Data.NameMap':'un--empty'('erased')) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V15 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--refersTo'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Data.NameMap':'un--empty'('erased')) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--reducibleInAny'(V0, V1, V2) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V10, V11, V12)) end end end end end}, fun (V13) -> ('un--reducibleIn'(V13, V1, V2)) end))(V0)).
'un--reducibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Core.Name.UN', E2} -> (fun (V5) -> case V2 of {'Idris.Core.TT.Export'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); {'Idris.Core.TT.Private'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); _ -> 0 end end(E2)); {'Idris.Core.Name.RF', E3} -> (fun (V6) -> case V2 of {'Idris.Core.TT.Export'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); {'Idris.Core.TT.Private'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); _ -> 0 end end(E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--recordWarning'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, [V1 | V32]} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--prettyName'(V0, V1) -> case V1 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V11 = ('un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames__Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames__Name'(V9, V10)) end end}, {'Idris.Core.Name.Resolved', V4}, V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = (('un--prettyName'(V0, V13))(V6))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = (('un--prettyName'(V0, V3))(V6))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V16, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<","/utf8>>, V19))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1))} end end end(E0, E1)); {'Idris.Core.Name.CaseBlock', E10, E11} -> (fun (V21, V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"case block in "/utf8>>, V21))} end end(E10, E11)); {'Idris.Core.Name.WithBlock', E12, E13} -> (fun (V24, V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"with block in "/utf8>>, V24))} end end(E12, E13)); {'Idris.Core.Name.NS', E14, E15} -> (fun (V27, V28) -> ('un--prettyName'(V0, V28)) end(E14, E15)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1))} end end.
'un--newEntry'(V0, V1) -> begin (V13 = case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V25 = case V1 of {'Idris.Core.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V18 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V25))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> begin (V36 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V13, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'('erased', V30)))) of 0 -> begin (V32 = begin (V31 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArrayCopy'('erased', ((('Idris.Idris2.Erlang.Data.IOArray':'un--max'('erased', V30)) + ('un--Grow'())) rem 9223372036854775808), V30))(V26))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> begin (V35 = ('erlang':'put'(V25, V34))), {'Idris.Prelude.Types.Right', V35} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V36 of {'Idris.Prelude.Types.Left', E26} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, case V1 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkContext', V39, ((V13 + 1) rem 9223372036854775808), ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V0, V13, V41)), ('un--addPossible'(V0, V13, V42)), V43, V44, V45, V46, V47, V48, V49} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newDef'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Core.Context.MkGlobalDef', V0, V1, V4, [], [], [], [], V2, V3, V5, ('Idris.Idris2.Core.TT':'un--unchecked'()), [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 1, 1, 1, V6, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, []}.
'un--newAlias'(V0, V1, V2, V3) -> begin (V4 = (('un--getPosition'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', case V8 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.Context.MkContext', V9, V10, V11, ('un--addAlias'(V0, V1, V7, V12)), V13, V14, V15, V16, V17, V18, V19} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupTyName'(V0, V1, V2) -> ('un--lookupNameBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupTyExact'(V0, V1, V2) -> ('un--lookupExactBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupNameBy'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--lookupCtxtName'(V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V11, (V1(V12))}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupExactBy'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--lookupCtxtExact'(V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Just', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (V1(V8))}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupDefTyExact'(V0, V1, V2) -> ('un--lookupExactBy'('erased', fun (V3) -> {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V27 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V0, V1, V2)).
'un--lookupDefName'(V0, V1, V2) -> ('un--lookupNameBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupDefExact'(V0, V1, V2) -> ('un--lookupExactBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupCtxtName'(V0, V1) -> ('case--lookupCtxtName-7359'(V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--lookupCtxtExactI'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> ('case--lookupCtxtExactI-6675'(V2, V1, ('Idris.Idris2.Data.IntMap':'un--lookup'('erased', V2, case V1 of {'Idris.Core.Context.MkContext', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E11)); _ -> ('case--lookupCtxtExactI-6750'(V1, V0, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--lookupCtxtExact'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E5} -> (fun (V2) -> ('case--lookupCtxtExact-6774'(V2, V1, ('Idris.Idris2.Data.IntMap':'un--lookup'('erased', V2, case V1 of {'Idris.Core.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E5)); _ -> fun (V14) -> begin (V15 = (('un--lookupCtxtExactI'(V0, V1))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Prelude.Types.Just', E2} -> (fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V19, V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--lookupContextEntry'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> ('case--lookupContextEntry-6965'(V2, V1, ('Idris.Idris2.Data.IntMap':'un--lookup'('erased', V2, case V1 of {'Idris.Core.Context.MkContext', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E11)); _ -> ('case--lookupContextEntry-7042'(V1, V0, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--lazyActive'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, {'Idris.Core.Options.MkElabDirectives', V1, V43, V44, V45, V46, V47}, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V98, V99, V100)) end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V103, V104, V105)) end end end end end}, fun (V106) -> ('nested--23793-18879--in--un--visible'(V1, V0, V106)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--allParents'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', case V6 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V36 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case case V6 of {'Idris.Core.Context.MkDefs', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V59 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V92 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isUnboundImplicits'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V35 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7} -> (fun (V41, V42, V43, V44, V45, V46) -> V42 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isPrefixRecordProjections'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case case case V4 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V9 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V34 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7} -> (fun (V40, V41, V42, V43, V44, V45) -> V45 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> begin (V47 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V47} end end, V1)).
'un--isPairType'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--isPairType-21050'(V1, V0, V6, case case V6 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V11 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V37 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isLazyActive'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V35 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7} -> (fun (V41, V42, V43, V44, V45, V46) -> V41 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isExtension'(V0, V1) -> ('Idris.Idris2.Core.Options':'un--isExtension'(V0, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--isEqualTy'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--isEqualTy-21167'(V1, V0, V6, case case V6 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V11 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V38 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isAllPublic'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V40 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initSize'() -> 10000.
'un--initHash'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V32 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, 5381, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V32} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initDefs'(V0) -> begin (V1 = ('un--initCtxt'(V0))), case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkDefs', V3, [], ('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()), [], ('Idris.Idris2.Core.Options':'un--defaults'()), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), 100, ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), [], [], ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), [], ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), 5381, [], [], [], [], [], ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.StringMap':'un--empty'('erased')), []}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxtS'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'('erased', V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Context.Arr'}, V5, V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkContext', 0, 0, ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.StringMap':'un--empty'('erased')), V8, 0, ('Idris.Idris2.Data.IntMap':'un--empty'('erased')), [('Idris.Idris2.Core.Name.Namespace':'un--partialEvalNS'()) | []], 1, 1, ('Idris.Idris2.Data.NameMap':'un--empty'('erased'))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxt'(V0) -> ('un--initCtxtS'(('un--initSize'()), V0)).
'un--inCurrentNS'(V0, V1) -> case V1 of {'Idris.Core.Name.UN', E0} -> (fun (V2) -> fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V10 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.UN', V2}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.Name.CaseBlock', E29, E30} -> (fun (V34, V35) -> fun (V36) -> begin (V38 = begin (V37 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V40 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V43 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29, E30)); {'Idris.Core.Name.WithBlock', E59, E60} -> (fun (V67, V68) -> fun (V69) -> begin (V71 = begin (V70 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V70} end), case V71 of {'Idris.Prelude.Types.Left', E61} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V73 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V76 end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E59, E60)); {'Idris.Core.Name.Nested', E89, E90} -> (fun (V100, V101) -> fun (V102) -> begin (V104 = begin (V103 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V103} end), case V104 of {'Idris.Prelude.Types.Left', E91} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V106 of {'Idris.Core.Context.MkDefs', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132) -> V109 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90)); {'Idris.Core.Name.MN', E119, E120} -> (fun (V133, V134) -> fun (V135) -> begin (V137 = begin (V136 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V136} end), case V137 of {'Idris.Prelude.Types.Left', E121} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V139) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V139 of {'Idris.Core.Context.MkDefs', E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V142 end(E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120)); {'Idris.Core.Name.DN', E149, E150} -> (fun (V166, V167) -> fun (V168) -> begin (V170 = begin (V169 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V169} end), case V170 of {'Idris.Prelude.Types.Left', E151} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V172 of {'Idris.Core.Context.MkDefs', E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178} -> (fun (V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198) -> V175 end(E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149, E150)); {'Idris.Core.Name.RF', E179} -> (fun (V199) -> fun (V200) -> begin (V202 = begin (V201 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V201} end), case V202 of {'Idris.Prelude.Types.Left', E180} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V204) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V204 of {'Idris.Core.Context.MkDefs', E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207} -> (fun (V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230) -> V207 end(E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179)); _ -> fun (V231) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--holeInit'(V0) -> {'Idris.Core.Context.MkHoleFlags', V0, 1}.
'un--hideName'(V0, V1) -> case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V12))} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hide'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of [E30 | E31] -> (fun (V37, V38) -> case V37 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V39, V40) -> case V38 of [] -> begin (V67 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V39, V41)), V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V67} end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V68) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V68)) end, V36))}, V3)) end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V69) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V69)) end, V36))}, V3)) end end(E30, E31)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V70) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V70)) end, V36))}, V3)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hasFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V39) -> fun (V40) -> ('dn--un--==_Eq__DefFlag'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('dn--un--/=_Eq__DefFlag'(V41, V42)) end end}, V3, case V38 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V54 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getWorkingDir'(V0) -> begin (V29 = begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case V31 of {'Idris.Prelude.Types.Just', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Right', V32} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisible'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V39 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisibility'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Right', case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V47 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUserHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V50 = ('Idris.Idris2.Data.List':'un--sort'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord__Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord__Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord__Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord__Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord__Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord__Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord__Name'(V22, V23)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V46 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V51) -> fun (V52) -> ('nested--17860-13489--in--un--isHole'(V0, V5, V51, V52)) end end, V50))(V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTotality'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Right', case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V48 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSizeChange'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Right', case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V58 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSession'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V34 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSearchData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = ('un--lookupDefExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E30} -> (fun (V38) -> case V38 of {'Idris.Core.Context.TCon', E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46) -> begin (V51 = ('un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V47) -> fun (V48) -> ('dn--un--full_HasNames__Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--resolved_HasNames__Name'(V49, V50)) end end}, V3, V4))), case V51 of {'Idris.Prelude.Types.Left', E39} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V53) -> begin (V81 = begin (V54 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V39, V40, V41, V42, V43, V44, V45, V46}}), ('case--case block in getSearchData-16202'(V3, V2, V1, V0, V8, V39, V40, V41, V44, V45, V46, V43, V42, V54, V53, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V53, case V8 of {'Idris.Core.Context.MkDefs', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V62 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), case V2 of 0 -> begin (V110 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V82) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V82)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V83) -> ('nested--20766-16138--in--un--isDefault'(V3, V2, V1, V0, V83)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V8 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> V92 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 1, V110} | []]}} end; 1 -> begin (V138 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V111) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V111)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V8 of {'Idris.Core.Context.MkDefs', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V121 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V167 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V139) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V139)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V140) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--20766-16138--in--un--isDefault'(V3, V2, V1, V0, V140)))) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V8 of {'Idris.Core.Context.MkDefs', E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144} -> (fun (V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166) -> V149 end(E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), begin (V170 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V168) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V168)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V169) -> ('nested--20766-16139--in--un--direct'(V3, V2, V1, V0, V169)) end, V81))))), begin (V173 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V171) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V171)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V172) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--20766-16139--in--un--direct'(V3, V2, V1, V0, V172)))) end, V81))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V42, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V174) -> ('Idris.Idris2.Data.List':'un--isCons'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V174)))) end, [{'Idris.Builtin.MkPair', 1, V138} | [{'Idris.Builtin.MkPair', 1, V167} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Basics':'un--not'(case V43 of {'Idris.Core.Context.MkTypeFlags', E145, E146} -> (fun (V175, V176) -> V175 end(E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V170} | [{'Idris.Builtin.MkPair', 0, V173} | []]]]]))}} end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V3}, V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V3}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getRewrite'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkRewriteNs', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V13 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V40 end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getResolvedAs'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrimitiveNames'(V0, V1) -> begin (V2 = ('un--fromIntegerName'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('un--fromStringName'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('un--fromCharName'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--catMaybes'('erased', [V4 | [V7 | [V10 | []]]]))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getPosition'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V1}} end end(E11)); _ -> ('case--getPosition-6275'(V1, V0, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--getPPrint'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V33 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextTypeTag'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V33 = begin (V32 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, ((V12 + 1) rem 9223372036854775808), V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V42 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V33 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNestedNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNameID'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E11)); _ -> ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end.
'un--getNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getImported'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V23 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFullName'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V2) -> fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E31} -> (fun (V37) -> {'Idris.Prelude.Types.Right', case V37 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V39 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V2}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V59) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--getFnName'(V0) -> case V0 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('case--getFnName-7631'(V1, V2, V3, V5, V4, ('Idris.Idris2.Core.TT':'un--getFn'('erased', V4)))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDirs'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V32 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V7} end, case case case V6 of {'Idris.Core.Context.MkDefs', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V12 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V36 end(E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V47 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V57) -> ('nested--23331-18436--in--un--getDir'(V1, V0, V57)) end, case V6 of {'Idris.Core.Context.MkDefs', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V77 end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDefaultTotalityOption'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V35 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7} -> (fun (V41, V42, V43, V44, V45, V46) -> V43 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContent'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getAutoImplicitLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V35 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7} -> (fun (V41, V42, V43, V44, V45, V46) -> V45 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAmbigLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V35 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7} -> (fun (V41, V42, V43, V44, V45, V46) -> V44 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--full'(V0, V1) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V2, V3) -> fun (V4) -> fun (V5) -> ((V2(V4))(V5)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fstName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V14 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V40 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromStringName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V38 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4} -> (fun (V41, V42, V43) -> V42 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromIntegerName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V38 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4} -> (fun (V41, V42, V43) -> V41 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromCharName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V38 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4} -> (fun (V41, V42, V43) -> V43 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findSetTotal'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Core.Context.SetTotal', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findSetTotal'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extendNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V1)), V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpStaging'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V73 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Staging area: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V34, V35)) end end}, ('Idris.Idris2.Data.IntMap':'un--keys'('erased', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V36 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V68 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))(V1))), {'Idris.Prelude.Types.Right', V73} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames__Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames__Name'(V9, V10)) end end}, V1, V2))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V40 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Data.NameMap':'un--delete'('erased', V13, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V40} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V33, V1)) end, V8)), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--depth'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V37 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--defaultPI'() -> {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 1}.
'un--defaultFlags'() -> {'Idris.Core.Context.MkTypeFlags', 1, 1}.
'un--decode'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Context.Coded', E0} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__GlobalDef'(V8, V5))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> begin (V12 = ('un--getContent'(V0))), begin (V14 = begin (V13 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V17 = ('dn--un--resolved_HasNames__GlobalDef'(V0, V11, V5))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> begin (V21 = case V2 of 0 -> begin (V20 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V16, V1, {'Idris.Core.Context.Decoded', V19}))(V5))), {'Idris.Prelude.Types.Right', V20} end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.Prelude.Types.Left', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Right', V19} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.Context.Decoded', E11} -> (fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', V24} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commitCtxt'(V0) -> ('case--commitCtxt-7511'(V0, case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--commit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V32 = (('un--commitCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), case V32 of {'Idris.Prelude.Types.Left', E28} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V34) -> ('un--setCtxt'(V0, V34, V1)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, ('Idris.Idris2.Data.NameMap':'un--delete'('erased', V1, V29)), V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearSavedHints'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V32 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, [], [], V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V32} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearDefs'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V2 of {'Idris.Core.Context.MkContext', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V28, V29, V30, V31, V32, V33, V34, V35, V36, 0, V38}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--clearCtxt'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('un--initDefs'(V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V87 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, ('nested--17339-13006--in--un--resetElab'(V0, case V5 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V39 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, case V5 of {'Idris.Core.Context.MkDefs', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V85 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V87} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkUnambig'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = ('un--lookupDefName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V3)); [E30 | E31] -> (fun (V37, V38) -> case V37 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V39, V40) -> case V40 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> case V38 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V41}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V43) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V43)) end, V36))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44)) end, V36))}, V3)) end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V45)) end, V36))}, V3)) end end(E30, E31)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)) end, V36))}, V3)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--canonicalName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V3)); [E30 | E31] -> (fun (V37, V38) -> case V37 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V39, V40) -> case V40 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> case V38 of [] -> {'Idris.Prelude.Types.Right', V39}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V43) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V43)) end, V36))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44)) end, V36))}, V3)) end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V45)) end, V36))}, V3)) end end(E30, E31)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)) end, V36))}, V3)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--branchCtxt'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, (1 + V7), V8, V9, V10, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--branch'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V32 = ('un--branchCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))), case V32 of {'Idris.Prelude.Types.Left', E28} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V34) -> begin (V35 = ('un--setCtxt'(V0, V34, V1))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> {'Idris.Prelude.Types.Right', V5} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--allNames'(V0) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V1) -> ('dn--un--full_HasNames__Name'(V0, V1)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V2) -> {'Idris.Core.Name.Resolved', V2} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range__$a'('erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Num.dn--un--__mkIntegral', {'Idris.Prelude.Num.dn--un--__mkNum', fun (V3) -> fun (V4) -> ((V3 + V4) rem 9223372036854775808) end end, fun (V5) -> fun (V6) -> ((V5 * V6) rem 9223372036854775808) end end, fun (V7) -> V7 end}, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral__Int'(V10, V11)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V14, V15)) end end}, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V28, V29)) end end}, {'Idris.Prelude.Num.dn--un--__mkNeg', {'Idris.Prelude.Num.dn--un--__mkNum', fun (V30) -> fun (V31) -> ((V30 + V31) rem 9223372036854775808) end end, fun (V32) -> fun (V33) -> ((V32 * V33) rem 9223372036854775808) end end, fun (V34) -> V34 end}, fun (V35) -> ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Int'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V36, V37)) end end}}}, 1, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V39 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 1)))))), [])).
'un--aliasName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--aliasName-13220'(V1, V0, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V1, {'Idris.Builtin.MkUnit'}, V29)), V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addTransform'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--addTransform-17843'(V2, V1, V0, V7, ('un--getFnName'(V2))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addToSave'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = (('dn--un--full_HasNames__Name'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> begin (V62 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> {'Idris.Core.Context.MkDefs', V36, V37, V38, V39, V40, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V35, {'Idris.Builtin.MkUnit'}, V41)), V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V35, {'Idris.Builtin.MkUnit'}, V57)), V58, V59, V60, V61} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V62} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPossible'(V0, V1, V2) -> ('case--addPossible-6054'(V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--addPkgDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V44, V45, V46, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V47, [V1 | []])), V48, V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPkg'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V56 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V35 of {'Idris.Core.Options.MkSessionOpts', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, {'Idris.Core.Options.MkSessionOpts', V42, V43, V44, V45, V46, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V47, [V1 | []])), V48, V49, V50, V51, V52, V53, V54, V55}, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V56} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames__Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames__Name'(V9, V10)) end end}, V1, V2))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V40 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V13, {'Idris.Builtin.MkUnit'}, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V40} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addNameDirective'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V2, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V38 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V11, V3, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addName'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E34} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V2} end end(E34)); _ -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V35 = (('un--newEntry'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V38, V39) -> begin (V40 = ('un--setCtxt'(V0, V39, V4))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', V38} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--addMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, [V1 | V8], V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLogLevel'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V56 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V35 of {'Idris.Core.Options.MkSessionOpts', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, {'Idris.Core.Options.MkSessionOpts', V42, V43, V44, V45, V46, V47, V48, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V1))(V49)), V50, V51, V52, V53, V54, V55}, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V56} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLibDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V44, V45, V46, V47, V48, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V49, [V1 | []])), V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addImported'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, [V1 | V24], V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHintFor'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V15 = ('un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('dn--un--full_HasNames__Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--resolved_HasNames__Name'(V13, V14)) end end}, V2, V6))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V22 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('dn--un--full_HasNames__Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('dn--un--resolved_HasNames__Name'(V20, V21)) end end}, V3, V6))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V51 = ('case--addHintFor-17354'(V5, V4, V3, V2, V1, V0, V10, V17, V24, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V17, case V10 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V32 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), case V5 of 0 -> begin (V78 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> {'Idris.Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V17, [{'Idris.Builtin.MkPair', V24, V4} | V51], V59)), V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V78} end; 1 -> begin (V105 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> {'Idris.Core.Context.MkDefs', V79, V80, V81, V82, V83, V84, V85, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V17, [{'Idris.Builtin.MkPair', V24, V4} | V51], V86)), V87, V88, [{'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V24, V4}} | V89], V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V105} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHashWithNames'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--toFullNames'('erased', V1, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--addHash'('erased', V1, V2, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHash'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V63 = ('erlang':'put'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, case V2 of {'Idris.Core.Hash.dn--un--__mkHashable', E28, E29} -> (fun (V35, V36) -> ((V36(case V8 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V52 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addGlobalHint'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V12 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('dn--un--full_HasNames__Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames__Name'(V10, V11)) end end}, V1, V3))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V41 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V14, V2, V23)), V24, V25, [{'Idris.Builtin.MkPair', V14, V2} | V26], V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addExtraDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V44, V45, V46, V47, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V48, [V1 | []])), V49, V50}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addEntry'(V0, V1, V2) -> ('case--addEntry-6483'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(case V2 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)))))).
'un--addDirective'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--addDirective-18348'(V0, V2, V1, V7, ('Idris.Idris2.Core.Options':'un--getCG'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--addCtxt'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V37, V38) -> begin (V66 = begin (V65 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkDefs', V38, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E58} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V68) -> begin (V91 = begin (V69 = {'Idris.Builtin.MkPair', V37, V38}), (('case--case block in addDef-13633'(V2, V1, V0, V7, V37, V38, V69, V68, case V2 of {'Idris.Core.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V87 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end), case V91 of {'Idris.Prelude.Types.Left', E81} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V93) -> {'Idris.Prelude.Types.Right', V37} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDataDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V42, V43, V44, V45, V46, V47, V48, V49, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V50, [V1 | []]))}, V34, V35, V36, V37, V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCtxt'(V0, V1, V2) -> ('case--addCtxt-6361'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(case V2 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)))))).
'un--addContextEntry'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--addEntry'(V1, {'Idris.Core.Context.Coded', V2}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V37, V38) -> begin (V66 = begin (V65 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkDefs', V38, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E58} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V68) -> {'Idris.Prelude.Types.Right', V37} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addContextAlias'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V63 = ('un--newAlias'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V37 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V63 of {'Idris.Prelude.Types.Left', E56} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V65) -> begin (V92 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> {'Idris.Core.Context.MkDefs', V65, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V92} end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addBuiltin'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--addDef'(V1, V2, {'Idris.Core.Context.MkGlobalDef', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3, [], [], [], [], ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), [], {'Idris.Core.TT.Public'}, V4, [{'Idris.Core.Context.Inline'} | []], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 1, 1, 0, {'Idris.Core.Context.Builtin', V0, V5}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, []}, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addAlias'(V0, V1, V2, V3) -> ('case--addAlias-6115'(V3, V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--Grow'() -> ('un--initSize'()).
