-module('Idris.Idris2.Erlang.Types.Atom').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--2178-3542--in--un--atomToDecls'/2,
  'un--generateAtomHelpers'/1
]).
'nested--2178-3542--in--un--atomToDecls'(V0, V1) -> begin (V2 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"A_"/utf8>>, V1))), [{'Idris.Language.Reflection.TTImp.IClaim', {'Idris.Language.Reflection.TT.EmptyFC'}, {'Idris.Language.Reflection.TT.MW'}, {'Idris.Language.Reflection.TT.Private'}, [{'Idris.Language.Reflection.TTImp.Inline'} | []], {'Idris.Language.Reflection.TTImp.MkTy', {'Idris.Language.Reflection.TT.EmptyFC'}, {'Idris.Language.Reflection.TT.UN', V2}, {'Idris.Language.Reflection.TTImp.IVar', {'Idris.Language.Reflection.TT.MkFC', <<"Erlang/Types/Atom.idr"/utf8>>, {'Idris.Builtin.MkPair', 38, 73}, {'Idris.Builtin.MkPair', 38, 80}}, {'Idris.Language.Reflection.TT.UN', <<"ErlAtom"/utf8>>}}}} | [{'Idris.Language.Reflection.TTImp.IDef', {'Idris.Language.Reflection.TT.EmptyFC'}, {'Idris.Language.Reflection.TT.UN', V2}, [{'Idris.Language.Reflection.TTImp.PatClause', {'Idris.Language.Reflection.TT.EmptyFC'}, {'Idris.Language.Reflection.TTImp.IVar', {'Idris.Language.Reflection.TT.EmptyFC'}, {'Idris.Language.Reflection.TT.UN', V2}}, {'Idris.Language.Reflection.TTImp.IApp', {'Idris.Language.Reflection.TT.MkFC', <<"Erlang/Types/Atom.idr"/utf8>>, {'Idris.Builtin.MkPair', 42, 18}, {'Idris.Builtin.MkPair', 42, 55}}, {'Idris.Language.Reflection.TTImp.IVar', {'Idris.Language.Reflection.TT.MkFC', <<"Erlang/Types/Atom.idr"/utf8>>, {'Idris.Builtin.MkPair', 42, 18}, {'Idris.Builtin.MkPair', 42, 24}}, {'Idris.Language.Reflection.TT.UN', <<"MkAtom"/utf8>>}}, {'Idris.Language.Reflection.TTImp.IPrimVal', {'Idris.Language.Reflection.TT.EmptyFC'}, {'Idris.Language.Reflection.TT.Str', V1}}}} | []]} | []]] end.
'un--generateAtomHelpers'(V0) -> ('Idris.Idris2.Language.Reflection':'un--declare'(('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__List'('erased', 'erased', V0, fun (V1) -> ('nested--2178-3542--in--un--atomToDecls'(V0, V1)) end)))).
