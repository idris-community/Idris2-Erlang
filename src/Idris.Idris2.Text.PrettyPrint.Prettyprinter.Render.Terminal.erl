-module('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Render.Terminal').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--renderString-7460'/6,
  'case--case block in renderString,go-7356'/7,
  'case--renderString,go-7331'/7,
  'case--renderString,go-7258'/7,
  'case--renderString,pop-7133'/4,
  'case--renderString,peek-7088'/4,
  'nested--2523-7059--in--un--writeOutput'/5,
  'nested--2523-7056--in--un--push'/5,
  'nested--2523-7058--in--un--pop'/4,
  'nested--2523-7057--in--un--peek'/4,
  'nested--2523-7060--in--un--go'/5,
  'un--underline'/0,
  'un--strike'/0,
  'un--renderString'/1,
  'un--renderIO'/1,
  'un--putDoc'/1,
  'un--italic'/0,
  'un--color'/1,
  'un--bold'/0,
  'un--bgColor'/1,
  'un--AnsiStyle'/0
]).
'case--renderString-7460'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V6)) end; [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor__(ST $s)'('erased', 'erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> {'Idris.Prelude.Types.Just', V14} end, fun (V15) -> ('erlang':'get'(V3)) end)); _ -> fun (V16) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V16)) end end end(E0, E1)); _ -> fun (V17) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V17)) end end.
'case--case block in renderString,go-7356'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V9) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Control.ANSI.SGR.Reset'} | V7])), V9)) end, fun (V10) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V4, V3, V2)) end, V8)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V11) -> ('erlang':'put'(V4, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,go-7331'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V7) -> ('nested--2523-7057--in--un--peek'(V0, 'erased', V4, V7)) end, fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V11) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Control.ANSI.SGR.Reset'} | V9])), V11)) end, fun (V12) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V4, V3, V2)) end, V10)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> ('erlang':'put'(V4, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)).
'case--renderString,go-7258'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V2, V7))), fun (V9) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V10) -> ('nested--2523-7056--in--un--push'(V0, 'erased', V5, V8, V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V13) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V4, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'(V8)), V13)) end, fun (V14) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V5, V4, V3)) end, V12)) end end, V9)) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> ('erlang':'put'(V5, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,pop-7133'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V7) -> ('erlang':'put'(V2, V5)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V4}, V9)) end end, V6)) end end(E0, E1)); [] -> fun (V10) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V10)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,peek-7088'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V4}, V6)) end end(E0, E1)); [] -> fun (V7) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V7)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2523-7059--in--un--writeOutput'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.ST':'un--modifySTRef'('erased', 'erased', V2, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V5, V3)) end, V4)).
'nested--2523-7056--in--un--push'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.ST':'un--modifySTRef'('erased', 'erased', V2, fun (V5) -> [V3 | V5] end, V4)).
'nested--2523-7058--in--un--pop'(V0, V1, V2, V3) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V4) -> ('erlang':'get'(V2)) end, fun (V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V9) -> ('erlang':'put'(V2, V7)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V6}, V11)) end end, V8)) end end(E0, E1)); [] -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V12)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)).
'nested--2523-7057--in--un--peek'(V0, V1, V2, V3) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V4) -> ('erlang':'get'(V2)) end, fun (V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V6}, V8)) end end(E0, E1)); [] -> fun (V9) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V9)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)).
'nested--2523-7060--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SEmpty'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Builtin.MkUnit'}, V5)) end end()); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SChar', E0, E1} -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V9) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Data.Strings':'un--singleton'(V6)), V9)) end, fun (V10) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V2, V3, (V7()))) end, V8)) end end(E0, E1)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SText', E2, E3, E4} -> (fun (V11, V12, V13) -> fun (V14) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V15) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, V12, V15)) end, fun (V16) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V2, V3, (V13()))) end, V14)) end end(E2, E3, E4)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SLine', E5, E6} -> (fun (V17, V18) -> fun (V19) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V20) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(('Idris.Idris2.Data.Strings':'un--singleton'($\x{a})), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--textSpaces'(V17)))), V20)) end, fun (V21) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V2, V3, V18)) end, V19)) end end(E5, E6)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SAnnPush', E7, E8} -> (fun (V22, V23) -> fun (V24) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V25) -> ('nested--2523-7057--in--un--peek'(V0, 'erased', V2, V25)) end, fun (V26) -> case V26 of {'Idris.Prelude.Types.Just', E9} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V22, V27))), fun (V29) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V30) -> ('nested--2523-7056--in--un--push'(V0, 'erased', V2, V28, V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V33) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'(V28)), V33)) end, fun (V34) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V2, V3, V23)) end, V32)) end end, V29)) end end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> ('erlang':'put'(V2, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V24)) end end(E7, E8)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SAnnPop', E10} -> (fun (V36) -> fun (V37) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V38) -> ('nested--2523-7058--in--un--pop'(V0, 'erased', V2, V38)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V41) -> ('nested--2523-7057--in--un--peek'(V0, 'erased', V2, V41)) end, fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E11} -> (fun (V43) -> fun (V44) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V45) -> ('nested--2523-7059--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Control.ANSI.SGR.Reset'} | V43])), V45)) end, fun (V46) -> ('nested--2523-7060--in--un--go'(V0, 'erased', V2, V3, V36)) end, V44)) end end(E11)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V47) -> ('erlang':'put'(V2, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V40)) end end, V37)) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--underline'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.SingleUnderline'}})).
'un--strike'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.Striked'}})).
'un--renderString'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> <<"<internal pretty printing error>"/utf8>> end, ('Idris.Idris2.Control.Monad.ST':'un--runST'('erased', fun (V1) -> fun (V2) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V3) -> ('Idris.Idris2.Control.Monad.ST':'un--newSTRef'('erased', 'erased', [('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased')) | []], V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'un--newSTRef'('erased', 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'()), V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('nested--2523-7060--in--un--go'(V0, 'erased', V4, V7, V0)), fun (V9) -> fun (V10) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V11) -> ('erlang':'get'(V4)) end, fun (V12) -> case V12 of [] -> fun (V13) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V13)) end; [E0 | E1] -> (fun (V14, V15) -> case V15 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor__(ST $s)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> {'Idris.Prelude.Types.Just', V21} end, fun (V22) -> ('erlang':'get'(V7)) end)); _ -> fun (V23) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V23)) end end end(E0, E1)); _ -> fun (V24) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V24)) end end end, V10)) end end, V8)) end end, V5)) end end, V2)) end end)))).
'un--renderIO'(V0) -> ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, ('un--renderString'(V0)))).
'un--putDoc'(V0) -> ('un--renderIO'((('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--layoutPretty'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--defaultLayoutOptions'())))(V0)))).
'un--italic'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.Italic'}})).
'un--color'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetForeground', V0})).
'un--bold'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.Bold'}})).
'un--bgColor'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetBackground', V0})).
'un--AnsiStyle'() -> {'Idris.Prelude.Types.List', {'Idris.Control.ANSI.SGR.SGR'}}.
