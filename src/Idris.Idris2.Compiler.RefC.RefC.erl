-module('Idris.Idris2.Compiler.RefC.RefC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in compileExpr-11153'/33,
  'case--compileExpr-11064'/31,
  'case--compileExpr-11010'/18,
  'case--case block in case block in createCFunctions-10362'/41,
  'case--case block in case block in createCFunctions-10135'/40,
  'case--case block in createCFunctions-10013'/39,
  'case--case block in createCFunctions-9695'/12,
  'case--createCFunctions-9665'/12,
  'case--emitFDef-9106'/12,
  'case--case block in extractFFILocation-8747'/6,
  'case--extractFFILocation-8729'/4,
  'case--readCCPart-8702'/3,
  'case--case block in cStatementsFromANF-8554'/12,
  'case--cStatementsFromANF-8443'/12,
  'case--cStatementsFromANF-8232'/19,
  'case--makeNonIntSwitchStatementConst-7535'/9,
  'case--copyConstructors-7079'/14,
  'case--const2Integer-6937'/2,
  'case--integer_switch-6914'/3,
  'case--addExternalLib-6686'/4,
  'case--freeTmpVars-6622'/4,
  'case--emit-6531'/9,
  'case--decreaseIndentation-6423'/2,
  'case--lJust-6364'/4,
  'case--registerVariableForAutomaticFreeing-6257'/3,
  'case--cStringQuoted,showCChar-5008'/3,
  'case--showcCleanStringChar-4737'/2,
  'case--showcCleanStringChar,pad-4693'/3,
  'case--natMinus-4572'/3,
  'case--case block in findCC-4540'/2,
  'case--findCC-4520'/1,
  'nested--12360-7170--in--un--varBindLines'/15,
  'nested--10214-4950--in--un--showCString'/2,
  'nested--10214-4949--in--un--showCChar'/2,
  'nested--12052-6716--in--un--pushArgToArglist'/9,
  'nested--9851-4684--in--un--pad'/2,
  'nested--12355-7031--in--un--getNameTag'/16,
  'nested--16314-10737--in--un--fullprefix_dir'/7,
  'nested--14117-8683--in--un--drop'/4,
  'nested--16314-10738--in--un--clibdirs'/6,
  'dn--un--show_Show__ExtPrim'/1,
  'dn--un--showPrec_Show__ExtPrim'/2,
  'dn--un--__Impl_Show_ExtPrim'/0,
  'un--varNamesFromList'/3,
  'un--varName'/1,
  'un--toString'/1,
  'un--toPrim'/1,
  'un--showcCleanStringChar'/1,
  'un--showcCleanString'/1,
  'un--showTag'/1,
  'un--registerVariableForAutomaticFreeing'/3,
  'un--readCCPart'/2,
  'un--plainOp'/2,
  'un--packCFType'/2,
  'un--newTemporaryVariableLevel'/2,
  'un--natMinus'/2,
  'un--maxLineLengthForComment'/0,
  'un--makeNonIntSwitchStatementConst'/8,
  'un--makeArglist'/7,
  'un--lJust'/3,
  'un--integer_switch'/1,
  'un--indentation'/2,
  'un--increaseIndentation'/2,
  'un--header'/4,
  'un--getNextCounter'/2,
  'un--getNewVarThatWillNotBeFreedAtEndOfBlock'/2,
  'un--getArgsNrList'/3,
  'un--functionDefSignatureArglist'/3,
  'un--functionDefSignature'/3,
  'un--freeTmpVars'/4,
  'un--footer'/3,
  'un--findCC'/1,
  'un--fillConstructorArgs'/5,
  'un--extractValue'/2,
  'un--extractFFILocation'/2,
  'un--extractConstant'/1,
  'un--executeExpr'/4,
  'un--escapeChar'/1,
  'un--emitFDef'/4,
  'un--emit'/4,
  'un--discardLastArgument'/2,
  'un--decreaseIndentation'/2,
  'un--createFFIArgList'/2,
  'un--createCFunctions'/9,
  'un--copyConstructors'/9,
  'un--constDefaultBlock'/6,
  'un--constBlockSwitch'/7,
  'un--const2Integer'/2,
  'un--conBlocks'/8,
  'un--compileLibrary'/6,
  'un--compileExpr'/6,
  'un--codegenRefC'/0,
  'un--cTypeOfCFType'/1,
  'un--cStringQuoted'/1,
  'un--cStatementsFromANF'/5,
  'un--cOp'/3,
  'un--cName'/1,
  'un--cConstant'/1,
  'un--cCleanString'/1,
  'un--cArgsVectANF'/2,
  'un--addExternalLib'/3,
  'un--addCommaToList'/1
]).
'case--case block in compileExpr-11153'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V32 of 0 -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}} end; 1 -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileExpr-11064'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of 0 -> fun (V31) -> begin (V60 = begin (V59 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, V27))(V31))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E0} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V62) -> begin (V91 = begin (V90 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, V27))(V31))), {'Idris.Prelude.Types.Right', V90} end), case V91 of {'Idris.Prelude.Types.Left', E2} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V93) -> (('case--case block in compileExpr-11153'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V62, V93, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V93, 0))))(V31)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileExpr-11010'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> ('un--createCFunctions'(V4, V11, V12, V13, V14, V16, V15, V18, V19)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in createCFunctions-10362'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V40 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V43, V44) -> ('un--extractValue'(V44, V43)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in createCFunctions-10135'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V39 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V40, V41) -> case V41 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V42, V43) -> ('un--extractValue'(V43, V42)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in createCFunctions-10013'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> fun (V39) -> begin (V45 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V11, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V43, V44) -> ('un--extractValue'(V44, V43)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V18)))))), <<");"/utf8>>))))))))(V39))), case V45 of {'Idris.Prelude.Types.Left', E16} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V47) -> begin (V48 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"return NULL;"/utf8>>))(V39))), case V48 of {'Idris.Prelude.Types.Left', E18} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V50) -> begin (V51 = ('un--decreaseIndentation'(V5, V39))), case V51 of {'Idris.Prelude.Types.Left', E20} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V53) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V39)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V54) -> begin (V63 = begin (V55 = (('un--cTypeOfCFType'(V0))(V54))), case V55 of {'Idris.Prelude.Types.Left', E0} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V57) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V57, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" retVal = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V11, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V58) -> case V58 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V59, V60) -> case V60 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V61, V62) -> ('un--extractValue'(V62, V61)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V18)))))), <<");"/utf8>>))))))))))))(V54)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V63 of {'Idris.Prelude.Types.Left', E6} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V65) -> begin (V66 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"return (Value*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--packCFType'(V0, <<"retVal"/utf8>>)), <<";"/utf8>>))))))(V54))), case V66 of {'Idris.Prelude.Types.Left', E8} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V68) -> begin (V69 = ('un--decreaseIndentation'(V5, V54))), case V69 of {'Idris.Prelude.Types.Left', E10} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V71) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V54)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in createCFunctions-9695'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// call ffi to a scheme substitute for "/utf8>>, V14)))) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--createCFunctions-9665'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--case block in createCFunctions-9695'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, ('un--extractFFILocation'(<<"scheme"/utf8>>, V2)))) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = ('un--addExternalLib'(V4, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E5} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.List':'un--replicate'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)), <<"Value *"/utf8>>)))), <<");"/utf8>>))))))))), begin (V24 = ('un--functionDefSignatureArglist'(V10, V3, V15))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'put'(V8, [('Idris.Idris2.Prelude.Types.Strings':'un--++'(V23, <<"\x{a}"/utf8>>)) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(V26, <<";\x{a}"/utf8>>)) | V22]]))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E9} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V30) -> begin (V31 = ('un--createFFIArgList'(V1, V15))), case V31 of {'Idris.Prelude.Types.Left', E11} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V33) -> begin (V34 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, V26))(V15))), case V34 of {'Idris.Prelude.Types.Left', E13} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V36) -> begin (V37 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V15))), case V37 of {'Idris.Prelude.Types.Left', E15} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V39) -> begin (V40 = ('un--increaseIndentation'(V5, V15))), case V40 of {'Idris.Prelude.Types.Left', E17} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V42) -> begin (V43 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"return "/utf8>>, ('un--cName'(V3))))))(V15))), case V43 of {'Idris.Prelude.Types.Left', E19} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V45) -> begin (V46 = ('un--increaseIndentation'(V5, V15))), case V46 of {'Idris.Prelude.Types.Left', E21} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V48) -> begin (V49 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V15))), case V49 of {'Idris.Prelude.Types.Left', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V51) -> begin (V52 = ('un--increaseIndentation'(V5, V15))), case V52 of {'Idris.Prelude.Types.Left', E25} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V54) -> begin (V55 = (('un--getArgsNrList'('erased', V1, 0))(V15))), case V55 of {'Idris.Prelude.Types.Left', E27} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V57) -> begin (V59 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"arglist->args["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V58)), <<"]"/utf8>>)))) end, V57))))), begin (V61 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V60) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, V60)) end, V59, []))(V15))), case V61 of {'Idris.Prelude.Types.Left', E29} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V63) -> begin (V64 = ('un--decreaseIndentation'(V5, V15))), case V64 of {'Idris.Prelude.Types.Left', E31} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V66) -> begin (V67 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<");"/utf8>>))(V15))), case V67 of {'Idris.Prelude.Types.Left', E33} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V69) -> begin (V70 = ('un--decreaseIndentation'(V5, V15))), case V70 of {'Idris.Prelude.Types.Left', E35} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V72) -> begin (V73 = ('un--decreaseIndentation'(V5, V15))), case V73 of {'Idris.Prelude.Types.Left', E37} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V75) -> begin (V76 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V15))), case V76 of {'Idris.Prelude.Types.Left', E39} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V78) -> begin (V79 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V15))), case V79 of {'Idris.Prelude.Types.Left', E41} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V81) -> begin (V82 = (('un--emitFDef'(V6, V5, V3, V33))(V15))), case V82 of {'Idris.Prelude.Types.Left', E43} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V84) -> begin (V85 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V15))), case V85 of {'Idris.Prelude.Types.Left', E45} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V87) -> begin (V88 = ('un--increaseIndentation'(V5, V15))), case V88 of {'Idris.Prelude.Types.Left', E47} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V90) -> begin (V91 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" // ffi call to "/utf8>>, V13))))(V15))), case V91 of {'Idris.Prelude.Types.Left', E49} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V93) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> begin (V99 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V13, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V94) -> case V94 of {'Idris.Builtin.MkPair', E63, E64} -> (fun (V95, V96) -> case V96 of {'Idris.Builtin.MkPair', E65, E66} -> (fun (V97, V98) -> ('un--extractValue'(V98, V97)) end(E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V33)))))), <<");"/utf8>>))))))))(V15))), case V99 of {'Idris.Prelude.Types.Left', E67} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V101) -> begin (V102 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"return NULL;"/utf8>>))(V15))), case V102 of {'Idris.Prelude.Types.Left', E69} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V104) -> begin (V105 = ('un--decreaseIndentation'(V5, V15))), case V105 of {'Idris.Prelude.Types.Left', E71} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V107) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V15)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V116 = begin (V108 = (('un--cTypeOfCFType'(V0))(V15))), case V108 of {'Idris.Prelude.Types.Left', E51} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V110) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V110, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" retVal = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V13, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V111) -> case V111 of {'Idris.Builtin.MkPair', E53, E54} -> (fun (V112, V113) -> case V113 of {'Idris.Builtin.MkPair', E55, E56} -> (fun (V114, V115) -> ('un--extractValue'(V115, V114)) end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V33)))))), <<");"/utf8>>))))))))))))(V15)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V116 of {'Idris.Prelude.Types.Left', E57} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V118) -> begin (V119 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"return (Value*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--packCFType'(V0, <<"retVal"/utf8>>)), <<";"/utf8>>))))))(V15))), case V119 of {'Idris.Prelude.Types.Left', E59} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V121) -> begin (V122 = ('un--decreaseIndentation'(V5, V15))), case V122 of {'Idris.Prelude.Types.Left', E61} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V124) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V15)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitFDef-9106'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", Value *"/utf8>>, V14)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in extractFFILocation-8747'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', ('un--readCCPart'($,, V4))}; 1 -> ('un--extractFFILocation'(V2, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extractFFILocation-8729'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('case--case block in extractFFILocation-8747'(V0, V1, V2, V4, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V2, V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--readCCPart-8702'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', V3, ('nested--14117-8683--in--un--drop'(V0, V1, 1, V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in cStatementsFromANF-8554'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = (('un--emit'(V5, V4, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"switch("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V13, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V2)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, <<")){"/utf8>>))))))))))))))))))(V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = (('un--constBlockSwitch'(V7, V6, V5, V4, V1, V8, 0))(V14))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = (('un--constDefaultBlock'(V7, V6, V5, V4, V0, V8))(V14))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V14))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V27 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, <<");"/utf8>>))))))(V14))), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V8, V8}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cStatementsFromANF-8443'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> fun (V12) -> begin (V13 = (('un--emit'(V5, V4, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"switch(extractInt("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V2)), <<")){"/utf8>>))))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = (('un--constBlockSwitch'(V7, V6, V5, V4, V1, V8, 0))(V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = (('un--constDefaultBlock'(V7, V6, V5, V4, V0, V8))(V12))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V22 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V12))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V8, V8}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V25) -> begin (V26 = (('un--makeNonIntSwitchStatementConst'(V7, V6, V5, V4, V1, 0, <<""/utf8>>, <<""/utf8>>))(V25))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> begin (V31 = (('un--emit'(V5, V4, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"switch("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V30, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V2)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V29, <<")){"/utf8>>))))))))))))))))))(V25))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V34 = (('un--constBlockSwitch'(V7, V6, V5, V4, V1, V8, 0))(V25))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = (('un--constDefaultBlock'(V7, V6, V5, V4, V0, V8))(V25))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> begin (V40 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V25))), case V40 of {'Idris.Prelude.Types.Left', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V42) -> begin (V43 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V29, <<");"/utf8>>))))))(V25))), case V43 of {'Idris.Prelude.Types.Left', E20} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V8, V8}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cStatementsFromANF-8232'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V20 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> begin (V23 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V11, <<");"/utf8>>))))))(V19))), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V9, V9}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V26) -> fun (V27) -> begin (V28 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"  default : {"/utf8>>))(V27))), case V28 of {'Idris.Prelude.Types.Left', E5} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V30) -> begin (V31 = ('un--increaseIndentation'(V4, V27))), case V31 of {'Idris.Prelude.Types.Left', E7} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V33) -> begin (V34 = ('un--newTemporaryVariableLevel'(V6, V27))), case V34 of {'Idris.Prelude.Types.Left', E9} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V36) -> begin (V37 = (('un--cStatementsFromANF'(V7, V6, V5, V4, V26))(V27))), case V37 of {'Idris.Prelude.Types.Left', E11} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V39) -> begin (V42 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V9, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V39 of {'Idris.Compiler.RefC.RefC.MkRS', E13, E14} -> (fun (V40, V41) -> V40 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V27))), case V42 of {'Idris.Prelude.Types.Left', E15} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V44) -> begin (V45 = ('un--freeTmpVars'(V6, V5, V4, V27))), case V45 of {'Idris.Prelude.Types.Left', E17} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V47) -> begin (V48 = ('un--decreaseIndentation'(V4, V27))), case V48 of {'Idris.Prelude.Types.Left', E19} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V50) -> begin (V51 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V27))), case V51 of {'Idris.Prelude.Types.Left', E21} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V53) -> begin (V54 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V27))), case V54 of {'Idris.Prelude.Types.Left', E23} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V56) -> begin (V57 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V11, <<");"/utf8>>))))))(V27))), case V57 of {'Idris.Prelude.Types.Left', E25} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V9, V9}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeNonIntSwitchStatementConst-7535'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.Core.TT.Str', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = ('un--getNextCounter'(V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V13))))), begin (V15 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"char **"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V14, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = (char**)malloc(sizeof(char*) * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V4)))))), <<");"/utf8>>))))))))))(V10))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> (('un--makeNonIntSwitchStatementConst'(V8, V7, V6, V5, [{'Idris.Compiler.ANF.MkAConstAlt', V3, V2} | V4], 1, V14, <<"multiStringCompare"/utf8>>))(V10)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.Db', E5} -> (fun (V18) -> fun (V19) -> begin (V20 = ('un--getNextCounter'(V8, V19))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V22))))), begin (V24 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"double *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V23, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = (double*)malloc(sizeof(double) * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V4)))))), <<");"/utf8>>))))))))))(V19))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> (('un--makeNonIntSwitchStatementConst'(V8, V7, V6, V5, [{'Idris.Compiler.ANF.MkAConstAlt', V3, V2} | V4], 1, V23, <<"multiDoubleCompare"/utf8>>))(V19)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>, <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>}} end end.
'case--copyConstructors-7079'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--emit'(V10, V9, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"].tag = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V14, <<";"/utf8>>))))))))))))(V16))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = (('un--emit'(V10, V9, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"].name = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V15, <<";"/utf8>>))))))))))))(V16))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> (('un--copyConstructors'(V12, V11, V10, V9, V8, V4, V7, V6, (1 + V5)))(V16)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--const2Integer-6937'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V2)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V3) -> V3 end(E1)); {'Idris.Core.TT.Ch', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_Integer'(V4)) end(E2)); {'Idris.Core.TT.B8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V5)) end(E3)); {'Idris.Core.TT.B16', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V6)) end(E4)); {'Idris.Core.TT.B32', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V7)) end(E5)); {'Idris.Core.TT.B64', E6} -> (fun (V8) -> V8 end(E6)); _ -> V0 end.
'case--integer_switch-6914'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> 0 end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V4) -> 0 end(E1)); {'Idris.Core.TT.Ch', E2} -> (fun (V5) -> 0 end(E2)); _ -> 1 end.
'case--addExternalLib-6686'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V5) -> begin (V6 = ('erlang':'put'(V1, [V0 | V2]))), {'Idris.Prelude.Types.Right', V6} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--freeTmpVars-6622'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V8 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V7) -> ('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"removeReference("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, <<");"/utf8>>)))))) end, V4, []))(V6))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'put'(V2, V5))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); [] -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emit-6531'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = ('erlang':'put'(V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V5, [('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--lJust'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, V7)), ('un--maxLineLengthForComment'()), $ )), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, V4)))) | []]))))), {'Idris.Prelude.Types.Right', V11} end end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V12) -> fun (V13) -> begin (V14 = ('erlang':'put'(V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V5, [('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, V7)) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--lJust'(<<""/utf8>>, ('un--maxLineLengthForComment'()), $ )), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, V4)))) | []]]))))), {'Idris.Prelude.Types.Right', V14} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--decreaseIndentation-6423'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V6 = begin (V5 = ('erlang':'put'(V0, V3))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'case--lJust-6364'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types':'un--minus'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V2))))), begin (V6 = ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V5, V0))))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, V6)) end end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V7) -> V2 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--registerVariableForAutomaticFreeing-6257'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> begin (V5 = begin (V4 = ('erlang':'put'(V1, [[V0 | []] | []]))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E2 | E3] -> (fun (V8, V9) -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'put'(V1, [[V0 | V8] | V9]))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cStringQuoted,showCChar-5008'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}x"/utf8>>, ('Idris.Idris2.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_Int'(V1)))))), V3)) end; 1 -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V1, V4)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showcCleanStringChar-4737'(V0, V1) -> case V1 of 0 -> fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"u"/utf8>>, ('nested--9851-4684--in--un--pad'(V0, ('Idris.Idris2.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_Int'(V0)))))))), V2)) end; 1 -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V0, V3)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showcCleanStringChar,pad-4693'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--toString'(('Idris.Idris2.Data.List':'un--replicate'('erased', ('un--natMinus'((1 + (1 + (1 + (1 + 0)))), ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V1)))), $0)))), V1)) end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V4) -> V1 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--natMinus-4572'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--minus'(V1, V0)) end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V4) -> 0 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findCC-4540'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> fun (V3) -> V2 end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> <<"cc"/utf8>> end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findCC-4520'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> fun (V2) -> V1 end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V31 = (('Idris.Idris2.System':'un--getEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, <<"CC"/utf8>>))(V3))), case V31 of {'Idris.Prelude.Types.Just', E1} -> (fun (V32) -> V32 end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"cc"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12360-7170--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V16, V17) -> fun (V18) -> begin (V19 = (('un--emit'(V9, V8, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V16)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = ((Value_Constructor*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")->args["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V14)), <<"];"/utf8>>))))))))))))))(V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V22 = (('nested--12360-7170--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, (1 + V14)))(V18))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-4950--in--un--showCString'(V0, V1) -> case V1 of [] -> fun (V2) -> V2 end; [E0 | E1] -> (fun (V3, V4) -> case V3 of $\x{22} -> fun (V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}\x{22}"/utf8>>, (('nested--10214-4950--in--un--showCString'(V0, V4))(V5)))) end; _ -> fun (V6) -> (('nested--10214-4949--in--un--showCChar'(V0, V3))((('nested--10214-4950--in--un--showCString'(V0, V4))(V6)))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-4949--in--un--showCChar'(V0, V1) -> case V1 of $\x{5c} -> fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"bkslash"/utf8>>, V2)) end; _ -> ('case--cStringQuoted,showCChar-5008'(V0, V1, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(126)))) end)))) end.
'nested--12052-6716--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> fun (V12) -> begin (V13 = (('un--emit'(V3, V2, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"->args["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"] = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V10)), <<");"/utf8>>))))))))))))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> (('nested--12052-6716--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V11, (1 + V8)))(V12)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9851-4684--in--un--pad'(V0, V1) -> ('case--showcCleanStringChar,pad-4693'(V0, V1, ('Idris.Idris2.Data.Nat':'un--isLTE'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V1)), (1 + (1 + (1 + (1 + 0)))))))).
'nested--12355-7031--in--un--getNameTag'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"-1"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V15)), <<"\x{22}"/utf8>>))))}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V17)), <<"NULL"/utf8>>}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16314-10737--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Options.MkDirs', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(1, ('Idris.Idris2.Idris.Version':'un--version'()))))), V6)))).
'nested--14117-8683--in--un--drop'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Nat_Int'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V3))))), begin (V5 = ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V4, V2))), ('Idris.Idris2.Data.Strings':'un--strSubstr'(V2, V5, V3)) end end.
'nested--16314-10738--in--un--clibdirs'(V0, V1, V2, V3, V4, V5) -> (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, <<" "/utf8>>)))) end, V5)))).
'dn--un--show_Show__ExtPrim'(V0) -> case V0 of {'Idris.Compiler.RefC.RefC.NewIORef'} -> (fun () -> <<"newIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ReadIORef'} -> (fun () -> <<"readIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.WriteIORef'} -> (fun () -> <<"writeIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.NewArray'} -> (fun () -> <<"newArray"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ArrayGet'} -> (fun () -> <<"arrayGet"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ArraySet'} -> (fun () -> <<"arraySet"/utf8>> end()); {'Idris.Compiler.RefC.RefC.GetField'} -> (fun () -> <<"getField"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SetField'} -> (fun () -> <<"setField"/utf8>> end()); {'Idris.Compiler.RefC.RefC.VoidElim'} -> (fun () -> <<"voidElim"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SysOS'} -> (fun () -> <<"sysOS"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SysCodegen'} -> (fun () -> <<"sysCodegen"/utf8>> end()); {'Idris.Compiler.RefC.RefC.OnCollect'} -> (fun () -> <<"onCollect"/utf8>> end()); {'Idris.Compiler.RefC.RefC.OnCollectAny'} -> (fun () -> <<"onCollectAny"/utf8>> end()); {'Idris.Compiler.RefC.RefC.Unknown', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unknown "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__ExtPrim'(V0, V1) -> ('dn--un--show_Show__ExtPrim'(V1)).
'dn--un--__Impl_Show_ExtPrim'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__ExtPrim'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__ExtPrim'(V1, V2)) end end}.
'un--varNamesFromList'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('un--varNamesFromList'('erased', V5, (1 + V2)))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V2)))) | V9]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--varName'(V0) -> case V0 of {'Idris.Compiler.ANF.ALocal', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V1)))) end(E0)); {'Idris.Compiler.ANF.ANull'} -> (fun () -> <<"NULL"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toString'(V0) -> case V0 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V1)), ('un--toString'(V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPrim'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__newIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.NewIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__readIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ReadIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__writeIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.WriteIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__newArray"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.NewArray'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__arrayGet"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ArrayGet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__arraySet"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ArraySet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__getField"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.GetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__setField"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"void"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__void"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__os"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SysOS'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__codegen"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SysCodegen'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__onCollect"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.OnCollect'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V2, {'Idris.Core.Name.UN', <<"prim__onCollectAny"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.OnCollectAny'} end} | []]]]]]]]]]]]]]], {'Idris.Compiler.RefC.RefC.Unknown', V0})) end(E0, E1)); _ -> {'Idris.Compiler.RefC.RefC.Unknown', V0} end.
'un--showcCleanStringChar'(V0) -> case V0 of $+ -> fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_plus"/utf8>>, V1)) end; $- -> fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"__"/utf8>>, V2)) end; $* -> fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_star"/utf8>>, V3)) end; $/ -> fun (V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_slash"/utf8>>, V4)) end; $\x{5c} -> fun (V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_backslash"/utf8>>, V5)) end; $< -> fun (V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_lt"/utf8>>, V6)) end; $> -> fun (V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_gt"/utf8>>, V7)) end; $= -> fun (V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_eq"/utf8>>, V8)) end; $& -> fun (V9) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_and"/utf8>>, V9)) end; $| -> fun (V10) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_or"/utf8>>, V10)) end; $\x{27} -> fun (V11) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_tick"/utf8>>, V11)) end; $\x{22} -> fun (V12) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_quotation"/utf8>>, V12)) end; $( -> fun (V13) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_parenOpen"/utf8>>, V13)) end; $) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_parenClose"/utf8>>, V14)) end; ${ -> fun (V15) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_braceOpen"/utf8>>, V15)) end; $} -> fun (V16) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_braceClose"/utf8>>, V16)) end; $  -> fun (V17) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, V17)) end; $: -> fun (V18) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_colon"/utf8>>, V18)) end; $. -> fun (V19) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_dot"/utf8>>, V19)) end; $$ -> fun (V20) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_dollar"/utf8>>, V20)) end; $, -> fun (V21) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_comma"/utf8>>, V21)) end; $# -> fun (V22) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_number"/utf8>>, V22)) end; $% -> fun (V23) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_percent"/utf8>>, V23)) end; _ -> ('case--showcCleanStringChar-4737'(V0, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(126)))) end)))) end.
'un--showcCleanString'(V0) -> case V0 of [] -> fun (V1) -> V1 end; [E0 | E1] -> (fun (V2, V3) -> fun (V4) -> (('un--showcCleanStringChar'(V2))((('un--showcCleanString'(V3))(V4)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showTag'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"-1"/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--registerVariableForAutomaticFreeing'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of [] -> begin (V8 = begin (V7 = ('erlang':'put'(V0, [[V1 | []] | []]))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E4 | E5] -> (fun (V11, V12) -> begin (V14 = begin (V13 = ('erlang':'put'(V0, [[V1 | V11] | V12]))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readCCPart'(V0, V1) -> ('case--readCCPart-8702'(V1, V0, ('Idris.Idris2.Data.Strings':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Char'(V2, V0)) end, V1)))).
'un--plainOp'(V0, V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V1)), <<")"/utf8>>)))))).
'un--packCFType'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"NULL"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeInt16("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeInt8("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeString("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeChar("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makePointer("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makePointer("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeBuffer("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeWorld("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeFunction("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('un--packCFType'(V4, V1)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeStruct("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"makeCustomUser("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")"/utf8>>)))) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--newTemporaryVariableLevel'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, [[] | V5]))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--natMinus'(V0, V1) -> ('case--natMinus-4572'(V1, V0, ('Idris.Idris2.Data.Nat':'un--isLTE'(V1, V0)))).
'un--maxLineLengthForComment'() -> (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
'un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, V7}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V11, V12) -> case V5 of 0 -> case V11 of {'Idris.Core.TT.Str', E6} -> (fun (V13) -> fun (V14) -> begin (V15 = ('un--getNextCounter'(V0, V14))), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V17))))), begin (V19 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"char **"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V18, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = (char**)malloc(sizeof(char*) * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V10)))))), <<");"/utf8>>))))))))))(V14))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V18, <<"multiStringCompare"/utf8>>))(V14)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); {'Idris.Core.TT.Db', E11} -> (fun (V22) -> fun (V23) -> begin (V24 = ('un--getNextCounter'(V0, V23))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V26))))), begin (V28 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"double *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V27, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = (double*)malloc(sizeof(double) * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V10)))))), <<");"/utf8>>))))))))))(V23))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V27, <<"multiDoubleCompare"/utf8>>))(V23)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>, <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>}} end end; _ -> fun (V32) -> begin (V33 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V5, 1)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"] = \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--extractConstant'(V11)), <<"\x{22};"/utf8>>))))))))))))(V32))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V10, ((V5 + 1) rem 9223372036854775808), V6, V7))(V32)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeArglist'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getNextCounter'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"arglist_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V9))))), begin (V11 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value_Arglist *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V10, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = newArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V5)), V4)))), <<");"/utf8>>))))))))))))))(V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('nested--12052-6716--in--un--pushArgToArglist'(V5, V4, V3, V2, V1, V0, V10, V5, 0))(V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', V10} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lJust'(V0, V1, V2) -> ('case--lJust-6364'(V2, V1, V0, ('Idris.Idris2.Data.Nat':'un--isLTE'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V0)), V1)))).
'un--integer_switch'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V3, V4) -> case V3 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> 0 end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> 0 end(E5)); {'Idris.Core.TT.Ch', E6} -> (fun (V7) -> 0 end(E6)); _ -> 1 end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--indentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--*_Num__Nat'((1 + (1 + (1 + (1 + 0)))), V5)), $ ))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--increaseIndentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'put'(V0, (1 + V5)))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--header'(V0, V1, V2, V3) -> begin (V4 = [<<"#include <runtime.h>"/utf8>> | [<<"/* automatically generated using the Idris2 C Backend */"/utf8>> | [<<"#include <idris_support.h> // for libidris2_support"/utf8>> | []]]]), fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// add header(s) for library: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V10, <<"\x{a}"/utf8>>)))) end, V9))), begin (V42 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> fun (V13) -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" header for "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, <<" needed"/utf8>>))))))(V13))), {'Idris.Prelude.Types.Right', V41} end end end, V9, []))(V5))), case V42 of {'Idris.Prelude.Types.Left', E2} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V50 = begin (V49 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E6} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'put'(V1, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V11, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', [<<"\x{a}// function definitions"/utf8>> | []], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V48, V52))))))))))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getNextCounter'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'put'(V0, (1 + V5)))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V5} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V1) -> begin (V2 = ('un--getNextCounter'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"tmp_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V4))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getArgsNrList'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('un--getArgsNrList'('erased', V5, (1 + V2)))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', [V2 | V9]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--functionDefSignatureArglist'(V0, V1, V2) -> begin (V3 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V5)), <<"_arglist(Value_Arglist* arglist)"/utf8>>))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--functionDefSignature'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> begin (V4 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))(V3))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> begin (V7 = ('un--cName'(V6))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{a}Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, <<"(void)"/utf8>>))))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V9 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V8)))) end, V2))))), fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('un--cName'(V13))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{a}Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V14, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}(\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V9)), <<"\x{a})"/utf8>>))))))))} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--freeTmpVars'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of [E2 | E3] -> (fun (V8, V9) -> begin (V11 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> ('un--emit'(V1, V2, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"removeReference("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V10, <<");"/utf8>>)))))) end, V8, []))(V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--footer'(V0, V1, V2) -> begin (V3 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<" // main function"/utf8>>))(V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"int main()"/utf8>>))(V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   Value *mainExprVal = __mainExpression_0();"/utf8>>))(V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   trampoline(mainExprVal);"/utf8>>))(V2))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   return 0; // bye bye"/utf8>>))(V2))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V24 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V2))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findCC'(V0) -> begin (V28 = (('Idris.Idris2.System':'un--getEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"IDRIS2_CC"/utf8>>))(V0))), case V28 of {'Idris.Prelude.Types.Just', E0} -> (fun (V29) -> V29 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V57 = (('Idris.Idris2.System':'un--getEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, <<"CC"/utf8>>))(V0))), case V57 of {'Idris.Prelude.Types.Just', E1} -> (fun (V58) -> V58 end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"cc"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fillConstructorArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> begin (V9 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"->args["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"] = newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V6)), <<");"/utf8>>))))))))))))(V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> (('un--fillConstructorArgs'(V0, V1, V2, V7, (1 + V4)))(V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractValue'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"void"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Int32*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->i32"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Int8*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->i8"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Int16*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->i16"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Int32*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->i32"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Int64*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->i64"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_String*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->str"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Double*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->d"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Char*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->c"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Pointer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->p"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_GCPointer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->p->p"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((Value_Buffer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<")->buffer"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value_World*)"/utf8>>, V1)) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value* "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<"/* function pointer not implemented */"/utf8>>)))) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('un--extractValue'(V4, V1)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value* "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<"/* struct access not implemented */"/utf8>>)))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value* "/utf8>>, V1)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractFFILocation'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('case--extractFFILocation-8729'(V2, V3, V0, ('un--readCCPart'($:, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V1)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V2)) end(E1)); {'Idris.Core.TT.Db', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Double'(V3)) end(E2)); {'Idris.Core.TT.Ch', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Char'(V4)) end(E3)); {'Idris.Core.TT.Str', E4} -> (fun (V5) -> ('un--cStringQuoted'(V5)) end(E4)); {'Idris.Core.TT.B8', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V6)) end(E5)); {'Idris.Core.TT.B16', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V7)) end(E6)); {'Idris.Core.TT.B32', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V8)) end(E7)); {'Idris.Core.TT.B64', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V9)) end(E8)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"unable_to_extract constant >>"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V0)), <<"<<"/utf8>>)))) end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V32 = begin (V31 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, <<"Execute expression not yet implemented for refc"/utf8>>))(V3))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> begin (V63 = begin (V62 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, <<"false"/utf8>>))(V3))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E2} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escapeChar'(V0) -> case V0 of $\x{7f} -> <<"127"/utf8>>; $\x{0} -> <<"0"/utf8>>; $\x{1} -> <<"1"/utf8>>; $\x{2} -> <<"2"/utf8>>; $\x{3} -> <<"3"/utf8>>; $\x{4} -> <<"4"/utf8>>; $\x{5} -> <<"5"/utf8>>; $\x{6} -> <<"6"/utf8>>; $\x{7} -> <<"7"/utf8>>; $\x{8} -> <<"8"/utf8>>; $\x{9} -> <<"9"/utf8>>; $\x{a} -> <<"10"/utf8>>; $\x{b} -> <<"11"/utf8>>; $\x{c} -> <<"12"/utf8>>; $\x{d} -> <<"13"/utf8>>; $\x{e} -> <<"14"/utf8>>; $\x{f} -> <<"15"/utf8>>; $\x{10} -> <<"16"/utf8>>; $\x{11} -> <<"17"/utf8>>; $\x{12} -> <<"18"/utf8>>; $\x{13} -> <<"19"/utf8>>; $\x{14} -> <<"20"/utf8>>; $\x{15} -> <<"21"/utf8>>; $\x{16} -> <<"22"/utf8>>; $\x{17} -> <<"23"/utf8>>; $\x{18} -> <<"24"/utf8>>; $\x{19} -> <<"25"/utf8>>; $\x{1a} -> <<"26"/utf8>>; $\x{1b} -> <<"27"/utf8>>; $\x{1c} -> <<"28"/utf8>>; $\x{1d} -> <<"29"/utf8>>; $\x{1e} -> <<"30"/utf8>>; $\x{1f} -> <<"31"/utf8>>; _ -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Char'(V0)) end.
'un--emitFDef'(V0, V1, V2, V3) -> case V3 of [] -> ('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V2)), <<"(void)"/utf8>>)))); [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *"/utf8>>, ('un--cName'(V2))))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V10))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('un--increaseIndentation'(V1, V10))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V20 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  Value *"/utf8>>, V8))))(V10))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V26, V27) -> ('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", Value *"/utf8>>, V26)))) end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5, []))(V10))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> begin (V31 = ('un--decreaseIndentation'(V1, V10))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, <<")"/utf8>>))(V10)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emit'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E6} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V8) -> begin (V9 = ('un--indentation'(V1, V4))), case V9 of {'Idris.Prelude.Types.Left', E8} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V11) -> begin (V13 = begin (V12 = ('erlang':'put'(V0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V8, [('Idris.Idris2.Prelude.Types.Strings':'un--++'(V11, V3)) | []]))))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E10} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> begin (V16 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V2))))), fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> begin (V22 = ('un--indentation'(V1, V17))), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> begin (V25 = V3), begin (V26 = (('case--emit-6531'(V3, V2, V1, V0, V16, V21, V24, V25, ('Idris.Idris2.Data.Nat':'un--isLTE'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(V24, V25)))), ('un--maxLineLengthForComment'())))))(V17))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--discardLastArgument'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> []; [E2 | E3] -> (fun (V4, V5) -> [V2 | ('un--discardLastArgument'('erased', [V4 | V5]))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--decreaseIndentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V6 = (V5 - 1)), begin (V8 = begin (V7 = ('erlang':'put'(V0, V6))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--createFFIArgList'(V0, V1) -> begin (V3 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V2) -> ('un--cTypeOfCFType'(V2)) end, V0, []))(V1))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = (('un--varNamesFromList'('erased', V0, (1 + 0)))(V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Data.List':'un--zip3'('erased', 'erased', 'erased', V5, V8, V0))), {'Idris.Prelude.Types.Right', V9} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--createCFunctions'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Compiler.ANF.MkAFun', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--functionDefSignature'(V0, V7, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('un--functionDefSignatureArglist'(V0, V7, V11))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'put'(V2, [('Idris.Idris2.Prelude.Types.Strings':'un--++'(V14, <<";\x{a}"/utf8>>)) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(V17, <<";\x{a}"/utf8>>)) | V21]]))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('un--newTemporaryVariableLevel'(V3, V11))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = (('un--getArgsNrList'('erased', V9, 0))(V11))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> begin (V32 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V14))(V11))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> begin (V35 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V11))), case V35 of {'Idris.Prelude.Types.Left', E16} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V37) -> begin (V38 = ('un--increaseIndentation'(V5, V11))), case V38 of {'Idris.Prelude.Types.Left', E18} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V40) -> begin (V41 = (('un--cStatementsFromANF'(V1, V3, V4, V5, V10))(V11))), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> begin (V46 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *returnValue = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V43 of {'Idris.Compiler.RefC.RefC.MkRS', E22, E23} -> (fun (V44, V45) -> V45 end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))(V11))), case V46 of {'Idris.Prelude.Types.Left', E24} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V48) -> begin (V49 = ('un--freeTmpVars'(V3, V4, V5, V11))), case V49 of {'Idris.Prelude.Types.Left', E26} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V51) -> begin (V52 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"return returnValue;"/utf8>>))(V11))), case V52 of {'Idris.Prelude.Types.Left', E28} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V54) -> begin (V55 = ('un--decreaseIndentation'(V5, V11))), case V55 of {'Idris.Prelude.Types.Left', E30} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V57) -> begin (V58 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V11))), case V58 of {'Idris.Prelude.Types.Left', E32} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V60) -> begin (V61 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V11))), case V61 of {'Idris.Prelude.Types.Left', E34} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V63) -> begin (V64 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V17))(V11))), case V64 of {'Idris.Prelude.Types.Left', E36} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V66) -> begin (V67 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V11))), case V67 of {'Idris.Prelude.Types.Left', E38} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V69) -> begin (V70 = ('un--increaseIndentation'(V5, V11))), case V70 of {'Idris.Prelude.Types.Left', E40} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V72) -> begin (V76 = begin (V73 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V7))(V11))), case V73 of {'Idris.Prelude.Types.Left', E42} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V75) -> (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"return "/utf8>>, ('un--cName'(V75))))))(V11)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E44} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V78) -> begin (V79 = ('un--increaseIndentation'(V5, V11))), case V79 of {'Idris.Prelude.Types.Left', E46} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V81) -> begin (V82 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V11))), case V82 of {'Idris.Prelude.Types.Left', E48} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V84) -> begin (V85 = ('un--increaseIndentation'(V5, V11))), case V85 of {'Idris.Prelude.Types.Left', E50} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V87) -> begin (V89 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V88) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"arglist->args["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V88)), <<"]"/utf8>>)))) end, V31))))), begin (V91 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V90) -> ('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V90)) end, V89, []))(V11))), case V91 of {'Idris.Prelude.Types.Left', E52} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V93) -> begin (V94 = ('un--decreaseIndentation'(V5, V11))), case V94 of {'Idris.Prelude.Types.Left', E54} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V96) -> begin (V97 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<");"/utf8>>))(V11))), case V97 of {'Idris.Prelude.Types.Left', E56} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V99) -> begin (V100 = ('un--decreaseIndentation'(V5, V11))), case V100 of {'Idris.Prelude.Types.Left', E58} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V102) -> begin (V103 = ('un--decreaseIndentation'(V5, V11))), case V103 of {'Idris.Prelude.Types.Left', E60} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V105) -> begin (V106 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V11))), case V106 of {'Idris.Prelude.Types.Left', E62} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V108) -> begin (V109 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V11))), case V109 of {'Idris.Prelude.Types.Left', E64} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V111) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Compiler.ANF.MkACon', E66, E67} -> (fun (V112, V113) -> fun (V114) -> begin (V118 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V116, V117)) end end}, V112)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V113))))))))))(V114))), case V118 of {'Idris.Prelude.Types.Left', E68} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V120) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E66, E67)); {'Idris.Compiler.ANF.MkAForeign', E70, E71, E72} -> (fun (V121, V122, V123) -> case V123 of {'Idris.Core.CompileExpr.CFIORes', E73} -> (fun (V124) -> ('case--createCFunctions-9665'(V124, V122, V121, V7, V6, V5, V4, V3, V2, V1, V0, ('un--extractFFILocation'(<<"C"/utf8>>, V121)))) end(E73)); _ -> fun (V125) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E70, E71, E72)); {'Idris.Compiler.ANF.MkAError', E74} -> (fun (V126) -> fun (V127) -> begin (V128 = (('un--functionDefSignature'(V0, V7, []))(V127))), case V128 of {'Idris.Prelude.Types.Left', E75} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V130) -> begin (V131 = ('un--functionDefSignatureArglist'(V0, V7, V127))), case V131 of {'Idris.Prelude.Types.Left', E77} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V133) -> begin (V135 = begin (V134 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E79} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V137) -> begin (V139 = begin (V138 = ('erlang':'put'(V2, [V130 | [V133 | V137]]))), {'Idris.Prelude.Types.Right', V138} end), case V139 of {'Idris.Prelude.Types.Left', E81} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V141) -> begin (V142 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V130, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}{"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"fprintf(stderr, \x{22}Error in "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V7)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22});\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"exit(-1);\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"return NULL;"/utf8>>, <<"\x{a}}"/utf8>>))))))))))))))))(V127))), case V142 of {'Idris.Prelude.Types.Left', E83} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--copyConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Compiler.ANF.MkAConAlt', E2, E3, E4, E5} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V17 = (('nested--12355-7031--in--un--getNameTag'(V15, V14, V13, V12, V11, V8, V7, V6, V4, V3, V2, V1, V0, V0, V13, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> begin (V22 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"].tag = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V20, <<";"/utf8>>))))))))))))(V16))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"].name = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V21, <<";"/utf8>>))))))))))))(V16))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> (('un--copyConstructors'(V0, V1, V2, V3, V4, V11, V6, V7, (1 + V8)))(V16)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constDefaultBlock'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  default :"/utf8>>))(V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> begin (V12 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V8))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V15 = ('un--increaseIndentation'(V3, V8))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V18 = ('un--newTemporaryVariableLevel'(V1, V8))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> begin (V21 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V7))(V8))), case V21 of {'Idris.Prelude.Types.Left', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V23) -> begin (V26 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V23 of {'Idris.Compiler.RefC.RefC.MkRS', E11, E12} -> (fun (V24, V25) -> V24 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V8))), case V26 of {'Idris.Prelude.Types.Left', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V28) -> begin (V29 = ('un--freeTmpVars'(V1, V2, V3, V8))), case V29 of {'Idris.Prelude.Types.Left', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V31) -> begin (V32 = ('un--decreaseIndentation'(V3, V8))), case V32 of {'Idris.Prelude.Types.Left', E17} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V34) -> (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V8)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constBlockSwitch'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V10, V11) -> begin (V12 = ('un--const2Integer'(V10, V6))), fun (V13) -> begin (V14 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  case "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V12)), <<" :"/utf8>>))))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V13))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('un--increaseIndentation'(V3, V13))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('un--newTemporaryVariableLevel'(V1, V13))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V11))(V13))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V31 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V28 of {'Idris.Compiler.RefC.RefC.MkRS', E14, E15} -> (fun (V29, V30) -> V29 end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V13))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> begin (V34 = ('un--freeTmpVars'(V1, V2, V3, V13))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"break;"/utf8>>))(V13))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> begin (V40 = ('un--decreaseIndentation'(V3, V13))), case V40 of {'Idris.Prelude.Types.Left', E22} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V42) -> begin (V43 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V13))), case V43 of {'Idris.Prelude.Types.Left', E24} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V45) -> (('un--constBlockSwitch'(V0, V1, V2, V3, V9, V5, (V6 + 1)))(V13)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--const2Integer'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V2)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V3) -> V3 end(E1)); {'Idris.Core.TT.Ch', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_Integer'(V4)) end(E2)); {'Idris.Core.TT.B8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V5)) end(E3)); {'Idris.Core.TT.B16', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V6)) end(E4)); {'Idris.Core.TT.B32', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V7)) end(E5)); {'Idris.Core.TT.B64', E6} -> (fun (V8) -> V8 end(E6)); _ -> V1 end.
'un--conBlocks'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Compiler.ANF.MkAConAlt', E2, E3, E4, E5} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  case "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V7)), <<":"/utf8>>))))))(V15))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V15))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('un--increaseIndentation'(V3, V15))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = ('un--newTemporaryVariableLevel'(V1, V15))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = (('nested--12360-7170--in--un--varBindLines'(V14, V13, V12, V11, V10, V7, V6, V4, V3, V2, V1, V0, V4, V13, 0))(V15))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> begin (V31 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V14))(V15))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> begin (V36 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V33 of {'Idris.Compiler.RefC.RefC.MkRS', E18, E19} -> (fun (V34, V35) -> V34 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V15))), case V36 of {'Idris.Prelude.Types.Left', E20} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V38) -> begin (V39 = ('un--freeTmpVars'(V1, V2, V3, V15))), case V39 of {'Idris.Prelude.Types.Left', E22} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V41) -> begin (V42 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"break;"/utf8>>))(V15))), case V42 of {'Idris.Prelude.Types.Left', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V44) -> begin (V45 = ('un--decreaseIndentation'(V3, V15))), case V45 of {'Idris.Prelude.Types.Left', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V47) -> begin (V48 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V15))), case V48 of {'Idris.Prelude.Types.Left', E28} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V50) -> (('un--conBlocks'(V0, V1, V2, V3, V4, V10, V6, (1 + V7)))(V15)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--compileLibrary'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Compiling to library is not supported."/utf8>>))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Compiler.Common.ANF'} -> (fun () -> begin (V6 = ('Idris.Idris2.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, <<".c"/utf8>>))))), begin (V7 = ('Idris.Idris2.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, <<".o"/utf8>>))))), begin (V8 = ('Idris.Idris2.Utils.Path':'un--</>'(V3, V5))), fun (V9) -> begin (V11 = begin (V10 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(V3))(V9))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V1, {'Idris.Compiler.Common.ANF'}, V4, V9))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V22 = case V16 of {'Idris.Compiler.Common.MkCompileData', E4, E5, E6, E7, E8} -> (fun (V17, V18, V19, V20, V21) -> V20 end(E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V23 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ArgCounter'}, 0, V9))), case V23 of {'Idris.Prelude.Types.Left', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.FunctionDefinitions'}, [], V9))), case V26 of {'Idris.Prelude.Types.Left', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.TemporaryVariableTracker'}, [], V9))), case V29 of {'Idris.Prelude.Types.Left', E13} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.OutfileText'}, [], V9))), case V32 of {'Idris.Prelude.Types.Left', E15} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ExternalLibs'}, [], V9))), case V35 of {'Idris.Prelude.Types.Left', E17} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V9))), case V38 of {'Idris.Prelude.Types.Left', E19} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V40) -> begin (V44 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V42, V43) -> ('un--createCFunctions'(V1, V25, V28, V31, V34, V40, V37, V42, V43)) end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V22, []))(V9))), case V44 of {'Idris.Prelude.Types.Left', E23} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V46) -> begin (V47 = (('un--header'(V28, V34, V40, V37))(V9))), case V47 of {'Idris.Prelude.Types.Left', E25} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V49) -> begin (V50 = ('un--footer'(V40, V34, V9))), case V50 of {'Idris.Prelude.Types.Left', E27} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V34))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E29} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V56) -> begin (V58 = ('Idris.Idris2.Data.Strings':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V57) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V57, <<"\x{a}"/utf8>>)) end, V56))))), begin (V87 = begin (V86 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> V65 end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), begin (V73 = (V70(V71))), (V72(V73)) end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), ((V77(V79))(V78)) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V81(V82))), (V83(V82)) end end end end}, fun (V84) -> fun (V85) -> V85 end end}, V6, V58))(V9))), {'Idris.Prelude.Types.Right', V86} end), case V87 of {'Idris.Prelude.Types.Left', E31} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V89) -> begin (V118 = begin (V117 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V92, V93, V94)) end end end end end, fun (V95) -> fun (V96) -> fun (V97) -> V96 end end end, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V100(V102))), begin (V104 = (V101(V102))), (V103(V104)) end end end end end end end}, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V107(V109))), ((V108(V110))(V109)) end end end end end end, fun (V111) -> fun (V112) -> fun (V113) -> begin (V114 = (V112(V113))), (V114(V113)) end end end end}, fun (V115) -> fun (V116) -> V116 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Generated C file "/utf8>>, V6))))(V9))), {'Idris.Prelude.Types.Right', V117} end), case V118 of {'Idris.Prelude.Types.Left', E33} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V120) -> begin (V122 = begin (V121 = ('un--findCC'(V9))), {'Idris.Prelude.Types.Right', V121} end), case V122 of {'Idris.Prelude.Types.Left', E35} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V124) -> begin (V125 = ('Idris.Idris2.Core.Context':'un--getDirs'(V1, V9))), case V125 of {'Idris.Prelude.Types.Left', E37} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V127) -> begin (V128 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V124, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--16314-10737--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V127, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-I"/utf8>>, ('nested--16314-10737--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V127, <<"include"/utf8>>))))))))))))))))))))), begin (V138 = ('Idris.Idris2.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(V124, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V8, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('nested--16314-10737--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V127, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--16314-10737--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V127, <<"refc "/utf8>>)), ('nested--16314-10738--in--un--clibdirs'(V2, V5, V4, V3, V1, case V127 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V136 end(E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V167 = begin (V166 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V141, V142, V143)) end end end end end, fun (V144) -> fun (V145) -> fun (V146) -> V145 end end end, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V149(V151))), begin (V153 = (V150(V151))), (V152(V153)) end end end end end end end}, fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> begin (V159 = (V156(V158))), ((V157(V159))(V158)) end end end end end end, fun (V160) -> fun (V161) -> fun (V162) -> begin (V163 = (V161(V162))), (V163(V162)) end end end end}, fun (V164) -> fun (V165) -> V165 end end}, V128))(V9))), {'Idris.Prelude.Types.Right', V166} end), case V167 of {'Idris.Prelude.Types.Left', E48} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V169) -> begin (V198 = begin (V197 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V172, V173, V174)) end end end end end, fun (V175) -> fun (V176) -> fun (V177) -> V176 end end end, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V180(V182))), begin (V184 = (V181(V182))), (V183(V184)) end end end end end end end}, fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> begin (V190 = (V187(V189))), ((V188(V190))(V189)) end end end end end end, fun (V191) -> fun (V192) -> fun (V193) -> begin (V194 = (V192(V193))), (V194(V193)) end end end end}, fun (V195) -> fun (V196) -> V196 end end}, V128))(V9))), {'Idris.Prelude.Types.Right', V197} end), case V198 of {'Idris.Prelude.Types.Left', E50} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V200) -> (('case--compileExpr-11064'(V2, V5, V4, V3, V1, V6, V7, V8, V13, V16, V22, V25, V28, V31, V34, V37, V40, V46, V49, V52, V56, V58, V89, V120, V124, V127, V128, V138, V169, V200, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V200, 0))))(V9)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end()); _ -> fun (V201) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--codegenRefC'() -> {'Idris.Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('un--compileExpr'({'Idris.Compiler.Common.ANF'}, V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('un--executeExpr'(V5, V6, V7, V8)) end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V9, V10, V11, V12, V13, V14)) end end end end end end}.
'un--cTypeOfCFType'(V0) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', <<"void"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', <<"int"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', <<"uint8_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', <<"uint16_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', <<"uint32_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', <<"uint64_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', <<"char *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', <<"double"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', <<"char"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V14, V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cStringQuoted'(V0) -> ('Idris.Idris2.Prelude.Types':'un--strCons'($\x{22}, (('nested--10214-4950--in--un--showCString'(V0, ('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<"\x{22}"/utf8>>)))).
'un--cStatementsFromANF'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Compiler.ANF.AV', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V6)), <<")"/utf8>>))))), fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V7, V7}} end end end(E0, E1)); {'Idris.Compiler.ANF.AAppName', E2, E3, E4} -> (fun (V9, V10, V11) -> fun (V12) -> begin (V14 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// start "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> ('un--varName'(V13)) end, V11)))), <<")"/utf8>>))))))))))(V12))), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V17 = ('un--makeArglist'(V0, V1, V2, V3, 0, V11, V12))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> begin (V20 = ('un--getNextCounter'(V0, V12))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"fPtr_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V22))))), begin (V24 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *(*"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V23, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")(Value_Arglist*) = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V10)), <<"_arglist;"/utf8>>))))))))))(V12))), case V24 of {'Idris.Prelude.Types.Left', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"closure_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V22))))), begin (V28 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V27, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = (Value*)makeClosureFromArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V23, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V19, <<");"/utf8>>))))))))))))))(V12))), case V28 of {'Idris.Prelude.Types.Left', E13} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V30) -> begin (V32 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// end   "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V31) -> ('un--varName'(V31)) end, V11)))), <<")"/utf8>>))))))))))(V12))), case V32 of {'Idris.Prelude.Types.Left', E15} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"trampoline("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V27, <<")"/utf8>>)))), V27}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); {'Idris.Compiler.ANF.AUnderApp', E17, E18, E19, E20} -> (fun (V35, V36, V37, V38) -> fun (V39) -> begin (V40 = ('un--makeArglist'(V0, V1, V2, V3, V37, V38, V39))), case V40 of {'Idris.Prelude.Types.Left', E21} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V42) -> begin (V43 = ('un--getNextCounter'(V0, V39))), case V43 of {'Idris.Prelude.Types.Left', E23} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"closure_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V45))))), begin (V47 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value *(*"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V46, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")(Value_Arglist*) = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V36)), <<"_arglist;"/utf8>>))))))))), begin (V48 = (('un--emit'(V2, V3, V35, V47))(V39))), case V48 of {'Idris.Prelude.Types.Left', E25} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeClosureFromArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V46, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V42, <<")"/utf8>>))))))))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V51, V51}} end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17, E18, E19, E20)); {'Idris.Compiler.ANF.AApp', E27, E28, E29} -> (fun (V52, V53, V54) -> fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"apply_closure("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V53)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V54)), <<")"/utf8>>)))))))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"tailcall_apply_closure("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V53)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V54)), <<")"/utf8>>))))))))}} end end(E27, E28, E29)); {'Idris.Compiler.ANF.ALet', E30, E31, E32, E33} -> (fun (V56, V57, V58, V59) -> fun (V60) -> begin (V61 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V58))(V60))), case V61 of {'Idris.Prelude.Types.Left', E34} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V63) -> begin (V66 = (('un--emit'(V2, V3, V56, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V57)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V63 of {'Idris.Compiler.RefC.RefC.MkRS', E36, E37} -> (fun (V64, V65) -> V64 end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))))(V60))), case V66 of {'Idris.Prelude.Types.Left', E38} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V68) -> begin (V69 = ('un--registerVariableForAutomaticFreeing'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V57)))), V60))), case V69 of {'Idris.Prelude.Types.Left', E40} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V71) -> begin (V72 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V59))(V60))), case V72 of {'Idris.Prelude.Types.Left', E42} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V74) -> {'Idris.Prelude.Types.Right', V74} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30, E31, E32, E33)); {'Idris.Compiler.ANF.ACon', E44, E45, E46, E47} -> (fun (V75, V76, V77, V78) -> fun (V79) -> begin (V80 = ('un--getNextCounter'(V0, V79))), case V80 of {'Idris.Prelude.Types.Left', E48} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"constructor_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V82))))), begin (V84 = (('un--emit'(V2, V3, V75, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value_Constructor* "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V83, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = newConstructor("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V78)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--showTag'(V77)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cName'(V76)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}"/utf8>>, <<");"/utf8>>))))))))))))))))))))))(V79))), case V84 of {'Idris.Prelude.Types.Left', E50} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V86) -> begin (V87 = (('un--emit'(V2, V3, V75, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" // constructor "/utf8>>, ('un--cName'(V76))))))(V79))), case V87 of {'Idris.Prelude.Types.Left', E52} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V89) -> begin (V90 = (('un--fillConstructorArgs'(V2, V3, V83, V78, 0))(V79))), case V90 of {'Idris.Prelude.Types.Left', E54} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)"/utf8>>, V83)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)"/utf8>>, V83))}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44, E45, E46, E47)); {'Idris.Compiler.ANF.AOp', E56, E57, E58} -> (fun (V93, V94, V95) -> fun (V96) -> begin (V97 = (('un--cArgsVectANF'('erased', V95))(V96))), case V97 of {'Idris.Prelude.Types.Left', E59} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V99) -> begin (V100 = ('un--cOp'('erased', V94, V99))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V100, V100}} end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E56, E57, E58)); {'Idris.Compiler.ANF.AExtPrim', E61, E62, E63} -> (fun (V101, V102, V103) -> fun (V104) -> begin (V105 = (('un--emit'(V2, V3, V101, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"// call to external primitive "/utf8>>, ('un--cName'(V102))))))(V104))), case V105 of {'Idris.Prelude.Types.Left', E64} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V107) -> begin (V109 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cCleanString'(('dn--un--show_Show__ExtPrim'(('un--toPrim'(V102)))))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V108) -> ('un--varName'(V108)) end, V103)))), <<")"/utf8>>))))))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V109, V109}} end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61, E62, E63)); {'Idris.Compiler.ANF.AConCase', E66, E67, E68, E69} -> (fun (V110, V111, V112, V113) -> fun (V114) -> begin (V115 = ('un--getNextCounter'(V0, V114))), case V115 of {'Idris.Prelude.Types.Left', E70} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V117) -> begin (V118 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V114))), case V118 of {'Idris.Prelude.Types.Left', E72} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V120) -> begin (V121 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V120, <<" = NULL;"/utf8>>))))), begin (V122 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"constructorField_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V117))))), begin (V123 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"AConAlt * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V122, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"= newConstructorField("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V112)))), <<");"/utf8>>))))))))), begin (V124 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"switch(compareConstructors("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--varName'(V111)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V122, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V112)))), <<")){"/utf8>>))))))))))))), begin (V125 = (('un--emit'(V2, V3, V110, V121))(V114))), case V125 of {'Idris.Prelude.Types.Left', E74} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V127) -> begin (V128 = (('un--emit'(V2, V3, V110, V123))(V114))), case V128 of {'Idris.Prelude.Types.Left', E76} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V130) -> begin (V131 = (('un--copyConstructors'(V0, V1, V2, V3, ('un--varName'(V111)), V112, V122, V120, 0))(V114))), case V131 of {'Idris.Prelude.Types.Left', E78} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V133) -> begin (V134 = (('un--emit'(V2, V3, V110, V124))(V114))), case V134 of {'Idris.Prelude.Types.Left', E80} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V136) -> begin (V137 = (('un--conBlocks'(V0, V1, V2, V3, ('un--varName'(V111)), V112, V120, 0))(V114))), case V137 of {'Idris.Prelude.Types.Left', E82} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V139) -> case V113 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V140 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V114))), case V140 of {'Idris.Prelude.Types.Left', E84} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V142) -> begin (V143 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V122, <<");"/utf8>>))))))(V114))), case V143 of {'Idris.Prelude.Types.Left', E86} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V120, V120}} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E88} -> (fun (V146) -> begin (V147 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  default : {"/utf8>>))(V114))), case V147 of {'Idris.Prelude.Types.Left', E89} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V149) -> begin (V150 = ('un--increaseIndentation'(V3, V114))), case V150 of {'Idris.Prelude.Types.Left', E91} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V152) -> begin (V153 = ('un--newTemporaryVariableLevel'(V1, V114))), case V153 of {'Idris.Prelude.Types.Left', E93} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V155) -> begin (V156 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V146))(V114))), case V156 of {'Idris.Prelude.Types.Left', E95} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V158) -> begin (V161 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V120, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V158 of {'Idris.Compiler.RefC.RefC.MkRS', E97, E98} -> (fun (V159, V160) -> V159 end(E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V114))), case V161 of {'Idris.Prelude.Types.Left', E99} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V163) -> begin (V164 = ('un--freeTmpVars'(V1, V2, V3, V114))), case V164 of {'Idris.Prelude.Types.Left', E101} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V166) -> begin (V167 = ('un--decreaseIndentation'(V3, V114))), case V167 of {'Idris.Prelude.Types.Left', E103} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V169) -> begin (V170 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V114))), case V170 of {'Idris.Prelude.Types.Left', E105} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V172) -> begin (V173 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V114))), case V173 of {'Idris.Prelude.Types.Left', E107} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V175) -> begin (V176 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V122, <<");"/utf8>>))))))(V114))), case V176 of {'Idris.Prelude.Types.Left', E109} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V178) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V120, V120}} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E66, E67, E68, E69)); {'Idris.Compiler.ANF.AConstCase', E111, E112, E113, E114} -> (fun (V179, V180, V181, V182) -> fun (V183) -> begin (V184 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V183))), case V184 of {'Idris.Prelude.Types.Left', E115} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V186) -> begin (V187 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Value * "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V186, <<" = NULL;"/utf8>>))))), begin (V188 = (('un--emit'(V2, V3, V179, V187))(V183))), case V188 of {'Idris.Prelude.Types.Left', E117} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V190) -> (('case--cStatementsFromANF-8443'(V182, V181, V180, V179, V3, V2, V1, V0, V186, V187, V190, ('un--integer_switch'(V181))))(V183)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E111, E112, E113, E114)); {'Idris.Compiler.ANF.APrimVal', E119, E120} -> (fun (V191, V192) -> fun (V193) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('un--cConstant'(V192)), ('un--cConstant'(V192))}} end end(E119, E120)); {'Idris.Compiler.ANF.AErased', E121} -> (fun (V194) -> fun (V195) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end end(E121)); {'Idris.Compiler.ANF.ACrash', E122, E123} -> (fun (V196, V197) -> fun (V198) -> begin (V199 = (('un--emit'(V2, V3, V196, <<"// CRASH"/utf8>>))(V198))), case V199 of {'Idris.Prelude.Types.Left', E124} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V201) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cOp'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Neg', E0} -> (fun (V3) -> case V2 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V4, V5) -> case V5 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-"/utf8>>, V4)) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V13, V14, V15)) end end end end end}))(V2)))) end end(E1, E2)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end}))(V2)))) end end(E0)); {'Idris.Core.TT.StrLength'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V26, V27) -> case V27 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"stringLength("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V26, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V35, V36, V37)) end end end end end}))(V2)))) end end(E3, E4)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V45, V46, V47)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V48, V49) -> case V49 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"head("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V48, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V57, V58, V59)) end end end end end}))(V2)))) end end(E5, E6)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V67, V68, V69)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E7, E8} -> (fun (V70, V71) -> case V71 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"tail("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V70, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V74, V75, V76)) end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V79, V80, V81)) end end end end end}))(V2)))) end end(E7, E8)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V84, V85, V86)) end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V89, V90, V91)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E9, E10} -> (fun (V92, V93) -> case V93 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"reverse("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V92, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V96, V97, V98)) end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V101, V102, V103)) end end end end end}))(V2)))) end end(E9, E10)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V111, V112, V113)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.Cast', E11, E12} -> (fun (V114, V115) -> case V2 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V116, V117) -> case V117 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"cast_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V114)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_to_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V115)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V116, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V120, V121, V122)) end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V125, V126, V127)) end end end end end}))(V2)))) end end(E13, E14)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V130, V131, V132)) end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V135, V136, V137)) end end end end end}))(V2)))) end end(E11, E12)); {'Idris.Core.TT.DoubleExp'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E15, E16} -> (fun (V138, V139) -> case V139 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(exp(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V138, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V142, V143, V144)) end end end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V147, V148, V149)) end end end end end}))(V2)))) end end(E15, E16)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V152, V153, V154)) end end end end end, fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V157, V158, V159)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E17, E18} -> (fun (V160, V161) -> case V161 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(log(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V160, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V164, V165, V166)) end end end end end, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V169, V170, V171)) end end end end end}))(V2)))) end end(E17, E18)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V174, V175, V176)) end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V179, V180, V181)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E19, E20} -> (fun (V182, V183) -> case V183 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(sin(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V182, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V186, V187, V188)) end end end end end, fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V191, V192, V193)) end end end end end}))(V2)))) end end(E19, E20)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V196, V197, V198)) end end end end end, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V201, V202, V203)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V204, V205) -> case V205 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(cos(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V204, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V208, V209, V210)) end end end end end, fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V213, V214, V215)) end end end end end}))(V2)))) end end(E21, E22)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V218, V219, V220)) end end end end end, fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V223, V224, V225)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V226, V227) -> case V227 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(tan(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V226, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V230, V231, V232)) end end end end end, fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V235, V236, V237)) end end end end end}))(V2)))) end end(E23, E24)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V240, V241, V242)) end end end end end, fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V245, V246, V247)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E25, E26} -> (fun (V248, V249) -> case V249 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(asin(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V248, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V252, V253, V254)) end end end end end, fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V257, V258, V259)) end end end end end}))(V2)))) end end(E25, E26)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V262, V263, V264)) end end end end end, fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> fun (V269) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V267, V268, V269)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E27, E28} -> (fun (V270, V271) -> case V271 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(acos(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V270, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V274, V275, V276)) end end end end end, fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V279, V280, V281)) end end end end end}))(V2)))) end end(E27, E28)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V282) -> fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V284, V285, V286)) end end end end end, fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V289, V290, V291)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V292, V293) -> case V293 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(atan(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V292, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V296, V297, V298)) end end end end end, fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V301, V302, V303)) end end end end end}))(V2)))) end end(E29, E30)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V306, V307, V308)) end end end end end, fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V311, V312, V313)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V314, V315) -> case V315 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(sqrt(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V314, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V316) -> fun (V317) -> fun (V318) -> fun (V319) -> fun (V320) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V318, V319, V320)) end end end end end, fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> fun (V325) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V323, V324, V325)) end end end end end}))(V2)))) end end(E31, E32)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> fun (V330) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V328, V329, V330)) end end end end end, fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> fun (V335) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V333, V334, V335)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E33, E34} -> (fun (V336, V337) -> case V337 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(floor(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V336, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V338) -> fun (V339) -> fun (V340) -> fun (V341) -> fun (V342) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V340, V341, V342)) end end end end end, fun (V343) -> fun (V344) -> fun (V345) -> fun (V346) -> fun (V347) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V345, V346, V347)) end end end end end}))(V2)))) end end(E33, E34)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V348) -> fun (V349) -> fun (V350) -> fun (V351) -> fun (V352) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V350, V351, V352)) end end end end end, fun (V353) -> fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V355, V356, V357)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E35, E36} -> (fun (V358, V359) -> case V359 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble(ceil(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V358, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V360) -> fun (V361) -> fun (V362) -> fun (V363) -> fun (V364) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V362, V363, V364)) end end end end end, fun (V365) -> fun (V366) -> fun (V367) -> fun (V368) -> fun (V369) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V367, V368, V369)) end end end end end}))(V2)))) end end(E35, E36)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V370) -> fun (V371) -> fun (V372) -> fun (V373) -> fun (V374) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V372, V373, V374)) end end end end end, fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> fun (V379) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V377, V378, V379)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.Add', E37} -> (fun (V380) -> case V2 of {'Idris.Data.Vect.::', E38, E39} -> (fun (V381, V382) -> case V382 of {'Idris.Data.Vect.::', E40, E41} -> (fun (V383, V384) -> case V384 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"add_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V380)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V381, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V383, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> fun (V389) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V387, V388, V389)) end end end end end, fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> fun (V394) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V392, V393, V394)) end end end end end}))(V2)))) end end(E40, E41)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> fun (V399) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V397, V398, V399)) end end end end end, fun (V400) -> fun (V401) -> fun (V402) -> fun (V403) -> fun (V404) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V402, V403, V404)) end end end end end}))(V2)))) end end(E38, E39)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V405) -> fun (V406) -> fun (V407) -> fun (V408) -> fun (V409) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V407, V408, V409)) end end end end end, fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> fun (V414) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V412, V413, V414)) end end end end end}))(V2)))) end end(E37)); {'Idris.Core.TT.Sub', E42} -> (fun (V415) -> case V2 of {'Idris.Data.Vect.::', E43, E44} -> (fun (V416, V417) -> case V417 of {'Idris.Data.Vect.::', E45, E46} -> (fun (V418, V419) -> case V419 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"sub_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V415)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V416, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V418, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V420) -> fun (V421) -> fun (V422) -> fun (V423) -> fun (V424) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V422, V423, V424)) end end end end end, fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> fun (V429) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V427, V428, V429)) end end end end end}))(V2)))) end end(E45, E46)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V430) -> fun (V431) -> fun (V432) -> fun (V433) -> fun (V434) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V432, V433, V434)) end end end end end, fun (V435) -> fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V437, V438, V439)) end end end end end}))(V2)))) end end(E43, E44)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V440) -> fun (V441) -> fun (V442) -> fun (V443) -> fun (V444) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V442, V443, V444)) end end end end end, fun (V445) -> fun (V446) -> fun (V447) -> fun (V448) -> fun (V449) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V447, V448, V449)) end end end end end}))(V2)))) end end(E42)); {'Idris.Core.TT.Mul', E47} -> (fun (V450) -> case V2 of {'Idris.Data.Vect.::', E48, E49} -> (fun (V451, V452) -> case V452 of {'Idris.Data.Vect.::', E50, E51} -> (fun (V453, V454) -> case V454 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"mul_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V450)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V451, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V453, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V455) -> fun (V456) -> fun (V457) -> fun (V458) -> fun (V459) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V457, V458, V459)) end end end end end, fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> fun (V464) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V462, V463, V464)) end end end end end}))(V2)))) end end(E50, E51)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V465) -> fun (V466) -> fun (V467) -> fun (V468) -> fun (V469) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V467, V468, V469)) end end end end end, fun (V470) -> fun (V471) -> fun (V472) -> fun (V473) -> fun (V474) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V472, V473, V474)) end end end end end}))(V2)))) end end(E48, E49)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V475) -> fun (V476) -> fun (V477) -> fun (V478) -> fun (V479) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V477, V478, V479)) end end end end end, fun (V480) -> fun (V481) -> fun (V482) -> fun (V483) -> fun (V484) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V482, V483, V484)) end end end end end}))(V2)))) end end(E47)); {'Idris.Core.TT.Div', E52} -> (fun (V485) -> case V2 of {'Idris.Data.Vect.::', E53, E54} -> (fun (V486, V487) -> case V487 of {'Idris.Data.Vect.::', E55, E56} -> (fun (V488, V489) -> case V489 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"div_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V485)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V486, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V488, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V490) -> fun (V491) -> fun (V492) -> fun (V493) -> fun (V494) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V492, V493, V494)) end end end end end, fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> fun (V499) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V497, V498, V499)) end end end end end}))(V2)))) end end(E55, E56)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V500) -> fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V502, V503, V504)) end end end end end, fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V507, V508, V509)) end end end end end}))(V2)))) end end(E53, E54)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V510) -> fun (V511) -> fun (V512) -> fun (V513) -> fun (V514) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V512, V513, V514)) end end end end end, fun (V515) -> fun (V516) -> fun (V517) -> fun (V518) -> fun (V519) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V517, V518, V519)) end end end end end}))(V2)))) end end(E52)); {'Idris.Core.TT.Mod', E57} -> (fun (V520) -> case V2 of {'Idris.Data.Vect.::', E58, E59} -> (fun (V521, V522) -> case V522 of {'Idris.Data.Vect.::', E60, E61} -> (fun (V523, V524) -> case V524 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"mod_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V520)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V521, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V523, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V525) -> fun (V526) -> fun (V527) -> fun (V528) -> fun (V529) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V527, V528, V529)) end end end end end, fun (V530) -> fun (V531) -> fun (V532) -> fun (V533) -> fun (V534) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V532, V533, V534)) end end end end end}))(V2)))) end end(E60, E61)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V535) -> fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V537, V538, V539)) end end end end end, fun (V540) -> fun (V541) -> fun (V542) -> fun (V543) -> fun (V544) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V542, V543, V544)) end end end end end}))(V2)))) end end(E58, E59)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V545) -> fun (V546) -> fun (V547) -> fun (V548) -> fun (V549) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V547, V548, V549)) end end end end end, fun (V550) -> fun (V551) -> fun (V552) -> fun (V553) -> fun (V554) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V552, V553, V554)) end end end end end}))(V2)))) end end(E57)); {'Idris.Core.TT.ShiftL', E62} -> (fun (V555) -> case V2 of {'Idris.Data.Vect.::', E63, E64} -> (fun (V556, V557) -> case V557 of {'Idris.Data.Vect.::', E65, E66} -> (fun (V558, V559) -> case V559 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"shiftl_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V555)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V556, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V558, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V560) -> fun (V561) -> fun (V562) -> fun (V563) -> fun (V564) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V562, V563, V564)) end end end end end, fun (V565) -> fun (V566) -> fun (V567) -> fun (V568) -> fun (V569) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V567, V568, V569)) end end end end end}))(V2)))) end end(E65, E66)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V570) -> fun (V571) -> fun (V572) -> fun (V573) -> fun (V574) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V572, V573, V574)) end end end end end, fun (V575) -> fun (V576) -> fun (V577) -> fun (V578) -> fun (V579) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V577, V578, V579)) end end end end end}))(V2)))) end end(E63, E64)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V580) -> fun (V581) -> fun (V582) -> fun (V583) -> fun (V584) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V582, V583, V584)) end end end end end, fun (V585) -> fun (V586) -> fun (V587) -> fun (V588) -> fun (V589) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V587, V588, V589)) end end end end end}))(V2)))) end end(E62)); {'Idris.Core.TT.ShiftR', E67} -> (fun (V590) -> case V2 of {'Idris.Data.Vect.::', E68, E69} -> (fun (V591, V592) -> case V592 of {'Idris.Data.Vect.::', E70, E71} -> (fun (V593, V594) -> case V594 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"shiftr_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V590)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V591, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V593, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V595) -> fun (V596) -> fun (V597) -> fun (V598) -> fun (V599) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V597, V598, V599)) end end end end end, fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> fun (V604) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V602, V603, V604)) end end end end end}))(V2)))) end end(E70, E71)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V605) -> fun (V606) -> fun (V607) -> fun (V608) -> fun (V609) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V607, V608, V609)) end end end end end, fun (V610) -> fun (V611) -> fun (V612) -> fun (V613) -> fun (V614) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V612, V613, V614)) end end end end end}))(V2)))) end end(E68, E69)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V615) -> fun (V616) -> fun (V617) -> fun (V618) -> fun (V619) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V617, V618, V619)) end end end end end, fun (V620) -> fun (V621) -> fun (V622) -> fun (V623) -> fun (V624) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V622, V623, V624)) end end end end end}))(V2)))) end end(E67)); {'Idris.Core.TT.BAnd', E72} -> (fun (V625) -> case V2 of {'Idris.Data.Vect.::', E73, E74} -> (fun (V626, V627) -> case V627 of {'Idris.Data.Vect.::', E75, E76} -> (fun (V628, V629) -> case V629 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"and_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V625)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V626, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V628, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> fun (V634) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V632, V633, V634)) end end end end end, fun (V635) -> fun (V636) -> fun (V637) -> fun (V638) -> fun (V639) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V637, V638, V639)) end end end end end}))(V2)))) end end(E75, E76)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V640) -> fun (V641) -> fun (V642) -> fun (V643) -> fun (V644) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V642, V643, V644)) end end end end end, fun (V645) -> fun (V646) -> fun (V647) -> fun (V648) -> fun (V649) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V647, V648, V649)) end end end end end}))(V2)))) end end(E73, E74)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V650) -> fun (V651) -> fun (V652) -> fun (V653) -> fun (V654) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V652, V653, V654)) end end end end end, fun (V655) -> fun (V656) -> fun (V657) -> fun (V658) -> fun (V659) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V657, V658, V659)) end end end end end}))(V2)))) end end(E72)); {'Idris.Core.TT.BOr', E77} -> (fun (V660) -> case V2 of {'Idris.Data.Vect.::', E78, E79} -> (fun (V661, V662) -> case V662 of {'Idris.Data.Vect.::', E80, E81} -> (fun (V663, V664) -> case V664 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"or_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V660)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V661, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V663, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V665) -> fun (V666) -> fun (V667) -> fun (V668) -> fun (V669) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V667, V668, V669)) end end end end end, fun (V670) -> fun (V671) -> fun (V672) -> fun (V673) -> fun (V674) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V672, V673, V674)) end end end end end}))(V2)))) end end(E80, E81)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V675) -> fun (V676) -> fun (V677) -> fun (V678) -> fun (V679) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V677, V678, V679)) end end end end end, fun (V680) -> fun (V681) -> fun (V682) -> fun (V683) -> fun (V684) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V682, V683, V684)) end end end end end}))(V2)))) end end(E78, E79)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V685) -> fun (V686) -> fun (V687) -> fun (V688) -> fun (V689) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V687, V688, V689)) end end end end end, fun (V690) -> fun (V691) -> fun (V692) -> fun (V693) -> fun (V694) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V692, V693, V694)) end end end end end}))(V2)))) end end(E77)); {'Idris.Core.TT.BXOr', E82} -> (fun (V695) -> case V2 of {'Idris.Data.Vect.::', E83, E84} -> (fun (V696, V697) -> case V697 of {'Idris.Data.Vect.::', E85, E86} -> (fun (V698, V699) -> case V699 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"xor_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V695)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V696, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V698, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V700) -> fun (V701) -> fun (V702) -> fun (V703) -> fun (V704) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V702, V703, V704)) end end end end end, fun (V705) -> fun (V706) -> fun (V707) -> fun (V708) -> fun (V709) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V707, V708, V709)) end end end end end}))(V2)))) end end(E85, E86)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V710) -> fun (V711) -> fun (V712) -> fun (V713) -> fun (V714) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V712, V713, V714)) end end end end end, fun (V715) -> fun (V716) -> fun (V717) -> fun (V718) -> fun (V719) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V717, V718, V719)) end end end end end}))(V2)))) end end(E83, E84)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V720) -> fun (V721) -> fun (V722) -> fun (V723) -> fun (V724) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V722, V723, V724)) end end end end end, fun (V725) -> fun (V726) -> fun (V727) -> fun (V728) -> fun (V729) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V727, V728, V729)) end end end end end}))(V2)))) end end(E82)); {'Idris.Core.TT.LT', E87} -> (fun (V730) -> case V2 of {'Idris.Data.Vect.::', E88, E89} -> (fun (V731, V732) -> case V732 of {'Idris.Data.Vect.::', E90, E91} -> (fun (V733, V734) -> case V734 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"lt_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V730)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V731, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V733, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V735) -> fun (V736) -> fun (V737) -> fun (V738) -> fun (V739) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V737, V738, V739)) end end end end end, fun (V740) -> fun (V741) -> fun (V742) -> fun (V743) -> fun (V744) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V742, V743, V744)) end end end end end}))(V2)))) end end(E90, E91)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V745) -> fun (V746) -> fun (V747) -> fun (V748) -> fun (V749) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V747, V748, V749)) end end end end end, fun (V750) -> fun (V751) -> fun (V752) -> fun (V753) -> fun (V754) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V752, V753, V754)) end end end end end}))(V2)))) end end(E88, E89)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V755) -> fun (V756) -> fun (V757) -> fun (V758) -> fun (V759) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V757, V758, V759)) end end end end end, fun (V760) -> fun (V761) -> fun (V762) -> fun (V763) -> fun (V764) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V762, V763, V764)) end end end end end}))(V2)))) end end(E87)); {'Idris.Core.TT.GT', E92} -> (fun (V765) -> case V2 of {'Idris.Data.Vect.::', E93, E94} -> (fun (V766, V767) -> case V767 of {'Idris.Data.Vect.::', E95, E96} -> (fun (V768, V769) -> case V769 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"gt_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V765)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V766, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V768, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V770) -> fun (V771) -> fun (V772) -> fun (V773) -> fun (V774) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V772, V773, V774)) end end end end end, fun (V775) -> fun (V776) -> fun (V777) -> fun (V778) -> fun (V779) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V777, V778, V779)) end end end end end}))(V2)))) end end(E95, E96)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V780) -> fun (V781) -> fun (V782) -> fun (V783) -> fun (V784) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V782, V783, V784)) end end end end end, fun (V785) -> fun (V786) -> fun (V787) -> fun (V788) -> fun (V789) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V787, V788, V789)) end end end end end}))(V2)))) end end(E93, E94)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V790) -> fun (V791) -> fun (V792) -> fun (V793) -> fun (V794) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V792, V793, V794)) end end end end end, fun (V795) -> fun (V796) -> fun (V797) -> fun (V798) -> fun (V799) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V797, V798, V799)) end end end end end}))(V2)))) end end(E92)); {'Idris.Core.TT.EQ', E97} -> (fun (V800) -> case V2 of {'Idris.Data.Vect.::', E98, E99} -> (fun (V801, V802) -> case V802 of {'Idris.Data.Vect.::', E100, E101} -> (fun (V803, V804) -> case V804 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"eq_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V800)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V801, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V803, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V805) -> fun (V806) -> fun (V807) -> fun (V808) -> fun (V809) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V807, V808, V809)) end end end end end, fun (V810) -> fun (V811) -> fun (V812) -> fun (V813) -> fun (V814) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V812, V813, V814)) end end end end end}))(V2)))) end end(E100, E101)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V815) -> fun (V816) -> fun (V817) -> fun (V818) -> fun (V819) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V817, V818, V819)) end end end end end, fun (V820) -> fun (V821) -> fun (V822) -> fun (V823) -> fun (V824) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V822, V823, V824)) end end end end end}))(V2)))) end end(E98, E99)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V825) -> fun (V826) -> fun (V827) -> fun (V828) -> fun (V829) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V827, V828, V829)) end end end end end, fun (V830) -> fun (V831) -> fun (V832) -> fun (V833) -> fun (V834) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V832, V833, V834)) end end end end end}))(V2)))) end end(E97)); {'Idris.Core.TT.LTE', E102} -> (fun (V835) -> case V2 of {'Idris.Data.Vect.::', E103, E104} -> (fun (V836, V837) -> case V837 of {'Idris.Data.Vect.::', E105, E106} -> (fun (V838, V839) -> case V839 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"lte_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V835)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V836, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V838, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V840) -> fun (V841) -> fun (V842) -> fun (V843) -> fun (V844) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V842, V843, V844)) end end end end end, fun (V845) -> fun (V846) -> fun (V847) -> fun (V848) -> fun (V849) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V847, V848, V849)) end end end end end}))(V2)))) end end(E105, E106)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V850) -> fun (V851) -> fun (V852) -> fun (V853) -> fun (V854) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V852, V853, V854)) end end end end end, fun (V855) -> fun (V856) -> fun (V857) -> fun (V858) -> fun (V859) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V857, V858, V859)) end end end end end}))(V2)))) end end(E103, E104)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V860) -> fun (V861) -> fun (V862) -> fun (V863) -> fun (V864) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V862, V863, V864)) end end end end end, fun (V865) -> fun (V866) -> fun (V867) -> fun (V868) -> fun (V869) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V867, V868, V869)) end end end end end}))(V2)))) end end(E102)); {'Idris.Core.TT.GTE', E107} -> (fun (V870) -> case V2 of {'Idris.Data.Vect.::', E108, E109} -> (fun (V871, V872) -> case V872 of {'Idris.Data.Vect.::', E110, E111} -> (fun (V873, V874) -> case V874 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"gte_"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cConstant'(V870)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V871, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V873, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V875) -> fun (V876) -> fun (V877) -> fun (V878) -> fun (V879) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V877, V878, V879)) end end end end end, fun (V880) -> fun (V881) -> fun (V882) -> fun (V883) -> fun (V884) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V882, V883, V884)) end end end end end}))(V2)))) end end(E110, E111)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V885) -> fun (V886) -> fun (V887) -> fun (V888) -> fun (V889) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V887, V888, V889)) end end end end end, fun (V890) -> fun (V891) -> fun (V892) -> fun (V893) -> fun (V894) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V892, V893, V894)) end end end end end}))(V2)))) end end(E108, E109)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V895) -> fun (V896) -> fun (V897) -> fun (V898) -> fun (V899) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V897, V898, V899)) end end end end end, fun (V900) -> fun (V901) -> fun (V902) -> fun (V903) -> fun (V904) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V902, V903, V904)) end end end end end}))(V2)))) end end(E107)); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E112, E113} -> (fun (V905, V906) -> case V906 of {'Idris.Data.Vect.::', E114, E115} -> (fun (V907, V908) -> case V908 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"strIndex("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V905, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V907, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V909) -> fun (V910) -> fun (V911) -> fun (V912) -> fun (V913) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V911, V912, V913)) end end end end end, fun (V914) -> fun (V915) -> fun (V916) -> fun (V917) -> fun (V918) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V916, V917, V918)) end end end end end}))(V2)))) end end(E114, E115)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V919) -> fun (V920) -> fun (V921) -> fun (V922) -> fun (V923) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V921, V922, V923)) end end end end end, fun (V924) -> fun (V925) -> fun (V926) -> fun (V927) -> fun (V928) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V926, V927, V928)) end end end end end}))(V2)))) end end(E112, E113)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V929) -> fun (V930) -> fun (V931) -> fun (V932) -> fun (V933) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V931, V932, V933)) end end end end end, fun (V934) -> fun (V935) -> fun (V936) -> fun (V937) -> fun (V938) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V936, V937, V938)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E116, E117} -> (fun (V939, V940) -> case V940 of {'Idris.Data.Vect.::', E118, E119} -> (fun (V941, V942) -> case V942 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"strCons("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V939, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V941, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V943) -> fun (V944) -> fun (V945) -> fun (V946) -> fun (V947) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V945, V946, V947)) end end end end end, fun (V948) -> fun (V949) -> fun (V950) -> fun (V951) -> fun (V952) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V950, V951, V952)) end end end end end}))(V2)))) end end(E118, E119)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V953) -> fun (V954) -> fun (V955) -> fun (V956) -> fun (V957) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V955, V956, V957)) end end end end end, fun (V958) -> fun (V959) -> fun (V960) -> fun (V961) -> fun (V962) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V960, V961, V962)) end end end end end}))(V2)))) end end(E116, E117)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V963) -> fun (V964) -> fun (V965) -> fun (V966) -> fun (V967) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V965, V966, V967)) end end end end end, fun (V968) -> fun (V969) -> fun (V970) -> fun (V971) -> fun (V972) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V970, V971, V972)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E120, E121} -> (fun (V973, V974) -> case V974 of {'Idris.Data.Vect.::', E122, E123} -> (fun (V975, V976) -> case V976 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"strAppend("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V973, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V975, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V977) -> fun (V978) -> fun (V979) -> fun (V980) -> fun (V981) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V979, V980, V981)) end end end end end, fun (V982) -> fun (V983) -> fun (V984) -> fun (V985) -> fun (V986) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V984, V985, V986)) end end end end end}))(V2)))) end end(E122, E123)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V987) -> fun (V988) -> fun (V989) -> fun (V990) -> fun (V991) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V989, V990, V991)) end end end end end, fun (V992) -> fun (V993) -> fun (V994) -> fun (V995) -> fun (V996) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V994, V995, V996)) end end end end end}))(V2)))) end end(E120, E121)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V997) -> fun (V998) -> fun (V999) -> fun (V1000) -> fun (V1001) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V999, V1000, V1001)) end end end end end, fun (V1002) -> fun (V1003) -> fun (V1004) -> fun (V1005) -> fun (V1006) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1004, V1005, V1006)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E124, E125} -> (fun (V1007, V1008) -> case V1008 of {'Idris.Data.Vect.::', E126, E127} -> (fun (V1009, V1010) -> case V1010 of {'Idris.Data.Vect.::', E128, E129} -> (fun (V1011, V1012) -> case V1012 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"strSubstr("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1007, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1009, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1011, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1013) -> fun (V1014) -> fun (V1015) -> fun (V1016) -> fun (V1017) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1015, V1016, V1017)) end end end end end, fun (V1018) -> fun (V1019) -> fun (V1020) -> fun (V1021) -> fun (V1022) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1020, V1021, V1022)) end end end end end}))(V2)))) end end(E128, E129)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1023) -> fun (V1024) -> fun (V1025) -> fun (V1026) -> fun (V1027) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1025, V1026, V1027)) end end end end end, fun (V1028) -> fun (V1029) -> fun (V1030) -> fun (V1031) -> fun (V1032) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1030, V1031, V1032)) end end end end end}))(V2)))) end end(E126, E127)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1033) -> fun (V1034) -> fun (V1035) -> fun (V1036) -> fun (V1037) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1035, V1036, V1037)) end end end end end, fun (V1038) -> fun (V1039) -> fun (V1040) -> fun (V1041) -> fun (V1042) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1040, V1041, V1042)) end end end end end}))(V2)))) end end(E124, E125)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1043) -> fun (V1044) -> fun (V1045) -> fun (V1046) -> fun (V1047) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1045, V1046, V1047)) end end end end end, fun (V1048) -> fun (V1049) -> fun (V1050) -> fun (V1051) -> fun (V1052) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1050, V1051, V1052)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E130, E131} -> (fun (V1053, V1054) -> case V1054 of {'Idris.Data.Vect.::', E132, E133} -> (fun (V1055, V1056) -> case V1056 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V1057, V1058) -> case V1058 of {'Idris.Data.Vect.Nil'} -> (fun () -> V1057 end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1059) -> fun (V1060) -> fun (V1061) -> fun (V1062) -> fun (V1063) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1061, V1062, V1063)) end end end end end, fun (V1064) -> fun (V1065) -> fun (V1066) -> fun (V1067) -> fun (V1068) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1066, V1067, V1068)) end end end end end}))(V2)))) end end(E134, E135)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1069) -> fun (V1070) -> fun (V1071) -> fun (V1072) -> fun (V1073) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1071, V1072, V1073)) end end end end end, fun (V1074) -> fun (V1075) -> fun (V1076) -> fun (V1077) -> fun (V1078) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1076, V1077, V1078)) end end end end end}))(V2)))) end end(E132, E133)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1079) -> fun (V1080) -> fun (V1081) -> fun (V1082) -> fun (V1083) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1081, V1082, V1083)) end end end end end, fun (V1084) -> fun (V1085) -> fun (V1086) -> fun (V1087) -> fun (V1088) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1086, V1087, V1088)) end end end end end}))(V2)))) end end(E130, E131)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1089) -> fun (V1090) -> fun (V1091) -> fun (V1092) -> fun (V1093) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1091, V1092, V1093)) end end end end end, fun (V1094) -> fun (V1095) -> fun (V1096) -> fun (V1097) -> fun (V1098) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1096, V1097, V1098)) end end end end end}))(V2)))) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V1099, V1100) -> case V1100 of {'Idris.Data.Vect.::', E138, E139} -> (fun (V1101, V1102) -> case V1102 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"idris2_crash("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1101, <<");"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1103) -> fun (V1104) -> fun (V1105) -> fun (V1106) -> fun (V1107) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1105, V1106, V1107)) end end end end end, fun (V1108) -> fun (V1109) -> fun (V1110) -> fun (V1111) -> fun (V1112) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1110, V1111, V1112)) end end end end end}))(V2)))) end end(E138, E139)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1113) -> fun (V1114) -> fun (V1115) -> fun (V1116) -> fun (V1117) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1115, V1116, V1117)) end end end end end, fun (V1118) -> fun (V1119) -> fun (V1120) -> fun (V1121) -> fun (V1122) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1120, V1121, V1122)) end end end end end}))(V2)))) end end(E136, E137)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1123) -> fun (V1124) -> fun (V1125) -> fun (V1126) -> fun (V1127) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1125, V1126, V1127)) end end end end end, fun (V1128) -> fun (V1129) -> fun (V1130) -> fun (V1131) -> fun (V1132) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1130, V1131, V1132)) end end end end end}))(V2)))) end end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1133) -> fun (V1134) -> fun (V1135) -> fun (V1136) -> fun (V1137) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1135, V1136, V1137)) end end end end end, fun (V1138) -> fun (V1139) -> fun (V1140) -> fun (V1141) -> fun (V1142) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable__(Vect $n)'('erased', 'erased', 'erased', V1140, V1141, V1142)) end end end end end}))(V2)))) end.
'un--cName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cCleanString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, ('un--cName'(V2)))))) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('un--cCleanString'(V3)) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cCleanString'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V5)))))))) end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"pat__"/utf8>>, ('un--cName'(V6)))) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--cName'(V9)) end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"n__"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V13, V14)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V16, V17)) end end}}, V10)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, ('un--cName'(V11)))))))) end(E9, E10)); {'Idris.Core.Name.CaseBlock', E11, E12} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"case__"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V18)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V19)))))))))) end(E11, E12)); {'Idris.Core.Name.WithBlock', E13, E14} -> (fun (V20, V21) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"with__"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V20)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V21)))))))))) end(E13, E14)); {'Idris.Core.Name.Resolved', E15} -> (fun (V22) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"fn__"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V22)))))) end(E15)); _ -> <<"UNKNOWNNAME"/utf8>> end.
'un--cConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V1)), <<")"/utf8>>)))) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V2)), <<")"/utf8>>)))) end(E1)); {'Idris.Core.TT.Db', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Double'(V3)), <<")"/utf8>>)))) end(E2)); {'Idris.Core.TT.Ch', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeChar("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--escapeChar'(V4)), <<")"/utf8>>)))) end(E3)); {'Idris.Core.TT.Str', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeString("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--cStringQuoted'(V5)), <<")"/utf8>>)))) end(E4)); {'Idris.Core.TT.WorldVal'} -> (fun () -> <<"(Value*)makeWorld()"/utf8>> end()); {'Idris.Core.TT.IntType'} -> (fun () -> <<"i32"/utf8>> end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> <<"i64"/utf8>> end()); {'Idris.Core.TT.StringType'} -> (fun () -> <<"string"/utf8>> end()); {'Idris.Core.TT.CharType'} -> (fun () -> <<"char"/utf8>> end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> <<"double"/utf8>> end()); {'Idris.Core.TT.WorldType'} -> (fun () -> <<"f32"/utf8>> end()); {'Idris.Core.TT.B8', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeInt8("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V6)), <<")"/utf8>>)))) end(E5)); {'Idris.Core.TT.B16', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeInt16("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V7)), <<")"/utf8>>)))) end(E6)); {'Idris.Core.TT.B32', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V8)), <<")"/utf8>>)))) end(E7)); {'Idris.Core.TT.B64', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(Value*)makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V9)), <<")"/utf8>>)))) end(E8)); {'Idris.Core.TT.Bits8Type'} -> (fun () -> <<"Bits8"/utf8>> end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> <<"Bits16"/utf8>> end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> <<"Bits32"/utf8>> end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> <<"Bits64"/utf8>> end()); _ -> <<"UNKNOWN"/utf8>> end.
'un--cCleanString'(V0) -> (('un--showcCleanString'(('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<""/utf8>>)).
'un--cArgsVectANF'(V0, V1) -> case V1 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> fun (V5) -> begin (V6 = (('un--cArgsVectANF'('erased', V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', ('un--varName'(V3)), V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addExternalLib'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--addExternalLib-6686'(V1, V0, V6, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V9, V10)) end end}, V1, V6))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCommaToList'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  "/utf8>>, V1)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, V3)) end, V2))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
