-module('Idris.Idris2.Idris.IDEMode.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--replIDE-4864'/6,
  'case--case block in case block in case block in loop-4746'/12,
  'case--case block in case block in loop-4673'/11,
  'case--case block in loop-4624'/11,
  'case--loop-4590'/6,
  'case--loop,updateOutput-4551'/7,
  'case--displayIDEResult-4475'/8,
  'case--displayIDEResult,tagSexp-4349'/9,
  'case--displayIDEResult,semverSexp-4301'/9,
  'case--displayIDEResult-4236'/9,
  'case--process-3414'/8,
  'case--getInput-3332'/3,
  'case--getFLine-3258'/2,
  'case--case block in getChar-3214'/2,
  'case--getChar-3178'/2,
  'case--case block in case block in case block in initIDESocketFile-3119'/9,
  'case--case block in case block in initIDESocketFile-3046'/7,
  'case--case block in initIDESocketFile-2996'/6,
  'case--initIDESocketFile-2936'/3,
  'nested--22641-4297--in--un--versionSExp'/8,
  'nested--23168-4542--in--un--updateOutput'/7,
  'nested--22641-4296--in--un--tagSexp'/8,
  'nested--22641-4295--in--un--semverSexp'/8,
  'nested--22641-4284--in--un--optionsSexp'/8,
  'dn--un--toSExp_SExpable__REPLOpt'/1,
  'dn--un--toSExp_SExpable__REPLEval'/1,
  'un--todoCmd'/3,
  'un--socketToFile'/1,
  'un--returnFromIDE'/3,
  'un--replWrap'/2,
  'un--replIDE'/6,
  'un--processCatch'/7,
  'un--process'/6,
  'un--printIDEResultWithHighlight'/3,
  'un--printIDEResult'/3,
  'un--printIDEError'/5,
  'un--loop'/6,
  'un--initIDESocketFile'/3,
  'un--idePutStrLn'/3,
  'un--handleIDEResult'/8,
  'un--getNChars'/2,
  'un--getInput'/2,
  'un--getFLine'/2,
  'un--getChar'/1,
  'un--displayIDEResult'/8
]).
'case--replIDE-4864'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V0, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V7)) end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E1, E2, E3} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V13 = (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V12) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V12)) end, V10, ('Idris.Idris2.Idris.IDEMode.Commands':'un--version'(2, 0))))(V11))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('un--loop'(V4, V3, V2, V1, V0, V11)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in loop-4746'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = ('nested--23168-4542--in--un--updateOutput'(V0, V1, V2, V3, V4, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V19 = ('un--processCatch'(V4, V3, V2, V1, V0, V13, V15))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V22 = (('un--handleIDEResult'(V4, V3, V2, V1, V0, V5, V14, V21))(V15))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> ('un--loop'(V4, V3, V2, V1, V0, V15)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V25) -> begin (V26 = ('un--printIDEError'(V0, V5, V7, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Unrecognised command:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--show_Show__SExp'(V10)))))), V25))), case V26 of {'Idris.Prelude.Types.Left', E9} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V28) -> ('un--loop'(V4, V3, V2, V1, V0, V25)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in loop-4673'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> fun (V12) -> begin (V18 = ('un--printIDEError'(V0, V5, V7, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Parse error:"/utf8>>)), ('Idris.Idris2.Parser.Support':'dn--un--pretty_Pretty__(ParseError $tok)'('erased', 'erased', {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V13) -> fun (V14) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--pretty_Pretty__Token'('erased', V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--prettyPrec_Pretty__Token'('erased', V16, V17)) end end end}, V11)))), V12))), case V18 of {'Idris.Prelude.Types.Left', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V20) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> ('case--case block in case block in case block in loop-4746'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V21, ('Idris.Idris2.Idris.IDEMode.Commands':'un--getMsg'(V21)))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in loop-4624'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> ('case--case block in case block in loop-4673'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Idris.IDEMode.Parser':'un--parseSExp'(V9)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--loop-4590'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V0, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V7)) end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E1, E2, E3} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V13 = begin (V12 = ('un--getInput'(V9, V11))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = {'Idris.Idris.REPLOpts.IDEMode', V8, V9, V10}), (('case--case block in loop-4624'(V0, V1, V2, V3, V4, V10, V9, V8, V16, V15, 1))(V11)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--loop,updateOutput-4551'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.REPLOpts.IDEMode', E0, E1, E2} -> (fun (V7, V8, V9) -> fun (V10) -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V0, {'Idris.Idris.REPLOpts.IDEMode', V5, V8, V9}, V10)) end end(E0, E1, E2)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--displayIDEResult-4475'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V8)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"auto"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayIDEResult,tagSexp-4349'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', <<""/utf8>>} | []]} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V9} | []]} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayIDEResult,semverSexp-4301'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Nat'(V13)) end, [V9 | [V11 | [V12 | []]]]))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayIDEResult-4236'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V9)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__Totality'(V10)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-3414'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> V8 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getInput-3332'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V4 = ('un--getFLine'(V0, V3))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(V1)), V4)) end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--getNChars'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V5))))))(V6))), ('Idris.Idris2.Prelude.Types':'un--pack'(V7)) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFLine-3258'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> V2 end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> fun (V5) -> begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Failed to read a line"/utf8>>))(V5))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> V40 end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), begin (V48 = (V45(V46))), (V47(V48)) end end end end end end end}, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), ((V52(V54))(V53)) end end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V56(V57))), (V58(V57)) end end end end}, fun (V59) -> fun (V60) -> V60 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V5)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getChar-3214'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> V2 end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> fun (V5) -> begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Failed to read a character"/utf8>>))(V5))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> V40 end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), begin (V48 = (V45(V46))), (V47(V48)) end end end end end end end}, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), ((V52(V54))(V53)) end end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V56(V57))), (V58(V57)) end end end end}, fun (V59) -> fun (V60) -> V60 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V5)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getChar-3178'(V0, V1) -> case V1 of 0 -> fun (V2) -> begin (V30 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, <<"Alas the file is done, aborting"/utf8>>))(V2))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V2)) end end; 1 -> fun (V58) -> begin (V86 = (('Idris.Idris2.Erlang.System.File':'un--fGetChar'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> V65 end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), begin (V73 = (V70(V71))), (V72(V73)) end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), ((V77(V79))(V78)) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V81(V82))), (V83(V82)) end end end end}, fun (V84) -> fun (V85) -> V85 end end}, V0))(V58))), case V86 of {'Idris.Prelude.Types.Right', E0} -> (fun (V87) -> V87 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V88) -> begin (V116 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> fun (V96) -> V95 end end end, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> begin (V102 = (V99(V101))), begin (V103 = (V100(V101))), (V102(V103)) end end end end end end end}, fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V106(V108))), ((V107(V109))(V108)) end end end end end end, fun (V110) -> fun (V111) -> fun (V112) -> begin (V113 = (V111(V112))), (V113(V112)) end end end end}, fun (V114) -> fun (V115) -> V115 end end}, <<"Failed to read a character"/utf8>>))(V58))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V119, V120, V121)) end end end end end, fun (V122) -> fun (V123) -> fun (V124) -> V123 end end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> begin (V130 = (V127(V129))), begin (V131 = (V128(V129))), (V130(V131)) end end end end end end end}, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V134(V136))), ((V135(V137))(V136)) end end end end end end, fun (V138) -> fun (V139) -> fun (V140) -> begin (V141 = (V139(V140))), (V141(V140)) end end end end}, fun (V142) -> fun (V143) -> V143 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V58)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in initIDESocketFile-3119'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Failed to accept on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V9))))} end end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> ('un--socketToFile'(V12)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in initIDESocketFile-3046'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Failed to listen on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V5))))} end; 1 -> fun (V8) -> begin (V36 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V0))))(V8))), begin (V64 = (('Idris.Idris2.Erlang.System.File':'un--fflush'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'())))(V8))), begin (V92 = (('Idris.Idris2.Network.Socket':'un--accept'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V67, V68, V69)) end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> V71 end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), begin (V79 = (V76(V77))), (V78(V79)) end end end end end end end}, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V82(V84))), ((V83(V85))(V84)) end end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V87(V88))), (V89(V88)) end end end end}, fun (V90) -> fun (V91) -> V91 end end}, V2))(V8))), case V92 of {'Idris.Prelude.Types.Left', E0} -> (fun (V93) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Failed to accept on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V93))))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V94) -> case V94 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V95, V96) -> (('un--socketToFile'(V95))(V8)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in initIDESocketFile-2996'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Failed to bind socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V4))))} end; 1 -> fun (V7) -> begin (V35 = (('Idris.Idris2.Network.Socket':'un--listen'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V2))(V7))), (('case--case block in case block in initIDESocketFile-3046'(V0, V1, V2, V3, V4, V35, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V35, 0))))(V7)) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--initIDESocketFile-2936'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> fun (V4) -> begin (V32 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V3))))(V4))), begin (V60 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, <<"Failed to open socket"/utf8>>))(V4))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> V67 end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), begin (V75 = (V72(V73))), (V74(V75)) end end end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), ((V79(V81))(V80)) end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V83(V84))), (V85(V84)) end end end end}, fun (V86) -> fun (V87) -> V87 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V4)) end end end end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V88) -> fun (V89) -> begin (V117 = (('Idris.Idris2.Network.Socket':'un--bind'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V92, V93, V94)) end end end end end, fun (V95) -> fun (V96) -> fun (V97) -> V96 end end end, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V100(V102))), begin (V104 = (V101(V102))), (V103(V104)) end end end end end end end}, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V107(V109))), ((V108(V110))(V109)) end end end end end end, fun (V111) -> fun (V112) -> fun (V113) -> begin (V114 = (V112(V113))), (V114(V113)) end end end end}, fun (V115) -> fun (V116) -> V116 end end}, V88, {'Idris.Prelude.Types.Just', {'Idris.Network.Socket.Data.Hostname', V1}}, V0))(V89))), begin (V118 = {'Idris.Prelude.Types.Right', V88}), (('case--case block in initIDESocketFile-2996'(V0, V1, V88, V118, V117, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V117, 0))))(V89)) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--22641-4297--in--un--versionSExp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', [('nested--22641-4295--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | [('nested--22641-4296--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | []]]}.
'nested--23168-4542--in--un--updateOutput'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.REPLOpts':'un--getOutput'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Idris.REPLOpts.IDEMode', E2, E3, E4} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V0, {'Idris.Idris.REPLOpts.IDEMode', V5, V11, V12}, V6)) end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--22641-4296--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--displayIDEResult,tagSexp-4349'(V0, V1, V2, V3, V4, V5, V6, V7, case V0 of {'Idris.Idris.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> V9 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--22641-4295--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--displayIDEResult,semverSexp-4301'(V0, V1, V2, V3, V4, V5, V6, V7, case V0 of {'Idris.Idris.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> V8 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--22641-4284--in--un--optionsSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('dn--un--toSExp_SExpable__REPLOpt'(V8)) end, V0))}.
'dn--un--toSExp_SExpable__REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-implicits"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Bool'(V1)) | []]]} end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-namespace"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Bool'(V2)) | []]]} end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-types"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Bool'(V3)) | []]]} end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"eval"/utf8>>} | [('dn--un--toSExp_SExpable__REPLEval'(V4)) | []]]} end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"editor"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V5)) | []]]} end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"cg"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V6)) | []]]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable__REPLEval'(V0) -> case V0 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"typecheck"/utf8>>} end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"normalise"/utf8>>} end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"execute"/utf8>>} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--todoCmd'(V0, V1, V2) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V0, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<": command not yet implemented. Hopefully soon!"/utf8>>)))), V2)).
'un--socketToFile'(V0) -> case V0 of {'Idris.Network.Socket.Data.MkSocket', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Left', <<"Failed to fdopen socket file descriptor"/utf8>>} end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--returnFromIDE'(V0, V1, V2) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V3)) end, V0, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"return"/utf8>>} | [V2 | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Integer'(V1)) | []]]]})).
'un--replWrap'(V0, V1) -> begin (V2 = (V0(V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', V4}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replIDE'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPLOpts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPLOpts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPLOpts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V13)) end, V12, ('Idris.Idris2.Idris.IDEMode.Commands':'un--version'(2, 0))))(V5))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> ('un--loop'(V0, V1, V2, V3, V4, V5)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processCatch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V22) -> begin (V23 = (('un--process'(V0, V1, V2, V3, V4, V5))(V22))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V22))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', V25} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V17))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V4, V21))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V29))(V30))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.REPLError', V49}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.IDEMode.Commands.Interpret', E0} -> (fun (V6) -> fun (V7) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--interpret'(V0, V1, V2, V3, V4, V6)), V7)) end end(E0)); {'Idris.Idris.IDEMode.Commands.LoadFile', E1, E2} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('Idris.Idris2.Idris.Package':'un--findIpkg'(V0, V4, {'Idris.Prelude.Types.Just', V8}, V10))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V15 = case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V8 end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V14) -> V14 end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--replWrap'(fun (V16) -> begin (V17 = (('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Load', V15}))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--outputSyntaxHighlighting'(V3, V4, V15, V19, V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V10)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Idris.IDEMode.Commands.TypeOf', E8, E9} -> (fun (V20, V21) -> case V21 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Check', {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', V20}}})), V22)) end end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V24, V25) -> fun (V26) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.TypeAt', V24, V25, {'Idris.Core.Name.UN', V20}}})), V26)) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); {'Idris.Idris.IDEMode.Commands.CaseSplit', E13, E14, E15} -> (fun (V27, V28, V29) -> fun (V30) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.CaseSplit', 1, V27, V28, {'Idris.Core.Name.UN', V29}}})), V30)) end end(E13, E14, E15)); {'Idris.Idris.IDEMode.Commands.AddClause', E16, E17} -> (fun (V31, V32) -> fun (V33) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.AddClause', 1, V31, {'Idris.Core.Name.UN', V32}}})), V33)) end end(E16, E17)); {'Idris.Idris.IDEMode.Commands.AddMissing', E18, E19} -> (fun (V34, V35) -> fun (V36) -> begin (V37 = ('un--todoCmd'(V4, <<"add-missing"/utf8>>, V36))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Edited', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19)); {'Idris.Idris.IDEMode.Commands.ExprSearch', E22, E23, E24, E25} -> (fun (V40, V41, V42, V43) -> fun (V44) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearch', 1, V40, {'Idris.Core.Name.UN', V41}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V45) -> {'Idris.Core.Name.UN', V45} end, V42))}})), V44)) end end(E22, E23, E24, E25)); {'Idris.Idris.IDEMode.Commands.ExprSearchNext'} -> (fun () -> fun (V46) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearchNext'}})), V46)) end end()); {'Idris.Idris.IDEMode.Commands.GenerateDef', E26, E27} -> (fun (V47, V48) -> fun (V49) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDef', 1, V47, {'Idris.Core.Name.UN', V48}, 0}})), V49)) end end(E26, E27)); {'Idris.Idris.IDEMode.Commands.GenerateDefNext'} -> (fun () -> fun (V50) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDefNext'}})), V50)) end end()); {'Idris.Idris.IDEMode.Commands.MakeLemma', E28, E29} -> (fun (V51, V52) -> fun (V53) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeLemma', 1, V51, {'Idris.Core.Name.UN', V52}}})), V53)) end end(E28, E29)); {'Idris.Idris.IDEMode.Commands.MakeCase', E30, E31} -> (fun (V54, V55) -> fun (V56) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeCase', 1, V54, {'Idris.Core.Name.UN', V55}}})), V56)) end end(E30, E31)); {'Idris.Idris.IDEMode.Commands.MakeWith', E32, E33} -> (fun (V57, V58) -> fun (V59) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeWith', 1, V57, {'Idris.Core.Name.UN', V58}}})), V59)) end end(E32, E33)); {'Idris.Idris.IDEMode.Commands.DocsFor', E34, E35} -> (fun (V60, V61) -> fun (V62) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Doc', {'Idris.Core.Name.UN', V60}})), V62)) end end(E34, E35)); {'Idris.Idris.IDEMode.Commands.Apropos', E36} -> (fun (V63) -> fun (V64) -> begin (V65 = ('un--todoCmd'(V4, <<"apropros"/utf8>>, V64))), case V65 of {'Idris.Prelude.Types.Left', E37} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); {'Idris.Idris.IDEMode.Commands.Directive', E39} -> (fun (V68) -> fun (V69) -> begin (V70 = ('un--todoCmd'(V4, <<"directive"/utf8>>, V69))), case V70 of {'Idris.Prelude.Types.Left', E40} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); {'Idris.Idris.IDEMode.Commands.WhoCalls', E42} -> (fun (V73) -> fun (V74) -> begin (V75 = ('un--todoCmd'(V4, <<"who-calls"/utf8>>, V74))), case V75 of {'Idris.Prelude.Types.Left', E43} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E42)); {'Idris.Idris.IDEMode.Commands.CallsWho', E45} -> (fun (V78) -> fun (V79) -> begin (V80 = ('un--todoCmd'(V4, <<"calls-who"/utf8>>, V79))), case V80 of {'Idris.Prelude.Types.Left', E46} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45)); {'Idris.Idris.IDEMode.Commands.BrowseNamespace', E48} -> (fun (V83) -> fun (V84) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V83))})), V84)) end end(E48)); {'Idris.Idris.IDEMode.Commands.NormaliseTerm', E49} -> (fun (V85) -> fun (V86) -> begin (V87 = ('un--todoCmd'(V4, <<"normalise-term"/utf8>>, V86))), case V87 of {'Idris.Prelude.Types.Left', E50} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V85}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); {'Idris.Idris.IDEMode.Commands.ShowTermImplicits', E52} -> (fun (V90) -> fun (V91) -> begin (V92 = ('un--todoCmd'(V4, <<"show-term-implicits"/utf8>>, V91))), case V92 of {'Idris.Prelude.Types.Left', E53} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V90}} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E52)); {'Idris.Idris.IDEMode.Commands.HideTermImplicits', E55} -> (fun (V95) -> fun (V96) -> begin (V97 = ('un--todoCmd'(V4, <<"hide-term-implicits"/utf8>>, V96))), case V97 of {'Idris.Prelude.Types.Left', E56} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V95}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55)); {'Idris.Idris.IDEMode.Commands.ElaborateTerm', E58} -> (fun (V100) -> fun (V101) -> begin (V102 = ('un--todoCmd'(V4, <<"elaborate-term"/utf8>>, V101))), case V102 of {'Idris.Prelude.Types.Left', E59} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.TTTerm', V100}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E58)); {'Idris.Idris.IDEMode.Commands.PrintDefinition', E61} -> (fun (V105) -> fun (V106) -> begin (V107 = ('un--todoCmd'(V4, <<"print-definition"/utf8>>, V106))), case V107 of {'Idris.Prelude.Types.Left', E62} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V105))}}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61)); {'Idris.Idris.IDEMode.Commands.ReplCompletions', E64} -> (fun (V110) -> fun (V111) -> begin (V112 = ('un--todoCmd'(V4, <<"repl-completions"/utf8>>, V111))), case V112 of {'Idris.Prelude.Types.Left', E65} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E64)); {'Idris.Idris.IDEMode.Commands.Version'} -> (fun () -> fun (V115) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.ShowVersion'})), V115)) end end()); {'Idris.Idris.IDEMode.Commands.Metavariables', E67} -> (fun (V116) -> fun (V117) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Metavars'})), V117)) end end(E67)); {'Idris.Idris.IDEMode.Commands.GetOptions'} -> (fun () -> fun (V118) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.GetOpts'})), V118)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printIDEResultWithHighlight'(V0, V1, V2) -> ('un--returnFromIDE'(V0, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V2)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]})).
'un--printIDEResult'(V0, V1, V2) -> ('un--returnFromIDE'(V0, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V2)) | []]]})).
'un--printIDEError'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V0, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('un--returnFromIDE'(V1, V2, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"error"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V7)) | []]]}))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--loop'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPLOpts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPLOpts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPLOpts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = begin (V13 = ('un--getInput'(V11, V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = {'Idris.Idris.REPLOpts.IDEMode', V10, V11, V12}), (('case--case block in loop-4624'(V4, V3, V2, V1, V0, V12, V11, V10, V17, V16, 1))(V5)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initIDESocketFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Network.Socket':'un--socket'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, {'Idris.Network.Socket.Data.AF_INET'}, {'Idris.Network.Socket.Data.Stream'}, 0))(V2))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> begin (V59 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V31))))(V2))), begin (V87 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> V66 end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), begin (V74 = (V71(V72))), (V73(V74)) end end end end end end end}, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), ((V78(V80))(V79)) end end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V82(V83))), (V84(V83)) end end end end}, fun (V85) -> fun (V86) -> V86 end end}, <<"Failed to open socket"/utf8>>))(V2))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> V94 end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), begin (V102 = (V99(V100))), (V101(V102)) end end end end end end end}, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), ((V106(V108))(V107)) end end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V110(V111))), (V112(V111)) end end end end}, fun (V113) -> fun (V114) -> V114 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V2)) end end end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V115) -> begin (V143 = (('Idris.Idris2.Network.Socket':'un--bind'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V118, V119, V120)) end end end end end, fun (V121) -> fun (V122) -> fun (V123) -> V122 end end end, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> begin (V129 = (V126(V128))), begin (V130 = (V127(V128))), (V129(V130)) end end end end end end end}, fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V133(V135))), ((V134(V136))(V135)) end end end end end end, fun (V137) -> fun (V138) -> fun (V139) -> begin (V140 = (V138(V139))), (V140(V139)) end end end end}, fun (V141) -> fun (V142) -> V142 end end}, V115, {'Idris.Prelude.Types.Just', {'Idris.Network.Socket.Data.Hostname', V0}}, V1))(V2))), begin (V144 = {'Idris.Prelude.Types.Right', V115}), (('case--case block in initIDESocketFile-2996'(V1, V0, V115, V144, V143, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V143, 0))))(V2)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--idePutStrLn'(V0, V1, V2) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V3)) end, V0, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V2)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Integer'(V1)) | []]]]})).
'un--handleIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Exited'} -> (fun () -> ('un--idePutStrLn'(V5, V6, <<"Bye for now!"/utf8>>)) end()); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end end(E0)); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'un--getNChars'(V0, V1) -> case V1 of 0 -> fun (V2) -> [] end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V5 = (('un--getChar'(V0))(V4))), begin (V6 = (('un--getNChars'(V0, V3))(V4))), [V5 | V6] end end end end end.
'un--getInput'(V0, V1) -> begin (V2 = (('un--getNChars'(V0, (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))(V1))), (('case--getInput-3332'(V0, V2, ('Idris.Idris2.Utils.Hex':'un--fromHexChars'(('Idris.Idris2.Data.List':'un--reverse'('erased', V2))))))(V1)) end.
'un--getFLine'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetLine'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> V30 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> begin (V59 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, <<"Failed to read a line"/utf8>>))(V1))), (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> V66 end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), begin (V74 = (V71(V72))), (V73(V74)) end end end end end end end}, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), ((V78(V80))(V79)) end end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V82(V83))), (V84(V83)) end end end end}, fun (V85) -> fun (V86) -> V86 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getChar'(V0) -> ('case--getChar-3178'(V0, 1)).
'un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.REPLError', E1} -> (fun (V9) -> fun (V10) -> ('un--printIDEError'(V4, V5, V6, V9, V10)) end end(E1)); {'Idris.Idris.REPL.RequestedHelp'} -> (fun () -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.REPL':'un--displayHelp'())})) end()); {'Idris.Idris.REPL.Evaluated', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V11))})) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V13) -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V11)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V13))))))})) end(E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E2, E3)); {'Idris.Idris.REPL.Printed', E5} -> (fun (V15) -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show__(Doc $ann)'('erased', V15))})) end(E5)); {'Idris.Idris.REPL.TermChecked', E6, E7} -> (fun (V16, V17) -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V16)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V17))))))})) end(E6, E7)); {'Idris.Idris.REPL.FileLoaded', E8} -> (fun (V18) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', []})) end(E8)); {'Idris.Idris.REPL.ErrorLoadingFile', E9, E10} -> (fun (V19, V20) -> fun (V21) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error loading file"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V19)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V20)))))))), V21)) end end(E9, E10)); {'Idris.Idris.REPL.ErrorsBuildingFile', E11, E12} -> (fun (V22, V23) -> fun (V24) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V25)) end, V23, []))(V24))), case V26 of {'Idris.Prelude.Types.Left', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V28) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V22)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V28)))))), V24)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12)); {'Idris.Idris.REPL.NoFileLoaded'} -> (fun () -> fun (V29) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No file can be reloaded"/utf8>>)), V29)) end end()); {'Idris.Idris.REPL.CurrentDirectory', E15} -> (fun (V30) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Current working directory is \x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V30, <<"\x{27}"/utf8>>))))})) end(E15)); {'Idris.Idris.REPL.CompilationFailed'} -> (fun () -> fun (V31) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Compilation failed"/utf8>>)), V31)) end end()); {'Idris.Idris.REPL.Compiled', E16} -> (fun (V32) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"File "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V32, <<" written"/utf8>>))))})) end(E16)); {'Idris.Idris.REPL.ProofFound', E17} -> (fun (V33) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V33))})) end(E17)); {'Idris.Idris.REPL.Missed', E18} -> (fun (V34) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V35) -> ('Idris.Idris2.Idris.REPL':'un--handleMissing\x{27}'(V35)) end, V34))))})) end(E18)); {'Idris.Idris.REPL.CheckedTotal', E19} -> (fun (V36) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V38, V39) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V38)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__Totality'(V39)))))) end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V36))))})) end(E19)); {'Idris.Idris.REPL.FoundHoles', E22} -> (fun (V40) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V41) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--sexpHole'(V41)) end, V40))})) end(E22)); {'Idris.Idris.REPL.LogLevelSet', E23} -> (fun (V42) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Set loglevel to "/utf8>>, ('Idris.Idris2.Core.Options.Log':'dn--un--show_Show__LogLevel'(V42))))})) end(E23)); {'Idris.Idris.REPL.OptionsSet', E24} -> (fun (V43) -> ('un--printIDEResult'(V5, V6, ('nested--22641-4284--in--un--optionsSexp'(V43, V6, V5, V4, V3, V2, V1, V0)))) end(E24)); {'Idris.Idris.REPL.VersionIs', E25} -> (fun (V44) -> ('un--printIDEResult'(V5, V6, ('nested--22641-4297--in--un--versionSExp'(V44, V6, V5, V4, V3, V2, V1, V0)))) end(E25)); {'Idris.Idris.REPL.Edited', E26} -> (fun (V45) -> case V45 of {'Idris.Idris.REPL.DisplayEdit', E27} -> (fun (V46) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show__(Doc $ann)'('erased', V46))})) end(E27)); {'Idris.Idris.REPL.EditError', E28} -> (fun (V47) -> fun (V48) -> ('un--printIDEError'(V4, V5, V6, V47, V48)) end end(E28)); {'Idris.Idris.REPL.MadeLemma', E29, E30, E31, E32} -> (fun (V49, V50, V51, V52) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V49, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V50)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V51)), <<"\x{a}"/utf8>>)))))))), V52))})) end(E29, E30, E31, E32)); {'Idris.Idris.REPL.MadeWith', E33, E34} -> (fun (V53, V54) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V55) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V53, V55)) end, V54))))})) end(E33, E34)); {'Idris.Idris.REPL.MadeCase', E35, E36} -> (fun (V56, V57) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V56, V58)) end, V57))))})) end(E35, E36)); _ -> fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E26)); {'Idris.Idris.REPL.ConsoleWidthSet', E37} -> (fun (V60) -> begin (V62 = case V60 of {'Idris.Prelude.Types.Just', E38} -> (fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V61)) end(E38)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"auto"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Set consolewidth to "/utf8>>, V62))})) end end(E37)); _ -> fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); {'Idris.Idris.IDEMode.REPL.NameList', E39} -> (fun (V64) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Name'(V65)) end, V64))})) end(E39)); {'Idris.Idris.IDEMode.REPL.Term', E40} -> (fun (V66) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V66})) end(E40)); {'Idris.Idris.IDEMode.REPL.TTTerm', E41} -> (fun (V67) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V67})) end(E41)); _ -> fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
