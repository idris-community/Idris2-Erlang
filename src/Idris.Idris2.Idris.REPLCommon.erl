-module('Idris.Idris2.Idris.REPLCommon').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--resetContext-4328'/6,
  'case--updateErrorLine-4227'/4,
  'case--updateErrorLine-4187'/2,
  'case--emitWarnings-4138'/5,
  'case--case block in emitWarning-3966'/10,
  'case--emitWarning-3913'/6,
  'case--case block in emitError-3768'/10,
  'case--emitError-3715'/6,
  'case--printWithStatus-3631'/5,
  'case--iputStrLn-3553'/4,
  'nested--13613-3884--in--un--addOne'/5,
  'nested--13397-3686--in--un--addOne'/5,
  'un--updateErrorLine'/2,
  'un--resetContext'/5,
  'un--printWithStatus'/4,
  'un--printResult'/3,
  'un--printError'/3,
  'un--iputStrLn'/3,
  'un--getFCLine'/1,
  'un--emitWarnings'/4,
  'un--emitWarning'/5,
  'un--emitError'/5
]).
'case--resetContext-4328'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, ('Idris.Idris2.Core.Options':'un--clearNames'(case V4 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V36 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateErrorLine-4227'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V18) -> ('un--getFCLine'(V18)) end, ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V1)))), V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateErrorLine-4187'(V0, V1) -> case V1 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V2, V3, V4, V5, V6, V7, {'Idris.Prelude.Types.Nothing'}, V9, V10, V11, V12, V13, V14, V15} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitWarnings-4138'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, []} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in emitWarning-3966'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('un--iputStrLn'(V2, V8, V10)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V2, V8, V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V16) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V16)) end, V6, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"warning"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.SExpList', [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(('Idris.Idris2.Core.FC':'un--file'(V11)))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', fun (V17) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V17)) end, fun (V18) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V18)) end}, ('nested--13613-3884--in--un--addOne'(V0, V1, V2, V3, ('Idris.Idris2.Core.FC':'un--startPos'(V11)))))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', fun (V19) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V19)) end, fun (V20) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V20)) end}, ('nested--13613-3884--in--un--addOne'(V0, V1, V2, V3, ('Idris.Idris2.Core.FC':'un--endPos'(V11)))))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V15)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]]]} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Integer'(V7)) | []]]]}))(V12)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitWarning-3913'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V6) -> fun (V7) -> begin (V11 = begin (V8 = ('Idris.Idris2.Idris.Error':'un--displayWarning'(V3, V1, V2, V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V2, V10, V7)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, V13))(V7))), {'Idris.Prelude.Types.Right', V41} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E5, E6, E7} -> (fun (V42, V43, V44) -> fun (V45) -> begin (V46 = (('Idris.Idris2.Idris.Error':'un--pwarning'(V3, V1, V2, V0))(V45))), case V46 of {'Idris.Prelude.Types.Left', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V48) -> (('case--case block in emitWarning-3966'(V0, V1, V2, V3, V4, V43, V44, V42, V48, ('Idris.Idris2.Core.Core':'un--getWarningLoc'(V0))))(V45)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in emitError-3768'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('un--iputStrLn'(V2, V8, V10)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V2, V8, V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V16) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V16)) end, V6, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"warning"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.SExpList', [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(('Idris.Idris2.Core.FC':'un--file'(V11)))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', fun (V17) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V17)) end, fun (V18) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V18)) end}, ('nested--13397-3686--in--un--addOne'(V0, V1, V2, V3, ('Idris.Idris2.Core.FC':'un--startPos'(V11)))))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', fun (V19) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V19)) end, fun (V20) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Int'(V20)) end}, ('nested--13397-3686--in--un--addOne'(V0, V1, V2, V3, ('Idris.Idris2.Core.FC':'un--endPos'(V11)))))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V15)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]]]} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Integer'(V7)) | []]]]}))(V12)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitError-3715'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V6) -> fun (V7) -> begin (V11 = begin (V8 = ('Idris.Idris2.Idris.Error':'un--display'(V3, V1, V2, V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V2, V10, V7)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, V13))(V7))), {'Idris.Prelude.Types.Right', V41} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E5, E6, E7} -> (fun (V42, V43, V44) -> fun (V45) -> begin (V46 = (('Idris.Idris2.Idris.Error':'un--perror'(V3, V1, V2, V0))(V45))), case V46 of {'Idris.Prelude.Types.Left', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V48) -> (('case--case block in emitError-3768'(V0, V1, V2, V3, V4, V43, V44, V42, V48, ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V0))))(V45)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--printWithStatus-3631'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Idris.Pretty':'un--render'(V2, V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V37 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V9))(V6))), {'Idris.Prelude.Types.Right', V37} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--iputStrLn-3553'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V4) -> case V4 of 1 -> fun (V5) -> begin (V6 = ('Idris.Idris2.Idris.Pretty':'un--render'(V1, V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> begin (V36 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V8))(V5))), {'Idris.Prelude.Types.Right', V36} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E3, E4, E5} -> (fun (V38, V39, V40) -> fun (V41) -> begin (V42 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V1, V0, V41))), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V45) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__SExp'(V45)) end, V40, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__String'(V44)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable__Integer'(V38)) | []]]]}))(V41)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13613-3884--in--un--addOne'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', ((V5 + 1) rem 9223372036854775808), ((V6 + 1) rem 9223372036854775808)} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13397-3686--in--un--addOne'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', ((V5 + 1) rem 9223372036854775808), ((V6 + 1) rem 9223372036854775808)} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateErrorLine'(V0, V1) -> case V1 of [] -> fun (V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V21 = ('erlang':'put'(V0, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Nothing'}, V14, V15, V16, V17, V18, V19, V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E16 | E17] -> (fun (V22, V23) -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E18} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V28) -> begin (V44 = ('erlang':'put'(V0, case V28 of {'Idris.Idris.REPLOpts.MkREPLOpts', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V29, V30, V31, V32, V33, V34, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V43) -> ('un--getFCLine'(V43)) end, ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V22)))), V36, V37, V38, V39, V40, V41, V42} end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resetContext'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V65 = begin (V9 = ('Idris.Idris2.Core.Context':'un--initDefs'(V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V64 = ('erlang':'put'(V0, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, ('Idris.Idris2.Core.Options':'un--clearNames'(case V8 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V42 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V64} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E56} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V67) -> begin (V68 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V4))), case V68 of {'Idris.Prelude.Types.Left', E58} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V70) -> begin (V72 = begin (V71 = ('erlang':'put'(V1, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> begin (V76 = begin (V75 = ('erlang':'put'(V2, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E62} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V78) -> begin (V79 = ('erlang':'put'(V3, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))), {'Idris.Prelude.Types.Right', V79} end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--printWithStatus'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--printWithStatus-3631'(V2, V1, V0, V7, case V7 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V15 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--printResult'(V0, V1, V2) -> ('un--printWithStatus'(V0, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"ok"/utf8>>)), V1, V2)).
'un--printError'(V0, V1, V2) -> ('un--printWithStatus'(V0, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"error"/utf8>>)), V1, V2)).
'un--iputStrLn'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--iputStrLn-3553'(V1, V0, V6, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFCLine'(V0) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V0)))).
'un--emitWarnings'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V8) -> fun (V9) -> ('un--emitWarning'(V0, V1, V2, V8, V9)) end end, ('Idris.Idris2.Data.List':'un--reverse'('erased', case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V35 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3))), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> begin (V65 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkDefs', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, []} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V65} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitWarning'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('case--emitWarning-3913'(V3, V2, V1, V0, V8, case V8 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitError'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('case--emitError-3715'(V3, V2, V1, V0, V8, case V8 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
