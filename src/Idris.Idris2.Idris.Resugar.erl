-module('Idris.Idris2.Idris.Resugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--cleanPTerm-5598'/3,
  'case--cleanPTerm,cleanName-5520'/3,
  'case--toPDecl-5415'/7,
  'case--toPRecord-5231'/8,
  'case--case block in toPTermApp-4970'/11,
  'case--toPTermApp-4916'/8,
  'case--mkApp-4821'/8,
  'case--toPTerm-4562'/10,
  'case--toPTerm,mkIf-4309'/19,
  'case--toPTerm-4197'/10,
  'case--toPTerm-4122'/11,
  'case--toPTerm-4052'/9,
  'case--case block in toPTerm-3967'/10,
  'case--toPTerm-3917'/9,
  'case--toPTerm-3848'/7,
  'case--toPRef-3776'/2,
  'case--case block in case block in sugarAppM-3705'/4,
  'case--case block in sugarAppM-3701'/1,
  'case--sugarAppM-3682'/2,
  'case--case block in sugarAppM-3627'/7,
  'case--case block in sugarAppM-3516'/7,
  'case--sugarAppM-3462'/7,
  'case--extractNat-3345'/2,
  'case--bracket-3278'/6,
  'case--addBracket-3254'/3,
  'case--mkOp-3152'/10,
  'nested--11261-3880--in--un--needsBind'/9,
  'nested--10601-3204--in--un--needed'/3,
  'nested--11261-4271--in--un--mkIf'/8,
  'nested--11285-5159--in--un--mapPiInfo'/8,
  'nested--13154-5516--in--un--cleanNode'/3,
  'nested--13154-5515--in--un--cleanName'/3,
  'un--unbracketApp'/1,
  'un--unbracket'/1,
  'un--tyPrec'/0,
  'un--toPTypeDecl'/3,
  'un--toPTermApp'/4,
  'un--toPTerm'/4,
  'un--toPRef'/2,
  'un--toPRecord'/3,
  'un--toPFnOpt'/3,
  'un--toPFieldUpdate'/3,
  'un--toPField'/3,
  'un--toPDecl'/3,
  'un--toPData'/3,
  'un--toPClause'/3,
  'un--toCleanPTerm'/5,
  'un--sugarName'/1,
  'un--sugarAppM'/1,
  'un--sugarApp'/1,
  'un--startPrec'/0,
  'un--showImplicits'/2,
  'un--showFullEnv'/2,
  'un--resugarNoPatvars'/6,
  'un--resugar'/6,
  'un--pterm'/4,
  'un--mkOp'/2,
  'un--mkApp'/4,
  'un--fullNamespace'/2,
  'un--extractNat'/2,
  'un--cleanPTerm'/3,
  'un--bracket'/5,
  'un--argPrec'/0,
  'un--appPrec'/0,
  'un--addBracket'/2
]).
'case--cleanPTerm-5598'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> {'Idris.Prelude.Types.Right', V0} end; 1 -> ('Idris.Idris2.Idris.Syntax':'un--mapPTermM'(fun (V4) -> ('nested--13154-5516--in--un--cleanNode'(V0, V1, V4)) end, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cleanPTerm,cleanName-5520'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V3}} end end(E2, E3)); {'Idris.Core.Name.PV', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V9}} end end(E6, E7)); {'Idris.Core.Name.NS', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Core.Name.Nested', E12, E13} -> (fun (V14, V15) -> ('nested--13154-5515--in--un--cleanName'(V0, V1, V15)) end(E12, E13)); _ -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V16)) end end end(E8, E9)); _ -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V23}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V20)) end end.
'case--toPDecl-5415'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRecord', V3, <<""/utf8>>, V2, V7, V9, V11, V12}}} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPRecord-5231'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = (('un--toPTerm'(V6, V5, ('un--startPrec'()), V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = (('nested--11285-5159--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V12))(V14))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V20, V17}}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toPTermApp-4970'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> V0; 1 -> ('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V7 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V19 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTermApp-4916'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V9 = (('un--toPTerm'(V5, V4, ('un--appPrec'()), V3))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> (('un--mkApp'(V5, V4, V11, V0))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> fun (V13) -> begin (V14 = (('un--toPTerm'(V5, V4, ('un--appPrec'()), V3))(V13))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('un--showFullEnv'(V5, V13))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V41 = case V19 of 0 -> V0; 1 -> ('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V12 of {'Idris.Core.Context.MkGlobalDef', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V28 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--mkApp'(V5, V4, V16, V41))(V13)) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkApp-4821'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> begin (V8 = {'Idris.Idris.Syntax.PNamedApp', V0, V4, V1, V2}), ('un--mkApp'(V6, V5, V8, V3)) end; 1 -> ('un--mkApp'(V6, V5, V4, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4562'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> ('un--bracket'(V5, V4, ('un--startPrec'()), V8, V10)) end; 1 -> ('un--mkOp'(V5, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm,mkIf-4309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> {'Idris.Idris.Syntax.PIfThenElse', V16, V15, V12, V14}; 1 -> V17; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4197'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> ('un--toPTerm'(V8, V7, ('un--startPrec'()), V2)); 1 -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V5}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4122'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('un--toPTerm'(V8, V7, ('un--tyPrec'()), V1)); 1 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V5}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4052'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', <<"_"/utf8>>} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> V9 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toPTerm-3967'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> begin (V11 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V0))(V10))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> ('un--bracket'(V6, V5, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V4, V3, {'Idris.Core.TT.Implicit'}, V2, V13, V16}, V10)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--toPTerm'(V7, V6, V5, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-3917'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V10 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V1))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V0))(V9))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> ('un--bracket'(V6, V5, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V4, V3, {'Idris.Core.TT.Implicit'}, V2, V12, V15}, V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> begin (V16 = 1), ('case--case block in toPTerm-3967'(V0, V1, V2, V3, V4, V5, V6, V7, V16, ('nested--11261-3880--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V2)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-3848'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V1, V0}} end; 1 -> ('un--toPRef'(V1, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPRef-3776'(V0, V1) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, {'Idris.Core.Name.UN', V2}}))} end end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, V5}))} end end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, {'Idris.Core.Name.UN', V8}}))} end end(E4, E5)); {'Idris.Core.Name.Nested', E6, E7} -> (fun (V11, V12) -> ('un--toPRef'(V1, V12)) end(E6, E7)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, V0}))} end end.
'case--case block in case block in sugarAppM-3705'(V0, V1, V2, V3) -> case V3 of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PList', V1, []})); <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PUnit', V1})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PUnit', V1})); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in sugarAppM-3701'(V0) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V1, V2) -> begin (V3 = {'Idris.Idris.Syntax.PRef', V1, V2}), ('case--case block in case block in sugarAppM-3705'(V2, V1, V3, ('Idris.Idris2.Core.Name':'un--nameRoot'(V2)))) end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--sugarAppM-3682'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Nat_Integer'(V2))}})) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E1, E2} -> (fun (V3, V4) -> begin (V5 = {'Idris.Idris.Syntax.PRef', V3, V4}), ('case--case block in case block in sugarAppM-3705'(V4, V3, V5, ('Idris.Idris2.Core.Name':'un--nameRoot'(V4)))) end end(E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in sugarAppM-3627'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.PList', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PList', V7, [('un--unbracketApp'(V3)) | V8]})) end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in sugarAppM-3516'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.PLam', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PDPair', V5, V10, ('un--unbracket'(V3)), ('un--unbracket'(V12))})) end(E0, E1, E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--sugarAppM-3462'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of <<"Pair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PPair', V5, ('un--unbracket'(V3)), ('un--unbracket'(V4))})); <<"MkPair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PPair', V5, ('un--unbracket'(V3)), ('un--unbracket'(V4))})); <<"DPair"/utf8>> -> ('case--case block in sugarAppM-3516'(V0, V1, V2, V3, V4, V5, ('un--unbracket'(V4)))); <<"Equal"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PEq', V5, ('un--unbracket'(V3)), ('un--unbracket'(V4))})); <<"==="/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PEq', V5, ('un--unbracket'(V3)), ('un--unbracket'(V4))})); <<"~=~"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Idris.Syntax.PEq', V5, ('un--unbracket'(V3)), ('un--unbracket'(V4))})); <<"::"/utf8>> -> ('case--case block in sugarAppM-3627'(V0, V1, V2, V3, V4, V5, ('un--sugarApp'(('un--unbracket'(V4)))))); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--extractNat-3345'(V0, V1) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V15, V16)) end end end end}, fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V19, V20)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V6, <<"Z"/utf8>>)))), fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V24, V25)) end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V30, V31)) end end end end}, fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V34, V35)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V1)) end)) end)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Idris.Syntax.PApp', E5, E6, E7} -> (fun (V37, V38, V39) -> case V38 of {'Idris.Idris.Syntax.PRef', E8, E9} -> (fun (V40, V41) -> case V41 of {'Idris.Core.Name.NS', E10, E11} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E12} -> (fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V47, V48)) end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V53, V54)) end end end end}, fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V57, V58)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V44, <<"S"/utf8>>)))), fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V62, V63)) end end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V65)) end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V68, V69)) end end end end}, fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V72, V73)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V42, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V42, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun (V74) -> ('un--extractNat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1)), V39)) end)) end)) end(E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6, E7)); {'Idris.Idris.Syntax.PPrimVal', E13, E14} -> (fun (V75, V76) -> case V76 of {'Idris.Core.TT.BI', E15} -> (fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(V1, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V77)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14)); {'Idris.Idris.Syntax.PBracketed', E16, E17} -> (fun (V78, V79) -> ('un--extractNat'(V1, V79)) end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--bracket-3278'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> {'Idris.Prelude.Types.Right', ('un--addBracket'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V4))} end; 1 -> fun (V7) -> {'Idris.Prelude.Types.Right', V4} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addBracket-3254'(V0, V1, V2) -> case V2 of 0 -> {'Idris.Idris.Syntax.PBracketed', V1, V0}; 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkOp-3152'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', V6} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V5, V2, ('un--unbracketApp'(V3)), ('un--unbracketApp'(V4))}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11261-3880--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Name.UN', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(1, [], [], V0))), begin (V12 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V0))), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V15, V16)) end end}, {'Idris.Core.Name.UN', V10}, V12)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V19, V20)) end end}, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V11)))))) end)) end end end(E1)); _ -> 1 end end(E0)); _ -> 1 end.
'nested--10601-3204--in--un--needed'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V3, V4) -> 1 end(E0, E1)); {'Idris.Idris.Syntax.PRef', E2, E3} -> (fun (V5, V6) -> 1 end(E2, E3)); {'Idris.Idris.Syntax.PPair', E4, E5, E6} -> (fun (V7, V8, V9) -> 1 end(E4, E5, E6)); {'Idris.Idris.Syntax.PDPair', E7, E8, E9, E10} -> (fun (V10, V11, V12, V13) -> 1 end(E7, E8, E9, E10)); {'Idris.Idris.Syntax.PUnit', E11} -> (fun (V14) -> 1 end(E11)); {'Idris.Idris.Syntax.PComprehension', E12, E13, E14} -> (fun (V15, V16, V17) -> 1 end(E12, E13, E14)); {'Idris.Idris.Syntax.PList', E15, E16} -> (fun (V18, V19) -> 1 end(E15, E16)); {'Idris.Idris.Syntax.PPrimVal', E17, E18} -> (fun (V20, V21) -> 1 end(E17, E18)); _ -> 0 end.
'nested--11261-4271--in--un--mkIf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PCase', E0, E1, E2} -> (fun (V8, V9, V10) -> case V10 of [E3 | E4] -> (fun (V11, V12) -> case V11 of {'Idris.Idris.Syntax.MkPatClause', E5, E6, E7, E8} -> (fun (V13, V14, V15, V16) -> case V14 of {'Idris.Idris.Syntax.PRef', E9, E10} -> (fun (V17, V18) -> case V16 of [] -> case V12 of [E11 | E12] -> (fun (V19, V20) -> case V19 of {'Idris.Idris.Syntax.MkPatClause', E13, E14, E15, E16} -> (fun (V21, V22, V23, V24) -> case V22 of {'Idris.Idris.Syntax.PRef', E17, E18} -> (fun (V25, V26) -> case V24 of [] -> case V20 of [] -> begin (V27 = {'Idris.Idris.Syntax.PCase', V8, V9, [{'Idris.Idris.Syntax.MkPatClause', V13, {'Idris.Idris.Syntax.PRef', V17, V18}, V15, []} | [{'Idris.Idris.Syntax.MkPatClause', V21, {'Idris.Idris.Syntax.PRef', V25, V26}, V23, []} | []]]}), ('case--toPTerm,mkIf-4309'(V0, V1, V2, V3, V4, V5, V6, V21, V25, V13, V17, V18, V15, V26, V23, V9, V8, V27, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V18)), {'Idris.Core.Name.UN', <<"True"/utf8>>})), fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V26)), {'Idris.Core.Name.UN', <<"False"/utf8>>})) end)))) end; _ -> V7 end; _ -> V7 end end(E17, E18)); _ -> V7 end end(E13, E14, E15, E16)); _ -> V7 end end(E11, E12)); _ -> V7 end; _ -> V7 end end(E9, E10)); _ -> V7 end end(E5, E6, E7, E8)); _ -> V7 end end(E3, E4)); _ -> V7 end end(E0, E1, E2)); _ -> V7 end.
'nested--11285-5159--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V11) -> fun (V12) -> begin (V13 = (('un--toPTerm'(V6, V5, ('un--startPrec'()), V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V15}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13154-5516--in--un--cleanNode'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V3, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13154-5515--in--un--cleanName'(V0, V1, V4)), V5)) end end(E0, E1)); {'Idris.Idris.Syntax.POp', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V9, V16, V11, V12}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13154-5515--in--un--cleanName'(V0, V1, V10)), V13)) end end(E4, E5, E6, E7)); {'Idris.Idris.Syntax.PPrefixOp', E10, E11, E12} -> (fun (V17, V18, V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V17, V23, V19}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13154-5515--in--un--cleanName'(V0, V1, V18)), V20)) end end(E10, E11, E12)); {'Idris.Idris.Syntax.PSectionL', E15, E16, E17} -> (fun (V24, V25, V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V24, V30, V26}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13154-5515--in--un--cleanName'(V0, V1, V25)), V27)) end end(E15, E16, E17)); {'Idris.Idris.Syntax.PSectionR', E20, E21, E22} -> (fun (V31, V32, V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V35) -> case V35 of {'Idris.Prelude.Types.Left', E23} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionR', V31, V32, V37}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13154-5515--in--un--cleanName'(V0, V1, V33)), V34)) end end(E20, E21, E22)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', V2} end end.
'nested--13154-5515--in--un--cleanName'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V3}} end end(E2, E3)); {'Idris.Core.Name.PV', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V9}} end end(E6, E7)); {'Idris.Core.Name.NS', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Core.Name.Nested', E12, E13} -> (fun (V14, V15) -> ('nested--13154-5515--in--un--cleanName'(V0, V1, V15)) end(E12, E13)); _ -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V16)) end end end(E8, E9)); _ -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V23}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V20)) end end.
'un--unbracketApp'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V3, V4, V5) -> V2 end(E2, E3, E4)); _ -> V0 end end(E0, E1)); _ -> V0 end.
'un--unbracket'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> V0 end.
'un--tyPrec'() -> (1 + 0).
'un--toPTypeDecl'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> begin (V7 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V3, V4, <<""/utf8>>, V9}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPTermApp'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V4, V5, V6) -> fun (V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> (('un--toPTermApp'(V0, V1, V5, [{'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V10}} | V3]))(V7)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); {'Idris.TTImp.TTImp.INamedApp', E7, E8, E9, E10} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V15))), case V16 of {'Idris.Prelude.Types.Left', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V18) -> (('un--toPTermApp'(V0, V1, V12, [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V13}}, V18}} | V3]))(V15)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10)); {'Idris.TTImp.TTImp.IVar', E13, E14} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V52 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V20, case V25 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V26 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V52 of {'Idris.Prelude.Types.Left', E43} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V54) -> begin (V55 = {'Idris.TTImp.TTImp.IVar', V19, V20}), case V54 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V56 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V55))(V21))), case V56 of {'Idris.Prelude.Types.Left', E45} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V58) -> (('un--mkApp'(V0, V1, V58, V3))(V21)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E47} -> (fun (V59) -> begin (V60 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V55))(V21))), case V60 of {'Idris.Prelude.Types.Left', E48} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V62) -> begin (V63 = ('un--showFullEnv'(V0, V21))), case V63 of {'Idris.Prelude.Types.Left', E50} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V65) -> begin (V87 = case V65 of 0 -> V3; 1 -> ('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V59 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V74 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--mkApp'(V0, V1, V62, V87))(V21)) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); _ -> fun (V88) -> begin (V89 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V2))(V88))), case V89 of {'Idris.Prelude.Types.Left', E0} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V91) -> (('un--mkApp'(V0, V1, V91, V3))(V88)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--toPTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> (('case--toPTerm-3848'(V5, V4, V2, V1, V0, V9, case V9 of {'Idris.Core.Options.MkPPOpts', E4, E5, E6} -> (fun (V10, V11, V12) -> V12 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> case V15 of {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V19) -> begin (V20 = ('un--showImplicits'(V0, V19))), case V20 of {'Idris.Prelude.Types.Left', E19} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V22) -> case V22 of 0 -> begin (V23 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V17))(V19))), case V23 of {'Idris.Prelude.Types.Left', E21} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V25) -> begin (V26 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V19))), case V26 of {'Idris.Prelude.Types.Left', E23} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V28) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, {'Idris.Core.TT.Implicit'}, V16, V25, V28}, V19)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V29 = 1), (('case--case block in toPTerm-3967'(V18, V17, V16, V14, V13, V2, V1, V0, V29, ('nested--11261-3880--in--un--needsBind'(V18, V17, V16, V14, V13, V2, V1, V0, V16))))(V19)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V30) -> begin (V31 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V17))(V30))), case V31 of {'Idris.Prelude.Types.Left', E13} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V33) -> begin (V34 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V30))), case V34 of {'Idris.Prelude.Types.Left', E15} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V36) -> begin (V38 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V37) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V37)) end, V15))(V30))), case V38 of {'Idris.Prelude.Types.Left', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V40) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, V40, V16, V33, V36}, V30)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ILam', E25, E26, E27, E28, E29, E30} -> (fun (V41, V42, V43, V44, V45, V46) -> begin (V48 = case V44 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', <<"_"/utf8>>} end()); {'Idris.Prelude.Types.Just', E31} -> (fun (V47) -> V47 end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V49) -> begin (V50 = ('un--showImplicits'(V0, V49))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> begin (V53 = case V52 of 0 -> (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V45))(V49)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V41}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V53 of {'Idris.Prelude.Types.Left', E34} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V55) -> begin (V56 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V46))(V49))), case V56 of {'Idris.Prelude.Types.Left', E36} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V58) -> begin (V60 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V59) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V59)) end, V43))(V49))), case V60 of {'Idris.Prelude.Types.Left', E38} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V62) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLam', V41, V42, V62, {'Idris.Idris.Syntax.PRef', V41, V48}, V55, V58}, V49)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E25, E26, E27, E28, E29, E30)); {'Idris.TTImp.TTImp.ILet', E40, E41, E42, E43, E44, E45} -> (fun (V63, V64, V65, V66, V67, V68) -> fun (V69) -> begin (V70 = ('un--showImplicits'(V0, V69))), case V70 of {'Idris.Prelude.Types.Left', E46} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V72) -> begin (V73 = case V72 of 0 -> (('un--toPTerm'(V0, V1, ('un--startPrec'()), V66))(V69)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V63}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V73 of {'Idris.Prelude.Types.Left', E48} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V75) -> begin (V76 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V67))(V69))), case V76 of {'Idris.Prelude.Types.Left', E50} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V78) -> begin (V79 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V68))(V69))), case V79 of {'Idris.Prelude.Types.Left', E52} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V81) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V63, V64, {'Idris.Idris.Syntax.PRef', V63, V65}, V75, V78, V81, []}, V69)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42, E43, E44, E45)); {'Idris.TTImp.TTImp.ICase', E54, E55, E56, E57} -> (fun (V82, V83, V84, V85) -> case V85 of [E62 | E63] -> (fun (V86, V87) -> case V86 of {'Idris.TTImp.TTImp.PatClause', E68, E69, E70} -> (fun (V88, V89, V90) -> case V87 of [] -> fun (V91) -> begin (V92 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V91))), case V92 of {'Idris.Prelude.Types.Left', E75} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V94) -> begin (V95 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V89))(V91))), case V95 of {'Idris.Prelude.Types.Left', E77} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V97) -> begin (V98 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V90))(V91))), case V98 of {'Idris.Prelude.Types.Left', E79} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V100) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V82, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), V97, {'Idris.Idris.Syntax.PImplicit', V82}, V94, V100, []}, V91)) end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V101) -> begin (V102 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V101))), case V102 of {'Idris.Prelude.Types.Left', E71} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V104) -> begin (V106 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V105) -> ('un--toPClause'(V0, V1, V105)) end, V85, []))(V101))), case V106 of {'Idris.Prelude.Types.Left', E73} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V108) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--11261-4271--in--un--mkIf'(V85, V84, V83, V82, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V82, V104, V108})), V101)) end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E68, E69, E70)); _ -> fun (V109) -> begin (V110 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V109))), case V110 of {'Idris.Prelude.Types.Left', E64} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V112) -> begin (V114 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V113) -> ('un--toPClause'(V0, V1, V113)) end, V85, []))(V109))), case V114 of {'Idris.Prelude.Types.Left', E66} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V116) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--11261-4271--in--un--mkIf'(V85, V84, V83, V82, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V82, V112, V116})), V109)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E62, E63)); _ -> fun (V117) -> begin (V118 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V117))), case V118 of {'Idris.Prelude.Types.Left', E58} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V120) -> begin (V122 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V121) -> ('un--toPClause'(V0, V1, V121)) end, V85, []))(V117))), case V122 of {'Idris.Prelude.Types.Left', E60} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V124) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--11261-4271--in--un--mkIf'(V85, V84, V83, V82, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V82, V120, V124})), V117)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E54, E55, E56, E57)); {'Idris.TTImp.TTImp.ILocal', E81, E82, E83} -> (fun (V125, V126, V127) -> fun (V128) -> begin (V130 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V129) -> ('un--toPDecl'(V0, V1, V129)) end, V126, []))(V128))), case V130 of {'Idris.Prelude.Types.Left', E84} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V132) -> begin (V133 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V127))(V128))), case V133 of {'Idris.Prelude.Types.Left', E86} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V135) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLocal', V125, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V136) -> V136 end, V132)), V135}, V128)) end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E81, E82, E83)); {'Idris.TTImp.TTImp.ICaseLocal', E88, E89, E90, E91, E92} -> (fun (V137, V138, V139, V140, V141) -> ('un--toPTerm'(V0, V1, V2, V141)) end(E88, E89, E90, E91, E92)); {'Idris.TTImp.TTImp.IUpdate', E93, E94, E95} -> (fun (V142, V143, V144) -> fun (V145) -> begin (V147 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V146) -> ('un--toPFieldUpdate'(V0, V1, V146)) end, V143, []))(V145))), case V147 of {'Idris.Prelude.Types.Left', E96} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V149) -> begin (V150 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V144))(V145))), case V150 of {'Idris.Prelude.Types.Left', E98} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V152) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PApp', V142, {'Idris.Idris.Syntax.PUpdate', V142, V149}, V152}, V145)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94, E95)); {'Idris.TTImp.TTImp.IApp', E100, E101, E102} -> (fun (V153, V154, V155) -> fun (V156) -> begin (V157 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V155))(V156))), case V157 of {'Idris.Prelude.Types.Left', E103} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V159) -> begin (V160 = (('un--toPTermApp'(V0, V1, V154, [{'Idris.Builtin.MkPair', V153, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V159}} | []]))(V156))), case V160 of {'Idris.Prelude.Types.Left', E105} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V162) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V162, V156)) end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E100, E101, E102)); {'Idris.TTImp.TTImp.IAutoApp', E107, E108, E109} -> (fun (V163, V164, V165) -> fun (V166) -> begin (V167 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V165))(V166))), case V167 of {'Idris.Prelude.Types.Left', E110} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V169) -> begin (V170 = (('un--toPTermApp'(V0, V1, V164, [{'Idris.Builtin.MkPair', V163, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}, V169}} | []]))(V166))), case V170 of {'Idris.Prelude.Types.Left', E112} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V172) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V172, V166)) end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107, E108, E109)); {'Idris.TTImp.TTImp.IWithApp', E114, E115, E116} -> (fun (V173, V174, V175) -> fun (V176) -> begin (V177 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V175))(V176))), case V177 of {'Idris.Prelude.Types.Left', E117} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V179) -> begin (V180 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V174))(V176))), case V180 of {'Idris.Prelude.Types.Left', E119} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V182) -> ('un--bracket'(V1, V2, ('un--appPrec'()), {'Idris.Idris.Syntax.PWithApp', V173, V182, V179}, V176)) end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E114, E115, E116)); {'Idris.TTImp.TTImp.INamedApp', E121, E122, E123, E124} -> (fun (V183, V184, V185, V186) -> fun (V187) -> begin (V188 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V186))(V187))), case V188 of {'Idris.Prelude.Types.Left', E125} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V190) -> begin (V191 = (('un--toPTermApp'(V0, V1, V184, [{'Idris.Builtin.MkPair', V183, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V185}}, V190}} | []]))(V187))), case V191 of {'Idris.Prelude.Types.Left', E127} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V193) -> begin (V194 = ('un--showImplicits'(V0, V187))), case V194 of {'Idris.Prelude.Types.Left', E129} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V196) -> case V196 of 0 -> ('un--bracket'(V1, V2, ('un--startPrec'()), V193, V187)); 1 -> (('un--mkOp'(V1, V193))(V187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E121, E122, E123, E124)); {'Idris.TTImp.TTImp.ISearch', E131, E132} -> (fun (V197, V198) -> fun (V199) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSearch', V197, V198}} end end(E131, E132)); {'Idris.TTImp.TTImp.IAlternative', E133, E134, E135} -> (fun (V200, V201, V202) -> fun (V203) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V200}} end end(E133, E134, E135)); {'Idris.TTImp.TTImp.IRewrite', E136, E137, E138} -> (fun (V204, V205, V206) -> fun (V207) -> begin (V208 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V205))(V207))), case V208 of {'Idris.Prelude.Types.Left', E139} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V210) -> begin (V211 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V206))(V207))), case V211 of {'Idris.Prelude.Types.Left', E141} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V213) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRewrite', V204, V210, V213}} end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E136, E137, E138)); {'Idris.TTImp.TTImp.ICoerced', E143, E144} -> (fun (V214, V215) -> ('un--toPTerm'(V0, V1, V2, V215)) end(E143, E144)); {'Idris.TTImp.TTImp.IPrimVal', E145, E146} -> (fun (V216, V217) -> fun (V218) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrimVal', V216, V217}} end end(E145, E146)); {'Idris.TTImp.TTImp.IHole', E147, E148} -> (fun (V219, V220) -> fun (V221) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PHole', V219, 1, V220}} end end(E147, E148)); {'Idris.TTImp.TTImp.IType', E149} -> (fun (V222) -> fun (V223) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PType', V222}} end end(E149)); {'Idris.TTImp.TTImp.IBindVar', E150, E151} -> (fun (V224, V225) -> fun (V226) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V224, {'Idris.Core.Name.UN', V225}}} end end(E150, E151)); {'Idris.TTImp.TTImp.IBindHere', E152, E153, E154} -> (fun (V227, V228, V229) -> ('un--toPTerm'(V0, V1, V2, V229)) end(E152, E153, E154)); {'Idris.TTImp.TTImp.IAs', E155, E156, E157, E158} -> (fun (V230, V231, V232, V233) -> fun (V234) -> begin (V235 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V233))(V234))), case V235 of {'Idris.Prelude.Types.Left', E159} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E159)); {'Idris.Prelude.Types.Right', E160} -> (fun (V237) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V230, V232, V237}} end(E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E155, E156, E157, E158)); {'Idris.TTImp.TTImp.IMustUnify', E161, E162, E163} -> (fun (V238, V239, V240) -> fun (V241) -> begin (V242 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V240))(V241))), case V242 of {'Idris.Prelude.Types.Left', E164} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V244) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V238, V244}} end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E161, E162, E163)); {'Idris.TTImp.TTImp.IDelayed', E166, E167, E168} -> (fun (V245, V246, V247) -> fun (V248) -> begin (V249 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V247))(V248))), case V249 of {'Idris.Prelude.Types.Left', E169} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V251) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V245, V246, V251}} end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E166, E167, E168)); {'Idris.TTImp.TTImp.IDelay', E171, E172} -> (fun (V252, V253) -> fun (V254) -> begin (V255 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V253))(V254))), case V255 of {'Idris.Prelude.Types.Left', E173} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V257) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V252, V257}} end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E171, E172)); {'Idris.TTImp.TTImp.IForce', E175, E176} -> (fun (V258, V259) -> fun (V260) -> begin (V261 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V259))(V260))), case V261 of {'Idris.Prelude.Types.Left', E177} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V263) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V258, V263}} end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E175, E176)); {'Idris.TTImp.TTImp.IQuote', E179, E180} -> (fun (V264, V265) -> fun (V266) -> begin (V267 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V265))(V266))), case V267 of {'Idris.Prelude.Types.Left', E181} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E181)); {'Idris.Prelude.Types.Right', E182} -> (fun (V269) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V264, V269}} end(E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179, E180)); {'Idris.TTImp.TTImp.IQuoteName', E183, E184} -> (fun (V270, V271) -> fun (V272) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteName', V270, V271}} end end(E183, E184)); {'Idris.TTImp.TTImp.IQuoteDecl', E185, E186} -> (fun (V273, V274) -> fun (V275) -> begin (V277 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V276) -> ('un--toPDecl'(V0, V1, V276)) end, V274, []))(V275))), case V277 of {'Idris.Prelude.Types.Left', E187} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V279) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V273, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V280) -> V280 end, V279))}} end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E185, E186)); {'Idris.TTImp.TTImp.IUnquote', E189, E190} -> (fun (V281, V282) -> fun (V283) -> begin (V284 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V282))(V283))), case V284 of {'Idris.Prelude.Types.Left', E191} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V286) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V281, V286}} end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E189, E190)); {'Idris.TTImp.TTImp.IRunElab', E193, E194} -> (fun (V287, V288) -> fun (V289) -> begin (V290 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V288))(V289))), case V290 of {'Idris.Prelude.Types.Left', E195} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V292) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V287, V292}} end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E193, E194)); {'Idris.TTImp.TTImp.IUnifyLog', E197, E198, E199} -> (fun (V293, V294, V295) -> ('un--toPTerm'(V0, V1, V2, V295)) end(E197, E198, E199)); {'Idris.TTImp.TTImp.Implicit', E200, E201} -> (fun (V296, V297) -> case V297 of 0 -> fun (V298) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V296}} end; 1 -> fun (V299) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PInfer', V296}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E200, E201)); {'Idris.TTImp.TTImp.IWithUnambigNames', E202, E203, E204} -> (fun (V300, V301, V302) -> fun (V303) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V304) -> case V304 of {'Idris.Prelude.Types.Left', E205} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V306) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V300, V301, V306}} end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--toPTerm'(V0, V1, ('un--startPrec'()), V302)), V303)) end end(E202, E203, E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPRef'(V0, V1) -> case V1 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.Name.UN', V2}}))} end end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V5}))} end end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.Name.UN', V8}}))} end end(E4, E5)); {'Idris.Core.Name.Nested', E6, E7} -> (fun (V11, V12) -> ('un--toPRef'(V0, V12)) end(E6, E7)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V1}))} end end.
'un--toPRecord'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V23 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V20 = (('nested--11285-5159--in--un--mapPiInfo'(V7, V6, V5, V4, V3, V1, V0, V14))(V16))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V22, V19}}}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5, []))(V8))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> ('un--toPField'(V0, V1, V26)) end, V7, []))(V8))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V6}, V29}}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPFnOpt'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.ForeignFn', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.IFnOpt', V2}} end end.
'un--toPFieldUpdate'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V3, V4) -> fun (V5) -> begin (V6 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V3, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E4, E5} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V10))(V11))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPField'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V12) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V12)) end, V5))(V8))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkField', V3, <<""/utf8>>, V4, V15, V6, V11}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPDecl'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('un--toPFnOpt'(V0, V1, V9)) end, V6, []))(V8))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> begin (V13 = (('un--toPTypeDecl'(V0, V1, V7))(V8))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PClaim', V3, V4, V5, V12, V15}}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E9, E10, E11} -> (fun (V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--toPData'(V0, V1, V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V16, <<""/utf8>>, V17, V22}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.IDef', E14, E15, E16} -> (fun (V23, V24, V25) -> fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('un--toPClause'(V0, V1, V27)) end, V25, []))(V26))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PDef', V23, V30}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16)); {'Idris.TTImp.TTImp.IParameters', E19, E20, E21} -> (fun (V31, V32, V33) -> fun (V34) -> begin (V36 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V35) -> ('un--toPDecl'(V0, V1, V35)) end, V33, []))(V34))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> begin (V44 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V39) -> fun (V40) -> begin (V41 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V39))))(V40))), case V41 of {'Idris.Prelude.Types.Left', E24} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V39)), V43}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V32, []))(V34))), case V44 of {'Idris.Prelude.Types.Left', E26} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PParameters', V31, V46, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V47) -> V47 end, V38))}}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19, E20, E21)); {'Idris.TTImp.TTImp.IRecord', E28, E29, E30, E31} -> (fun (V48, V49, V50, V51) -> fun (V52) -> begin (V53 = (('un--toPRecord'(V0, V1, V51))(V52))), case V53 of {'Idris.Prelude.Types.Left', E32} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V56, V57) -> case V57 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V58, V59) -> case V59 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V60, V61) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRecord', V48, <<""/utf8>>, V50, V56, V58, V60, V61}}} end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30, E31)); {'Idris.TTImp.TTImp.INamespace', E40, E41, E42} -> (fun (V62, V63, V64) -> fun (V65) -> begin (V67 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V66) -> ('un--toPDecl'(V0, V1, V66)) end, V64, []))(V65))), case V67 of {'Idris.Prelude.Types.Left', E43} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PNamespace', V62, V63, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V70) -> V70 end, V69))}}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42)); {'Idris.TTImp.TTImp.ITransform', E45, E46, E47, E48} -> (fun (V71, V72, V73, V74) -> fun (V75) -> begin (V76 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V73))(V75))), case V76 of {'Idris.Prelude.Types.Left', E49} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V78) -> begin (V79 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V74))(V75))), case V79 of {'Idris.Prelude.Types.Left', E51} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PTransform', V71, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V72)), V78, V81}}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47, E48)); {'Idris.TTImp.TTImp.IRunElabDecl', E53, E54} -> (fun (V82, V83) -> fun (V84) -> begin (V85 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V84))), case V85 of {'Idris.Prelude.Types.Left', E55} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRunElabDecl', V82, V87}}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54)); {'Idris.TTImp.TTImp.IPragma', E57} -> (fun (V88) -> fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E57)); {'Idris.TTImp.TTImp.ILog', E58} -> (fun (V90) -> fun (V91) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPData'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> ('un--toPTypeDecl'(V0, V1, V12)) end, V7, []))(V8))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPData', V3, V4, V11, V6, V15}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E9, E10, E11} -> (fun (V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V16, V17, V22}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPClause'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> begin (V7 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> begin (V10 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V6))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPatClause', V3, V9, V12, []}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E7, E8, E9, E10, E11} -> (fun (V13, V14, V15, V16, V17) -> fun (V18) -> begin (V19 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V18))), case V19 of {'Idris.Prelude.Types.Left', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> begin (V22 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))(V18))), case V22 of {'Idris.Prelude.Types.Left', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V24) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> ('un--toPClause'(V0, V1, V25)) end, V17, []))(V18))), case V26 of {'Idris.Prelude.Types.Left', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkWithClause', V13, V21, V24, V16, V28}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ImpossibleClause', E18, E19} -> (fun (V29, V30) -> fun (V31) -> begin (V32 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V30))(V31))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V29, V34}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toCleanPTerm'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--toPTerm'(V0, V1, V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--cleanPTerm'(V0, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sugarName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(implicit) "/utf8>>, V1)) end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V3, V4) -> ('un--sugarName'(V3)) end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V5, V6) -> V5 end(E4, E5)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V0)) end.
'un--sugarAppM'(V0) -> case V0 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Idris.Syntax.PApp', E3, E4, E5} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Idris.Syntax.PRef', E6, E7} -> (fun (V7, V8) -> ('case--sugarAppM-3462'(V4, V7, V8, V6, V3, V1, ('Idris.Idris2.Core.Name':'un--nameRoot'(V8)))) end(E6, E7)); _ -> ('case--sugarAppM-3682'(V0, ('un--extractNat'(0, V0)))) end end(E3, E4, E5)); _ -> ('case--sugarAppM-3682'(V0, ('un--extractNat'(0, V0)))) end end(E0, E1, E2)); _ -> ('case--sugarAppM-3682'(V0, ('un--extractNat'(0, V0)))) end.
'un--sugarApp'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V0 end, ('un--sugarAppM'(V0)))).
'un--startPrec'() -> 0.
'un--showImplicits'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V5 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showFullEnv'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V6 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugarNoPatvars'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'(V0, V1, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugar'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--pterm'(V0, V1, V2, V3) -> ('un--toCleanPTerm'(V0, V1, ('un--startPrec'()), V2, V3)).
'un--mkOp'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Idris.Syntax.PApp', E3, E4, E5} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Idris.Syntax.PRef', E6, E7} -> (fun (V8, V9) -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> begin (V15 = {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PApp', V5, {'Idris.Idris.Syntax.PRef', V8, V9}, V7}, V4}), (('case--mkOp-3152'(V5, V8, V9, V7, V4, V2, V15, V0, V14, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V9)), case V14 of {'Idris.Idris.Syntax.MkSyntax', E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V10)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', V1} end end end(E3, E4, E5)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', V1} end end end(E0, E1, E2)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--mkApp'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V11 = ('un--sugarApp'({'Idris.Idris.Syntax.PApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V11, V6)) end end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V13 = ('un--sugarApp'({'Idris.Idris.Syntax.PAutoApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V13, V6)) end end()); {'Idris.Prelude.Types.Just', E7} -> (fun (V14) -> fun (V15) -> begin (V16 = ('un--showImplicits'(V0, V15))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case V18 of 0 -> begin (V19 = {'Idris.Idris.Syntax.PNamedApp', V7, V2, V14, V10}), (('un--mkApp'(V0, V1, V19, V6))(V15)) end; 1 -> (('un--mkApp'(V0, V1, V2, V6))(V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fullNamespace'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V7 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extractNat'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V15, V16)) end end end end}, fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V19, V20)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V6, <<"Z"/utf8>>)))), fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V24, V25)) end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V30, V31)) end end end end}, fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V34, V35)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V0)) end)) end)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Idris.Syntax.PApp', E5, E6, E7} -> (fun (V37, V38, V39) -> case V38 of {'Idris.Idris.Syntax.PRef', E8, E9} -> (fun (V40, V41) -> case V41 of {'Idris.Core.Name.NS', E10, E11} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E12} -> (fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V47, V48)) end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V53, V54)) end end end end}, fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V57, V58)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V44, <<"S"/utf8>>)))), fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V62, V63)) end end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V65)) end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative__Maybe'('erased', 'erased', V68, V69)) end end end end}, fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative__Maybe'('erased')) end, fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative__Maybe'('erased', V72, V73)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V42, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V42, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun (V74) -> ('un--extractNat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V0)), V39)) end)) end)) end(E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6, E7)); {'Idris.Idris.Syntax.PPrimVal', E13, E14} -> (fun (V75, V76) -> case V76 of {'Idris.Core.TT.BI', E15} -> (fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V77)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14)); {'Idris.Idris.Syntax.PBracketed', E16, E17} -> (fun (V78, V79) -> ('un--extractNat'(V0, V79)) end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--cleanPTerm'(V0, V1, V2) -> begin (V3 = ('un--fullNamespace'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Right', V1}; 1 -> (('Idris.Idris2.Idris.Syntax':'un--mapPTermM'(fun (V6) -> ('nested--13154-5516--in--un--cleanNode'(V1, V0, V6)) end, V1))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bracket'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--mkOp'(V0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--bracket-3278'(V3, V2, V1, V0, V7, ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord__Nat'(V1, V2))))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--argPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1000)).
'un--appPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(999)).
'un--addBracket'(V0, V1) -> ('case--addBracket-3254'(V1, V0, ('nested--10601-3204--in--un--needed'(V1, V0, V1)))).
