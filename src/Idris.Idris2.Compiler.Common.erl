-module('Idris.Idris2.Compiler.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getExtraRuntime,readPath-3849'/3,
  'case--case block in getExtraRuntime,getArg-3803'/5,
  'case--getExtraRuntime,getArg-3785'/3,
  'case--case block in case block in copyLib-3731'/5,
  'case--case block in copyLib-3713'/3,
  'case--copyLib-3690'/3,
  'case--case block in locate-3580'/4,
  'case--locate-3557'/3,
  'case--parseCC-3467'/2,
  'case--parseCC,getOpts-3430'/3,
  'case--exists-3383'/2,
  'case--case block in getExportedCompileData-3230'/31,
  'case--case block in case block in getExportedCompileData-3087'/30,
  'case--case block in getExportedCompileData-3013'/30,
  'case--case block in getExportedCompileData-2877'/28,
  'case--getExportedCompileData-2766'/24,
  'case--exportedName-2535'/3,
  'case--case block in getCompileData-2343'/29,
  'case--case block in case block in getCompileData-2210'/28,
  'case--case block in getCompileData-2141'/28,
  'case--case block in getCompileData-2015'/26,
  'case--getCompileData-1843'/22,
  'case--nonErased-1634'/4,
  'case--dumpVMCode-1591'/4,
  'case--dumpANF-1518'/4,
  'case--dumpLifted-1445'/4,
  'case--dumpCases-1368'/5,
  'case--case block in dumpCases,dumpCase-1303'/7,
  'case--dumpCases,dumpCase-1276'/5,
  'case--case block in getNamedDef-1159'/6,
  'case--getNamedDef-1137'/4,
  'case--case block in case block in case block in getAllDesc-987'/16,
  'case--case block in case block in getAllDesc-947'/11,
  'case--case block in getAllDesc-900'/8,
  'case--getAllDesc-878'/7,
  'case--max-527'/3,
  'case--min-513'/3,
  'nested--10047-562--in--un--tag'/3,
  'nested--13669-3774--in--un--readPath'/3,
  'nested--13669-3773--in--un--paths'/1,
  'nested--13286-3415--in--un--getOpts'/2,
  'nested--13669-3772--in--un--getArg'/2,
  'nested--11211-1545--in--un--fullShow'/3,
  'nested--11134-1472--in--un--fullShow'/3,
  'nested--11057-1399--in--un--fullShow'/3,
  'nested--10898-1255--in--un--fullShow'/4,
  'nested--11211-1546--in--un--dumpDef'/3,
  'nested--11134-1473--in--un--dumpDef'/3,
  'nested--11057-1400--in--un--dumpDef'/3,
  'nested--10898-1256--in--un--dumpCase'/5,
  'dn--un--min_Ord__UsePhase'/2,
  'dn--un--max_Ord__UsePhase'/2,
  'dn--un--compare_Ord__UsePhase'/2,
  'dn--un--__Impl_Ord_UsePhase'/0,
  'dn--un--__Impl_Eq_UsePhase'/0,
  'dn--un-->_Ord__UsePhase'/2,
  'dn--un-->=_Ord__UsePhase'/2,
  'dn--un--==_Eq__UsePhase'/2,
  'dn--un--<_Ord__UsePhase'/2,
  'dn--un--<=_Ord__UsePhase'/2,
  'dn--un--/=_Eq__UsePhase'/2,
  'un--warnIfHole'/2,
  'un--skipUnusedNames'/1,
  'un--replaceEntry'/2,
  'un--parseCC'/1,
  'un--nonErased'/3,
  'un--natHackNames'/0,
  'un--locate'/2,
  'un--isExported'/1,
  'un--getNamedDef'/3,
  'un--getMinimalDef'/1,
  'un--getExtraRuntime'/2,
  'un--getExportedCompileData'/5,
  'un--getCompileData'/4,
  'un--getAllDesc'/4,
  'un--exportedName'/1,
  'un--exists'/2,
  'un--dylib_suffix'/0,
  'un--dumpVMCode'/2,
  'un--dumpLifted'/2,
  'un--dumpCases'/4,
  'un--dumpANF'/2,
  'un--copyLib'/1,
  'un--cgExecuteExpr'/4,
  'un--cgCompileLibrary'/5,
  'un--cgCompileExpr'/5
]).
'case--getExtraRuntime,readPath-3849'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', V3} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V5}, V6)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExtraRuntime,getArg-3803'(V0, V1, V2, V3, V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.Strings':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + 0), ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V3)), V3))))}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getExtraRuntime,getArg-3785'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('case--case block in getExtraRuntime,getArg-3803'(V0, V1, V3, V4, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(('Idris.Idris2.Data.Strings':'un--trim'(V3)), <<"extraRuntime"/utf8>>)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in copyLib-3731'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V7}, V8)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in copyLib-3713'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = begin (V5 = (('Idris.Idris2.Utils.Binary':'un--writeToFile'(V0, V3))(V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V10}, V4)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--copyLib-3690'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V4) -> begin (V6 = begin (V5 = ('Idris.Idris2.Utils.Binary':'un--readFromFile'(V1, V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V11 = begin (V10 = (('Idris.Idris2.Utils.Binary':'un--writeToFile'(V0, V9))(V4))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V15}, V4)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in locate-3580'(V0, V1, V2, V3) -> case V3 of 0 -> V2; 1 -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('un--dylib_suffix'()))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--locate-3557'(V0, V1, V2) -> case V2 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> ('case--case block in locate-3580'(V0, V1, V3, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Char'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V7, V8)) end end}, $., ('Idris.Idris2.Prelude.Types':'un--unpack'(V3)))))); [E2 | E3] -> (fun (V9, V10) -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(('un--dylib_suffix'()), <<"dll"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V9, <<".dll"/utf8>>)))))) end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(('un--dylib_suffix'()), <<"dylib"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V9, <<".dylib"/utf8>>)))))) end} | []]], ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--dylib_suffix'()), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, V9)))))))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseCC-3467'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of <<""/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Strings':'un--trim'(V2)), []}}; _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Strings':'un--trim'(V2)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Data.Strings':'un--trim'(V4)) end, ('nested--13286-3415--in--un--getOpts'(V0, ('Idris.Idris2.Data.Strings':'un--strTail'(V3))))))}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseCC,getOpts-3430'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of <<""/utf8>> -> [V3 | []]; _ -> [V3 | ('nested--13286-3415--in--un--getOpts'(V0, ('Idris.Idris2.Data.Strings':'un--strTail'(V4))))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--exists-3383'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> begin (V31 = (('Idris.Idris2.Erlang.System.File':'un--closeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V2))(V3))), 0 end end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V32) -> fun (V33) -> 1 end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExportedCompileData-3230'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of 0 -> fun (V31) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Get VM Code"/utf8>> end, fun (V32) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V29))} end, V31)) end; 1 -> fun (V33) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getExportedCompileData-3087'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V30, V31) -> fun (V32) -> begin (V33 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V31))(V32))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V30, V35}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExportedCompileData-3013'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of 0 -> fun (V30) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V32, V33) -> fun (V34) -> begin (V35 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V33))(V34))), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V32, V37}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V28, [])), V30)) end; 1 -> fun (V38) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExportedCompileData-2877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> fun (V28) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V29) -> fun (V30) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V3, V29, V30)) end end, V17, [])), V28)) end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getExportedCompileData-2766'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> fun (V26) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> fun (V28) -> ('un--getNamedDef'(V3, V27, V28)) end end, V17, []))(V26))), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V33 = begin (V32 = {'Idris.Builtin.MkPair', V24, V25}), (('case--case block in getExportedCompileData-2877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V24, V25, V32, V31, ('dn--un-->=_Ord__UsePhase'(V2, {'Idris.Compiler.Common.Lifted'}))))(V26)) end), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V48 = [{'Idris.Builtin.MkPair', V22, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V24}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V25, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V43, V44, V45)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V46, V47)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V35))))]), begin (V50 = begin (V49 = {'Idris.Builtin.MkPair', V24, V25}), (('case--case block in getExportedCompileData-3013'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V24, V25, V49, V31, V35, V48, ('dn--un-->=_Ord__UsePhase'(V2, {'Idris.Compiler.Common.ANF'}))))(V26)) end), case V50 of {'Idris.Prelude.Types.Left', E6} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V52) -> begin (V54 = begin (V53 = {'Idris.Builtin.MkPair', V24, V25}), (('case--case block in getExportedCompileData-3230'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V24, V25, V53, V31, V35, V48, V52, ('dn--un-->=_Ord__UsePhase'(V2, {'Idris.Compiler.Common.VMCode'}))))(V26)) end), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V21, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V57) -> V57 end, V31)), V48, V52, V56}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--exportedName-2535'(V0, V1, V2) -> case V2 of 0 -> {'Idris.Prelude.Types.Just', V0}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getCompileData-2343'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of 0 -> fun (V29) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V2, fun () -> <<"Get VM Code"/utf8>> end, fun (V30) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V27))} end, V29)) end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getCompileData-2210'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> fun (V30) -> begin (V31 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V29))(V30))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V28, V33}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getCompileData-2141'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> fun (V28) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V2, fun () -> <<"Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V30, V31) -> fun (V32) -> begin (V33 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V31))(V32))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V30, V35}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V26, [])), V28)) end; 1 -> fun (V36) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getCompileData-2015'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> fun (V26) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V2, fun () -> <<"Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> fun (V28) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V2, V27, V28)) end end, V15, [])), V26)) end; 1 -> fun (V29) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getCompileData-1843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> fun (V24) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> fun (V26) -> ('un--getNamedDef'(V2, V25, V26)) end end, V15, []))(V24))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V31 = begin (V30 = {'Idris.Builtin.MkPair', V22, V23}), (('case--case block in getCompileData-2015'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V22, V23, V30, V29, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.Lifted'}))))(V24)) end), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> begin (V46 = [{'Idris.Builtin.MkPair', V20, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V22}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V23, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V41, V42, V43)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V44, V45)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V33))))]), begin (V48 = begin (V47 = {'Idris.Builtin.MkPair', V22, V23}), (('case--case block in getCompileData-2141'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V22, V23, V47, V29, V33, V46, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.ANF'}))))(V24)) end), case V48 of {'Idris.Prelude.Types.Left', E6} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V50) -> begin (V52 = begin (V51 = {'Idris.Builtin.MkPair', V22, V23}), (('case--case block in getCompileData-2343'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V22, V23, V51, V29, V33, V46, V50, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.VMCode'}))))(V24)) end), case V52 of {'Idris.Prelude.Types.Left', E8} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V54) -> begin (V56 = begin (V55 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V55} end), case V56 of {'Idris.Prelude.Types.Left', E10} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V58) -> begin (V107 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V60) -> fun (V61) -> begin (V90 = begin (V89 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, fun (V87) -> fun (V88) -> V88 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping case trees to "/utf8>>, V60))))(V61))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E12} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V92) -> ('un--dumpCases'(V58, V60, V15, V61)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V4 of {'Idris.Core.Options.MkSessionOpts', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V103 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V24))), case V107 of {'Idris.Prelude.Types.Left', E28} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V109) -> begin (V158 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V111) -> fun (V112) -> begin (V141 = begin (V140 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V115, V116, V117)) end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> V119 end end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), begin (V127 = (V124(V125))), (V126(V127)) end end end end end end end}, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), ((V131(V133))(V132)) end end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V135(V136))), (V137(V136)) end end end end}, fun (V138) -> fun (V139) -> V139 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping lambda lifted defs to "/utf8>>, V111))))(V112))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E30} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V143) -> (('un--dumpLifted'(V111, V46))(V112)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V4 of {'Idris.Core.Options.MkSessionOpts', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157) -> V155 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V24))), case V158 of {'Idris.Prelude.Types.Left', E46} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V160) -> begin (V209 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V161) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V162) -> fun (V163) -> begin (V192 = begin (V191 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping ANF defs to "/utf8>>, V162))))(V163))), {'Idris.Prelude.Types.Right', V191} end), case V192 of {'Idris.Prelude.Types.Left', E48} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V194) -> (('un--dumpANF'(V162, V50))(V163)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V4 of {'Idris.Core.Options.MkSessionOpts', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208) -> V207 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V24))), case V209 of {'Idris.Prelude.Types.Left', E64} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V211) -> begin (V260 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V212) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V213) -> fun (V214) -> begin (V243 = begin (V242 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V217, V218, V219)) end end end end end, fun (V220) -> fun (V221) -> fun (V222) -> V221 end end end, fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> begin (V228 = (V225(V227))), begin (V229 = (V226(V227))), (V228(V229)) end end end end end end end}, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> begin (V235 = (V232(V234))), ((V233(V235))(V234)) end end end end end end, fun (V236) -> fun (V237) -> fun (V238) -> begin (V239 = (V237(V238))), (V239(V238)) end end end end}, fun (V240) -> fun (V241) -> V241 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping VM defs to "/utf8>>, V213))))(V214))), {'Idris.Prelude.Types.Right', V242} end), case V243 of {'Idris.Prelude.Types.Left', E66} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V245) -> (('un--dumpVMCode'(V213, V54))(V214)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V4 of {'Idris.Core.Options.MkSessionOpts', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259) -> V259 end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V24))), case V260 of {'Idris.Prelude.Types.Left', E82} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V262) -> begin (V264 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V263) -> ('un--replaceEntry'(V2, V263)) end, V12))(V24))), case V264 of {'Idris.Prelude.Types.Left', E84} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V266) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V19, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V267) -> V267 end, V29)), V46, V50, V54}} end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nonErased-1634'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V13 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpVMCode-1591'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpANF-1518'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpLifted-1445'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpCases-1368'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V7}, V8)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in dumpCases,dumpCase-1303'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--10898-1255--in--un--fullShow'(V0, V1, V2, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show__NamedDef'(V8)), <<"\x{a}"/utf8>>))))))} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpCases,dumpCase-1276'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in dumpCases,dumpCase-1303'(V0, V1, V2, V3, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V27 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getNamedDef-1159'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = (('un--warnIfHole'(V0, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V12 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7}}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNamedDef-1137'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in getNamedDef-1159'(V0, V1, V2, V5, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V26 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in getAllDesc-987'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> fun (V16) -> begin (V18 = begin (V17 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V4, V0, {'Idris.Builtin.MkPair', V0, V11}))(V16))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V10))), begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V26, V27)) end end}, V22, V23)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', V21)), []))(V16))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> (('un--getAllDesc'(V5, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V30, V2)), V4, V3))(V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--getAllDesc'(V5, V2, V4, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getAllDesc-947'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--addDef'(V5, V1, V11, V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V11))), begin (V18 = {'Idris.Builtin.MkPair', V11, V12}), (('case--case block in case block in case block in getAllDesc-987'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, V18, V16, V17, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(case V11 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V26 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V40, V41)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))))))(V13)) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getAllDesc-900'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--getAllDesc'(V5, V2, V4, V3)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--getMinimalDef'(V10))(V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V15 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V9, V10}}), case V14 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--addDef'(V5, V1, V16, V11))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V16))), begin (V22 = {'Idris.Builtin.MkPair', V16, V17}), (('case--case block in case block in case block in getAllDesc-987'(V0, V1, V2, V3, V4, V5, V6, V9, V10, V15, V16, V17, V22, V20, V21, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(case V16 of {'Idris.Core.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V30 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))))))(V11)) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getAllDesc-878'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V34 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V1, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V34 of {'Idris.Prelude.Types.Left', E26} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V36) -> begin (V37 = {'Idris.Prelude.Types.Nothing'}), case V36 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getAllDesc'(V5, V2, V4, V3))(V7)) end()); {'Idris.Prelude.Types.Just', E28} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V39, V40) -> begin (V41 = (('un--getMinimalDef'(V40))(V7))), case V41 of {'Idris.Prelude.Types.Left', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V39, V40}}), case V43 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V45, V46) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--addDef'(V5, V1, V45, V7))), case V47 of {'Idris.Prelude.Types.Left', E35} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V45))), begin (V51 = {'Idris.Builtin.MkPair', V45, V46}), (('case--case block in case block in case block in getAllDesc-987'(V0, V1, V2, V3, V4, V5, V37, V39, V40, V44, V45, V46, V51, V49, V50, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(case V45 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V59 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V73) -> fun (V74) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V73, V74)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V75) -> fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V75, V76)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))))))(V7)) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E58} -> (fun (V77) -> ('un--getAllDesc'(V5, V2, V4, V3)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-527'(V0, V1, V2) -> case V2 of 0 -> V1; 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-513'(V0, V1, V2) -> case V2 of 0 -> V1; 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10047-562--in--un--tag'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Common.Cases'} -> (fun () -> 0 end()); {'Idris.Compiler.Common.Lifted'} -> (fun () -> 0 end()); {'Idris.Compiler.Common.ANF'} -> (fun () -> 0 end()); {'Idris.Compiler.Common.VMCode'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13669-3774--in--un--readPath'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Right', V34} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V35}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--13669-3773--in--un--paths'(V0) -> ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V3, V4)) end end}, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V5) -> ('nested--13669-3772--in--un--getArg'(V0, V5)) end, ('Idris.Idris2.Data.List':'un--reverse'('erased', V0)))))).
'nested--13286-3415--in--un--getOpts'(V0, V1) -> case V1 of <<""/utf8>> -> []; _ -> ('case--parseCC,getOpts-3430'(V0, V1, ('Idris.Idris2.Data.Strings':'un--span'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V2, $,)) end, V1)))) end.
'nested--13669-3772--in--un--getArg'(V0, V1) -> ('case--getExtraRuntime,getArg-3785'(V0, V1, ('Idris.Idris2.Data.Strings':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Char'(V2, $=)) end, V1)))).
'nested--11211-1545--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V2)) end.
'nested--11134-1472--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V2)) end.
'nested--11057-1399--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V2)) end.
'nested--10898-1255--in--un--fullShow'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V5)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V3)) end.
'nested--11211-1546--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--11211-1545--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show__VMDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11134-1473--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--11134-1472--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.ANF':'dn--un--show_Show__ANFDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11057-1400--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--11057-1399--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.LambdaLift':'dn--un--show_Show__LiftedDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10898-1256--in--un--dumpCase'(V0, V1, V2, V3, V4) -> begin (V31 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V31 of {'Idris.Prelude.Types.Left', E26} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end()); {'Idris.Prelude.Types.Just', E28} -> (fun (V34) -> begin (V35 = {'Idris.Prelude.Types.Just', V34}), (('case--case block in dumpCases,dumpCase-1303'(V0, V1, V2, V3, V34, V35, case V34 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V55 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--min_Ord__UsePhase'(V0, V1) -> ('case--min-513'(V1, V0, ('dn--un--<_Ord__UsePhase'(V0, V1)))).
'dn--un--max_Ord__UsePhase'(V0, V1) -> ('case--max-527'(V1, V0, ('dn--un-->_Ord__UsePhase'(V0, V1)))).
'dn--un--compare_Ord__UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(('nested--10047-562--in--un--tag'(V1, V0, V0)), ('nested--10047-562--in--un--tag'(V1, V0, V1)))).
'dn--un--__Impl_Ord_UsePhase'() -> {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__UsePhase'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__UsePhase'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord__UsePhase'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord__UsePhase'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord__UsePhase'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord__UsePhase'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord__UsePhase'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord__UsePhase'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord__UsePhase'(V16, V17)) end end}.
'dn--un--__Impl_Eq_UsePhase'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__UsePhase'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__UsePhase'(V2, V3)) end end}.
'dn--un-->_Ord__UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Ordering'(('dn--un--compare_Ord__UsePhase'(V0, V1)), 2)).
'dn--un-->=_Ord__UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Ordering'(('dn--un--compare_Ord__UsePhase'(V0, V1)), 0)).
'dn--un--==_Eq__UsePhase'(V0, V1) -> case V0 of {'Idris.Compiler.Common.Cases'} -> (fun () -> case V1 of {'Idris.Compiler.Common.Cases'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Compiler.Common.Lifted'} -> (fun () -> case V1 of {'Idris.Compiler.Common.Lifted'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Compiler.Common.ANF'} -> (fun () -> case V1 of {'Idris.Compiler.Common.ANF'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Compiler.Common.VMCode'} -> (fun () -> case V1 of {'Idris.Compiler.Common.VMCode'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--<_Ord__UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Ordering'(('dn--un--compare_Ord__UsePhase'(V0, V1)), 0)).
'dn--un--<=_Ord__UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Ordering'(('dn--un--compare_Ord__UsePhase'(V0, V1)), 2)).
'dn--un--/=_Eq__UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__UsePhase'(V0, V1)))).
'un--warnIfHole'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNmError', E0} -> (fun (V2) -> fun (V3) -> begin (V31 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Warning: compiling hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V0))))))(V3))), {'Idris.Prelude.Types.Right', V31} end end end(E0)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--skipUnusedNames'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--skipUnusedNames'(V2)) end(E0, E1)); {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> 1 end(E2, E3)); {'Idris.Core.Name.Resolved', E4} -> (fun (V5) -> 1 end(E4)); _ -> 0 end.
'un--replaceEntry'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, {'Idris.Core.Name.Resolved', V2}, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseCC'(V0) -> case V0 of <<""/utf8>> -> {'Idris.Prelude.Types.Nothing'}; _ -> ('case--parseCC-3467'(V0, ('Idris.Idris2.Data.Strings':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V1, $:)) end, V0)))) end.
'un--nonErased'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(case V36 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V44 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V58, V59)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V60, V61)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))))} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--natHackNames'() -> [{'Idris.Core.Name.UN', <<"prim__add_Integer"/utf8>>} | [{'Idris.Core.Name.UN', <<"prim__sub_Integer"/utf8>>} | [{'Idris.Core.Name.UN', <<"prim__mul_Integer"/utf8>>} | [{'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', <<"prim__integerToNat"/utf8>>}} | []]]]].
'un--locate'(V0, V1) -> begin (V2 = ('case--locate-3557'(V1, V0, ('Idris.Idris2.Data.Strings':'un--words'(V1))))), fun (V3) -> begin (V7 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V4) -> ('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, V2, V4)) end, fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V2} end end, V3))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V9}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--isExported'(V0) -> case V0 of {'Idris.Core.TT.Public'} -> (fun () -> 0 end()); {'Idris.Core.TT.Export'} -> (fun () -> 0 end()); {'Idris.Core.TT.Private'} -> (fun () -> 1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNamedDef'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> begin (V37 = {'Idris.Prelude.Types.Just', V36}), (('case--case block in getNamedDef-1159'(V1, V0, V6, V36, V37, case V36 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getMinimalDef'(V0) -> case V0 of {'Idris.Core.Context.Decoded', E0} -> (fun (V1) -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Nothing'}}} end end(E0)); {'Idris.Core.Context.Coded', E1} -> (fun (V3) -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V12 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CDef'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CDef'(V10, V11)) end end}, V7, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V60 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V18) -> fun (V19) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V22, V23)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V24) -> fun (V25) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V26, V27)) end end}}, V18, V19)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V32, V33)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V36, V37)) end end}}, V28, V29)) end end}, V15, V16, V17)) end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V44, V45)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V48, V49)) end end}}, V40, V41)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V54, V55)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V56) -> fun (V57) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V58, V59)) end end}}, V50, V51)) end end}, V38, V39)) end end}, V7, V4))), case V60 of {'Idris.Prelude.Types.Left', E6} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V62) -> begin (V64 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V63) -> ('Idris.Idris2.Data.NameMap':'un--fromList'('erased', V63)) end, V62))), begin (V65 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__FC'(V7, V4))), case V65 of {'Idris.Prelude.Types.Left', E8} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V7, V4))), case V68 of {'Idris.Prelude.Types.Left', E10} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V70) -> begin (V71 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V7, V4))), case V71 of {'Idris.Prelude.Types.Left', E12} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V73) -> begin (V74 = {'Idris.Core.Context.MkGlobalDef', V67, V73, {'Idris.Core.TT.Erased', V67, 1}, [], [], [], [], V70, [], {'Idris.Core.TT.Public'}, {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.IsCovering'}}, [], {'Idris.Prelude.Types.Nothing'}, V64, 1, 1, 0, {'Idris.Core.Context.None'}, V14, {'Idris.Prelude.Types.Nothing'}, []}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V74, {'Idris.Prelude.Types.Just', V3}}} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getExtraRuntime'(V0, V1) -> begin (V4 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V2) -> fun (V3) -> ('nested--13669-3774--in--un--readPath'(V0, V2, V3)) end end, ('nested--13669-3773--in--un--paths'(V0)), []))(V1))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(('Idris.Idris2.Data.List':'un--intersperse'('erased', <<"\x{a}"/utf8>>, V6))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getExportedCompileData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V16 = begin (V15 = ('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'('erased', V14, V4))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V46 = ('Idris.Idris2.Data.List':'un--filter'('erased', V2, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V19) -> ('un--skipUnusedNames'(V19)) end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--getResolvedAs'(case V8 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V20 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))), begin (V78 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V47) -> fun (V48) -> begin (V75 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V47, case V8 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V49 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V48))), case V75 of {'Idris.Prelude.Types.Left', E60} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V47, V77}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V46, []))(V4))), case V78 of {'Idris.Prelude.Types.Left', E62} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V80) -> begin (V82 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V81) -> ('un--exportedName'(V81)) end, V80))), begin (V89 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V87, V88)) end end}, V83, V84)) end end, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--natHackNames'()), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V82, V3)))), []))(V4))), case V89 of {'Idris.Prelude.Types.Left', E64} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V91) -> begin (V92 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Get names"/utf8>> end, ('un--getAllDesc'(V0, V91, V18, V8)), V4))), case V92 of {'Idris.Prelude.Types.Left', E66} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V94) -> begin (V96 = begin (V95 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'('erased', V18))(V4))), {'Idris.Prelude.Types.Right', V95} end), case V96 of {'Idris.Prelude.Types.Left', E68} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V98) -> begin (V100 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V99) -> V99 end, V98))), begin (V102 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V101) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V101))} end, V100))), begin (V109 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V107, V108)) end end}, V103, V104)) end end, V102, []))(V4))), case V109 of {'Idris.Prelude.Types.Left', E70} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V111) -> begin (V119 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V112) -> fun (V113) -> ('un--nonErased'(V0, V112, V113)) end end, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V116, V117)) end end}, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V118) -> ('un--skipUnusedNames'(V118)) end, V111))))))(V4))), case V119 of {'Idris.Prelude.Types.Left', E72} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V121) -> begin (V124 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Merge lambda"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V122) -> fun (V123) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V122, V123)) end end, V121)), V4))), case V124 of {'Idris.Prelude.Types.Left', E74} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V126) -> begin (V129 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Fix arity"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V127) -> fun (V128) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V127, V128)) end end, V121)), V4))), case V129 of {'Idris.Prelude.Types.Left', E76} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V131) -> begin (V134 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Forget names"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V132) -> fun (V133) -> ('Idris.Idris2.Compiler.CompileExpr':'un--mkForgetDef'(V0, V132, V133)) end end, V121)), V4))), case V134 of {'Idris.Prelude.Types.Left', E78} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V136) -> begin (V137 = (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, {'Idris.Core.CompileExpr.CErased', {'Idris.Core.FC.EmptyFC'}}))(V4))), case V137 of {'Idris.Prelude.Types.Left', E80} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V139) -> begin (V140 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V141 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V140, V139, V4))), case V141 of {'Idris.Prelude.Types.Left', E82} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V143) -> case V143 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V144, V145) -> begin (V148 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V146) -> fun (V147) -> ('un--getNamedDef'(V0, V146, V147)) end end, V121, []))(V4))), case V148 of {'Idris.Prelude.Types.Left', E86} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V150) -> begin (V152 = begin (V151 = {'Idris.Builtin.MkPair', V144, V145}), (('case--case block in getExportedCompileData-2877'(V3, V2, V1, V0, V8, V11, V14, V18, V46, V80, V82, V91, V94, V98, V100, V102, V111, V121, V126, V131, V136, V139, V140, V144, V145, V151, V150, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.Lifted'}))))(V4)) end), case V152 of {'Idris.Prelude.Types.Left', E88} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V154) -> begin (V167 = [{'Idris.Builtin.MkPair', V140, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V144}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V145, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V157, V158, V159)) end end end end end, fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V162, V163, V164)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V165, V166)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V154))))]), begin (V169 = begin (V168 = {'Idris.Builtin.MkPair', V144, V145}), (('case--case block in getExportedCompileData-3013'(V3, V2, V1, V0, V8, V11, V14, V18, V46, V80, V82, V91, V94, V98, V100, V102, V111, V121, V126, V131, V136, V139, V140, V144, V145, V168, V150, V154, V167, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.ANF'}))))(V4)) end), case V169 of {'Idris.Prelude.Types.Left', E90} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V171) -> begin (V173 = begin (V172 = {'Idris.Builtin.MkPair', V144, V145}), (('case--case block in getExportedCompileData-3230'(V3, V2, V1, V0, V8, V11, V14, V18, V46, V80, V82, V91, V94, V98, V100, V102, V111, V121, V126, V131, V136, V139, V140, V144, V145, V172, V150, V154, V167, V171, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.VMCode'}))))(V4)) end), case V173 of {'Idris.Prelude.Types.Left', E92} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V139, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V176) -> V176 end, V150)), V167, V171, V175}} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getCompileData'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.TT':'un--getRefs'('erased', {'Idris.Core.Name.Resolved', ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Int'(1))}, V2))), begin (V16 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V14, V15)) end end}, V2, V3))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V23, V24)) end end}, V19, V20)) end end, ('un--natHackNames'()), []))(V3))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V3))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V32 = begin (V31 = ('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'('erased', V30, V3))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Get names"/utf8>> end, ('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V27, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', V11)))), V34, V7)), V3))), case V35 of {'Idris.Prelude.Types.Left', E12} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V37) -> begin (V39 = begin (V38 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'('erased', V34))(V3))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E14} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V41) -> begin (V43 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V42) -> V42 end, V41))), begin (V45 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V44) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44))} end, V43))), begin (V52 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V50, V51)) end end}, V46, V47)) end end, V45, []))(V3))), case V52 of {'Idris.Prelude.Types.Left', E16} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V54) -> begin (V57 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V55) -> fun (V56) -> ('un--nonErased'(V0, V55, V56)) end end, V54))(V3))), case V57 of {'Idris.Prelude.Types.Left', E18} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V59) -> begin (V62 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Merge lambda"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V60) -> fun (V61) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V60, V61)) end end, V59)), V3))), case V62 of {'Idris.Prelude.Types.Left', E20} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V64) -> begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Fix arity"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V65) -> fun (V66) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V65, V66)) end end, V59)), V3))), case V67 of {'Idris.Prelude.Types.Left', E22} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V69) -> begin (V72 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Forget names"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V70) -> fun (V71) -> ('Idris.Idris2.Compiler.CompileExpr':'un--mkForgetDef'(V0, V70, V71)) end end, V59)), V3))), case V72 of {'Idris.Prelude.Types.Left', E24} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V74) -> begin (V78 = begin (V75 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V18, V3))), case V75 of {'Idris.Prelude.Types.Left', E26} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V77) -> (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V77))(V3)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V78 of {'Idris.Prelude.Types.Left', E28} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V80) -> begin (V81 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V82 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V81, V80, V3))), case V82 of {'Idris.Prelude.Types.Left', E30} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V84) -> case V84 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V85, V86) -> begin (V89 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V87) -> fun (V88) -> ('un--getNamedDef'(V0, V87, V88)) end end, V59, []))(V3))), case V89 of {'Idris.Prelude.Types.Left', E34} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V91) -> begin (V93 = begin (V92 = {'Idris.Builtin.MkPair', V85, V86}), (('case--case block in getCompileData-2015'(V2, V1, V0, V7, V10, V11, V18, V27, V30, V34, V37, V41, V43, V45, V54, V59, V64, V69, V74, V80, V81, V85, V86, V92, V91, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.Lifted'}))))(V3)) end), case V93 of {'Idris.Prelude.Types.Left', E36} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V95) -> begin (V108 = [{'Idris.Builtin.MkPair', V81, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V85}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V86, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V98, V99, V100)) end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V103, V104, V105)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V106, V107)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V95))))]), begin (V110 = begin (V109 = {'Idris.Builtin.MkPair', V85, V86}), (('case--case block in getCompileData-2141'(V2, V1, V0, V7, V10, V11, V18, V27, V30, V34, V37, V41, V43, V45, V54, V59, V64, V69, V74, V80, V81, V85, V86, V109, V91, V95, V108, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.ANF'}))))(V3)) end), case V110 of {'Idris.Prelude.Types.Left', E38} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V112) -> begin (V114 = begin (V113 = {'Idris.Builtin.MkPair', V85, V86}), (('case--case block in getCompileData-2343'(V2, V1, V0, V7, V10, V11, V18, V27, V30, V34, V37, V41, V43, V45, V54, V59, V64, V69, V74, V80, V81, V85, V86, V113, V91, V95, V108, V112, ('dn--un-->=_Ord__UsePhase'(V1, {'Idris.Compiler.Common.VMCode'}))))(V3)) end), case V114 of {'Idris.Prelude.Types.Left', E40} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V116) -> begin (V118 = begin (V117 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V117} end), case V118 of {'Idris.Prelude.Types.Left', E42} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V120) -> begin (V169 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V121) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V122) -> fun (V123) -> begin (V152 = begin (V151 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V126, V127, V128)) end end end end end, fun (V129) -> fun (V130) -> fun (V131) -> V130 end end end, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V134(V136))), begin (V138 = (V135(V136))), (V137(V138)) end end end end end end end}, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> begin (V144 = (V141(V143))), ((V142(V144))(V143)) end end end end end end, fun (V145) -> fun (V146) -> fun (V147) -> begin (V148 = (V146(V147))), (V148(V147)) end end end end}, fun (V149) -> fun (V150) -> V150 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping case trees to "/utf8>>, V122))))(V123))), {'Idris.Prelude.Types.Right', V151} end), case V152 of {'Idris.Prelude.Types.Left', E44} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V154) -> ('un--dumpCases'(V120, V122, V59, V123)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V10 of {'Idris.Core.Options.MkSessionOpts', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168) -> V165 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V169 of {'Idris.Prelude.Types.Left', E60} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V171) -> begin (V220 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V173) -> fun (V174) -> begin (V203 = begin (V202 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V177, V178, V179)) end end end end end, fun (V180) -> fun (V181) -> fun (V182) -> V181 end end end, fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V185(V187))), begin (V189 = (V186(V187))), (V188(V189)) end end end end end end end}, fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> begin (V195 = (V192(V194))), ((V193(V195))(V194)) end end end end end end, fun (V196) -> fun (V197) -> fun (V198) -> begin (V199 = (V197(V198))), (V199(V198)) end end end end}, fun (V200) -> fun (V201) -> V201 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping lambda lifted defs to "/utf8>>, V173))))(V174))), {'Idris.Prelude.Types.Right', V202} end), case V203 of {'Idris.Prelude.Types.Left', E62} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V205) -> (('un--dumpLifted'(V173, V108))(V174)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V10 of {'Idris.Core.Options.MkSessionOpts', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219) -> V217 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V220 of {'Idris.Prelude.Types.Left', E78} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V222) -> begin (V271 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V223) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V224) -> fun (V225) -> begin (V254 = begin (V253 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V228, V229, V230)) end end end end end, fun (V231) -> fun (V232) -> fun (V233) -> V232 end end end, fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> begin (V239 = (V236(V238))), begin (V240 = (V237(V238))), (V239(V240)) end end end end end end end}, fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> begin (V246 = (V243(V245))), ((V244(V246))(V245)) end end end end end end, fun (V247) -> fun (V248) -> fun (V249) -> begin (V250 = (V248(V249))), (V250(V249)) end end end end}, fun (V251) -> fun (V252) -> V252 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping ANF defs to "/utf8>>, V224))))(V225))), {'Idris.Prelude.Types.Right', V253} end), case V254 of {'Idris.Prelude.Types.Left', E80} -> (fun (V255) -> {'Idris.Prelude.Types.Left', V255} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V256) -> (('un--dumpANF'(V224, V112))(V225)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V10 of {'Idris.Core.Options.MkSessionOpts', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270) -> V269 end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V271 of {'Idris.Prelude.Types.Left', E96} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V273) -> begin (V322 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V274) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V275) -> fun (V276) -> begin (V305 = begin (V304 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V279, V280, V281)) end end end end end, fun (V282) -> fun (V283) -> fun (V284) -> V283 end end end, fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> begin (V290 = (V287(V289))), begin (V291 = (V288(V289))), (V290(V291)) end end end end end end end}, fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> begin (V297 = (V294(V296))), ((V295(V297))(V296)) end end end end end end, fun (V298) -> fun (V299) -> fun (V300) -> begin (V301 = (V299(V300))), (V301(V300)) end end end end}, fun (V302) -> fun (V303) -> V303 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Dumping VM defs to "/utf8>>, V275))))(V276))), {'Idris.Prelude.Types.Right', V304} end), case V305 of {'Idris.Prelude.Types.Left', E98} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V307) -> (('un--dumpVMCode'(V275, V116))(V276)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V10 of {'Idris.Core.Options.MkSessionOpts', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113} -> (fun (V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321) -> V321 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V322 of {'Idris.Prelude.Types.Left', E114} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V324) -> begin (V326 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V325) -> ('un--replaceEntry'(V0, V325)) end, V43))(V3))), case V326 of {'Idris.Prelude.Types.Left', E116} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V328) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V80, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V329) -> V329 end, V91)), V108, V112, V116}} end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllDesc'(V0, V1, V2, V3) -> case V1 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Name.Resolved', E2} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V2, V7))(V8))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> begin (V13 = {'Idris.Core.Name.Resolved', V7}), case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V13, case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V14 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> begin (V43 = {'Idris.Prelude.Types.Nothing'}), case V42 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end()); {'Idris.Prelude.Types.Just', E33} -> (fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V45, V46) -> begin (V47 = (('un--getMinimalDef'(V46))(V8))), case V47 of {'Idris.Prelude.Types.Left', E36} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V49) -> begin (V50 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V45, V46}}), case V49 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V51, V52) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V13, V51, V8))), case V53 of {'Idris.Prelude.Types.Left', E40} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V51))), begin (V57 = {'Idris.Builtin.MkPair', V51, V52}), (('case--case block in case block in case block in getAllDesc-987'(V7, V13, V6, V3, V2, V0, V43, V45, V46, V50, V51, V52, V57, V55, V56, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(case V51 of {'Idris.Core.Context.MkGlobalDef', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78) -> V65 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V79, V80)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V81, V82)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))))))(V8)) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E63} -> (fun (V83) -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--getAllDesc'(V0, V6, V2, V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exportedName'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> ('case--exportedName-2535'(V1, V3, ('un--isExported'(case V3 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V13 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--exists'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--openFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, {'Idris.Erlang.System.File.Read'}))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> begin (V58 = (('Idris.Idris2.Erlang.System.File':'un--closeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V30))(V1))), 0 end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V59) -> 1 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dylib_suffix'() -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V2, V3)) end end}, ('Idris.Idris2.System.Info':'un--os'()), [<<"windows"/utf8>> | [<<"mingw32"/utf8>> | [<<"cygwin32"/utf8>> | []]]])) end, fun () -> <<"dll"/utf8>> end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(('Idris.Idris2.System.Info':'un--os'()), <<"darwin"/utf8>>)) end, fun () -> <<"dylib"/utf8>> end} | []]], <<"so"/utf8>>)).
'un--dumpVMCode'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V2) -> ('nested--11211-1546--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.Strings':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpLifted'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V2) -> ('nested--11057-1400--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.Strings':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpCases'(V0, V1, V2, V3) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V4) -> fun (V5) -> ('nested--10898-1256--in--un--dumpCase'(V2, V1, V0, V4, V5)) end end, V2, []))(V3))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V1, ('Idris.Idris2.Data.Strings':'un--fastAppend'(V8))))(V3))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E2} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Right', E4} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V41}, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpANF'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V2) -> ('nested--11134-1473--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.Strings':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--copyLib'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('case--copyLib-3690'(V1, V2, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V1, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cgExecuteExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V6))), begin (V8 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V7, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V1 of {'Idris.Compiler.Common.MkCG', E4, E5, E6} -> (fun (V11, V12, V13) -> ((((V12(V0))(V7))(V2))(V3)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileLibrary'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8} -> (fun (V16, V17, V18) -> (((((V18(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileExpr'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8} -> (fun (V16, V17, V18) -> (((((V16(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
