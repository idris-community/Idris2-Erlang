-module('Idris.Idris2.Idris.Syntax').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--resolved-11127'/4,
  'case--full-11086'/4,
  'case--toBuf-10780'/7,
  'case--fromBuf-10615'/2,
  'case--showPrec,deGuard-9716'/11,
  'case--showPrec,dePure-9662'/10,
  'case--showPrec-9224'/7,
  'nested--11422-9061--in--un--showCase'/5,
  'nested--11422-8978--in--un--showAlt'/9,
  'nested--13805-11003--in--un--insertAll'/6,
  'nested--13804-10961--in--un--insertAll'/6,
  'nested--14065-11206--in--un--goPiInfo'/2,
  'nested--14065-11210--in--un--goPairedPTerms'/3,
  'nested--14065-11220--in--un--goPTypeDecls'/2,
  'nested--14065-11203--in--un--goPTypeDecl'/2,
  'nested--14065-11209--in--un--goPTerms'/2,
  'nested--14065-11198--in--un--goPTerm'/2,
  'nested--14065-11219--in--un--goPFnOpts'/2,
  'nested--14065-11207--in--un--goPFnOpt'/2,
  'nested--14065-11218--in--un--goPFields'/2,
  'nested--14065-11217--in--un--goPFieldUpdates'/2,
  'nested--14065-11199--in--un--goPFieldUpdate'/2,
  'nested--14065-11205--in--un--goPField'/2,
  'nested--14065-11213--in--un--goPDos'/2,
  'nested--14065-11200--in--un--goPDo'/2,
  'nested--14065-11216--in--un--goPDecls'/2,
  'nested--14065-11202--in--un--goPDecl'/2,
  'nested--14065-11204--in--un--goPDataDecl'/2,
  'nested--14065-11214--in--un--goPClauses'/2,
  'nested--14065-11201--in--un--goPClause'/2,
  'nested--14065-11208--in--un--goMPTerm'/2,
  'nested--14065-11215--in--un--goMPDecls'/2,
  'nested--14065-11212--in--un--go4TupledPTerms'/4,
  'nested--14065-11211--in--un--go3TupledPTerms'/4,
  'nested--10639-7989--in--un--getName'/6,
  'nested--11422-9646--in--un--dePure'/5,
  'nested--11422-9647--in--un--deGuard'/5,
  'dn--un--toBuf_TTC__SyntaxInfo'/3,
  'dn--un--toBuf_TTC__IFaceInfo'/2,
  'dn--un--toBuf_TTC__Fixity'/2,
  'dn--un--show_Show__REPLOpt'/1,
  'dn--un--show_Show__REPLEval'/1,
  'dn--un--show_Show__PTerm'/1,
  'dn--un--showPrec_Show__REPLOpt'/2,
  'dn--un--showPrec_Show__REPLEval'/2,
  'dn--un--showPrec_Show__PTerm'/2,
  'dn--un--resolved_HasNames__SyntaxInfo'/3,
  'dn--un--resolved_HasNames__IFaceInfo'/3,
  'dn--un--resolved_HasNames__(ANameMap $a)'/4,
  'dn--un--pretty_Pretty__REPLOpt'/2,
  'dn--un--pretty_Pretty__REPLEval'/2,
  'dn--un--prettyPrec_Pretty__REPLOpt'/3,
  'dn--un--prettyPrec_Pretty__REPLEval'/3,
  'dn--un--full_HasNames__SyntaxInfo'/3,
  'dn--un--full_HasNames__IFaceInfo'/3,
  'dn--un--full_HasNames__(ANameMap $a)'/4,
  'dn--un--fromBuf_TTC__SyntaxInfo'/2,
  'dn--un--fromBuf_TTC__IFaceInfo'/2,
  'dn--un--fromBuf_TTC__Fixity'/2,
  'dn--un--__Impl_TTC_SyntaxInfo'/0,
  'dn--un--__Impl_TTC_IFaceInfo'/0,
  'dn--un--__Impl_TTC_Fixity'/0,
  'dn--un--__Impl_Show_REPLOpt'/0,
  'dn--un--__Impl_Show_REPLEval'/0,
  'dn--un--__Impl_Show_PTerm'/0,
  'dn--un--__Impl_Pretty_REPLOpt'/0,
  'dn--un--__Impl_Pretty_REPLEval'/0,
  'dn--un--__Impl_HasNames_SyntaxInfo'/0,
  'dn--un--__Impl_HasNames_IFaceInfo'/0,
  'dn--un--__Impl_HasNames_(ANameMap $a)'/2,
  'dn--un--__Impl_Eq_Pass'/0,
  'dn--un--==_Eq__Pass'/2,
  'dn--un--/=_Eq__Pass'/2,
  'un--typePass'/1,
  'un--showUpdate'/1,
  'un--showDo'/1,
  'un--showAlt'/1,
  'un--papply'/3,
  'un--mapPTermM'/2,
  'un--isPDef'/1,
  'un--initSyntax'/0,
  'un--getPTypeDeclLoc'/1,
  'un--getPTermLoc'/1,
  'un--getPDeclLoc'/1,
  'un--getPDataDeclLoc'/1,
  'un--getPClauseLoc'/1,
  'un--getLoc'/1,
  'un--definedInData'/1,
  'un--definedIn'/1,
  'un--defPass'/1,
  'un--OpStr'/0
]).
'case--resolved-11127'(V0, V1, V2, V3) -> case V0 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Idris.Syntax.MkSyntax', V4, V5, V2, V7, V8, V9, V3, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-11086'(V0, V1, V2, V3) -> case V0 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Idris.Syntax.MkSyntax', V4, V5, V2, V7, V8, V9, V3, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toBuf-10780'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); _ -> 0 end.
'case--fromBuf-10615'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixL'}} end; 1 -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixR'}} end; 2 -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Infix'}} end; 3 -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Prefix'}} end; _ -> fun (V6) -> ('Idris.Idris2.Utils.Binary':'un--corrupt'('erased', <<"Fixity"/utf8>>, V6)) end end.
'case--showPrec,deGuard-9716'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> {'Idris.Idris.Syntax.DoExp', V8, V7}; 1 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showPrec,dePure-9662'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> V7; 1 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showPrec-9224'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V5, V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V5, V3)), <<"}"/utf8>>)))))); 1 -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V5, V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V5, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V5, V2)), <<"}"/utf8>>)))))))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11422-9061--in--un--showCase'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V6)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" => "/utf8>>, ('dn--un--show_Show__PTerm'(V7)))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13) -> <<" | <<with alts not possible>>"/utf8>> end(E4, E5, E6, E7, E8)); {'Idris.Idris.Syntax.MkImpossible', E9, E10} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V15)), <<" impossible"/utf8>>)) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11422-8978--in--un--showAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V11)), <<";"/utf8>>)))))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8} -> (fun (V13, V14, V15, V16, V17) -> <<" | <<with alts not possible>>"/utf8>> end(E4, E5, E6, E7, E8)); {'Idris.Idris.Syntax.MkImpossible', E9, E10} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V19)), <<" impossible;"/utf8>>)))) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13805-11003--in--un--insertAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V4} end; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V3, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V17 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E6, E7} -> (fun (V15, V16) -> (((V16(V3))(V10))(V11)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('nested--13805-11003--in--un--insertAll'('erased', V1, V2, V3, ('Idris.Idris2.Data.ANameMap':'un--addName'('erased', V14, V19, V4)), V8))(V11)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13804-10961--in--un--insertAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V4} end; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V3, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V17 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E6, E7} -> (fun (V15, V16) -> (((V15(V3))(V10))(V11)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('nested--13804-10961--in--un--insertAll'('erased', V1, V2, V3, ('Idris.Idris2.Data.ANameMap':'un--addName'('erased', V14, V19, V4)), V8))(V11)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11206--in--un--goPiInfo'(V0, V1) -> case V1 of {'Idris.Core.TT.DefImplicit', E0} -> (fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V2)), V3)) end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V1} end end.
'nested--14065-11210--in--un--goPairedPTerms'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', fun (V13) -> [{'Idris.Builtin.MkPair', V6, V12} | V13] end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V7)), V9)) end, ('nested--14065-11210--in--un--goPairedPTerms'(V0, 'erased', V5)), V8)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11220--in--un--goPTypeDecls'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11203--in--un--goPTypeDecl'(V0, V3)), V6)) end, ('nested--14065-11220--in--un--goPTypeDecls'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11203--in--un--goPTypeDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V2, V3, V4, V9}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V5)), V6)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11209--in--un--goPTerms'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V3)), V6)) end, ('nested--14065-11209--in--un--goPTerms'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11198--in--un--goPTerm'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> (V0(V1)) end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> fun (V10) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', fun (V17) -> fun (V18) -> fun (V19) -> {'Idris.Idris.Syntax.PPi', V4, V5, V16, V17, V18, V19} end end end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11206--in--un--goPiInfo'(V0, V6)), V13)) end, fun (V20) -> {'Idris.Prelude.Types.Right', V7} end, V12)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V8)), V11)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V9)), V10))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> ((V0(V23))(V10)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E12, E13, E14, E15, E16, E17} -> (fun (V24, V25, V26, V27, V28, V29) -> fun (V30) -> begin (V41 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> {'Idris.Prelude.Types.Right', fun (V37) -> fun (V38) -> fun (V39) -> {'Idris.Idris.Syntax.PLam', V24, V25, V36, V37, V38, V39} end end end} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11206--in--un--goPiInfo'(V0, V26)), V33)) end, fun (V40) -> {'Idris.Prelude.Types.Right', V27} end, V32)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V28)), V31)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V29)), V30))), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> ((V0(V43))(V30)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16, E17)); {'Idris.Idris.Syntax.PLet', E22, E23, E24, E25, E26, E27, E28} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> fun (V51) -> begin (V63 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V52) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V53) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V54) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E29} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Right', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> {'Idris.Idris.Syntax.PLet', V44, V45, V58, V59, V60, V61, V62} end end end end} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V46)), V55)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V47)), V54)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V48)), V53)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V49)), V52)) end, ('nested--14065-11214--in--un--goPClauses'(V0, V50)), V51))), case V63 of {'Idris.Prelude.Types.Left', E31} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V65) -> ((V0(V65))(V51)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23, E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.PCase', E33, E34, E35} -> (fun (V66, V67, V68) -> fun (V69) -> begin (V75 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V70) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V71) -> case V71 of {'Idris.Prelude.Types.Left', E36} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V73) -> {'Idris.Prelude.Types.Right', fun (V74) -> {'Idris.Idris.Syntax.PCase', V66, V73, V74} end} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V67)), V70)) end, ('nested--14065-11214--in--un--goPClauses'(V0, V68)), V69))), case V75 of {'Idris.Prelude.Types.Left', E38} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V77) -> ((V0(V77))(V69)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33, E34, E35)); {'Idris.Idris.Syntax.PLocal', E40, E41, E42} -> (fun (V78, V79, V80) -> fun (V81) -> begin (V87 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V82) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E43} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V85) -> {'Idris.Prelude.Types.Right', fun (V86) -> {'Idris.Idris.Syntax.PLocal', V78, V85, V86} end} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11216--in--un--goPDecls'(V0, V79)), V82)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V80)), V81))), case V87 of {'Idris.Prelude.Types.Left', E45} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V89) -> ((V0(V89))(V81)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42)); {'Idris.Idris.Syntax.PUpdate', E47, E48} -> (fun (V90, V91) -> fun (V92) -> begin (V96 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V93) -> case V93 of {'Idris.Prelude.Types.Left', E49} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUpdate', V90, V95}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11217--in--un--goPFieldUpdates'(V0, V91)), V92))), case V96 of {'Idris.Prelude.Types.Left', E51} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V98) -> ((V0(V98))(V92)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47, E48)); {'Idris.Idris.Syntax.PApp', E53, E54, E55} -> (fun (V99, V100, V101) -> fun (V102) -> begin (V108 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V103) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V104) -> case V104 of {'Idris.Prelude.Types.Left', E56} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V106) -> {'Idris.Prelude.Types.Right', fun (V107) -> {'Idris.Idris.Syntax.PApp', V99, V106, V107} end} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V100)), V103)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V101)), V102))), case V108 of {'Idris.Prelude.Types.Left', E58} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V110) -> ((V0(V110))(V102)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54, E55)); {'Idris.Idris.Syntax.PWithApp', E60, E61, E62} -> (fun (V111, V112, V113) -> fun (V114) -> begin (V120 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V115) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V116) -> case V116 of {'Idris.Prelude.Types.Left', E63} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V118) -> {'Idris.Prelude.Types.Right', fun (V119) -> {'Idris.Idris.Syntax.PWithApp', V111, V118, V119} end} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V112)), V115)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V113)), V114))), case V120 of {'Idris.Prelude.Types.Left', E65} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V122) -> ((V0(V122))(V114)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60, E61, E62)); {'Idris.Idris.Syntax.PAutoApp', E67, E68, E69} -> (fun (V123, V124, V125) -> fun (V126) -> begin (V132 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V127) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V128) -> case V128 of {'Idris.Prelude.Types.Left', E70} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V130) -> {'Idris.Prelude.Types.Right', fun (V131) -> {'Idris.Idris.Syntax.PAutoApp', V123, V130, V131} end} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V124)), V127)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V125)), V126))), case V132 of {'Idris.Prelude.Types.Left', E72} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V134) -> ((V0(V134))(V126)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67, E68, E69)); {'Idris.Idris.Syntax.PNamedApp', E74, E75, E76, E77} -> (fun (V135, V136, V137, V138) -> fun (V139) -> begin (V148 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V140) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V142) -> case V142 of {'Idris.Prelude.Types.Left', E78} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V144) -> {'Idris.Prelude.Types.Right', fun (V145) -> fun (V146) -> {'Idris.Idris.Syntax.PNamedApp', V135, V144, V145, V146} end end} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V136)), V141)) end, fun (V147) -> {'Idris.Prelude.Types.Right', V137} end, V140)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V138)), V139))), case V148 of {'Idris.Prelude.Types.Left', E80} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V150) -> ((V0(V150))(V139)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74, E75, E76, E77)); {'Idris.Idris.Syntax.PDelayed', E82, E83, E84} -> (fun (V151, V152, V153) -> fun (V154) -> begin (V158 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V155) -> case V155 of {'Idris.Prelude.Types.Left', E85} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V157) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V151, V152, V157}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V153)), V154))), case V158 of {'Idris.Prelude.Types.Left', E87} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V160) -> ((V0(V160))(V154)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82, E83, E84)); {'Idris.Idris.Syntax.PDelay', E89, E90} -> (fun (V161, V162) -> fun (V163) -> begin (V167 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V164) -> case V164 of {'Idris.Prelude.Types.Left', E91} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V166) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V161, V166}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V162)), V163))), case V167 of {'Idris.Prelude.Types.Left', E93} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V169) -> ((V0(V169))(V163)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90)); {'Idris.Idris.Syntax.PForce', E95, E96} -> (fun (V170, V171) -> fun (V172) -> begin (V176 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V173) -> case V173 of {'Idris.Prelude.Types.Left', E97} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V170, V175}} end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V171)), V172))), case V176 of {'Idris.Prelude.Types.Left', E99} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V178) -> ((V0(V178))(V172)) end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96)); {'Idris.Idris.Syntax.PSearch', E101, E102} -> (fun (V179, V180) -> (V0(V1)) end(E101, E102)); {'Idris.Idris.Syntax.PPrimVal', E103, E104} -> (fun (V181, V182) -> (V0(V1)) end(E103, E104)); {'Idris.Idris.Syntax.PQuote', E105, E106} -> (fun (V183, V184) -> fun (V185) -> begin (V189 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V186) -> case V186 of {'Idris.Prelude.Types.Left', E107} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V188) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V183, V188}} end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V184)), V185))), case V189 of {'Idris.Prelude.Types.Left', E109} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V191) -> ((V0(V191))(V185)) end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105, E106)); {'Idris.Idris.Syntax.PQuoteName', E111, E112} -> (fun (V192, V193) -> (V0(V1)) end(E111, E112)); {'Idris.Idris.Syntax.PQuoteDecl', E113, E114} -> (fun (V194, V195) -> fun (V196) -> begin (V201 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V197) -> case V197 of {'Idris.Prelude.Types.Left', E115} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V199) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V194, V199}} end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V200) -> ('nested--14065-11202--in--un--goPDecl'(V0, V200)) end, V195, [])), V196))), case V201 of {'Idris.Prelude.Types.Left', E117} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V203) -> ((V0(V203))(V196)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113, E114)); {'Idris.Idris.Syntax.PUnquote', E119, E120} -> (fun (V204, V205) -> fun (V206) -> begin (V210 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V207) -> case V207 of {'Idris.Prelude.Types.Left', E121} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V209) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V204, V209}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V205)), V206))), case V210 of {'Idris.Prelude.Types.Left', E123} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V212) -> ((V0(V212))(V206)) end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120)); {'Idris.Idris.Syntax.PRunElab', E125, E126} -> (fun (V213, V214) -> fun (V215) -> begin (V219 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V216) -> case V216 of {'Idris.Prelude.Types.Left', E127} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V218) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V213, V218}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V214)), V215))), case V219 of {'Idris.Prelude.Types.Left', E129} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V221) -> ((V0(V221))(V215)) end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E125, E126)); {'Idris.Idris.Syntax.PHole', E131, E132, E133} -> (fun (V222, V223, V224) -> (V0(V1)) end(E131, E132, E133)); {'Idris.Idris.Syntax.PType', E134} -> (fun (V225) -> (V0(V1)) end(E134)); {'Idris.Idris.Syntax.PAs', E135, E136, E137} -> (fun (V226, V227, V228) -> fun (V229) -> begin (V233 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V230) -> case V230 of {'Idris.Prelude.Types.Left', E138} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V232) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V226, V227, V232}} end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V228)), V229))), case V233 of {'Idris.Prelude.Types.Left', E140} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V235) -> ((V0(V235))(V229)) end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135, E136, E137)); {'Idris.Idris.Syntax.PDotted', E142, E143} -> (fun (V236, V237) -> fun (V238) -> begin (V242 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V239) -> case V239 of {'Idris.Prelude.Types.Left', E144} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V241) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V236, V241}} end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V237)), V238))), case V242 of {'Idris.Prelude.Types.Left', E146} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V244) -> ((V0(V244))(V238)) end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E142, E143)); {'Idris.Idris.Syntax.PImplicit', E148} -> (fun (V245) -> (V0(V1)) end(E148)); {'Idris.Idris.Syntax.PInfer', E149} -> (fun (V246) -> (V0(V1)) end(E149)); {'Idris.Idris.Syntax.POp', E150, E151, E152, E153} -> (fun (V247, V248, V249, V250) -> fun (V251) -> begin (V257 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V252) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V253) -> case V253 of {'Idris.Prelude.Types.Left', E154} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V255) -> {'Idris.Prelude.Types.Right', fun (V256) -> {'Idris.Idris.Syntax.POp', V247, V248, V255, V256} end} end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V249)), V252)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V250)), V251))), case V257 of {'Idris.Prelude.Types.Left', E156} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V259) -> ((V0(V259))(V251)) end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E150, E151, E152, E153)); {'Idris.Idris.Syntax.PPrefixOp', E158, E159, E160} -> (fun (V260, V261, V262) -> fun (V263) -> begin (V267 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V264) -> case V264 of {'Idris.Prelude.Types.Left', E161} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V266) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V260, V261, V266}} end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V262)), V263))), case V267 of {'Idris.Prelude.Types.Left', E163} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V269) -> ((V0(V269))(V263)) end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E158, E159, E160)); {'Idris.Idris.Syntax.PSectionL', E165, E166, E167} -> (fun (V270, V271, V272) -> fun (V273) -> begin (V277 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V274) -> case V274 of {'Idris.Prelude.Types.Left', E168} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V276) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V270, V271, V276}} end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V272)), V273))), case V277 of {'Idris.Prelude.Types.Left', E170} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V279) -> ((V0(V279))(V273)) end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E165, E166, E167)); {'Idris.Idris.Syntax.PSectionR', E172, E173, E174} -> (fun (V280, V281, V282) -> fun (V283) -> begin (V290 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V284) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V285) -> case V285 of {'Idris.Prelude.Types.Left', E175} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V287) -> {'Idris.Prelude.Types.Right', fun (V288) -> {'Idris.Idris.Syntax.PSectionR', V280, V287, V288} end} end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V281)), V284)) end, fun (V289) -> {'Idris.Prelude.Types.Right', V282} end, V283))), case V290 of {'Idris.Prelude.Types.Left', E177} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V292) -> ((V0(V292))(V283)) end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E172, E173, E174)); {'Idris.Idris.Syntax.PEq', E179, E180, E181} -> (fun (V293, V294, V295) -> fun (V296) -> begin (V302 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V297) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V298) -> case V298 of {'Idris.Prelude.Types.Left', E182} -> (fun (V299) -> {'Idris.Prelude.Types.Left', V299} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V300) -> {'Idris.Prelude.Types.Right', fun (V301) -> {'Idris.Idris.Syntax.PEq', V293, V300, V301} end} end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V294)), V297)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V295)), V296))), case V302 of {'Idris.Prelude.Types.Left', E184} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V304) -> ((V0(V304))(V296)) end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179, E180, E181)); {'Idris.Idris.Syntax.PBracketed', E186, E187} -> (fun (V305, V306) -> fun (V307) -> begin (V311 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V308) -> case V308 of {'Idris.Prelude.Types.Left', E188} -> (fun (V309) -> {'Idris.Prelude.Types.Left', V309} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V310) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PBracketed', V305, V310}} end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V306)), V307))), case V311 of {'Idris.Prelude.Types.Left', E190} -> (fun (V312) -> {'Idris.Prelude.Types.Left', V312} end(E190)); {'Idris.Prelude.Types.Right', E191} -> (fun (V313) -> ((V0(V313))(V307)) end(E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E186, E187)); {'Idris.Idris.Syntax.PDoBlock', E192, E193, E194} -> (fun (V314, V315, V316) -> fun (V317) -> begin (V321 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V318) -> case V318 of {'Idris.Prelude.Types.Left', E195} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V320) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDoBlock', V314, V315, V320}} end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11213--in--un--goPDos'(V0, V316)), V317))), case V321 of {'Idris.Prelude.Types.Left', E197} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V323) -> ((V0(V323))(V317)) end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E192, E193, E194)); {'Idris.Idris.Syntax.PBang', E199, E200} -> (fun (V324, V325) -> fun (V326) -> begin (V330 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V327) -> case V327 of {'Idris.Prelude.Types.Left', E201} -> (fun (V328) -> {'Idris.Prelude.Types.Left', V328} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V329) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PBang', V324, V329}} end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V325)), V326))), case V330 of {'Idris.Prelude.Types.Left', E203} -> (fun (V331) -> {'Idris.Prelude.Types.Left', V331} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V332) -> ((V0(V332))(V326)) end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E199, E200)); {'Idris.Idris.Syntax.PIdiom', E205, E206} -> (fun (V333, V334) -> fun (V335) -> begin (V339 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V336) -> case V336 of {'Idris.Prelude.Types.Left', E207} -> (fun (V337) -> {'Idris.Prelude.Types.Left', V337} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V338) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PIdiom', V333, V338}} end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V334)), V335))), case V339 of {'Idris.Prelude.Types.Left', E209} -> (fun (V340) -> {'Idris.Prelude.Types.Left', V340} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V341) -> ((V0(V341))(V335)) end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E205, E206)); {'Idris.Idris.Syntax.PList', E211, E212} -> (fun (V342, V343) -> fun (V344) -> begin (V348 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V345) -> case V345 of {'Idris.Prelude.Types.Left', E213} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V347) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PList', V342, V347}} end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11209--in--un--goPTerms'(V0, V343)), V344))), case V348 of {'Idris.Prelude.Types.Left', E215} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V350) -> ((V0(V350))(V344)) end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E211, E212)); {'Idris.Idris.Syntax.PPair', E217, E218, E219} -> (fun (V351, V352, V353) -> fun (V354) -> begin (V360 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V355) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V356) -> case V356 of {'Idris.Prelude.Types.Left', E220} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V358) -> {'Idris.Prelude.Types.Right', fun (V359) -> {'Idris.Idris.Syntax.PPair', V351, V358, V359} end} end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V352)), V355)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V353)), V354))), case V360 of {'Idris.Prelude.Types.Left', E222} -> (fun (V361) -> {'Idris.Prelude.Types.Left', V361} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V362) -> ((V0(V362))(V354)) end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E217, E218, E219)); {'Idris.Idris.Syntax.PDPair', E224, E225, E226, E227} -> (fun (V363, V364, V365, V366) -> fun (V367) -> begin (V375 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V368) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V369) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V370) -> case V370 of {'Idris.Prelude.Types.Left', E228} -> (fun (V371) -> {'Idris.Prelude.Types.Left', V371} end(E228)); {'Idris.Prelude.Types.Right', E229} -> (fun (V372) -> {'Idris.Prelude.Types.Right', fun (V373) -> fun (V374) -> {'Idris.Idris.Syntax.PDPair', V363, V372, V373, V374} end end} end(E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V364)), V369)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V365)), V368)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V366)), V367))), case V375 of {'Idris.Prelude.Types.Left', E230} -> (fun (V376) -> {'Idris.Prelude.Types.Left', V376} end(E230)); {'Idris.Prelude.Types.Right', E231} -> (fun (V377) -> ((V0(V377))(V367)) end(E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E224, E225, E226, E227)); {'Idris.Idris.Syntax.PUnit', E232} -> (fun (V378) -> (V0(V1)) end(E232)); {'Idris.Idris.Syntax.PIfThenElse', E233, E234, E235, E236} -> (fun (V379, V380, V381, V382) -> fun (V383) -> begin (V391 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V384) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V385) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V386) -> case V386 of {'Idris.Prelude.Types.Left', E237} -> (fun (V387) -> {'Idris.Prelude.Types.Left', V387} end(E237)); {'Idris.Prelude.Types.Right', E238} -> (fun (V388) -> {'Idris.Prelude.Types.Right', fun (V389) -> fun (V390) -> {'Idris.Idris.Syntax.PIfThenElse', V379, V388, V389, V390} end end} end(E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V380)), V385)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V381)), V384)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V382)), V383))), case V391 of {'Idris.Prelude.Types.Left', E239} -> (fun (V392) -> {'Idris.Prelude.Types.Left', V392} end(E239)); {'Idris.Prelude.Types.Right', E240} -> (fun (V393) -> ((V0(V393))(V383)) end(E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E233, E234, E235, E236)); {'Idris.Idris.Syntax.PComprehension', E241, E242, E243} -> (fun (V394, V395, V396) -> fun (V397) -> begin (V403 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V398) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V399) -> case V399 of {'Idris.Prelude.Types.Left', E244} -> (fun (V400) -> {'Idris.Prelude.Types.Left', V400} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V401) -> {'Idris.Prelude.Types.Right', fun (V402) -> {'Idris.Idris.Syntax.PComprehension', V394, V401, V402} end} end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V395)), V398)) end, ('nested--14065-11213--in--un--goPDos'(V0, V396)), V397))), case V403 of {'Idris.Prelude.Types.Left', E246} -> (fun (V404) -> {'Idris.Prelude.Types.Left', V404} end(E246)); {'Idris.Prelude.Types.Right', E247} -> (fun (V405) -> ((V0(V405))(V397)) end(E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E241, E242, E243)); {'Idris.Idris.Syntax.PRewrite', E248, E249, E250} -> (fun (V406, V407, V408) -> fun (V409) -> begin (V415 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V410) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V411) -> case V411 of {'Idris.Prelude.Types.Left', E251} -> (fun (V412) -> {'Idris.Prelude.Types.Left', V412} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V413) -> {'Idris.Prelude.Types.Right', fun (V414) -> {'Idris.Idris.Syntax.PRewrite', V406, V413, V414} end} end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V407)), V410)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V408)), V409))), case V415 of {'Idris.Prelude.Types.Left', E253} -> (fun (V416) -> {'Idris.Prelude.Types.Left', V416} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V417) -> ((V0(V417))(V409)) end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E248, E249, E250)); {'Idris.Idris.Syntax.PRange', E255, E256, E257, E258} -> (fun (V418, V419, V420, V421) -> fun (V422) -> begin (V430 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V423) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V424) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V425) -> case V425 of {'Idris.Prelude.Types.Left', E259} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E259)); {'Idris.Prelude.Types.Right', E260} -> (fun (V427) -> {'Idris.Prelude.Types.Right', fun (V428) -> fun (V429) -> {'Idris.Idris.Syntax.PRange', V418, V427, V428, V429} end end} end(E260)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V419)), V424)) end, ('nested--14065-11208--in--un--goMPTerm'(V0, V420)), V423)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V421)), V422))), case V430 of {'Idris.Prelude.Types.Left', E261} -> (fun (V431) -> {'Idris.Prelude.Types.Left', V431} end(E261)); {'Idris.Prelude.Types.Right', E262} -> (fun (V432) -> ((V0(V432))(V422)) end(E262)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E255, E256, E257, E258)); {'Idris.Idris.Syntax.PRangeStream', E263, E264, E265} -> (fun (V433, V434, V435) -> fun (V436) -> begin (V442 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V437) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V438) -> case V438 of {'Idris.Prelude.Types.Left', E266} -> (fun (V439) -> {'Idris.Prelude.Types.Left', V439} end(E266)); {'Idris.Prelude.Types.Right', E267} -> (fun (V440) -> {'Idris.Prelude.Types.Right', fun (V441) -> {'Idris.Idris.Syntax.PRangeStream', V433, V440, V441} end} end(E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V434)), V437)) end, ('nested--14065-11208--in--un--goMPTerm'(V0, V435)), V436))), case V442 of {'Idris.Prelude.Types.Left', E268} -> (fun (V443) -> {'Idris.Prelude.Types.Left', V443} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V444) -> ((V0(V444))(V436)) end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E263, E264, E265)); {'Idris.Idris.Syntax.PUnifyLog', E270, E271, E272} -> (fun (V445, V446, V447) -> fun (V448) -> begin (V452 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V449) -> case V449 of {'Idris.Prelude.Types.Left', E273} -> (fun (V450) -> {'Idris.Prelude.Types.Left', V450} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V451) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnifyLog', V445, V446, V451}} end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V447)), V448))), case V452 of {'Idris.Prelude.Types.Left', E275} -> (fun (V453) -> {'Idris.Prelude.Types.Left', V453} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V454) -> ((V0(V454))(V448)) end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270, E271, E272)); {'Idris.Idris.Syntax.PPostfixApp', E277, E278, E279} -> (fun (V455, V456, V457) -> fun (V458) -> begin (V465 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V459) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V460) -> case V460 of {'Idris.Prelude.Types.Left', E280} -> (fun (V461) -> {'Idris.Prelude.Types.Left', V461} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V462) -> {'Idris.Prelude.Types.Right', fun (V463) -> {'Idris.Idris.Syntax.PPostfixApp', V455, V462, V463} end} end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V456)), V459)) end, fun (V464) -> {'Idris.Prelude.Types.Right', V457} end, V458))), case V465 of {'Idris.Prelude.Types.Left', E282} -> (fun (V466) -> {'Idris.Prelude.Types.Left', V466} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V467) -> ((V0(V467))(V458)) end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E277, E278, E279)); {'Idris.Idris.Syntax.PPostfixAppPartial', E284, E285} -> (fun (V468, V469) -> (V0({'Idris.Idris.Syntax.PPostfixAppPartial', V468, V469})) end(E284, E285)); {'Idris.Idris.Syntax.PWithUnambigNames', E286, E287, E288} -> (fun (V470, V471, V472) -> fun (V473) -> begin (V477 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V474) -> case V474 of {'Idris.Prelude.Types.Left', E289} -> (fun (V475) -> {'Idris.Prelude.Types.Left', V475} end(E289)); {'Idris.Prelude.Types.Right', E290} -> (fun (V476) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V470, V471, V476}} end(E290)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V472)), V473))), case V477 of {'Idris.Prelude.Types.Left', E291} -> (fun (V478) -> {'Idris.Prelude.Types.Left', V478} end(E291)); {'Idris.Prelude.Types.Right', E292} -> (fun (V479) -> ((V0(V479))(V473)) end(E292)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E286, E287, E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11219--in--un--goPFnOpts'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11207--in--un--goPFnOpt'(V0, V3)), V6)) end, ('nested--14065-11219--in--un--goPFnOpts'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11207--in--un--goPFnOpt'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.IFnOpt', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V1} end end(E0)); {'Idris.Idris.Syntax.PForeign', E1} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11209--in--un--goPTerms'(V0, V4)), V5)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11218--in--un--goPFields'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11205--in--un--goPField'(V0, V3)), V6)) end, ('nested--14065-11218--in--un--goPFields'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11217--in--un--goPFieldUpdates'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11199--in--un--goPFieldUpdate'(V0, V3)), V6)) end, ('nested--14065-11217--in--un--goPFieldUpdates'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11199--in--un--goPFieldUpdate'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V2, V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V2, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V3)), V4)) end end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E4, E5} -> (fun (V8, V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V8, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V9)), V10)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11205--in--un--goPField'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkField', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', fun (V14) -> fun (V15) -> {'Idris.Idris.Syntax.MkField', V2, V3, V4, V13, V14, V15} end end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11206--in--un--goPiInfo'(V0, V5)), V10)) end, fun (V16) -> {'Idris.Prelude.Types.Right', V6} end, V9)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V7)), V8)) end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11213--in--un--goPDos'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11200--in--un--goPDo'(V0, V3)), V6)) end, ('nested--14065-11213--in--un--goPDos'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11200--in--un--goPDo'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V2, V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoExp', V2, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V3)), V4)) end end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E4, E5, E6} -> (fun (V8, V9, V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V12) -> case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoBind', V8, V9, V14}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V10)), V11)) end end(E4, E5, E6)); {'Idris.Idris.Syntax.DoBindPat', E9, E10, E11, E12} -> (fun (V15, V16, V17, V18) -> fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V22) -> case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Right', fun (V25) -> fun (V26) -> {'Idris.Idris.Syntax.DoBindPat', V15, V24, V25, V26} end end} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V16)), V21)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V17)), V20)) end, ('nested--14065-11214--in--un--goPClauses'(V0, V18)), V19)) end end(E9, E10, E11, E12)); {'Idris.Idris.Syntax.DoLet', E15, E16, E17, E18, E19} -> (fun (V27, V28, V29, V30, V31) -> fun (V32) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E20} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V36) -> {'Idris.Prelude.Types.Right', fun (V37) -> {'Idris.Idris.Syntax.DoLet', V27, V28, V29, V36, V37} end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V30)), V33)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V31)), V32)) end end(E15, E16, E17, E18, E19)); {'Idris.Idris.Syntax.DoLetPat', E22, E23, E24, E25, E26} -> (fun (V38, V39, V40, V41, V42) -> fun (V43) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V47) -> case V47 of {'Idris.Prelude.Types.Left', E27} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V49) -> {'Idris.Prelude.Types.Right', fun (V50) -> fun (V51) -> fun (V52) -> {'Idris.Idris.Syntax.DoLetPat', V38, V49, V50, V51, V52} end end end} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V39)), V46)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V40)), V45)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V41)), V44)) end, ('nested--14065-11214--in--un--goPClauses'(V0, V42)), V43)) end end(E22, E23, E24, E25, E26)); {'Idris.Idris.Syntax.DoLetLocal', E29, E30} -> (fun (V53, V54) -> fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E31} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoLetLocal', V53, V58}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11216--in--un--goPDecls'(V0, V54)), V55)) end end(E29, E30)); {'Idris.Idris.Syntax.DoRewrite', E33, E34} -> (fun (V59, V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V62) -> case V62 of {'Idris.Prelude.Types.Left', E35} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoRewrite', V59, V64}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V60)), V61)) end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11216--in--un--goPDecls'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11202--in--un--goPDecl'(V0, V3)), V6)) end, ('nested--14065-11216--in--un--goPDecls'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11202--in--un--goPDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> {'Idris.Idris.Syntax.PClaim', V2, V3, V4, V11, V12} end} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11219--in--un--goPFnOpts'(V0, V5)), V8)) end, ('nested--14065-11203--in--un--goPTypeDecl'(V0, V6)), V7)) end end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E7, E8} -> (fun (V13, V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDef', V13, V18}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11214--in--un--goPClauses'(V0, V14)), V15)) end end(E7, E8)); {'Idris.Idris.Syntax.PData', E11, E12, E13, E14} -> (fun (V19, V20, V21, V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PData', V19, V20, V21, V26}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11204--in--un--goPDataDecl'(V0, V22)), V23)) end end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PParameters', E17, E18, E19} -> (fun (V27, V28, V29) -> fun (V30) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V32) -> case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Right', fun (V35) -> {'Idris.Idris.Syntax.PParameters', V27, V34, V35} end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11210--in--un--goPairedPTerms'(V0, 'erased', V28)), V31)) end, ('nested--14065-11216--in--un--goPDecls'(V0, V29)), V30)) end end(E17, E18, E19)); {'Idris.Idris.Syntax.PUsing', E22, E23, E24} -> (fun (V36, V37, V38) -> fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E25} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Right', fun (V44) -> {'Idris.Idris.Syntax.PUsing', V36, V43, V44} end} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11210--in--un--goPairedPTerms'(V0, 'erased', V37)), V40)) end, ('nested--14065-11216--in--un--goPDecls'(V0, V38)), V39)) end end(E22, E23, E24)); {'Idris.Idris.Syntax.PReflect', E27, E28} -> (fun (V45, V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V48) -> case V48 of {'Idris.Prelude.Types.Left', E29} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PReflect', V45, V50}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V46)), V47)) end end(E27, E28)); {'Idris.Idris.Syntax.PInterface', E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59) -> fun (V60) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V61) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V67) -> case V67 of {'Idris.Prelude.Types.Left', E40} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V69) -> {'Idris.Prelude.Types.Right', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> {'Idris.Idris.Syntax.PInterface', V51, V52, V69, V70, V71, V72, V73, V74, V75} end end end end end end} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11210--in--un--goPairedPTerms'(V0, 'erased', V53)), V66)) end, fun (V76) -> {'Idris.Prelude.Types.Right', V54} end, V65)) end, fun (V77) -> {'Idris.Prelude.Types.Right', V55} end, V64)) end, ('nested--14065-11210--in--un--goPairedPTerms'(V0, 'erased', V56)), V63)) end, fun (V78) -> {'Idris.Prelude.Types.Right', V57} end, V62)) end, fun (V79) -> {'Idris.Prelude.Types.Right', V58} end, V61)) end, ('nested--14065-11216--in--un--goPDecls'(V0, V59)), V60)) end end(E31, E32, E33, E34, E35, E36, E37, E38, E39)); {'Idris.Idris.Syntax.PImplementation', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> fun (V91) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V92) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V93) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V94) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V95) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V96) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V97) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V98) -> case V98 of {'Idris.Prelude.Types.Left', E53} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V100) -> {'Idris.Prelude.Types.Right', fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> {'Idris.Idris.Syntax.PImplementation', V80, V81, V82, V83, V100, V101, V102, V103, V104, V105, V106} end end end end end end} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11211--in--un--go3TupledPTerms'(V0, 'erased', 'erased', V84)), V97)) end, ('nested--14065-11210--in--un--goPairedPTerms'(V0, 'erased', V85)), V96)) end, fun (V107) -> {'Idris.Prelude.Types.Right', V86} end, V95)) end, ('nested--14065-11209--in--un--goPTerms'(V0, V87)), V94)) end, fun (V108) -> {'Idris.Prelude.Types.Right', V88} end, V93)) end, fun (V109) -> {'Idris.Prelude.Types.Right', V89} end, V92)) end, ('nested--14065-11215--in--un--goMPDecls'(V0, V90)), V91)) end end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); {'Idris.Idris.Syntax.PRecord', E55, E56, E57, E58, E59, E60, E61} -> (fun (V110, V111, V112, V113, V114, V115, V116) -> fun (V117) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V118) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V119) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V120) -> case V120 of {'Idris.Prelude.Types.Left', E62} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V122) -> {'Idris.Prelude.Types.Right', fun (V123) -> fun (V124) -> {'Idris.Idris.Syntax.PRecord', V110, V111, V112, V113, V122, V123, V124} end end} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11212--in--un--go4TupledPTerms'(V0, 'erased', 'erased', V114)), V119)) end, fun (V125) -> {'Idris.Prelude.Types.Right', V115} end, V118)) end, ('nested--14065-11218--in--un--goPFields'(V0, V116)), V117)) end end(E55, E56, E57, E58, E59, E60, E61)); {'Idris.Idris.Syntax.PMutual', E64, E65} -> (fun (V126, V127) -> fun (V128) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V129) -> case V129 of {'Idris.Prelude.Types.Left', E66} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PMutual', V126, V131}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11216--in--un--goPDecls'(V0, V127)), V128)) end end(E64, E65)); {'Idris.Idris.Syntax.PFixity', E68, E69, E70, E71} -> (fun (V132, V133, V134, V135) -> fun (V136) -> {'Idris.Prelude.Types.Right', V1} end end(E68, E69, E70, E71)); {'Idris.Idris.Syntax.PNamespace', E72, E73, E74} -> (fun (V137, V138, V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V141) -> case V141 of {'Idris.Prelude.Types.Left', E75} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PNamespace', V137, V138, V143}} end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11216--in--un--goPDecls'(V0, V139)), V140)) end end(E72, E73, E74)); {'Idris.Idris.Syntax.PTransform', E77, E78, E79, E80} -> (fun (V144, V145, V146, V147) -> fun (V148) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V149) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V150) -> case V150 of {'Idris.Prelude.Types.Left', E81} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V152) -> {'Idris.Prelude.Types.Right', fun (V153) -> {'Idris.Idris.Syntax.PTransform', V144, V145, V152, V153} end} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V146)), V149)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V147)), V148)) end end(E77, E78, E79, E80)); {'Idris.Idris.Syntax.PRunElabDecl', E83, E84} -> (fun (V154, V155) -> fun (V156) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V157) -> case V157 of {'Idris.Prelude.Types.Left', E85} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElabDecl', V154, V159}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V155)), V156)) end end(E83, E84)); {'Idris.Idris.Syntax.PDirective', E87, E88} -> (fun (V160, V161) -> fun (V162) -> {'Idris.Prelude.Types.Right', V1} end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11204--in--un--goPDataDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', fun (V13) -> fun (V14) -> {'Idris.Idris.Syntax.MkPData', V2, V3, V12, V13, V14} end end} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V4)), V9)) end, fun (V15) -> {'Idris.Prelude.Types.Right', V5} end, V8)) end, ('nested--14065-11220--in--un--goPTypeDecls'(V0, V6)), V7)) end end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E7, E8, E9} -> (fun (V16, V17, V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V16, V17, V22}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V18)), V19)) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11214--in--un--goPClauses'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11201--in--un--goPClause'(V0, V3)), V6)) end, ('nested--14065-11214--in--un--goPClauses'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11201--in--un--goPClause'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> fun (V13) -> {'Idris.Idris.Syntax.MkPatClause', V2, V11, V12, V13} end end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V3)), V8)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V4)), V7)) end, ('nested--14065-11216--in--un--goPDecls'(V0, V5)), V6)) end end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E6, E7, E8, E9, E10} -> (fun (V14, V15, V16, V17, V18) -> fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V23) -> case V23 of {'Idris.Prelude.Types.Left', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Right', fun (V26) -> fun (V27) -> fun (V28) -> {'Idris.Idris.Syntax.MkWithClause', V14, V25, V26, V27, V28} end end end} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V15)), V22)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V16)), V21)) end, fun (V29) -> {'Idris.Prelude.Types.Right', V17} end, V20)) end, ('nested--14065-11214--in--un--goPClauses'(V0, V18)), V19)) end end(E6, E7, E8, E9, E10)); {'Idris.Idris.Syntax.MkImpossible', E13, E14} -> (fun (V30, V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V33) -> case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V30, V35}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V31)), V32)) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11208--in--un--goMPTerm'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V3)), V4)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11215--in--un--goMPDecls'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11216--in--un--goPDecls'(V0, V3)), V4)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11212--in--un--go4TupledPTerms'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V11, V12) -> fun (V13) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', fun (V19) -> fun (V20) -> [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V18, V19}}} | V20] end end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11206--in--un--goPiInfo'(V0, V11)), V15)) end, ('nested--14065-11198--in--un--goPTerm'(V0, V12)), V14)) end, ('nested--14065-11212--in--un--go4TupledPTerms'(V0, 'erased', 'erased', V6)), V13)) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14065-11211--in--un--go3TupledPTerms'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> fun (V11) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', fun (V16) -> [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, V15}} | V16] end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14065-11198--in--un--goPTerm'(V0, V10)), V12)) end, ('nested--14065-11211--in--un--go3TupledPTerms'(V0, 'erased', 'erased', V6)), V11)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10639-7989--in--un--getName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> V7 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11422-9646--in--un--dePure'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Idris.Syntax.PRef', E3, E4} -> (fun (V8, V9) -> begin (V10 = {'Idris.Idris.Syntax.PApp', V5, {'Idris.Idris.Syntax.PRef', V8, V9}, V7}), ('case--showPrec,dePure-9662'(V0, V1, V2, V3, V5, V8, V9, V7, V10, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V9)), {'Idris.Core.Name.UN', <<"pure"/utf8>>})))) end end(E3, E4)); _ -> V4 end end(E0, E1, E2)); _ -> V4 end.
'nested--11422-9647--in--un--deGuard'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V7, V8, V9) -> case V8 of {'Idris.Idris.Syntax.PRef', E5, E6} -> (fun (V10, V11) -> begin (V12 = {'Idris.Idris.Syntax.DoExp', V5, {'Idris.Idris.Syntax.PApp', V7, {'Idris.Idris.Syntax.PRef', V10, V11}, V9}}), ('case--showPrec,deGuard-9716'(V0, V1, V2, V3, V7, V10, V11, V9, V5, V12, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V11)), {'Idris.Core.Name.UN', <<"guard"/utf8>>})))) end end(E5, E6)); _ -> V4 end end(E2, E3, E4)); _ -> V4 end end(E0, E1)); _ -> V4 end.
'dn--un--toBuf_TTC__SyntaxInfo'(V0, V1, V2) -> begin (V64 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V7, V8)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V9) -> fun (V10) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V11) -> fun (V12) -> ('dn--un--toBuf_TTC__Fixity'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--fromBuf_TTC__Fixity'(V13, V14)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V15) -> fun (V16) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V17, V18)) end end}}, V9, V10)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V21) -> fun (V22) -> ('dn--un--toBuf_TTC__Fixity'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--fromBuf_TTC__Fixity'(V23, V24)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V25) -> fun (V26) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V27, V28)) end end}}, V19, V20)) end end}}, V3, V4)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V31) -> fun (V32) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V33, V34)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V37) -> fun (V38) -> ('dn--un--toBuf_TTC__Fixity'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('dn--un--fromBuf_TTC__Fixity'(V39, V40)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V43, V44)) end end}}, V35, V36)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V47) -> fun (V48) -> ('dn--un--toBuf_TTC__Fixity'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--fromBuf_TTC__Fixity'(V49, V50)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V51) -> fun (V52) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V53, V54)) end end}}, V45, V46)) end end}}, V29, V30)) end end}, V0, ('Idris.Idris2.Data.StringMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V55 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V64 of {'Idris.Prelude.Types.Left', E9} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V66) -> begin (V96 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V67) -> fun (V68) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V69) -> fun (V70) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V71, V72)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V73) -> fun (V74) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V75, V76)) end end}}, V67, V68)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V79) -> fun (V80) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V81, V82)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V83) -> fun (V84) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V85, V86)) end end}}, V77, V78)) end end}, V0, ('Idris.Idris2.Data.StringMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V88 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V96 of {'Idris.Prelude.Types.Left', E20} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V98) -> begin (V142 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V99) -> fun (V100) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V103, V104)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('dn--un--toBuf_TTC__IFaceInfo'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('dn--un--fromBuf_TTC__IFaceInfo'(V107, V108)) end end}}, V99, V100)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V113, V114)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V115) -> fun (V116) -> ('dn--un--toBuf_TTC__IFaceInfo'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('dn--un--fromBuf_TTC__IFaceInfo'(V117, V118)) end end}}, V109, V110)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V119) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V122, V123)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V119)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V124, V125, V126, V127, V128, V129, V130, V131, V132) -> V127 end(E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Data.ANameMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141) -> V135 end(E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V142 of {'Idris.Prelude.Types.Left', E40} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V144) -> begin (V184 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V145) -> fun (V146) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V149, V150)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V151) -> fun (V152) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V151, V152)) end end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V153, V154)) end end}}, V145, V146)) end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V159, V160)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V161) -> fun (V162) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V163, V164)) end end}}, V155, V156)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V165) -> ('case--toBuf-10780'(V1, V0, V66, V98, V144, V165, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V165)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V171 end(E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, ('Idris.Idris2.Data.ANameMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V175, V176, V177, V178, V179, V180, V181, V182, V183) -> V179 end(E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V184 of {'Idris.Prelude.Types.Left', E60} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V186) -> begin (V200 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V189, V190)) end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V191, V192, V193, V194, V195, V196, V197, V198, V199) -> V197 end(E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V200 of {'Idris.Prelude.Types.Left', E71} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V202) -> (('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V203, V204, V205, V206, V207, V208, V209, V210, V211) -> V211 end(E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC__IFaceInfo'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkIFaceInfo', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V0, V2))(V8))), case V9 of {'Idris.Prelude.Types.Left', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V11) -> begin (V16 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V14, V15)) end end}, V0, V3, V8))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V23 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V21, V22)) end end}, V0, V4, V8))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V30 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V28, V29)) end end}, V0, V5, V8))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V341 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V33) -> fun (V34) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V37, V38)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V39) -> fun (V40) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V43, V44)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V45) -> fun (V46) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V47) -> fun (V48) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V51, V52)) end end}, V47, V48)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V57, V58)) end end}, V53, V54)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V59) -> fun (V60) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V61) -> fun (V62) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V63, V64)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V65) -> fun (V66) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V67, V68)) end end}}, V59, V60)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V71) -> fun (V72) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V73, V74)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V75) -> fun (V76) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V77, V78)) end end}}, V69, V70)) end end}}, V45, V46)) end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V81) -> fun (V82) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V85, V86)) end end}, V81, V82)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V91, V92)) end end}, V87, V88)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V93) -> fun (V94) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V95) -> fun (V96) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V97, V98)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V99) -> fun (V100) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V101, V102)) end end}}, V93, V94)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V107, V108)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V109) -> fun (V110) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V111, V112)) end end}}, V103, V104)) end end}}, V79, V80)) end end}}, V39, V40)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V117, V118)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V119) -> fun (V120) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V121) -> fun (V122) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V125, V126)) end end}, V121, V122)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V129, V130)) end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V131, V132)) end end}, V127, V128)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V133) -> fun (V134) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V135) -> fun (V136) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V137, V138)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V139) -> fun (V140) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V141, V142)) end end}}, V133, V134)) end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V145) -> fun (V146) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V147, V148)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V149) -> fun (V150) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V149, V150)) end end, fun (V151) -> fun (V152) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V151, V152)) end end}}, V143, V144)) end end}}, V119, V120)) end end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V155) -> fun (V156) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V159, V160)) end end}, V155, V156)) end end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V163, V164)) end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V165, V166)) end end}, V161, V162)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V167) -> fun (V168) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V169) -> fun (V170) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V169, V170)) end end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V171, V172)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V173) -> fun (V174) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V173, V174)) end end, fun (V175) -> fun (V176) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V175, V176)) end end}}, V167, V168)) end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V179) -> fun (V180) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V179, V180)) end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V181, V182)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V183) -> fun (V184) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V183, V184)) end end, fun (V185) -> fun (V186) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V185, V186)) end end}}, V177, V178)) end end}}, V153, V154)) end end}}, V113, V114)) end end}}, V33, V34)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V189, V190)) end end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V191, V192)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V193) -> fun (V194) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V197, V198)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V199) -> fun (V200) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V201) -> fun (V202) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V205, V206)) end end}, V201, V202)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V209, V210)) end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V211, V212)) end end}, V207, V208)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V213) -> fun (V214) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V215) -> fun (V216) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V215, V216)) end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V217, V218)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V219) -> fun (V220) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V219, V220)) end end, fun (V221) -> fun (V222) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V221, V222)) end end}}, V213, V214)) end end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V225) -> fun (V226) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V227, V228)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V229) -> fun (V230) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V229, V230)) end end, fun (V231) -> fun (V232) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V231, V232)) end end}}, V223, V224)) end end}}, V199, V200)) end end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V235) -> fun (V236) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V237, V238)) end end, fun (V239) -> fun (V240) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V239, V240)) end end}, V235, V236)) end end, fun (V241) -> fun (V242) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V243) -> fun (V244) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V243, V244)) end end, fun (V245) -> fun (V246) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V245, V246)) end end}, V241, V242)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V247) -> fun (V248) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V249) -> fun (V250) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V249, V250)) end end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V251, V252)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V253) -> fun (V254) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V253, V254)) end end, fun (V255) -> fun (V256) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V255, V256)) end end}}, V247, V248)) end end, fun (V257) -> fun (V258) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V259) -> fun (V260) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V259, V260)) end end, fun (V261) -> fun (V262) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V261, V262)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V263) -> fun (V264) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V263, V264)) end end, fun (V265) -> fun (V266) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V265, V266)) end end}}, V257, V258)) end end}}, V233, V234)) end end}}, V193, V194)) end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V269, V270)) end end, fun (V271) -> fun (V272) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V271, V272)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V273) -> fun (V274) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V275) -> fun (V276) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V277) -> fun (V278) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V277, V278)) end end, fun (V279) -> fun (V280) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V279, V280)) end end}, V275, V276)) end end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V283) -> fun (V284) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V283, V284)) end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V285, V286)) end end}, V281, V282)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V287) -> fun (V288) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V289) -> fun (V290) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V289, V290)) end end, fun (V291) -> fun (V292) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V291, V292)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V293) -> fun (V294) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V293, V294)) end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V295, V296)) end end}}, V287, V288)) end end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V299) -> fun (V300) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V299, V300)) end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V301, V302)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V303) -> fun (V304) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V303, V304)) end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V305, V306)) end end}}, V297, V298)) end end}}, V273, V274)) end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V309) -> fun (V310) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V311) -> fun (V312) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V311, V312)) end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V313, V314)) end end}, V309, V310)) end end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V317, V318)) end end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V319, V320)) end end}, V315, V316)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V321) -> fun (V322) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V323) -> fun (V324) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V323, V324)) end end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V325, V326)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V327) -> fun (V328) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V329, V330)) end end}}, V321, V322)) end end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V333) -> fun (V334) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V333, V334)) end end, fun (V335) -> fun (V336) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V335, V336)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V337) -> fun (V338) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V337, V338)) end end, fun (V339) -> fun (V340) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V339, V340)) end end}}, V331, V332)) end end}}, V307, V308)) end end}}, V267, V268)) end end}}, V187, V188)) end end}, V0, V6, V8))), case V341 of {'Idris.Prelude.Types.Left', E14} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V343) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V344) -> fun (V345) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V346, V347)) end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V348, V349)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V350) -> fun (V351) -> fun (V352) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V353) -> fun (V354) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V353, V354)) end end, fun (V355) -> fun (V356) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V355, V356)) end end}, V350, V351, V352)) end end end, fun (V357) -> fun (V358) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V359) -> fun (V360) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V359, V360)) end end, fun (V361) -> fun (V362) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V361, V362)) end end}, V357, V358)) end end}}, V344, V345)) end end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V365) -> fun (V366) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V365, V366)) end end, fun (V367) -> fun (V368) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V367, V368)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V369) -> fun (V370) -> fun (V371) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V372) -> fun (V373) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V372, V373)) end end, fun (V374) -> fun (V375) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V374, V375)) end end}, V369, V370, V371)) end end end, fun (V376) -> fun (V377) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V378) -> fun (V379) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V378, V379)) end end, fun (V380) -> fun (V381) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V380, V381)) end end}, V376, V377)) end end}}, V363, V364)) end end}, V0, V7, V8)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__Fixity'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.InfixL'} -> (fun () -> fun (V2) -> ('Idris.Idris2.Utils.Binary':'un--tag'(V0, 0, V2)) end end()); {'Idris.Idris.Syntax.InfixR'} -> (fun () -> fun (V3) -> ('Idris.Idris2.Utils.Binary':'un--tag'(V0, 1, V3)) end end()); {'Idris.Idris.Syntax.Infix'} -> (fun () -> fun (V4) -> ('Idris.Idris2.Utils.Binary':'un--tag'(V0, 2, V4)) end end()); {'Idris.Idris.Syntax.Prefix'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Utils.Binary':'un--tag'(V0, 3, V5)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"showimplicits = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V1)))) end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"shownamespace = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V2)))) end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"showtypes = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V3)))) end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"eval = "/utf8>>, ('dn--un--show_Show__REPLEval'(V4)))) end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"editor = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V5)))) end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"cg = "/utf8>>, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__REPLEval'(V0) -> case V0 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> <<"typecheck"/utf8>> end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> <<"normalise"/utf8>> end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> <<"execute"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__PTerm'(V0) -> ('dn--un--showPrec_Show__PTerm'({'Idris.Prelude.Show.Open'}, V0)).
'dn--un--showPrec_Show__REPLOpt'(V0, V1) -> ('dn--un--show_Show__REPLOpt'(V1)).
'dn--un--showPrec_Show__REPLEval'(V0, V1) -> ('dn--un--show_Show__REPLEval'(V1)).
'dn--un--showPrec_Show__PTerm'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V3)) end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> case V6 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))) end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))))))))))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_ : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))))))))) end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V11)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))))))))))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" => "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))) end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"{auto "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V12)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))))))))))) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DefImplicit', E11} -> (fun (V13) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'({'Idris.Prelude.Show.App'}, V13)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"_ : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))))))))))))) end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'({'Idris.Prelude.Show.App'}, V13)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V9)))))))))))))))))) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E13, E14, E15, E16, E17, E18} -> (fun (V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.Idris.Syntax.PImplicit', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V16)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V18)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" => "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V20)))))))))) end(E19)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V16)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V18)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V19)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" => "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V20)))))))))))))) end end(E13, E14, E15, E16, E17, E18)); {'Idris.Idris.Syntax.PLet', E20, E21, E22, E23, E24, E25, E26} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> case V25 of {'Idris.Idris.Syntax.PImplicit', E27} -> (fun (V29) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V23)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V24)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" in "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V27)))))))))))))) end(E27)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V23)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V24)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V25)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V37, V38, V39)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V40, V41)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}, fun (V42) -> ('nested--11422-8978--in--un--showAlt'(V22, V28, V27, V26, V25, V24, V23, V0, V42)) end))(V28)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" in "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V27)))))))))))))))))))) end end(E20, E21, E22, E23, E24, E25, E26)); {'Idris.Idris.Syntax.PCase', E28, E29, E30} -> (fun (V43, V44, V45) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"case "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V44)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V46) -> ('nested--11422-9061--in--un--showCase'(V0, V43, V45, V44, V46)) end, V45)))), <<" }"/utf8>>)))))))) end(E28, E29, E30)); {'Idris.Idris.Syntax.PLocal', E31, E32, E33} -> (fun (V47, V48, V49) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"let { << definitions >>  } in "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V49)))) end(E31, E32, E33)); {'Idris.Idris.Syntax.PUpdate', E34, E35} -> (fun (V50, V51) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"record { "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V52) -> ('un--showUpdate'(V52)) end, V51)))), <<" }"/utf8>>)))) end(E34, E35)); {'Idris.Idris.Syntax.PApp', E36, E37, E38} -> (fun (V53, V54, V55) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'({'Idris.Prelude.Show.App'}, V54)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('dn--un--showPrec_Show__PTerm'({'Idris.Prelude.Show.App'}, V55)))))) end(E36, E37, E38)); {'Idris.Idris.Syntax.PWithApp', E39, E40, E41} -> (fun (V56, V57, V58) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V57)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" | "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V58)))))) end(E39, E40, E41)); {'Idris.Idris.Syntax.PAutoApp', E42, E43, E44} -> (fun (V59, V60, V61) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V60)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" @{"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V61)), <<"}"/utf8>>)))))) end(E42, E43, E44)); {'Idris.Idris.Syntax.PDelayed', E45, E46, E47} -> (fun (V62, V63, V64) -> case V63 of {'Idris.Core.TT.LInf'} -> (fun () -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Inf"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('dn--un--show_Show__PTerm'(V65)) end, fun (V66) -> fun (V67) -> ('dn--un--showPrec_Show__PTerm'(V66, V67)) end end}, V64)))) end()); _ -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Lazy"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('dn--un--show_Show__PTerm'(V68)) end, fun (V69) -> fun (V70) -> ('dn--un--showPrec_Show__PTerm'(V69, V70)) end end}, V64)))) end end(E45, E46, E47)); {'Idris.Idris.Syntax.PDelay', E48, E49} -> (fun (V71, V72) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Delay"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V73) -> ('dn--un--show_Show__PTerm'(V73)) end, fun (V74) -> fun (V75) -> ('dn--un--showPrec_Show__PTerm'(V74, V75)) end end}, V72)))) end(E48, E49)); {'Idris.Idris.Syntax.PForce', E50, E51} -> (fun (V76, V77) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Force"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V78) -> ('dn--un--show_Show__PTerm'(V78)) end, fun (V79) -> fun (V80) -> ('dn--un--showPrec_Show__PTerm'(V79, V80)) end end}, V77)))) end(E50, E51)); {'Idris.Idris.Syntax.PNamedApp', E52, E53, E54, E55} -> (fun (V81, V82, V83, V84) -> case V84 of {'Idris.Idris.Syntax.PRef', E56, E57} -> (fun (V85, V86) -> ('case--showPrec-9224'(V81, V85, V86, V83, V82, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V83, V86)))) end(E56, E57)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V82)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V83)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V84)), <<"}"/utf8>>)))))))))) end end(E52, E53, E54, E55)); {'Idris.Idris.Syntax.PSearch', E58, E59} -> (fun (V87, V88) -> <<"%search"/utf8>> end(E58, E59)); {'Idris.Idris.Syntax.PQuote', E60, E61} -> (fun (V89, V90) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"`("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V90)), <<")"/utf8>>)))) end(E60, E61)); {'Idris.Idris.Syntax.PQuoteName', E62, E63} -> (fun (V91, V92) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"`{{"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V92)), <<"}}"/utf8>>)))) end(E62, E63)); {'Idris.Idris.Syntax.PQuoteDecl', E64, E65} -> (fun (V93, V94) -> <<"`[ <<declaration>> ]"/utf8>> end(E64, E65)); {'Idris.Idris.Syntax.PUnquote', E66, E67} -> (fun (V95, V96) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"~("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V96)), <<")"/utf8>>)))) end(E66, E67)); {'Idris.Idris.Syntax.PRunElab', E68, E69} -> (fun (V97, V98) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"%runElab "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V98)))) end(E68, E69)); {'Idris.Idris.Syntax.PPrimVal', E70, E71} -> (fun (V99, V100) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__Constant'(V0, V100)) end(E70, E71)); {'Idris.Idris.Syntax.PHole', E72, E73, E74} -> (fun (V101, V102, V103) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"?"/utf8>>, V103)) end(E72, E73, E74)); {'Idris.Idris.Syntax.PType', E75} -> (fun (V104) -> <<"Type"/utf8>> end(E75)); {'Idris.Idris.Syntax.PAs', E76, E77, E78} -> (fun (V105, V106, V107) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V106)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"@"/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V107)))))) end(E76, E77, E78)); {'Idris.Idris.Syntax.PDotted', E79, E80} -> (fun (V108, V109) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V109)))) end(E79, E80)); {'Idris.Idris.Syntax.PImplicit', E81} -> (fun (V110) -> <<"_"/utf8>> end(E81)); {'Idris.Idris.Syntax.PInfer', E82} -> (fun (V111) -> <<"?"/utf8>> end(E82)); {'Idris.Idris.Syntax.POp', E83, E84, E85, E86} -> (fun (V112, V113, V114, V115) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V114)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V113)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V115)))))))))) end(E83, E84, E85, E86)); {'Idris.Idris.Syntax.PPrefixOp', E87, E88, E89} -> (fun (V116, V117, V118) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V117)), ('dn--un--showPrec_Show__PTerm'(V0, V118)))) end(E87, E88, E89)); {'Idris.Idris.Syntax.PSectionL', E90, E91, E92} -> (fun (V119, V120, V121) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V120)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V121)), <<")"/utf8>>)))))))) end(E90, E91, E92)); {'Idris.Idris.Syntax.PSectionR', E93, E94, E95} -> (fun (V122, V123, V124) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V123)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V0, V124)), <<")"/utf8>>)))))))) end(E93, E94, E95)); {'Idris.Idris.Syntax.PEq', E96, E97, E98} -> (fun (V125, V126, V127) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V126)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V127)))))) end(E96, E97, E98)); {'Idris.Idris.Syntax.PBracketed', E99, E100} -> (fun (V128, V129) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V129)), <<")"/utf8>>)))) end(E99, E100)); {'Idris.Idris.Syntax.PDoBlock', E101, E102, E103} -> (fun (V130, V131, V132) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"do "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V133) -> ('un--showDo'(V133)) end, V132)))))) end(E101, E102, E103)); {'Idris.Idris.Syntax.PBang', E104, E105} -> (fun (V134, V135) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"!"/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V135)))) end(E104, E105)); {'Idris.Idris.Syntax.PIdiom', E106, E107} -> (fun (V136, V137) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"[|"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V137)), <<"|]"/utf8>>)))) end(E106, E107)); {'Idris.Idris.Syntax.PList', E108, E109} -> (fun (V138, V139) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V140) -> ('dn--un--showPrec_Show__PTerm'(V0, V140)) end, V139)))), <<"]"/utf8>>)))) end(E108, E109)); {'Idris.Idris.Syntax.PPair', E110, E111, E112} -> (fun (V141, V142, V143) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V142)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V143)), <<")"/utf8>>)))))))) end(E110, E111, E112)); {'Idris.Idris.Syntax.PDPair', E113, E114, E115, E116} -> (fun (V144, V145, V146, V147) -> case V146 of {'Idris.Idris.Syntax.PImplicit', E117} -> (fun (V148) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V145)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ** "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V147)), <<")"/utf8>>)))))))) end(E117)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V145)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V146)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ** "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V147)), <<")"/utf8>>)))))))))))) end end(E113, E114, E115, E116)); {'Idris.Idris.Syntax.PUnit', E118} -> (fun (V149) -> <<"()"/utf8>> end(E118)); {'Idris.Idris.Syntax.PIfThenElse', E119, E120, E121, E122} -> (fun (V150, V151, V152, V153) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"if "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V151)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" then "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V152)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" else "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V153)))))))))))) end(E119, E120, E121, E122)); {'Idris.Idris.Syntax.PComprehension', E123, E124, E125} -> (fun (V154, V155, V156) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, ('nested--11422-9646--in--un--dePure'(V154, V156, V155, V0, V155)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V157) -> ('un--showDo'(('nested--11422-9647--in--un--deGuard'(V154, V156, V155, V0, V157)))) end, V156)))), <<"]"/utf8>>)))))))) end(E123, E124, E125)); {'Idris.Idris.Syntax.PRewrite', E126, E127, E128} -> (fun (V158, V159, V160) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"rewrite "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V159)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" in "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V160)))))))) end(E126, E127, E128)); {'Idris.Idris.Syntax.PRange', E129, E130, E131, E132} -> (fun (V161, V162, V163, V164) -> case V163 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V162)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" .. "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V164)), <<"]"/utf8>>)))))))) end()); {'Idris.Prelude.Types.Just', E133} -> (fun (V165) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V162)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V165)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" .. "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V164)), <<"]"/utf8>>)))))))))))) end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E129, E130, E131, E132)); {'Idris.Idris.Syntax.PRangeStream', E134, E135, E136} -> (fun (V166, V167, V168) -> case V168 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V167)), <<" .. ]"/utf8>>)))) end()); {'Idris.Prelude.Types.Just', E137} -> (fun (V169) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V167)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V169)), <<" .. ]"/utf8>>)))))))) end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134, E135, E136)); {'Idris.Idris.Syntax.PUnifyLog', E138, E139, E140} -> (fun (V170, V171, V172) -> ('dn--un--showPrec_Show__PTerm'(V0, V172)) end(E138, E139, E140)); {'Idris.Idris.Syntax.PPostfixApp', E141, E142, E143} -> (fun (V173, V174, V175) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--showPrec_Show__PTerm'(V0, V174)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V178, V179, V180)) end end end end end, fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V183, V184, V185)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V186, V187)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}, fun (V188) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V188)))) end))(V175)))) end(E141, E142, E143)); {'Idris.Idris.Syntax.PPostfixAppPartial', E144, E145} -> (fun (V189, V190) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V193, V194, V195)) end end end end end, fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V198, V199, V200)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V201, V202)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}, fun (V203) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V203)))) end))(V190)) end(E144, E145)); {'Idris.Idris.Syntax.PWithUnambigNames', E146, E147, E148} -> (fun (V204, V205, V206) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"with "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V207) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V207)) end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V208, V209)) end end}, V205)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('dn--un--showPrec_Show__PTerm'(V0, V206)))))))) end(E146, E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__SyntaxInfo'(V0, V1, V2) -> begin (V18 = (('dn--un--resolved_HasNames__(ANameMap $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--full_HasNames__IFaceInfo'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--resolved_HasNames__IFaceInfo'(V6, V7, V8)) end end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V0, V21)) end, case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V28 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Idris.Syntax.MkSyntax', E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Idris.Syntax.MkSyntax', V34, V35, V20, V37, V38, V39, V33, V41, V42} end(E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames__IFaceInfo'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', V1}.
'dn--un--resolved_HasNames__(ANameMap $a)'(V0, V1, V2, V3) -> ('nested--13805-11003--in--un--insertAll'('erased', V1, V3, V2, ('Idris.Idris2.Data.ANameMap':'un--empty'('erased')), ('Idris.Idris2.Data.ANameMap':'un--toList'('erased', V3)))).
'dn--un--pretty_Pretty__REPLOpt'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V2) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"showimplicits"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Bool'('erased', V2)))))) end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V3) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"shownamespace"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Bool'('erased', V3)))))) end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V4) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"showtypes"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Bool'('erased', V4)))))) end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V5) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"eval"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('dn--un--pretty_Pretty__REPLEval'('erased', V5)))))) end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V6) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"editor"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V6)))))) end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V7) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"cg"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V7)))))) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty__REPLEval'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"typecheck"/utf8>>)) end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"normalise"/utf8>>)) end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"execute"/utf8>>)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty__REPLOpt'(V0, V1, V2) -> ('dn--un--pretty_Pretty__REPLOpt'('erased', V2)).
'dn--un--prettyPrec_Pretty__REPLEval'(V0, V1, V2) -> ('dn--un--pretty_Pretty__REPLEval'('erased', V2)).
'dn--un--full_HasNames__SyntaxInfo'(V0, V1, V2) -> begin (V18 = (('dn--un--full_HasNames__(ANameMap $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--full_HasNames__IFaceInfo'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--resolved_HasNames__IFaceInfo'(V6, V7, V8)) end end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V0, V21)) end, case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V28 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Idris.Syntax.MkSyntax', E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Idris.Syntax.MkSyntax', V34, V35, V20, V37, V38, V39, V33, V41, V42} end(E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames__IFaceInfo'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', V1}.
'dn--un--full_HasNames__(ANameMap $a)'(V0, V1, V2, V3) -> ('nested--13804-10961--in--un--insertAll'('erased', V1, V3, V2, ('Idris.Idris2.Data.ANameMap':'un--empty'('erased')), ('Idris.Idris2.Data.ANameMap':'un--toList'('erased', V3)))).
'dn--un--fromBuf_TTC__SyntaxInfo'(V0, V1) -> begin (V54 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V2) -> fun (V3) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V4) -> fun (V5) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V6, V7)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V10) -> fun (V11) -> ('dn--un--toBuf_TTC__Fixity'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--fromBuf_TTC__Fixity'(V12, V13)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V14) -> fun (V15) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V16, V17)) end end}}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('dn--un--toBuf_TTC__Fixity'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('dn--un--fromBuf_TTC__Fixity'(V22, V23)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V24) -> fun (V25) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V26, V27)) end end}}, V18, V19)) end end}}, V2, V3)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V30) -> fun (V31) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V32, V33)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V36) -> fun (V37) -> ('dn--un--toBuf_TTC__Fixity'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--fromBuf_TTC__Fixity'(V38, V39)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V42, V43)) end end}}, V34, V35)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> ('dn--un--toBuf_TTC__Fixity'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--fromBuf_TTC__Fixity'(V48, V49)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V50) -> fun (V51) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V52, V53)) end end}}, V44, V45)) end end}}, V28, V29)) end end}, V0, V1))), case V54 of {'Idris.Prelude.Types.Left', E0} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V56) -> begin (V77 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V57) -> fun (V58) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V59) -> fun (V60) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V61, V62)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V63) -> fun (V64) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V65, V66)) end end}}, V57, V58)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V69) -> fun (V70) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V71, V72)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V73) -> fun (V74) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Nat'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Nat'(V75, V76)) end end}}, V67, V68)) end end}, V0, V1))), case V77 of {'Idris.Prelude.Types.Left', E2} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V79) -> begin (V100 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V80) -> fun (V81) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V84, V85)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V86) -> fun (V87) -> ('dn--un--toBuf_TTC__IFaceInfo'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('dn--un--fromBuf_TTC__IFaceInfo'(V88, V89)) end end}}, V80, V81)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V94, V95)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V96) -> fun (V97) -> ('dn--un--toBuf_TTC__IFaceInfo'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('dn--un--fromBuf_TTC__IFaceInfo'(V98, V99)) end end}}, V90, V91)) end end}, V0, V1))), case V100 of {'Idris.Prelude.Types.Left', E4} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V102) -> begin (V123 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V103) -> fun (V104) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V107, V108)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V109) -> fun (V110) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V111, V112)) end end}}, V103, V104)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V117, V118)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V119) -> fun (V120) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V121, V122)) end end}}, V113, V114)) end end}, V0, V1))), case V123 of {'Idris.Prelude.Types.Left', E6} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V125) -> begin (V130 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V128, V129)) end end}, V0, V1))), case V130 of {'Idris.Prelude.Types.Left', E8} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V0, V1))), case V133 of {'Idris.Prelude.Types.Left', E10} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V135) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Data.StringMap':'un--fromList'('erased', V56)), ('Idris.Idris2.Data.StringMap':'un--fromList'('erased', V79)), ('Idris.Idris2.Data.ANameMap':'un--fromList'('erased', V102)), [], ('Idris.Idris2.Data.ANameMap':'un--fromList'('erased', V125)), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), V132, [], V135}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__IFaceInfo'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V9 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V7, V8)) end end}, V0, V1))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V16 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V14, V15)) end end}, V0, V1))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V23 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V19) -> fun (V20) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V21, V22)) end end}, V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V334 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V30, V31)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V32) -> fun (V33) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V36, V37)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V38) -> fun (V39) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V44, V45)) end end}, V40, V41)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V50, V51)) end end}, V46, V47)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V52) -> fun (V53) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V54) -> fun (V55) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V56, V57)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V58) -> fun (V59) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V60, V61)) end end}}, V52, V53)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V64) -> fun (V65) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V66, V67)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V70, V71)) end end}}, V62, V63)) end end}}, V38, V39)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V74) -> fun (V75) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V78, V79)) end end}, V74, V75)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V84, V85)) end end}, V80, V81)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V86) -> fun (V87) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V88) -> fun (V89) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V90, V91)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V92) -> fun (V93) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V94, V95)) end end}}, V86, V87)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V98) -> fun (V99) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V100, V101)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V102) -> fun (V103) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V104, V105)) end end}}, V96, V97)) end end}}, V72, V73)) end end}}, V32, V33)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V110, V111)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V112) -> fun (V113) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V114) -> fun (V115) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V118, V119)) end end}, V114, V115)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V124, V125)) end end}, V120, V121)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V126) -> fun (V127) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V128) -> fun (V129) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V130, V131)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V132) -> fun (V133) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V134, V135)) end end}}, V126, V127)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V138) -> fun (V139) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V140, V141)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V142) -> fun (V143) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V144, V145)) end end}}, V136, V137)) end end}}, V112, V113)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V148) -> fun (V149) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V152, V153)) end end}, V148, V149)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V158, V159)) end end}, V154, V155)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V160) -> fun (V161) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V162) -> fun (V163) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V164, V165)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V166) -> fun (V167) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V168, V169)) end end}}, V160, V161)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V172) -> fun (V173) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V174, V175)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V176) -> fun (V177) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V176, V177)) end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V178, V179)) end end}}, V170, V171)) end end}}, V146, V147)) end end}}, V106, V107)) end end}}, V26, V27)) end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V184, V185)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V186) -> fun (V187) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V190, V191)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V192) -> fun (V193) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V194) -> fun (V195) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V198, V199)) end end}, V194, V195)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V202) -> fun (V203) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V204, V205)) end end}, V200, V201)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V206) -> fun (V207) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V208) -> fun (V209) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V210, V211)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V212) -> fun (V213) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V214, V215)) end end}}, V206, V207)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V218) -> fun (V219) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V220, V221)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V222) -> fun (V223) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V222, V223)) end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V224, V225)) end end}}, V216, V217)) end end}}, V192, V193)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V228) -> fun (V229) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V232, V233)) end end}, V228, V229)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V236) -> fun (V237) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V238, V239)) end end}, V234, V235)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V240) -> fun (V241) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V242) -> fun (V243) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V244, V245)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V246) -> fun (V247) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V248, V249)) end end}}, V240, V241)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V252) -> fun (V253) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V254, V255)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V256) -> fun (V257) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V258, V259)) end end}}, V250, V251)) end end}}, V226, V227)) end end}}, V186, V187)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RigCount'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RigCount'(V264, V265)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V266) -> fun (V267) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V268) -> fun (V269) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V270) -> fun (V271) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V270, V271)) end end, fun (V272) -> fun (V273) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V272, V273)) end end}, V268, V269)) end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V276, V277)) end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V278, V279)) end end}, V274, V275)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V280) -> fun (V281) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V282) -> fun (V283) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V284, V285)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V286) -> fun (V287) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V288, V289)) end end}}, V280, V281)) end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V292) -> fun (V293) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V292, V293)) end end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V294, V295)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V296) -> fun (V297) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V296, V297)) end end, fun (V298) -> fun (V299) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V298, V299)) end end}}, V290, V291)) end end}}, V266, V267)) end end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V302) -> fun (V303) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V304) -> fun (V305) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V304, V305)) end end, fun (V306) -> fun (V307) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V306, V307)) end end}, V302, V303)) end end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V310) -> fun (V311) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__TotalReq'(V310, V311)) end end, fun (V312) -> fun (V313) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__TotalReq'(V312, V313)) end end}, V308, V309)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V314) -> fun (V315) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V316) -> fun (V317) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V316, V317)) end end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V318, V319)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V320) -> fun (V321) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V320, V321)) end end, fun (V322) -> fun (V323) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V322, V323)) end end}}, V314, V315)) end end, fun (V324) -> fun (V325) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V326) -> fun (V327) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V326, V327)) end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V328, V329)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V330) -> fun (V331) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__RawImp'(V330, V331)) end end, fun (V332) -> fun (V333) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__RawImp'(V332, V333)) end end}}, V324, V325)) end end}}, V300, V301)) end end}}, V260, V261)) end end}}, V180, V181)) end end}, V0, V1))), case V334 of {'Idris.Prelude.Types.Left', E8} -> (fun (V335) -> {'Idris.Prelude.Types.Left', V335} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V336) -> begin (V375 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V337) -> fun (V338) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V339, V340)) end end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V341, V342)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V343) -> fun (V344) -> fun (V345) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V346) -> fun (V347) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V346, V347)) end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V348, V349)) end end}, V343, V344, V345)) end end end, fun (V350) -> fun (V351) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V352) -> fun (V353) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V352, V353)) end end, fun (V354) -> fun (V355) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V354, V355)) end end}, V350, V351)) end end}}, V337, V338)) end end, fun (V356) -> fun (V357) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V358) -> fun (V359) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V358, V359)) end end, fun (V360) -> fun (V361) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V360, V361)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V362) -> fun (V363) -> fun (V364) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V365) -> fun (V366) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V365, V366)) end end, fun (V367) -> fun (V368) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V367, V368)) end end}, V362, V363, V364)) end end end, fun (V369) -> fun (V370) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V371) -> fun (V372) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC__ImpClause'(V371, V372)) end end, fun (V373) -> fun (V374) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC__ImpClause'(V373, V374)) end end}, V369, V370)) end end}}, V356, V357)) end end}, V0, V1))), case V375 of {'Idris.Prelude.Types.Left', E10} -> (fun (V376) -> {'Idris.Prelude.Types.Left', V376} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V377) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkIFaceInfo', V4, V11, V18, V25, V336, V377}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Fixity'(V0, V1) -> begin (V2 = ('Idris.Idris2.Utils.Binary':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixL'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixR'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Infix'}}; 3 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Prefix'}}; _ -> ('Idris.Idris2.Utils.Binary':'un--corrupt'('erased', <<"Fixity"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_TTC_SyntaxInfo'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC__SyntaxInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC__SyntaxInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_IFaceInfo'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__IFaceInfo'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__IFaceInfo'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Fixity'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__Fixity'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__Fixity'(V2, V3)) end end}.
'dn--un--__Impl_Show_REPLOpt'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__REPLOpt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__REPLOpt'(V1, V2)) end end}.
'dn--un--__Impl_Show_REPLEval'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__REPLEval'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__REPLEval'(V1, V2)) end end}.
'dn--un--__Impl_Show_PTerm'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__PTerm'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__PTerm'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_REPLOpt'() -> {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty__REPLOpt'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty__REPLOpt'('erased', V3, V4)) end end end}.
'dn--un--__Impl_Pretty_REPLEval'() -> {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty__REPLEval'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty__REPLEval'('erased', V3, V4)) end end end}.
'dn--un--__Impl_HasNames_SyntaxInfo'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__SyntaxInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__SyntaxInfo'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_IFaceInfo'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames__IFaceInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__IFaceInfo'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(ANameMap $a)'(V0, V1) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames__(ANameMap $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__(ANameMap $a)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_Eq_Pass'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__Pass'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__Pass'(V2, V3)) end end}.
'dn--un--==_Eq__Pass'(V0, V1) -> case V0 of {'Idris.Idris.Syntax.Single'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.Single'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Idris.Syntax.AsType'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.AsType'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Idris.Syntax.AsDef'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.AsDef'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq__Pass'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__Pass'(V0, V1)))).
'un--typePass'(V0) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('dn--un--==_Eq__Pass'(V0, {'Idris.Idris.Syntax.Single'})), fun () -> ('dn--un--==_Eq__Pass'(V0, {'Idris.Idris.Syntax.AsType'})) end)).
'un--showUpdate'(V0) -> case V0 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('dn--un--show_Show__PTerm'(V2)))))) end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" $= "/utf8>>, ('dn--un--show_Show__PTerm'(V4)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showDo'(V0) -> case V0 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V1, V2) -> ('dn--un--show_Show__PTerm'(V2)) end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E2, E3, E4} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" <- "/utf8>>, ('dn--un--show_Show__PTerm'(V5)))))) end(E2, E3, E4)); {'Idris.Idris.Syntax.DoBindPat', E5, E6, E7, E8} -> (fun (V6, V7, V8, V9) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V7)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" <- "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V8)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V17, V18, V19)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V20, V21)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}, fun (V22) -> ('un--showAlt'(V22)) end))(V9)))))))) end(E5, E6, E7, E8)); {'Idris.Idris.Syntax.DoLet', E9, E10, E11, E12, E13} -> (fun (V23, V24, V25, V26, V27) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V24)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('dn--un--show_Show__PTerm'(V27)))))))) end(E9, E10, E11, E12, E13)); {'Idris.Idris.Syntax.DoLetPat', E14, E15, E16, E17, E18} -> (fun (V28, V29, V30, V31, V32) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V29)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V31)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V40, V41, V42)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V43, V44)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}, fun (V45) -> ('un--showAlt'(V45)) end))(V32)))))))))) end(E14, E15, E16, E17, E18)); {'Idris.Idris.Syntax.DoLetLocal', E19, E20} -> (fun (V46, V47) -> <<"let { << definitions >>  }"/utf8>> end(E19, E20)); {'Idris.Idris.Syntax.DoRewrite', E21, E22} -> (fun (V48, V49) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"rewrite "/utf8>>, ('dn--un--show_Show__PTerm'(V49)))) end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showAlt'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V2)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V3)), <<";"/utf8>>)))))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9) -> <<" | <<with alts not possible>>;"/utf8>> end(E4, E5, E6, E7, E8)); {'Idris.Idris.Syntax.MkImpossible', E9, E10} -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__PTerm'(V11)), <<" impossible;"/utf8>>)))) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--papply'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--papply'(V0, {'Idris.Idris.Syntax.PApp', V0, V1, V3}, V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapPTermM'(V0, V1) -> ('nested--14065-11198--in--un--goPTerm'(V0, V1)).
'un--isPDef'(V0) -> case V0 of {'Idris.Idris.Syntax.PDef', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--initSyntax'() -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Data.StringMap':'un--insert'('erased', <<"="/utf8>>, {'Idris.Builtin.MkPair', {'Idris.Idris.Syntax.Infix'}, 0}, ('Idris.Idris2.Data.StringMap':'un--empty'('erased')))), ('Idris.Idris2.Data.StringMap':'un--insert'('erased', <<"-"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.Data.StringMap':'un--empty'('erased')))), ('Idris.Idris2.Data.ANameMap':'un--empty'('erased')), [], ('Idris.Idris2.Data.ANameMap':'un--empty'('erased')), ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), [], [], {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.MkFC', <<"(default)"/utf8>>, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}, {'Idris.Core.Name.UN', <<"main"/utf8>>}}}.
'un--getPTypeDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPTermLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E8, E9, E10, E11, E12, E13)); {'Idris.Idris.Syntax.PLet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V15 end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.PCase', E21, E22, E23} -> (fun (V22, V23, V24) -> V22 end(E21, E22, E23)); {'Idris.Idris.Syntax.PLocal', E24, E25, E26} -> (fun (V25, V26, V27) -> V25 end(E24, E25, E26)); {'Idris.Idris.Syntax.PUpdate', E27, E28} -> (fun (V28, V29) -> V28 end(E27, E28)); {'Idris.Idris.Syntax.PApp', E29, E30, E31} -> (fun (V30, V31, V32) -> V30 end(E29, E30, E31)); {'Idris.Idris.Syntax.PWithApp', E32, E33, E34} -> (fun (V33, V34, V35) -> V33 end(E32, E33, E34)); {'Idris.Idris.Syntax.PAutoApp', E35, E36, E37} -> (fun (V36, V37, V38) -> V36 end(E35, E36, E37)); {'Idris.Idris.Syntax.PNamedApp', E38, E39, E40, E41} -> (fun (V39, V40, V41, V42) -> V39 end(E38, E39, E40, E41)); {'Idris.Idris.Syntax.PDelayed', E42, E43, E44} -> (fun (V43, V44, V45) -> V43 end(E42, E43, E44)); {'Idris.Idris.Syntax.PDelay', E45, E46} -> (fun (V46, V47) -> V46 end(E45, E46)); {'Idris.Idris.Syntax.PForce', E47, E48} -> (fun (V48, V49) -> V48 end(E47, E48)); {'Idris.Idris.Syntax.PSearch', E49, E50} -> (fun (V50, V51) -> V50 end(E49, E50)); {'Idris.Idris.Syntax.PPrimVal', E51, E52} -> (fun (V52, V53) -> V52 end(E51, E52)); {'Idris.Idris.Syntax.PQuote', E53, E54} -> (fun (V54, V55) -> V54 end(E53, E54)); {'Idris.Idris.Syntax.PQuoteName', E55, E56} -> (fun (V56, V57) -> V56 end(E55, E56)); {'Idris.Idris.Syntax.PQuoteDecl', E57, E58} -> (fun (V58, V59) -> V58 end(E57, E58)); {'Idris.Idris.Syntax.PUnquote', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.Idris.Syntax.PRunElab', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); {'Idris.Idris.Syntax.PHole', E63, E64, E65} -> (fun (V64, V65, V66) -> V64 end(E63, E64, E65)); {'Idris.Idris.Syntax.PType', E66} -> (fun (V67) -> V67 end(E66)); {'Idris.Idris.Syntax.PAs', E67, E68, E69} -> (fun (V68, V69, V70) -> V68 end(E67, E68, E69)); {'Idris.Idris.Syntax.PDotted', E70, E71} -> (fun (V71, V72) -> V71 end(E70, E71)); {'Idris.Idris.Syntax.PImplicit', E72} -> (fun (V73) -> V73 end(E72)); {'Idris.Idris.Syntax.PInfer', E73} -> (fun (V74) -> V74 end(E73)); {'Idris.Idris.Syntax.POp', E74, E75, E76, E77} -> (fun (V75, V76, V77, V78) -> V75 end(E74, E75, E76, E77)); {'Idris.Idris.Syntax.PPrefixOp', E78, E79, E80} -> (fun (V79, V80, V81) -> V79 end(E78, E79, E80)); {'Idris.Idris.Syntax.PSectionL', E81, E82, E83} -> (fun (V82, V83, V84) -> V82 end(E81, E82, E83)); {'Idris.Idris.Syntax.PSectionR', E84, E85, E86} -> (fun (V85, V86, V87) -> V85 end(E84, E85, E86)); {'Idris.Idris.Syntax.PEq', E87, E88, E89} -> (fun (V88, V89, V90) -> V88 end(E87, E88, E89)); {'Idris.Idris.Syntax.PBracketed', E90, E91} -> (fun (V91, V92) -> V91 end(E90, E91)); {'Idris.Idris.Syntax.PDoBlock', E92, E93, E94} -> (fun (V93, V94, V95) -> V93 end(E92, E93, E94)); {'Idris.Idris.Syntax.PBang', E95, E96} -> (fun (V96, V97) -> V96 end(E95, E96)); {'Idris.Idris.Syntax.PIdiom', E97, E98} -> (fun (V98, V99) -> V98 end(E97, E98)); {'Idris.Idris.Syntax.PList', E99, E100} -> (fun (V100, V101) -> V100 end(E99, E100)); {'Idris.Idris.Syntax.PPair', E101, E102, E103} -> (fun (V102, V103, V104) -> V102 end(E101, E102, E103)); {'Idris.Idris.Syntax.PDPair', E104, E105, E106, E107} -> (fun (V105, V106, V107, V108) -> V105 end(E104, E105, E106, E107)); {'Idris.Idris.Syntax.PUnit', E108} -> (fun (V109) -> V109 end(E108)); {'Idris.Idris.Syntax.PIfThenElse', E109, E110, E111, E112} -> (fun (V110, V111, V112, V113) -> V110 end(E109, E110, E111, E112)); {'Idris.Idris.Syntax.PComprehension', E113, E114, E115} -> (fun (V114, V115, V116) -> V114 end(E113, E114, E115)); {'Idris.Idris.Syntax.PRewrite', E116, E117, E118} -> (fun (V117, V118, V119) -> V117 end(E116, E117, E118)); {'Idris.Idris.Syntax.PRange', E119, E120, E121, E122} -> (fun (V120, V121, V122, V123) -> V120 end(E119, E120, E121, E122)); {'Idris.Idris.Syntax.PRangeStream', E123, E124, E125} -> (fun (V124, V125, V126) -> V124 end(E123, E124, E125)); {'Idris.Idris.Syntax.PPostfixApp', E126, E127, E128} -> (fun (V127, V128, V129) -> V127 end(E126, E127, E128)); {'Idris.Idris.Syntax.PPostfixAppPartial', E129, E130} -> (fun (V130, V131) -> V130 end(E129, E130)); {'Idris.Idris.Syntax.PUnifyLog', E131, E132, E133} -> (fun (V132, V133, V134) -> V132 end(E131, E132, E133)); {'Idris.Idris.Syntax.PWithUnambigNames', E134, E135, E136} -> (fun (V135, V136, V137) -> V135 end(E134, E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E5, E6} -> (fun (V6, V7) -> V6 end(E5, E6)); {'Idris.Idris.Syntax.PData', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> V8 end(E7, E8, E9, E10)); {'Idris.Idris.Syntax.PParameters', E11, E12, E13} -> (fun (V12, V13, V14) -> V12 end(E11, E12, E13)); {'Idris.Idris.Syntax.PUsing', E14, E15, E16} -> (fun (V15, V16, V17) -> V15 end(E14, E15, E16)); {'Idris.Idris.Syntax.PReflect', E17, E18} -> (fun (V18, V19) -> V18 end(E17, E18)); {'Idris.Idris.Syntax.PInterface', E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V20 end(E19, E20, E21, E22, E23, E24, E25, E26, E27)); {'Idris.Idris.Syntax.PImplementation', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V29 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); {'Idris.Idris.Syntax.PRecord', E39, E40, E41, E42, E43, E44, E45} -> (fun (V40, V41, V42, V43, V44, V45, V46) -> V40 end(E39, E40, E41, E42, E43, E44, E45)); {'Idris.Idris.Syntax.PMutual', E46, E47} -> (fun (V47, V48) -> V47 end(E46, E47)); {'Idris.Idris.Syntax.PFixity', E48, E49, E50, E51} -> (fun (V49, V50, V51, V52) -> V49 end(E48, E49, E50, E51)); {'Idris.Idris.Syntax.PNamespace', E52, E53, E54} -> (fun (V53, V54, V55) -> V53 end(E52, E53, E54)); {'Idris.Idris.Syntax.PTransform', E55, E56, E57, E58} -> (fun (V56, V57, V58, V59) -> V56 end(E55, E56, E57, E58)); {'Idris.Idris.Syntax.PRunElabDecl', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.Idris.Syntax.PDirective', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPDataDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E5, E6, E7} -> (fun (V6, V7, V8) -> V6 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPClauseLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9) -> V5 end(E4, E5, E6, E7, E8)); {'Idris.Idris.Syntax.MkImpossible', E9, E10} -> (fun (V10, V11) -> V10 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E2, E3, E4} -> (fun (V3, V4, V5) -> V3 end(E2, E3, E4)); {'Idris.Idris.Syntax.DoBindPat', E5, E6, E7, E8} -> (fun (V6, V7, V8, V9) -> V6 end(E5, E6, E7, E8)); {'Idris.Idris.Syntax.DoLet', E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14) -> V10 end(E9, E10, E11, E12, E13)); {'Idris.Idris.Syntax.DoLetPat', E14, E15, E16, E17, E18} -> (fun (V15, V16, V17, V18, V19) -> V15 end(E14, E15, E16, E17, E18)); {'Idris.Idris.Syntax.DoLetLocal', E19, E20} -> (fun (V20, V21) -> V20 end(E19, E20)); {'Idris.Idris.Syntax.DoRewrite', E21, E22} -> (fun (V22, V23) -> V22 end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--definedInData'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> [V2 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('nested--10639-7989--in--un--getName'(V1, V3, V4, V5, V2, V6)) end, V5))] end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E5, E6, E7} -> (fun (V7, V8, V9) -> [V8 | []] end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--definedIn'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.Syntax.PClaim', E2, E3, E4, E5, E6} -> (fun (V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.MkPTy', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> [V9 | ('un--definedIn'(V2))] end(E7, E8, E9, E10)); _ -> ('un--definedIn'(V2)) end end(E2, E3, E4, E5, E6)); {'Idris.Idris.Syntax.PData', E11, E12, E13, E14} -> (fun (V12, V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedInData'(V15)), ('un--definedIn'(V2)))) end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PParameters', E15, E16, E17} -> (fun (V16, V17, V18) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedIn'(V18)), ('un--definedIn'(V2)))) end(E15, E16, E17)); {'Idris.Idris.Syntax.PUsing', E18, E19, E20} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedIn'(V21)), ('un--definedIn'(V2)))) end(E18, E19, E20)); {'Idris.Idris.Syntax.PNamespace', E21, E22, E23} -> (fun (V22, V23, V24) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedIn'(V24)), ('un--definedIn'(V2)))) end(E21, E22, E23)); _ -> ('un--definedIn'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--defPass'(V0) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('dn--un--==_Eq__Pass'(V0, {'Idris.Idris.Syntax.Single'})), fun () -> ('dn--un--==_Eq__Pass'(V0, {'Idris.Idris.Syntax.AsDef'})) end)).
'un--OpStr'() -> {'Idris.Core.Name.Name'}.
