-module('Idris.Idris2.Text.Parser.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--parse-2915'/6,
  'case--doParse-2853'/8,
  'case--case block in doParse-2768'/13,
  'case--doParse-2708'/10,
  'case--case block in doParse-2614'/14,
  'case--doParse-2550'/11,
  'case--case block in doParse-2439'/14,
  'case--doParse-2415'/10,
  'case--doParse-2352'/9,
  'case--doParse-2241'/9,
  'case--doParse-2178'/7,
  'case--doParse-2117'/7,
  'dn--un--map_Functor__((Grammar $tok) $c)'/6,
  'dn--un--__Impl_Functor_((Grammar $tok) $c)'/6,
  'un--try'/4,
  'un--terminal'/4,
  'un--seq'/7,
  'un--pure'/3,
  'un--peek'/1,
  'un--parse'/5,
  'un--nextIs'/3,
  'un--mustWork'/4,
  'un--mapToken'/6,
  'un--join'/5,
  'un--fatalError'/4,
  'un--fail'/4,
  'un--eof'/1,
  'un--doParse'/6,
  'un--commit'/1,
  'un--bounds'/4,
  'un-->>='/5,
  'un--<||>'/7,
  'un--<|>'/6,
  'un--<*>'/7,
  'un--<*'/7,
  'un--*>'/7
]).
'case--parse-2915'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Prelude.Types.Left', {'Idris.Text.Parser.Core.Error', V8, V9}} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V10, V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V11 of {'Idris.Text.Bounded.MkBounded', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> V13 end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12}} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2853'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> {'Idris.Text.Parser.Core.Failure', V8, V9, V10, V11} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V12, V13, V14) -> {'Idris.Text.Parser.Core.Res', V12, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V17, V18)) end end end end, fun (V19) -> V13 end, V13)), V14} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-2768'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V13, V14, V15, V16) -> {'Idris.Text.Parser.Core.Failure', V13, V14, V15, V16} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V17, V18, V19) -> {'Idris.Text.Parser.Core.Res', V17, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V10, V18)), V19} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2708'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> {'Idris.Text.Parser.Core.Failure', V10, V11, V12, V13} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> ('case--case block in doParse-2768'('erased', 'erased', 'erased', V3, V4, V5, V6, V7, 'erased', V16, V15, V14, ('un--doParse'('erased', 'erased', 'erased', V14, ((V4())(case V15 of {'Idris.Text.Bounded.MkBounded', E7, E8, E9, E10, E11, E12} -> (fun (V17, V18, V19, V20, V21, V22) -> V17 end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V16)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-2614'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> {'Idris.Text.Parser.Core.Failure', V14, V15, V16, V17} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V18, V19, V20) -> {'Idris.Text.Parser.Core.Res', V18, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V11, V19)), V20} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2550'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> {'Idris.Text.Parser.Core.Failure', V11, V12, V13, V14} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V15, V16, V17) -> ('case--case block in doParse-2614'('erased', 'erased', 'erased', V3, V4, V5, V6, V7, V8, 'erased', V17, V16, V15, ('un--doParse'('erased', 'erased', 'erased', V15, (V5(case V16 of {'Idris.Text.Bounded.MkBounded', E7, E8, E9, E10, E11, E12} -> (fun (V18, V19, V20, V21, V22, V23) -> V18 end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V17)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-2439'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> {'Idris.Text.Parser.Core.Failure', V7, V11, V10, V9}; 1 -> ('un--doParse'('erased', 'erased', 'erased', 1, (V3()), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2415'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> ('case--case block in doParse-2439'('erased', 'erased', V2, V3, V4, V5, V6, V7, 'erased', V13, V12, V11, V10, ('Idris.Idris2.Prelude.Basics':'un--||'(V10, fun () -> V11 end)))) end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> {'Idris.Text.Parser.Core.Res', V7, V15, V16} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2352'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> {'Idris.Text.Parser.Core.Res', V5, ('Idris.Idris2.Text.Bounded':'un--removeIrrelevance'('erased', V3)), [V3 | V4]}; 1 -> {'Idris.Text.Parser.Core.Failure', V5, 1, V2, [V3 | V4]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2241'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Text.Parser.Core.Failure', V6, 1, V3, [V4 | V5]} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> {'Idris.Text.Parser.Core.Res', V6, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V12, V13)) end end end end, fun (V14) -> V9 end, V4)), V5} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2178'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> {'Idris.Text.Parser.Core.Failure', V7, 0, V9, V10} end(E0, E1, E2, E3)); _ -> V6 end.
'case--doParse-2117'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> {'Idris.Text.Parser.Core.Failure', V7, 1, V9, V10} end(E0, E1, E2, E3)); _ -> V6 end.
'dn--un--map_Functor__((Grammar $tok) $c)'(V0, V1, V2, V3, V4, V5) -> case V3 of 1 -> case V5 of {'Idris.Text.Parser.Core.Empty', E80} -> (fun (V6) -> {'Idris.Text.Parser.Core.Empty', (V4(V6))} end(E80)); _ -> case V5 of {'Idris.Text.Parser.Core.Fail', E76, E77} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Fail', V7, V8} end(E76, E77)); {'Idris.Text.Parser.Core.Try', E78} -> (fun (V9) -> {'Idris.Text.Parser.Core.Try', ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V9))} end(E78)); {'Idris.Text.Parser.Core.MustWork', E79} -> (fun (V10) -> {'Idris.Text.Parser.Core.MustWork', ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V10))} end(E79)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.Terminal', E74, E75} -> (fun (V11, V12) -> {'Idris.Text.Parser.Core.Terminal', V11, fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V4, (V12(V13)))) end} end(E74, E75)); _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E70, E71, E72, E73} -> (fun (V14, V15, V16, V17) -> {'Idris.Text.Parser.Core.Alt', V14, V15, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V14, V4, V16)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V15, V4, (V17()))) end} end(E70, E71, E72, E73)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E67, E68, E69} -> (fun (V18, V19, V20) -> {'Idris.Text.Parser.Core.SeqEat', V18, V19, fun () -> fun (V21) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V18, V4, ((V20())(V21)))) end end} end(E67, E68, E69)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E62, E63, E64, E65} -> (fun (V22, V23, V24, V25) -> {'Idris.Text.Parser.Core.SeqEmpty', V22, V23, V24, fun (V26) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V23, V4, (V25(V26)))) end} end(E62, E63, E64, E65)); {'Idris.Text.Parser.Core.Bounds', E66} -> (fun (V27) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V27}, fun (V28) -> {'Idris.Text.Parser.Core.Empty', (V4(V28))} end} end(E66)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V29) -> {'Idris.Text.Parser.Core.Empty', (V4(V29))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E57, E58, E59, E60} -> (fun (V30, V31, V32, V33) -> {'Idris.Text.Parser.Core.SeqEmpty', V30, V31, V32, fun (V34) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V31, V4, (V33(V34)))) end} end(E57, E58, E59, E60)); {'Idris.Text.Parser.Core.Bounds', E61} -> (fun (V35) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V35}, fun (V36) -> {'Idris.Text.Parser.Core.Empty', (V4(V36))} end} end(E61)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V37) -> {'Idris.Text.Parser.Core.Empty', (V4(V37))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E53, E54, E55, E56} -> (fun (V38, V39, V40, V41) -> {'Idris.Text.Parser.Core.Alt', V38, V39, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V38, V4, V40)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V39, V4, (V41()))) end} end(E53, E54, E55, E56)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E50, E51, E52} -> (fun (V42, V43, V44) -> {'Idris.Text.Parser.Core.SeqEat', V42, V43, fun () -> fun (V45) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V42, V4, ((V44())(V45)))) end end} end(E50, E51, E52)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E45, E46, E47, E48} -> (fun (V46, V47, V48, V49) -> {'Idris.Text.Parser.Core.SeqEmpty', V46, V47, V48, fun (V50) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V47, V4, (V49(V50)))) end} end(E45, E46, E47, E48)); {'Idris.Text.Parser.Core.Bounds', E49} -> (fun (V51) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V51}, fun (V52) -> {'Idris.Text.Parser.Core.Empty', (V4(V52))} end} end(E49)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V53) -> {'Idris.Text.Parser.Core.Empty', (V4(V53))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E40, E41, E42, E43} -> (fun (V54, V55, V56, V57) -> {'Idris.Text.Parser.Core.SeqEmpty', V54, V55, V56, fun (V58) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V55, V4, (V57(V58)))) end} end(E40, E41, E42, E43)); {'Idris.Text.Parser.Core.Bounds', E44} -> (fun (V59) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V59}, fun (V60) -> {'Idris.Text.Parser.Core.Empty', (V4(V60))} end} end(E44)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V61) -> {'Idris.Text.Parser.Core.Empty', (V4(V61))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end; _ -> case V5 of {'Idris.Text.Parser.Core.Fail', E36, E37} -> (fun (V62, V63) -> {'Idris.Text.Parser.Core.Fail', V62, V63} end(E36, E37)); {'Idris.Text.Parser.Core.Try', E38} -> (fun (V64) -> {'Idris.Text.Parser.Core.Try', ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V64))} end(E38)); {'Idris.Text.Parser.Core.MustWork', E39} -> (fun (V65) -> {'Idris.Text.Parser.Core.MustWork', ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V65))} end(E39)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.Terminal', E34, E35} -> (fun (V66, V67) -> {'Idris.Text.Parser.Core.Terminal', V66, fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V4, (V67(V68)))) end} end(E34, E35)); _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E30, E31, E32, E33} -> (fun (V69, V70, V71, V72) -> {'Idris.Text.Parser.Core.Alt', V69, V70, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V69, V4, V71)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V70, V4, (V72()))) end} end(E30, E31, E32, E33)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E27, E28, E29} -> (fun (V73, V74, V75) -> {'Idris.Text.Parser.Core.SeqEat', V73, V74, fun () -> fun (V76) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V73, V4, ((V75())(V76)))) end end} end(E27, E28, E29)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E22, E23, E24, E25} -> (fun (V77, V78, V79, V80) -> {'Idris.Text.Parser.Core.SeqEmpty', V77, V78, V79, fun (V81) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V78, V4, (V80(V81)))) end} end(E22, E23, E24, E25)); {'Idris.Text.Parser.Core.Bounds', E26} -> (fun (V82) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V82}, fun (V83) -> {'Idris.Text.Parser.Core.Empty', (V4(V83))} end} end(E26)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V84) -> {'Idris.Text.Parser.Core.Empty', (V4(V84))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E17, E18, E19, E20} -> (fun (V85, V86, V87, V88) -> {'Idris.Text.Parser.Core.SeqEmpty', V85, V86, V87, fun (V89) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V86, V4, (V88(V89)))) end} end(E17, E18, E19, E20)); {'Idris.Text.Parser.Core.Bounds', E21} -> (fun (V90) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V90}, fun (V91) -> {'Idris.Text.Parser.Core.Empty', (V4(V91))} end} end(E21)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V92) -> {'Idris.Text.Parser.Core.Empty', (V4(V92))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E13, E14, E15, E16} -> (fun (V93, V94, V95, V96) -> {'Idris.Text.Parser.Core.Alt', V93, V94, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V93, V4, V95)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V94, V4, (V96()))) end} end(E13, E14, E15, E16)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E10, E11, E12} -> (fun (V97, V98, V99) -> {'Idris.Text.Parser.Core.SeqEat', V97, V98, fun () -> fun (V100) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V97, V4, ((V99())(V100)))) end end} end(E10, E11, E12)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E5, E6, E7, E8} -> (fun (V101, V102, V103, V104) -> {'Idris.Text.Parser.Core.SeqEmpty', V101, V102, V103, fun (V105) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V102, V4, (V104(V105)))) end} end(E5, E6, E7, E8)); {'Idris.Text.Parser.Core.Bounds', E9} -> (fun (V106) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V106}, fun (V107) -> {'Idris.Text.Parser.Core.Empty', (V4(V107))} end} end(E9)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V108) -> {'Idris.Text.Parser.Core.Empty', (V4(V108))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E0, E1, E2, E3} -> (fun (V109, V110, V111, V112) -> {'Idris.Text.Parser.Core.SeqEmpty', V109, V110, V111, fun (V113) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V110, V4, (V112(V113)))) end} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Bounds', E4} -> (fun (V114) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V114}, fun (V115) -> {'Idris.Text.Parser.Core.Empty', (V4(V115))} end} end(E4)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V116) -> {'Idris.Text.Parser.Core.Empty', (V4(V116))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end.
'dn--un--__Impl_Functor_((Grammar $tok) $c)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V1, V4, V5)).
'un--try'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Try', V3}.
'un--terminal'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Terminal', V2, V3}.
'un--seq'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, V5, V6}.
'un--pure'(V0, V1, V2) -> {'Idris.Text.Parser.Core.Empty', V2}.
'un--peek'(V0) -> {'Idris.Text.Parser.Core.NextIs', <<"Unrecognised token"/utf8>>, fun (V1) -> 0 end}.
'un--parse'(V0, V1, V2, V3, V4) -> ('case--parse-2915'('erased', 'erased', V2, V4, V3, ('un--doParse'('erased', 'erased', 'erased', 1, V3, V4)))).
'un--nextIs'(V0, V1, V2) -> {'Idris.Text.Parser.Core.NextIs', V1, V2}.
'un--mustWork'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.MustWork', V3}.
'un--mapToken'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Text.Parser.Core.Empty', V6} end(E0)); {'Idris.Text.Parser.Core.Terminal', E1, E2} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Terminal', V7, fun (V9) -> (V8(('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V4, V9)))) end} end(E1, E2)); {'Idris.Text.Parser.Core.NextIs', E3, E4} -> (fun (V10, V11) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.NextIs', V10, fun (V12) -> (V11(('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V4, V12)))) end}, fun (V13) -> {'Idris.Text.Parser.Core.Empty', (V4(V13))} end} end(E3, E4)); {'Idris.Text.Parser.Core.EOF'} -> (fun () -> {'Idris.Text.Parser.Core.EOF'} end()); {'Idris.Text.Parser.Core.Fail', E5, E6} -> (fun (V14, V15) -> {'Idris.Text.Parser.Core.Fail', V14, V15} end(E5, E6)); {'Idris.Text.Parser.Core.Try', E7} -> (fun (V16) -> {'Idris.Text.Parser.Core.Try', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V16))} end(E7)); {'Idris.Text.Parser.Core.MustWork', E8} -> (fun (V17) -> {'Idris.Text.Parser.Core.MustWork', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V17))} end(E8)); {'Idris.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Text.Parser.Core.Commit'} end()); {'Idris.Text.Parser.Core.SeqEat', E9, E10, E11} -> (fun (V18, V19, V20) -> {'Idris.Text.Parser.Core.SeqEat', V18, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V19)), fun () -> fun (V21) -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, ((V20())(V21)))) end end} end(E9, E10, E11)); {'Idris.Text.Parser.Core.SeqEmpty', E12, E13, E14, E15} -> (fun (V22, V23, V24, V25) -> {'Idris.Text.Parser.Core.SeqEmpty', V22, V23, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V24)), fun (V26) -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V25(V26)))) end} end(E12, E13, E14, E15)); {'Idris.Text.Parser.Core.Alt', E16, E17, E18, E19} -> (fun (V27, V28, V29, V30) -> {'Idris.Text.Parser.Core.Alt', V27, V28, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V29)), fun () -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V30()))) end} end(E16, E17, E18, E19)); {'Idris.Text.Parser.Core.Bounds', E20} -> (fun (V31) -> {'Idris.Text.Parser.Core.Bounds', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V31))} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--join'(V0, V1, V2, V3, V4) -> case V2 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, V3, V4, fun (V5) -> V5 end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', V3, V4, fun () -> fun (V6) -> V6 end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fatalError'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Fail', 0, V3}.
'un--fail'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Fail', 1, V3}.
'un--eof'(V0) -> {'Idris.Text.Parser.Core.EOF'}.
'un--doParse'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Text.Parser.Core.Res', V3, ('Idris.Idris2.Text.Bounded':'un--irrelevantBounds'('erased', V6)), V5} end(E0)); {'Idris.Text.Parser.Core.Fail', E1, E2} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Failure', V3, V7, V8, V5} end(E1, E2)); {'Idris.Text.Parser.Core.Try', E3} -> (fun (V9) -> ('case--doParse-2117'('erased', 'erased', 'erased', V9, V5, V3, ('un--doParse'('erased', 'erased', 'erased', V3, V9, V5)))) end(E3)); {'Idris.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Text.Parser.Core.Res', 0, ('Idris.Idris2.Text.Bounded':'un--irrelevantBounds'('erased', {'Idris.Builtin.MkUnit'})), V5} end()); {'Idris.Text.Parser.Core.MustWork', E4} -> (fun (V10) -> ('case--doParse-2178'('erased', 'erased', 'erased', V10, V5, V3, ('un--doParse'('erased', 'erased', 'erased', V3, V10, V5)))) end(E4)); {'Idris.Text.Parser.Core.Terminal', E5, E6} -> (fun (V11, V12) -> case V5 of [] -> {'Idris.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, []}; [E7 | E8] -> (fun (V13, V14) -> ('case--doParse-2241'('erased', 'erased', V12, V11, V13, V14, V3, 'erased', (V12(V13)))) end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); {'Idris.Text.Parser.Core.EOF'} -> (fun () -> case V5 of [] -> {'Idris.Text.Parser.Core.Res', V3, ('Idris.Idris2.Text.Bounded':'un--irrelevantBounds'('erased', {'Idris.Builtin.MkUnit'})), []}; [E9 | E10] -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.Failure', V3, 1, <<"Expected end of input"/utf8>>, [V15 | V16]} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Text.Parser.Core.NextIs', E11, E12} -> (fun (V17, V18) -> case V5 of [] -> {'Idris.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, []}; [E13 | E14] -> (fun (V19, V20) -> ('case--doParse-2352'('erased', V18, V17, V19, V20, V3, 'erased', 'erased', (V18(V19)))) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); {'Idris.Text.Parser.Core.Alt', E15, E16, E17, E18} -> (fun (V21, V22, V23, V24) -> ('case--doParse-2415'('erased', 'erased', V22, V24, V21, V23, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', 1, V23, V5)))) end(E15, E16, E17, E18)); {'Idris.Text.Parser.Core.SeqEmpty', E19, E20, E21, E22} -> (fun (V25, V26, V27, V28) -> ('case--doParse-2550'('erased', 'erased', 'erased', V25, V26, V28, V27, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V27, V5)))) end(E19, E20, E21, E22)); {'Idris.Text.Parser.Core.SeqEat', E23, E24, E25} -> (fun (V29, V30, V31) -> ('case--doParse-2708'('erased', 'erased', 'erased', V29, V31, V30, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V30, V5)))) end(E23, E24, E25)); {'Idris.Text.Parser.Core.Bounds', E26} -> (fun (V32) -> ('case--doParse-2853'('erased', 'erased', 'erased', V32, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V32, V5)))) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commit'(V0) -> {'Idris.Text.Parser.Core.Commit'}.
'un--bounds'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Bounds', V3}.
'un-->>='(V0, V1, V2, V3, V4) -> case V3 of 1 -> fun (V5) -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, V4, V5, V6} end end; 0 -> fun (V7) -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', V4, V7, V8} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--<||>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.Alt', V3, V4, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V9, V10)) end end end end, fun (V11) -> {'Idris.Prelude.Types.Left', V11} end, V5)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V14, V15)) end end end end, fun (V16) -> {'Idris.Prelude.Types.Right', V16} end, (V6()))) end}.
'un--<|>'(V0, V1, V2, V3, V4, V5) -> {'Idris.Text.Parser.Core.Alt', V2, V3, V4, V5}.
'un--<*>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, V5, fun (V7) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V7, V6)) end}.
'un--<*'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> V7 end end, V5)), fun (V9) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V9, V6)) end}.
'un--*>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> V8 end end, V5)), fun (V9) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V9, V6)) end}.
