-module('Idris.Idris2.TTImp.Elab.Ambiguity').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkAlternative-6903'/23,
  'case--case block in checkAlternative-6781'/20,
  'case--case block in checkAlternative-6686'/17,
  'case--checkAlternative-6606'/15,
  'case--checkAlternative-6366'/24,
  'case--checkAlternative-6205'/20,
  'case--checkAlternative-6107'/16,
  'case--addAmbig-6056'/4,
  'case--pruneByType-5893'/13,
  'case--pruneByType-5787'/12,
  'case--filterCore-5653'/6,
  'case--notOverloadable,notOverloadableFn-5584'/6,
  'case--couldBe-5491'/7,
  'case--couldBe-5418'/8,
  'case--couldBe-5325'/11,
  'case--couldBeName-5237'/6,
  'case--mightMatch-5113'/8,
  'case--case block in mightMatch-5011'/14,
  'case--mightMatch-4975'/14,
  'case--case block in mightMatch-4873'/14,
  'case--mightMatch-4837'/14,
  'case--mightMatchArgs-4751'/8,
  'case--mightMatchArg-4696'/8,
  'case--case block in case block in case block in expandAmbigName-4361'/20,
  'case--case block in case block in expandAmbigName-4247'/19,
  'case--case block in case block in expandAmbigName-4096'/14,
  'case--case block in expandAmbigName-4063'/13,
  'case--expandAmbigName-3980'/12,
  'case--case block in expandAmbigName,mkTerm-3848'/16,
  'case--expandAmbigName,mkTerm-3811'/17,
  'case--expandAmbigName,wrapDot-3703'/19,
  'case--expandAmbigName,wrapDot-3614'/19,
  'case--case block in expandAmbigName,visible-3285'/17,
  'case--expandAmbigName,visible-3248'/15,
  'case--expandAmbigName-3154'/13,
  'nested--10214-3217--in--un--wrapDot'/18,
  'nested--10214-3213--in--un--visible'/12,
  'nested--10214-3214--in--un--uniqType'/16,
  'nested--12964-5571--in--un--notOverloadableFn'/4,
  'nested--10214-3220--in--un--notLHS'/12,
  'nested--10214-3218--in--un--mkTerm'/15,
  'nested--10214-3219--in--un--mkAlt'/14,
  'nested--10214-3212--in--un--lookupUN'/14,
  'nested--10214-3216--in--un--isPrimName'/13,
  'nested--10214-3215--in--un--buildAlt'/13,
  'un--stripDelay'/2,
  'un--pruneByType'/7,
  'un--notOverloadable'/2,
  'un--mightMatchD'/5,
  'un--mightMatchArgs'/5,
  'un--mightMatchArg'/6,
  'un--mightMatch'/5,
  'un--getName'/1,
  'un--filterCore'/3,
  'un--expandAmbigName'/10,
  'un--couldBeName'/6,
  'un--couldBeFn'/5,
  'un--couldBe'/5,
  'un--checkAmbigDepth'/6,
  'un--checkAlternative'/13,
  'un--addAmbig'/3
]).
'case--case block in checkAlternative-6903'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V3 of {'Idris.TTImp.TTImp.FirstSuccess'} -> (fun () -> fun (V23) -> ('Idris.Idris2.TTImp.Elab.Check':'un--anyOne'(V0, V12, V11, V10, V9, V4, V23)) end end()); _ -> fun (V24) -> ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V12, V11, V10, V9, ('Idris.Idris2.Prelude.Basics':'un--not'(V17)), V4, V5, V24)) end end.
'case--case block in checkAlternative-6781'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V17 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V19)); 1 -> V15; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAlternative-6686'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V17) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--checkAlternative-6606'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [E30 | E31] -> (fun (V15, V16) -> case V16 of [] -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V15, V1)); _ -> fun (V17) -> begin (V31 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V18) -> begin (V19 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V12, V10, <<"altTy"/utf8>>, V18))), case V19 of {'Idris.Prelude.Types.Left', E32} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V21) -> begin (V26 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V12, V10, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V5, V21, {'Idris.Core.TT.TType', V4}, V18))), case V26 of {'Idris.Prelude.Types.Left', E34} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V28))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V29) -> fun (V30) -> {'Idris.Prelude.Types.Right', V29} end end end, V1))(V17))), case V31 of {'Idris.Prelude.Types.Left', E36} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V33) -> begin (V40 = ('case--case block in checkAlternative-6686'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V33, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E38, E39, E40, E41, E42, E43} -> (fun (V34, V35, V36, V37, V38, V39) -> V34 end(E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V12, V11, V10, V9, V4, V8, V5, V33, fun (V41) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--ambiguous'(V41)) end, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V42) -> fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E44} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V47) -> begin (V48 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V33))(V43))), case V48 of {'Idris.Prelude.Types.Left', E46} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V50) -> begin (V51 = case V42 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V50)); 1 -> V33; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V55 = begin (V52 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V12, V51))(V43))), case V52 of {'Idris.Prelude.Types.Left', E48} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V54) -> ('un--pruneByType'(V0, V12, V10, V5, V54, V2, V43)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E50} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V57) -> begin (V61 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V12, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V42)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V58)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V59, V60)) end end}, V57)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V4)), <<"\x{a}Target type "/utf8>>)))))))))))) end, V5, V51, V43))), case V61 of {'Idris.Prelude.Types.Left', E52} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V63) -> begin (V66 = case V3 of {'Idris.TTImp.TTImp.FirstSuccess'} -> (fun () -> fun (V64) -> ('Idris.Idris2.TTImp.Elab.Check':'un--anyOne'(V0, V12, V11, V10, V9, V4, V64)) end end()); _ -> fun (V65) -> ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V12, V11, V10, V9, ('Idris.Idris2.Prelude.Basics':'un--not'(V42)), V4, V5, V65)) end end), ((V66(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V67) -> {'Idris.Builtin.MkPair', ('un--getName'(V67)), fun (V68) -> begin (V69 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V12, V11, V10, V9, V8, (('un--addAmbig'('erased', V57, ('un--getName'(V67))))(V7)), V6, V5, V67, {'Idris.Prelude.Types.Just', V51}))(V68))), case V69 of {'Idris.Prelude.Types.Left', E54} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V12, V10, V40, {'Idris.Core.Unify.Normal'}, V68))), case V72 of {'Idris.Prelude.Types.Left', E56} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V12, V10, V40, {'Idris.Core.Unify.Normal'}, V68))), case V75 of {'Idris.Prelude.Types.Left', E58} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V77) -> begin (V81 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V78)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V79, V80)) end end}, ('un--getName'(V67)))), <<" success"/utf8>>)) end))(V68))), case V81 of {'Idris.Prelude.Types.Left', E60} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V83) -> {'Idris.Prelude.Types.Right', V71} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end} end, V57))))(V43)) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V17)) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E30, E31)); _ -> fun (V84) -> begin (V98 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V85) -> begin (V86 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V12, V10, <<"altTy"/utf8>>, V85))), case V86 of {'Idris.Prelude.Types.Left', E0} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V88) -> begin (V93 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V12, V10, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V89, V90)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V91, V92)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V5, V88, {'Idris.Core.TT.TType', V4}, V85))), case V93 of {'Idris.Prelude.Types.Left', E2} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V95) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V95))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V96) -> fun (V97) -> {'Idris.Prelude.Types.Right', V96} end end end, V1))(V84))), case V98 of {'Idris.Prelude.Types.Left', E4} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V100) -> begin (V107 = ('case--case block in checkAlternative-6686'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V100, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E6, E7, E8, E9, E10, E11} -> (fun (V101, V102, V103, V104, V105, V106) -> V101 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V12, V11, V10, V9, V4, V8, V5, V100, fun (V108) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--ambiguous'(V108)) end, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V109) -> fun (V110) -> begin (V112 = begin (V111 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V111} end), case V112 of {'Idris.Prelude.Types.Left', E12} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V114) -> begin (V115 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V100))(V110))), case V115 of {'Idris.Prelude.Types.Left', E14} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V117) -> begin (V118 = case V109 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V117)); 1 -> V100; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V122 = begin (V119 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V12, V118))(V110))), case V119 of {'Idris.Prelude.Types.Left', E16} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V121) -> ('un--pruneByType'(V0, V12, V10, V5, V121, V2, V110)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V122 of {'Idris.Prelude.Types.Left', E18} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V124) -> begin (V128 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V12, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V109)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V125) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V126, V127)) end end}, V124)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V4)), <<"\x{a}Target type "/utf8>>)))))))))))) end, V5, V118, V110))), case V128 of {'Idris.Prelude.Types.Left', E20} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V130) -> begin (V133 = case V3 of {'Idris.TTImp.TTImp.FirstSuccess'} -> (fun () -> fun (V131) -> ('Idris.Idris2.TTImp.Elab.Check':'un--anyOne'(V0, V12, V11, V10, V9, V4, V131)) end end()); _ -> fun (V132) -> ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V12, V11, V10, V9, ('Idris.Idris2.Prelude.Basics':'un--not'(V109)), V4, V5, V132)) end end), ((V133(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V134) -> {'Idris.Builtin.MkPair', ('un--getName'(V134)), fun (V135) -> begin (V136 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V12, V11, V10, V9, V8, (('un--addAmbig'('erased', V124, ('un--getName'(V134))))(V7)), V6, V5, V134, {'Idris.Prelude.Types.Just', V118}))(V135))), case V136 of {'Idris.Prelude.Types.Left', E22} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V138) -> begin (V139 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V12, V10, V107, {'Idris.Core.Unify.Normal'}, V135))), case V139 of {'Idris.Prelude.Types.Left', E24} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V141) -> begin (V142 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V12, V10, V107, {'Idris.Core.Unify.Normal'}, V135))), case V142 of {'Idris.Prelude.Types.Left', E26} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V144) -> begin (V148 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V145) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V145)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V146, V147)) end end}, ('un--getName'(V134)))), <<" success"/utf8>>)) end))(V135))), case V148 of {'Idris.Prelude.Types.Left', E28} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V150) -> {'Idris.Prelude.Types.Right', V138} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end} end, V124))))(V110)) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V84)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkAlternative-6366'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V16 of 0 -> fun (V24) -> ('Idris.Idris2.TTImp.Elab.Check':'un--try'('erased', V0, V12, V11, V10, V9, ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V12, V11, V10, V9, 1, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> {'Idris.Builtin.MkPair', ('un--getName'(V25)), ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V12, V11, V10, V9, V8, (('un--addAmbig'('erased', V22, ('un--getName'(V25))))(V7)), V6, V5, V25, {'Idris.Prelude.Types.Just', V20}))} end, V22)))), fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"All failed, running default"/utf8>> end))(V26))), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V12, V11, V10, V9, V8, (('un--addAmbig'('erased', V22, ('un--getName'(V1))))(V7)), V6, V5, V1, {'Idris.Prelude.Types.Just', V20}))(V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V24)) end; 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V12, V11, V10, V9, 0, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V30) -> {'Idris.Builtin.MkPair', ('un--getName'(V30)), ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V12, V11, V10, V9, V8, (('un--addAmbig'('erased', V22, ('un--getName'(V30))))(V7)), V6, V5, V30, {'Idris.Prelude.Types.Just', V20}))} end, V22)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAlternative-6205'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V16 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V19)); 1 -> V14; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAlternative-6107'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V16) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--addAmbig-6056'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V4, V5, V6, V7, V8, V9) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V4, V5, V6, V7, V8, [V2 | V9]} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--pruneByType-5893'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', V1} end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', V11} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--pruneByType-5787'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> fun (V12) -> begin (V14 = (('un--filterCore'('erased', fun (V13) -> ('un--notOverloadable'(V6, V13)) end, V8))(V12))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V32 = (('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"elab.prune"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Keep "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Bool'(V19, V20)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V21) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V22, V23)) end end}}, V17)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V26) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Bool'(V27, V28)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V29) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V30, V31)) end end}}, V24, V25)) end end}, V16)))) end))(V12))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V35) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V35)) end, V16))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V36) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V37) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V37)) end, V8))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--filterCore-5653'(V0, V1, V2, V3, V4, V5) -> case V4 of 0 -> fun (V6) -> {'Idris.Prelude.Types.Right', [V1 | V5]} end; 1 -> fun (V7) -> {'Idris.Prelude.Types.Right', V5} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--notOverloadable,notOverloadableFn-5584'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', 1} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--couldBe-5491'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.TTImp.Elab.Ambiguity.Concrete'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 0, V1}}} end end()); {'Idris.TTImp.Elab.Ambiguity.Poly'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V1}}} end end()); {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--couldBe-5418'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.Elab.Ambiguity.Concrete'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 0, V2}}} end end()); {'Idris.TTImp.Elab.Ambiguity.Poly'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V2}}} end end()); {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--couldBe-5325'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.Elab.Ambiguity.Concrete'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 0, V5}}} end end()); {'Idris.TTImp.Elab.Ambiguity.Poly'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V5}}} end end()); {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--couldBeName-5237'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise':'un--nf'(V4, [], V3, {'Idris.Core.Env.Nil'}, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> (('un--mightMatchD'(V4, V0, V3, V2, V11))(V8)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mightMatch-5113'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}} end; 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mightMatch-5011'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}} end; 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mightMatch-4975'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V15 = (('un--mightMatchArgs'(V12, V0, V11, V3, V7))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mightMatch-4873'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}} end; 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mightMatch-4837'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V15 = (('un--mightMatchArgs'(V12, V0, V11, V3, V7))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mightMatchArgs-4751'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> ('un--mightMatchArgs'(V6, V0, V5, V2, V4)); 1 -> fun (V8) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mightMatchArg-4696'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> 1 end()); _ -> 0 end.
'case--case block in case block in case block in expandAmbigName-4361'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of [] -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Failed to find "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V5)))) end))(V20))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E2 | E3] -> (fun (V24, V25) -> case V25 of [] -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Only one "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V24)))))) end))(V26))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V24))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V2, ('nested--10214-3214--in--un--uniqType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V14, V15, V1, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V31) -> ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V31)) end, V19))}} end end end(E2, E3)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V2, ('nested--10214-3214--in--un--uniqType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V14, V15, V1, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V33) -> ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V33)) end, V19))}} end end.
'case--case block in case block in expandAmbigName-4247'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"unambiguous: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V19)))))) end))(V20))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V19))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V24) -> begin (V51 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V1, case V11 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V25 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V24))), case V51 of {'Idris.Prelude.Types.Left', E29} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V53) -> begin (V55 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V54) -> ('nested--10214-3213--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V54)) end, V53))(V24))), case V55 of {'Idris.Prelude.Types.Left', E31} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V57) -> case V57 of [] -> begin (V58 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Failed to find "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V5)))) end))(V24))), case V58 of {'Idris.Prelude.Types.Left', E33} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V60) -> {'Idris.Prelude.Types.Right', V5} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E35 | E36] -> (fun (V61, V62) -> case V62 of [] -> begin (V63 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Only one "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V61)))))) end))(V24))), case V63 of {'Idris.Prelude.Types.Left', E37} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V61))} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V2, ('nested--10214-3214--in--un--uniqType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V14, V15, V1, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V66) -> ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V66)) end, V57))}} end end(E35, E36)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V2, ('nested--10214-3214--in--un--uniqType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V14, V15, V1, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V67) -> ('nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12, V67)) end, V57))}} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in expandAmbigName-4096'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Defined in env "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1)))) end))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Right', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IMustUnify', V2, {'Idris.Core.Core.VarApplied'}, V5}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in expandAmbigName-4063'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> ('case--case block in case block in expandAmbigName-4096'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Data.List':'un--isNil'('erased', V4)), fun () -> ('nested--10214-3220--in--un--notLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V8)) end)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--fromIntegerName'(V10, V14))), case V19 of {'Idris.Prelude.Types.Left', E3} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--fromStringName'(V10, V14))), case V22 of {'Idris.Prelude.Types.Left', E5} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--fromCharName'(V10, V14))), case V25 of {'Idris.Prelude.Types.Left', E7} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V27) -> begin (V29 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V28) -> V28 end, [V21 | [V24 | [V27 | []]]]))), begin (V30 = ('nested--10214-3216--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V29, V1))), (('case--case block in case block in expandAmbigName-4247'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V18, V21, V24, V27, V29, V30, ('nested--10214-3212--in--un--lookupUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, 'erased', ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1)), case V18 of {'Idris.TTImp.Elab.Check.MkEState', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V43 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V14)) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandAmbigName-3980'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Nested "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1)))) end))(V13))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Right', V5} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E3} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V21) -> (('case--case block in expandAmbigName-4063'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V21, ('Idris.Idris2.Core.Env':'un--defined'(V0, V1, V6))))(V17)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in expandAmbigName,mkTerm-3848'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V8 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V16) -> V15 end(E0)); _ -> {'Idris.TTImp.TTImp.IRunElab', V2, {'Idris.TTImp.TTImp.ICoerced', V2, V15}} end.
'case--expandAmbigName,mkTerm-3811'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> case V8 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V17) -> V15 end(E0)); _ -> {'Idris.TTImp.TTImp.IRunElab', V2, {'Idris.TTImp.TTImp.ICoerced', V2, V15}} end; 1 -> V15; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandAmbigName,wrapDot-3703'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> V14; 1 -> {'Idris.TTImp.TTImp.IMustUnify', V2, {'Idris.Core.Core.NotConstructor'}, V14}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandAmbigName,wrapDot-3614'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> V14; 1 -> {'Idris.TTImp.TTImp.IMustUnify', V2, {'Idris.Core.Core.NotConstructor'}, V14}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in expandAmbigName,visible-3285'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--getNS'(V10, V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V10, V17))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Context':'un--visibleInAny'([V20 | V23], {'Idris.Core.Name.NS', V15, V14}, case V13 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V33 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandAmbigName,visible-3248'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--isVisible'(V10, V15, V17))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> case V20 of 0 -> begin (V21 = ('Idris.Idris2.Core.Context':'un--getNS'(V10, V17))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V10, V17))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Context':'un--visibleInAny'([V23 | V26], {'Idris.Core.Name.NS', V15, V16}, case V13 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V36 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> fun (V48) -> {'Idris.Prelude.Types.Right', 0} end end.
'case--expandAmbigName-3154'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IMustUnify', V3, {'Idris.Core.Core.NonLinearVar'}, V6}} end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', V6} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-3217--in--un--wrapDot'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Idris.Core.Context.DCon', E42, E43, E44} -> (fun (V18, V19, V20) -> V17 end(E42, E43, E44)); {'Idris.Core.Context.TCon', E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28) -> V17 end(E45, E46, E47, E48, E49, E50, E51, E52)); _ -> case V13 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V29) -> case V15 of [E14 | E15] -> (fun (V30, V31) -> case V31 of [] -> ('case--expandAmbigName,wrapDot-3614'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V16, V29, V30, V17, V14, V12, V11, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V14, {'Idris.Core.Name.Resolved', case V12 of {'Idris.TTImp.Elab.Check.MkEState', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V33 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})), fun () -> V11 end)))); _ -> ('case--expandAmbigName,wrapDot-3703'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V16, V29, V17, V14, V12, V11, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V14, {'Idris.Core.Name.Resolved', case V12 of {'Idris.TTImp.Elab.Check.MkEState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V46 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})))) end end(E14, E15)); _ -> ('case--expandAmbigName,wrapDot-3703'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V16, V29, V17, V14, V12, V11, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V14, {'Idris.Core.Name.Resolved', case V12 of {'Idris.TTImp.Elab.Check.MkEState', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V59 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})))) end end(E0)); _ -> V17 end end.
'nested--10214-3213--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> ('case--expandAmbigName,visible-3248'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V14, V15, case V15 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V17 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-3214--in--un--uniqType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V11 of {'Idris.Prelude.Types.Just', E80} -> (fun (V16) -> case V15 of [E161 | E162] -> (fun (V17, V18) -> case V17 of {'Idris.Builtin.MkPair', E243, E244} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E325, E326} -> (fun (V21, V22) -> case V22 of {'Idris.TTImp.TTImp.IPrimVal', E407, E408} -> (fun (V23, V24) -> case V24 of {'Idris.Core.TT.BI', E489} -> (fun (V25) -> case V18 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V23, {'Idris.Core.TT.BI', V25}}}; _ -> case V12 of {'Idris.Prelude.Types.Just', E500} -> (fun (V26) -> case V15 of [E511 | E512] -> (fun (V27, V28) -> case V27 of {'Idris.Builtin.MkPair', E523, E524} -> (fun (V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E535, E536} -> (fun (V31, V32) -> case V32 of {'Idris.TTImp.TTImp.IPrimVal', E547, E548} -> (fun (V33, V34) -> case V34 of {'Idris.Core.TT.Str', E559} -> (fun (V35) -> case V28 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V33, {'Idris.Core.TT.Str', V35}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E560} -> (fun (V36) -> case V15 of [E561 | E562] -> (fun (V37, V38) -> case V37 of {'Idris.Builtin.MkPair', E563, E564} -> (fun (V39, V40) -> case V40 of {'Idris.Builtin.MkPair', E565, E566} -> (fun (V41, V42) -> case V42 of {'Idris.TTImp.TTImp.IPrimVal', E567, E568} -> (fun (V43, V44) -> case V44 of {'Idris.Core.TT.Ch', E569} -> (fun (V45) -> case V38 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V43, {'Idris.Core.TT.Ch', V45}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E569)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E567, E568)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E565, E566)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E563, E564)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E561, E562)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E560)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E559)); _ -> case V13 of {'Idris.Prelude.Types.Just', E549} -> (fun (V46) -> case V15 of [E550 | E551] -> (fun (V47, V48) -> case V47 of {'Idris.Builtin.MkPair', E552, E553} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E554, E555} -> (fun (V51, V52) -> case V52 of {'Idris.TTImp.TTImp.IPrimVal', E556, E557} -> (fun (V53, V54) -> case V54 of {'Idris.Core.TT.Ch', E558} -> (fun (V55) -> case V48 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V53, {'Idris.Core.TT.Ch', V55}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E558)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E556, E557)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E554, E555)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E552, E553)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E550, E551)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E549)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E547, E548)); _ -> case V13 of {'Idris.Prelude.Types.Just', E537} -> (fun (V56) -> case V15 of [E538 | E539] -> (fun (V57, V58) -> case V57 of {'Idris.Builtin.MkPair', E540, E541} -> (fun (V59, V60) -> case V60 of {'Idris.Builtin.MkPair', E542, E543} -> (fun (V61, V62) -> case V62 of {'Idris.TTImp.TTImp.IPrimVal', E544, E545} -> (fun (V63, V64) -> case V64 of {'Idris.Core.TT.Ch', E546} -> (fun (V65) -> case V58 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V63, {'Idris.Core.TT.Ch', V65}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E546)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E544, E545)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E542, E543)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E540, E541)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E538, E539)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E537)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E535, E536)); _ -> case V13 of {'Idris.Prelude.Types.Just', E525} -> (fun (V66) -> case V15 of [E526 | E527] -> (fun (V67, V68) -> case V67 of {'Idris.Builtin.MkPair', E528, E529} -> (fun (V69, V70) -> case V70 of {'Idris.Builtin.MkPair', E530, E531} -> (fun (V71, V72) -> case V72 of {'Idris.TTImp.TTImp.IPrimVal', E532, E533} -> (fun (V73, V74) -> case V74 of {'Idris.Core.TT.Ch', E534} -> (fun (V75) -> case V68 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V73, {'Idris.Core.TT.Ch', V75}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E534)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E532, E533)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E530, E531)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E528, E529)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E526, E527)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E525)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E523, E524)); _ -> case V13 of {'Idris.Prelude.Types.Just', E513} -> (fun (V76) -> case V15 of [E514 | E515] -> (fun (V77, V78) -> case V77 of {'Idris.Builtin.MkPair', E516, E517} -> (fun (V79, V80) -> case V80 of {'Idris.Builtin.MkPair', E518, E519} -> (fun (V81, V82) -> case V82 of {'Idris.TTImp.TTImp.IPrimVal', E520, E521} -> (fun (V83, V84) -> case V84 of {'Idris.Core.TT.Ch', E522} -> (fun (V85) -> case V78 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V83, {'Idris.Core.TT.Ch', V85}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E522)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E520, E521)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E518, E519)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E516, E517)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E514, E515)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E513)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E511, E512)); _ -> case V13 of {'Idris.Prelude.Types.Just', E501} -> (fun (V86) -> case V15 of [E502 | E503] -> (fun (V87, V88) -> case V87 of {'Idris.Builtin.MkPair', E504, E505} -> (fun (V89, V90) -> case V90 of {'Idris.Builtin.MkPair', E506, E507} -> (fun (V91, V92) -> case V92 of {'Idris.TTImp.TTImp.IPrimVal', E508, E509} -> (fun (V93, V94) -> case V94 of {'Idris.Core.TT.Ch', E510} -> (fun (V95) -> case V88 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V93, {'Idris.Core.TT.Ch', V95}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E510)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E508, E509)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E506, E507)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E504, E505)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E502, E503)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E501)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E500)); _ -> case V13 of {'Idris.Prelude.Types.Just', E490} -> (fun (V96) -> case V15 of [E491 | E492] -> (fun (V97, V98) -> case V97 of {'Idris.Builtin.MkPair', E493, E494} -> (fun (V99, V100) -> case V100 of {'Idris.Builtin.MkPair', E495, E496} -> (fun (V101, V102) -> case V102 of {'Idris.TTImp.TTImp.IPrimVal', E497, E498} -> (fun (V103, V104) -> case V104 of {'Idris.Core.TT.Ch', E499} -> (fun (V105) -> case V98 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V103, {'Idris.Core.TT.Ch', V105}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E499)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E497, E498)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E495, E496)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E493, E494)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E491, E492)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E490)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end end(E489)); _ -> case V12 of {'Idris.Prelude.Types.Just', E419} -> (fun (V106) -> case V15 of [E430 | E431] -> (fun (V107, V108) -> case V107 of {'Idris.Builtin.MkPair', E442, E443} -> (fun (V109, V110) -> case V110 of {'Idris.Builtin.MkPair', E454, E455} -> (fun (V111, V112) -> case V112 of {'Idris.TTImp.TTImp.IPrimVal', E466, E467} -> (fun (V113, V114) -> case V114 of {'Idris.Core.TT.Str', E478} -> (fun (V115) -> case V108 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V113, {'Idris.Core.TT.Str', V115}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E479} -> (fun (V116) -> case V15 of [E480 | E481] -> (fun (V117, V118) -> case V117 of {'Idris.Builtin.MkPair', E482, E483} -> (fun (V119, V120) -> case V120 of {'Idris.Builtin.MkPair', E484, E485} -> (fun (V121, V122) -> case V122 of {'Idris.TTImp.TTImp.IPrimVal', E486, E487} -> (fun (V123, V124) -> case V124 of {'Idris.Core.TT.Ch', E488} -> (fun (V125) -> case V118 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V123, {'Idris.Core.TT.Ch', V125}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E488)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E486, E487)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E484, E485)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E482, E483)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E480, E481)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E479)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E478)); _ -> case V13 of {'Idris.Prelude.Types.Just', E468} -> (fun (V126) -> case V15 of [E469 | E470] -> (fun (V127, V128) -> case V127 of {'Idris.Builtin.MkPair', E471, E472} -> (fun (V129, V130) -> case V130 of {'Idris.Builtin.MkPair', E473, E474} -> (fun (V131, V132) -> case V132 of {'Idris.TTImp.TTImp.IPrimVal', E475, E476} -> (fun (V133, V134) -> case V134 of {'Idris.Core.TT.Ch', E477} -> (fun (V135) -> case V128 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V133, {'Idris.Core.TT.Ch', V135}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E477)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E475, E476)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E473, E474)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E471, E472)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E469, E470)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E468)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E466, E467)); _ -> case V13 of {'Idris.Prelude.Types.Just', E456} -> (fun (V136) -> case V15 of [E457 | E458] -> (fun (V137, V138) -> case V137 of {'Idris.Builtin.MkPair', E459, E460} -> (fun (V139, V140) -> case V140 of {'Idris.Builtin.MkPair', E461, E462} -> (fun (V141, V142) -> case V142 of {'Idris.TTImp.TTImp.IPrimVal', E463, E464} -> (fun (V143, V144) -> case V144 of {'Idris.Core.TT.Ch', E465} -> (fun (V145) -> case V138 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V143, {'Idris.Core.TT.Ch', V145}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E465)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E463, E464)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E461, E462)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E459, E460)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E457, E458)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E456)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E454, E455)); _ -> case V13 of {'Idris.Prelude.Types.Just', E444} -> (fun (V146) -> case V15 of [E445 | E446] -> (fun (V147, V148) -> case V147 of {'Idris.Builtin.MkPair', E447, E448} -> (fun (V149, V150) -> case V150 of {'Idris.Builtin.MkPair', E449, E450} -> (fun (V151, V152) -> case V152 of {'Idris.TTImp.TTImp.IPrimVal', E451, E452} -> (fun (V153, V154) -> case V154 of {'Idris.Core.TT.Ch', E453} -> (fun (V155) -> case V148 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V153, {'Idris.Core.TT.Ch', V155}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E453)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E451, E452)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E449, E450)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E447, E448)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E445, E446)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E444)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E442, E443)); _ -> case V13 of {'Idris.Prelude.Types.Just', E432} -> (fun (V156) -> case V15 of [E433 | E434] -> (fun (V157, V158) -> case V157 of {'Idris.Builtin.MkPair', E435, E436} -> (fun (V159, V160) -> case V160 of {'Idris.Builtin.MkPair', E437, E438} -> (fun (V161, V162) -> case V162 of {'Idris.TTImp.TTImp.IPrimVal', E439, E440} -> (fun (V163, V164) -> case V164 of {'Idris.Core.TT.Ch', E441} -> (fun (V165) -> case V158 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V163, {'Idris.Core.TT.Ch', V165}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E441)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E439, E440)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E437, E438)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E435, E436)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E433, E434)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E432)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E430, E431)); _ -> case V13 of {'Idris.Prelude.Types.Just', E420} -> (fun (V166) -> case V15 of [E421 | E422] -> (fun (V167, V168) -> case V167 of {'Idris.Builtin.MkPair', E423, E424} -> (fun (V169, V170) -> case V170 of {'Idris.Builtin.MkPair', E425, E426} -> (fun (V171, V172) -> case V172 of {'Idris.TTImp.TTImp.IPrimVal', E427, E428} -> (fun (V173, V174) -> case V174 of {'Idris.Core.TT.Ch', E429} -> (fun (V175) -> case V168 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V173, {'Idris.Core.TT.Ch', V175}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E429)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E427, E428)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E425, E426)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E423, E424)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E421, E422)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E420)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E419)); _ -> case V13 of {'Idris.Prelude.Types.Just', E409} -> (fun (V176) -> case V15 of [E410 | E411] -> (fun (V177, V178) -> case V177 of {'Idris.Builtin.MkPair', E412, E413} -> (fun (V179, V180) -> case V180 of {'Idris.Builtin.MkPair', E414, E415} -> (fun (V181, V182) -> case V182 of {'Idris.TTImp.TTImp.IPrimVal', E416, E417} -> (fun (V183, V184) -> case V184 of {'Idris.Core.TT.Ch', E418} -> (fun (V185) -> case V178 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V183, {'Idris.Core.TT.Ch', V185}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E418)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E416, E417)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E414, E415)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E412, E413)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E410, E411)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E409)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end end(E407, E408)); _ -> case V12 of {'Idris.Prelude.Types.Just', E337} -> (fun (V186) -> case V15 of [E348 | E349] -> (fun (V187, V188) -> case V187 of {'Idris.Builtin.MkPair', E360, E361} -> (fun (V189, V190) -> case V190 of {'Idris.Builtin.MkPair', E372, E373} -> (fun (V191, V192) -> case V192 of {'Idris.TTImp.TTImp.IPrimVal', E384, E385} -> (fun (V193, V194) -> case V194 of {'Idris.Core.TT.Str', E396} -> (fun (V195) -> case V188 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V193, {'Idris.Core.TT.Str', V195}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E397} -> (fun (V196) -> case V15 of [E398 | E399] -> (fun (V197, V198) -> case V197 of {'Idris.Builtin.MkPair', E400, E401} -> (fun (V199, V200) -> case V200 of {'Idris.Builtin.MkPair', E402, E403} -> (fun (V201, V202) -> case V202 of {'Idris.TTImp.TTImp.IPrimVal', E404, E405} -> (fun (V203, V204) -> case V204 of {'Idris.Core.TT.Ch', E406} -> (fun (V205) -> case V198 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V203, {'Idris.Core.TT.Ch', V205}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E406)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E404, E405)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E402, E403)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E400, E401)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E398, E399)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E397)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E396)); _ -> case V13 of {'Idris.Prelude.Types.Just', E386} -> (fun (V206) -> case V15 of [E387 | E388] -> (fun (V207, V208) -> case V207 of {'Idris.Builtin.MkPair', E389, E390} -> (fun (V209, V210) -> case V210 of {'Idris.Builtin.MkPair', E391, E392} -> (fun (V211, V212) -> case V212 of {'Idris.TTImp.TTImp.IPrimVal', E393, E394} -> (fun (V213, V214) -> case V214 of {'Idris.Core.TT.Ch', E395} -> (fun (V215) -> case V208 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V213, {'Idris.Core.TT.Ch', V215}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E395)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E393, E394)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E391, E392)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E389, E390)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E387, E388)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E386)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E384, E385)); _ -> case V13 of {'Idris.Prelude.Types.Just', E374} -> (fun (V216) -> case V15 of [E375 | E376] -> (fun (V217, V218) -> case V217 of {'Idris.Builtin.MkPair', E377, E378} -> (fun (V219, V220) -> case V220 of {'Idris.Builtin.MkPair', E379, E380} -> (fun (V221, V222) -> case V222 of {'Idris.TTImp.TTImp.IPrimVal', E381, E382} -> (fun (V223, V224) -> case V224 of {'Idris.Core.TT.Ch', E383} -> (fun (V225) -> case V218 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V223, {'Idris.Core.TT.Ch', V225}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E383)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E381, E382)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E379, E380)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E377, E378)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E375, E376)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E374)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E372, E373)); _ -> case V13 of {'Idris.Prelude.Types.Just', E362} -> (fun (V226) -> case V15 of [E363 | E364] -> (fun (V227, V228) -> case V227 of {'Idris.Builtin.MkPair', E365, E366} -> (fun (V229, V230) -> case V230 of {'Idris.Builtin.MkPair', E367, E368} -> (fun (V231, V232) -> case V232 of {'Idris.TTImp.TTImp.IPrimVal', E369, E370} -> (fun (V233, V234) -> case V234 of {'Idris.Core.TT.Ch', E371} -> (fun (V235) -> case V228 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V233, {'Idris.Core.TT.Ch', V235}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E371)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E369, E370)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E367, E368)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E365, E366)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E363, E364)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E362)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E360, E361)); _ -> case V13 of {'Idris.Prelude.Types.Just', E350} -> (fun (V236) -> case V15 of [E351 | E352] -> (fun (V237, V238) -> case V237 of {'Idris.Builtin.MkPair', E353, E354} -> (fun (V239, V240) -> case V240 of {'Idris.Builtin.MkPair', E355, E356} -> (fun (V241, V242) -> case V242 of {'Idris.TTImp.TTImp.IPrimVal', E357, E358} -> (fun (V243, V244) -> case V244 of {'Idris.Core.TT.Ch', E359} -> (fun (V245) -> case V238 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V243, {'Idris.Core.TT.Ch', V245}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E359)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E357, E358)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E355, E356)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E353, E354)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E351, E352)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E350)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E348, E349)); _ -> case V13 of {'Idris.Prelude.Types.Just', E338} -> (fun (V246) -> case V15 of [E339 | E340] -> (fun (V247, V248) -> case V247 of {'Idris.Builtin.MkPair', E341, E342} -> (fun (V249, V250) -> case V250 of {'Idris.Builtin.MkPair', E343, E344} -> (fun (V251, V252) -> case V252 of {'Idris.TTImp.TTImp.IPrimVal', E345, E346} -> (fun (V253, V254) -> case V254 of {'Idris.Core.TT.Ch', E347} -> (fun (V255) -> case V248 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V253, {'Idris.Core.TT.Ch', V255}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E347)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E345, E346)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E343, E344)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E341, E342)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E339, E340)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E338)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E337)); _ -> case V13 of {'Idris.Prelude.Types.Just', E327} -> (fun (V256) -> case V15 of [E328 | E329] -> (fun (V257, V258) -> case V257 of {'Idris.Builtin.MkPair', E330, E331} -> (fun (V259, V260) -> case V260 of {'Idris.Builtin.MkPair', E332, E333} -> (fun (V261, V262) -> case V262 of {'Idris.TTImp.TTImp.IPrimVal', E334, E335} -> (fun (V263, V264) -> case V264 of {'Idris.Core.TT.Ch', E336} -> (fun (V265) -> case V258 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V263, {'Idris.Core.TT.Ch', V265}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E336)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E334, E335)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E332, E333)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E330, E331)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E328, E329)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E327)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end end(E325, E326)); _ -> case V12 of {'Idris.Prelude.Types.Just', E255} -> (fun (V266) -> case V15 of [E266 | E267] -> (fun (V267, V268) -> case V267 of {'Idris.Builtin.MkPair', E278, E279} -> (fun (V269, V270) -> case V270 of {'Idris.Builtin.MkPair', E290, E291} -> (fun (V271, V272) -> case V272 of {'Idris.TTImp.TTImp.IPrimVal', E302, E303} -> (fun (V273, V274) -> case V274 of {'Idris.Core.TT.Str', E314} -> (fun (V275) -> case V268 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V273, {'Idris.Core.TT.Str', V275}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E315} -> (fun (V276) -> case V15 of [E316 | E317] -> (fun (V277, V278) -> case V277 of {'Idris.Builtin.MkPair', E318, E319} -> (fun (V279, V280) -> case V280 of {'Idris.Builtin.MkPair', E320, E321} -> (fun (V281, V282) -> case V282 of {'Idris.TTImp.TTImp.IPrimVal', E322, E323} -> (fun (V283, V284) -> case V284 of {'Idris.Core.TT.Ch', E324} -> (fun (V285) -> case V278 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V283, {'Idris.Core.TT.Ch', V285}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E324)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E322, E323)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E320, E321)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E318, E319)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E316, E317)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E315)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E314)); _ -> case V13 of {'Idris.Prelude.Types.Just', E304} -> (fun (V286) -> case V15 of [E305 | E306] -> (fun (V287, V288) -> case V287 of {'Idris.Builtin.MkPair', E307, E308} -> (fun (V289, V290) -> case V290 of {'Idris.Builtin.MkPair', E309, E310} -> (fun (V291, V292) -> case V292 of {'Idris.TTImp.TTImp.IPrimVal', E311, E312} -> (fun (V293, V294) -> case V294 of {'Idris.Core.TT.Ch', E313} -> (fun (V295) -> case V288 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V293, {'Idris.Core.TT.Ch', V295}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E313)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E311, E312)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E309, E310)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E307, E308)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E305, E306)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E304)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E302, E303)); _ -> case V13 of {'Idris.Prelude.Types.Just', E292} -> (fun (V296) -> case V15 of [E293 | E294] -> (fun (V297, V298) -> case V297 of {'Idris.Builtin.MkPair', E295, E296} -> (fun (V299, V300) -> case V300 of {'Idris.Builtin.MkPair', E297, E298} -> (fun (V301, V302) -> case V302 of {'Idris.TTImp.TTImp.IPrimVal', E299, E300} -> (fun (V303, V304) -> case V304 of {'Idris.Core.TT.Ch', E301} -> (fun (V305) -> case V298 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V303, {'Idris.Core.TT.Ch', V305}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E301)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E299, E300)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E297, E298)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E295, E296)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E293, E294)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E292)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E290, E291)); _ -> case V13 of {'Idris.Prelude.Types.Just', E280} -> (fun (V306) -> case V15 of [E281 | E282] -> (fun (V307, V308) -> case V307 of {'Idris.Builtin.MkPair', E283, E284} -> (fun (V309, V310) -> case V310 of {'Idris.Builtin.MkPair', E285, E286} -> (fun (V311, V312) -> case V312 of {'Idris.TTImp.TTImp.IPrimVal', E287, E288} -> (fun (V313, V314) -> case V314 of {'Idris.Core.TT.Ch', E289} -> (fun (V315) -> case V308 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V313, {'Idris.Core.TT.Ch', V315}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E289)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E287, E288)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E285, E286)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E283, E284)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E281, E282)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E280)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E278, E279)); _ -> case V13 of {'Idris.Prelude.Types.Just', E268} -> (fun (V316) -> case V15 of [E269 | E270] -> (fun (V317, V318) -> case V317 of {'Idris.Builtin.MkPair', E271, E272} -> (fun (V319, V320) -> case V320 of {'Idris.Builtin.MkPair', E273, E274} -> (fun (V321, V322) -> case V322 of {'Idris.TTImp.TTImp.IPrimVal', E275, E276} -> (fun (V323, V324) -> case V324 of {'Idris.Core.TT.Ch', E277} -> (fun (V325) -> case V318 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V323, {'Idris.Core.TT.Ch', V325}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E277)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E275, E276)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E273, E274)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E271, E272)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E269, E270)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E268)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E266, E267)); _ -> case V13 of {'Idris.Prelude.Types.Just', E256} -> (fun (V326) -> case V15 of [E257 | E258] -> (fun (V327, V328) -> case V327 of {'Idris.Builtin.MkPair', E259, E260} -> (fun (V329, V330) -> case V330 of {'Idris.Builtin.MkPair', E261, E262} -> (fun (V331, V332) -> case V332 of {'Idris.TTImp.TTImp.IPrimVal', E263, E264} -> (fun (V333, V334) -> case V334 of {'Idris.Core.TT.Ch', E265} -> (fun (V335) -> case V328 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V333, {'Idris.Core.TT.Ch', V335}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E265)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E263, E264)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E261, E262)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E259, E260)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E257, E258)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E256)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E255)); _ -> case V13 of {'Idris.Prelude.Types.Just', E245} -> (fun (V336) -> case V15 of [E246 | E247] -> (fun (V337, V338) -> case V337 of {'Idris.Builtin.MkPair', E248, E249} -> (fun (V339, V340) -> case V340 of {'Idris.Builtin.MkPair', E250, E251} -> (fun (V341, V342) -> case V342 of {'Idris.TTImp.TTImp.IPrimVal', E252, E253} -> (fun (V343, V344) -> case V344 of {'Idris.Core.TT.Ch', E254} -> (fun (V345) -> case V338 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V343, {'Idris.Core.TT.Ch', V345}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E254)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E252, E253)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E250, E251)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E248, E249)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E246, E247)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E245)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end end(E243, E244)); _ -> case V12 of {'Idris.Prelude.Types.Just', E173} -> (fun (V346) -> case V15 of [E184 | E185] -> (fun (V347, V348) -> case V347 of {'Idris.Builtin.MkPair', E196, E197} -> (fun (V349, V350) -> case V350 of {'Idris.Builtin.MkPair', E208, E209} -> (fun (V351, V352) -> case V352 of {'Idris.TTImp.TTImp.IPrimVal', E220, E221} -> (fun (V353, V354) -> case V354 of {'Idris.Core.TT.Str', E232} -> (fun (V355) -> case V348 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V353, {'Idris.Core.TT.Str', V355}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E233} -> (fun (V356) -> case V15 of [E234 | E235] -> (fun (V357, V358) -> case V357 of {'Idris.Builtin.MkPair', E236, E237} -> (fun (V359, V360) -> case V360 of {'Idris.Builtin.MkPair', E238, E239} -> (fun (V361, V362) -> case V362 of {'Idris.TTImp.TTImp.IPrimVal', E240, E241} -> (fun (V363, V364) -> case V364 of {'Idris.Core.TT.Ch', E242} -> (fun (V365) -> case V358 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V363, {'Idris.Core.TT.Ch', V365}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E242)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E240, E241)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E238, E239)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E236, E237)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E234, E235)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E233)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E232)); _ -> case V13 of {'Idris.Prelude.Types.Just', E222} -> (fun (V366) -> case V15 of [E223 | E224] -> (fun (V367, V368) -> case V367 of {'Idris.Builtin.MkPair', E225, E226} -> (fun (V369, V370) -> case V370 of {'Idris.Builtin.MkPair', E227, E228} -> (fun (V371, V372) -> case V372 of {'Idris.TTImp.TTImp.IPrimVal', E229, E230} -> (fun (V373, V374) -> case V374 of {'Idris.Core.TT.Ch', E231} -> (fun (V375) -> case V368 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V373, {'Idris.Core.TT.Ch', V375}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E231)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E229, E230)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E227, E228)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E225, E226)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E223, E224)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E222)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E220, E221)); _ -> case V13 of {'Idris.Prelude.Types.Just', E210} -> (fun (V376) -> case V15 of [E211 | E212] -> (fun (V377, V378) -> case V377 of {'Idris.Builtin.MkPair', E213, E214} -> (fun (V379, V380) -> case V380 of {'Idris.Builtin.MkPair', E215, E216} -> (fun (V381, V382) -> case V382 of {'Idris.TTImp.TTImp.IPrimVal', E217, E218} -> (fun (V383, V384) -> case V384 of {'Idris.Core.TT.Ch', E219} -> (fun (V385) -> case V378 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V383, {'Idris.Core.TT.Ch', V385}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E219)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E217, E218)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E215, E216)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E213, E214)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E211, E212)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E210)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E208, E209)); _ -> case V13 of {'Idris.Prelude.Types.Just', E198} -> (fun (V386) -> case V15 of [E199 | E200] -> (fun (V387, V388) -> case V387 of {'Idris.Builtin.MkPair', E201, E202} -> (fun (V389, V390) -> case V390 of {'Idris.Builtin.MkPair', E203, E204} -> (fun (V391, V392) -> case V392 of {'Idris.TTImp.TTImp.IPrimVal', E205, E206} -> (fun (V393, V394) -> case V394 of {'Idris.Core.TT.Ch', E207} -> (fun (V395) -> case V388 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V393, {'Idris.Core.TT.Ch', V395}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E207)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E205, E206)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E203, E204)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E201, E202)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E199, E200)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E198)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E196, E197)); _ -> case V13 of {'Idris.Prelude.Types.Just', E186} -> (fun (V396) -> case V15 of [E187 | E188] -> (fun (V397, V398) -> case V397 of {'Idris.Builtin.MkPair', E189, E190} -> (fun (V399, V400) -> case V400 of {'Idris.Builtin.MkPair', E191, E192} -> (fun (V401, V402) -> case V402 of {'Idris.TTImp.TTImp.IPrimVal', E193, E194} -> (fun (V403, V404) -> case V404 of {'Idris.Core.TT.Ch', E195} -> (fun (V405) -> case V398 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V403, {'Idris.Core.TT.Ch', V405}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E195)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E193, E194)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E191, E192)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E189, E190)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E187, E188)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E186)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E184, E185)); _ -> case V13 of {'Idris.Prelude.Types.Just', E174} -> (fun (V406) -> case V15 of [E175 | E176] -> (fun (V407, V408) -> case V407 of {'Idris.Builtin.MkPair', E177, E178} -> (fun (V409, V410) -> case V410 of {'Idris.Builtin.MkPair', E179, E180} -> (fun (V411, V412) -> case V412 of {'Idris.TTImp.TTImp.IPrimVal', E181, E182} -> (fun (V413, V414) -> case V414 of {'Idris.Core.TT.Ch', E183} -> (fun (V415) -> case V408 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V413, {'Idris.Core.TT.Ch', V415}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E183)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E181, E182)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E179, E180)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E177, E178)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E175, E176)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E174)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E173)); _ -> case V13 of {'Idris.Prelude.Types.Just', E163} -> (fun (V416) -> case V15 of [E164 | E165] -> (fun (V417, V418) -> case V417 of {'Idris.Builtin.MkPair', E166, E167} -> (fun (V419, V420) -> case V420 of {'Idris.Builtin.MkPair', E168, E169} -> (fun (V421, V422) -> case V422 of {'Idris.TTImp.TTImp.IPrimVal', E170, E171} -> (fun (V423, V424) -> case V424 of {'Idris.Core.TT.Ch', E172} -> (fun (V425) -> case V418 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V423, {'Idris.Core.TT.Ch', V425}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E172)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E170, E171)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E168, E169)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E166, E167)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E164, E165)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E163)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end end(E161, E162)); _ -> case V12 of {'Idris.Prelude.Types.Just', E91} -> (fun (V426) -> case V15 of [E102 | E103] -> (fun (V427, V428) -> case V427 of {'Idris.Builtin.MkPair', E114, E115} -> (fun (V429, V430) -> case V430 of {'Idris.Builtin.MkPair', E126, E127} -> (fun (V431, V432) -> case V432 of {'Idris.TTImp.TTImp.IPrimVal', E138, E139} -> (fun (V433, V434) -> case V434 of {'Idris.Core.TT.Str', E150} -> (fun (V435) -> case V428 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V433, {'Idris.Core.TT.Str', V435}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E151} -> (fun (V436) -> case V15 of [E152 | E153] -> (fun (V437, V438) -> case V437 of {'Idris.Builtin.MkPair', E154, E155} -> (fun (V439, V440) -> case V440 of {'Idris.Builtin.MkPair', E156, E157} -> (fun (V441, V442) -> case V442 of {'Idris.TTImp.TTImp.IPrimVal', E158, E159} -> (fun (V443, V444) -> case V444 of {'Idris.Core.TT.Ch', E160} -> (fun (V445) -> case V438 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V443, {'Idris.Core.TT.Ch', V445}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E160)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E158, E159)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E156, E157)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E154, E155)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E152, E153)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E151)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E150)); _ -> case V13 of {'Idris.Prelude.Types.Just', E140} -> (fun (V446) -> case V15 of [E141 | E142] -> (fun (V447, V448) -> case V447 of {'Idris.Builtin.MkPair', E143, E144} -> (fun (V449, V450) -> case V450 of {'Idris.Builtin.MkPair', E145, E146} -> (fun (V451, V452) -> case V452 of {'Idris.TTImp.TTImp.IPrimVal', E147, E148} -> (fun (V453, V454) -> case V454 of {'Idris.Core.TT.Ch', E149} -> (fun (V455) -> case V448 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V453, {'Idris.Core.TT.Ch', V455}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E149)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E147, E148)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E145, E146)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E143, E144)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E141, E142)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E140)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E138, E139)); _ -> case V13 of {'Idris.Prelude.Types.Just', E128} -> (fun (V456) -> case V15 of [E129 | E130] -> (fun (V457, V458) -> case V457 of {'Idris.Builtin.MkPair', E131, E132} -> (fun (V459, V460) -> case V460 of {'Idris.Builtin.MkPair', E133, E134} -> (fun (V461, V462) -> case V462 of {'Idris.TTImp.TTImp.IPrimVal', E135, E136} -> (fun (V463, V464) -> case V464 of {'Idris.Core.TT.Ch', E137} -> (fun (V465) -> case V458 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V463, {'Idris.Core.TT.Ch', V465}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E137)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E135, E136)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E133, E134)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E131, E132)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E129, E130)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E128)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E126, E127)); _ -> case V13 of {'Idris.Prelude.Types.Just', E116} -> (fun (V466) -> case V15 of [E117 | E118] -> (fun (V467, V468) -> case V467 of {'Idris.Builtin.MkPair', E119, E120} -> (fun (V469, V470) -> case V470 of {'Idris.Builtin.MkPair', E121, E122} -> (fun (V471, V472) -> case V472 of {'Idris.TTImp.TTImp.IPrimVal', E123, E124} -> (fun (V473, V474) -> case V474 of {'Idris.Core.TT.Ch', E125} -> (fun (V475) -> case V468 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V473, {'Idris.Core.TT.Ch', V475}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E125)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E123, E124)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E121, E122)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E119, E120)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E117, E118)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E116)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E114, E115)); _ -> case V13 of {'Idris.Prelude.Types.Just', E104} -> (fun (V476) -> case V15 of [E105 | E106] -> (fun (V477, V478) -> case V477 of {'Idris.Builtin.MkPair', E107, E108} -> (fun (V479, V480) -> case V480 of {'Idris.Builtin.MkPair', E109, E110} -> (fun (V481, V482) -> case V482 of {'Idris.TTImp.TTImp.IPrimVal', E111, E112} -> (fun (V483, V484) -> case V484 of {'Idris.Core.TT.Ch', E113} -> (fun (V485) -> case V478 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V483, {'Idris.Core.TT.Ch', V485}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E113)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E111, E112)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E109, E110)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E107, E108)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E105, E106)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E104)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E102, E103)); _ -> case V13 of {'Idris.Prelude.Types.Just', E92} -> (fun (V486) -> case V15 of [E93 | E94] -> (fun (V487, V488) -> case V487 of {'Idris.Builtin.MkPair', E95, E96} -> (fun (V489, V490) -> case V490 of {'Idris.Builtin.MkPair', E97, E98} -> (fun (V491, V492) -> case V492 of {'Idris.TTImp.TTImp.IPrimVal', E99, E100} -> (fun (V493, V494) -> case V494 of {'Idris.Core.TT.Ch', E101} -> (fun (V495) -> case V488 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V493, {'Idris.Core.TT.Ch', V495}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E101)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E99, E100)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E97, E98)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E95, E96)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E93, E94)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E92)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E91)); _ -> case V13 of {'Idris.Prelude.Types.Just', E81} -> (fun (V496) -> case V15 of [E82 | E83] -> (fun (V497, V498) -> case V497 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V499, V500) -> case V500 of {'Idris.Builtin.MkPair', E86, E87} -> (fun (V501, V502) -> case V502 of {'Idris.TTImp.TTImp.IPrimVal', E88, E89} -> (fun (V503, V504) -> case V504 of {'Idris.Core.TT.Ch', E90} -> (fun (V505) -> case V498 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V503, {'Idris.Core.TT.Ch', V505}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E90)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E88, E89)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E86, E87)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E84, E85)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E82, E83)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E81)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end end(E80)); _ -> case V12 of {'Idris.Prelude.Types.Just', E10} -> (fun (V506) -> case V15 of [E21 | E22] -> (fun (V507, V508) -> case V507 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V509, V510) -> case V510 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V511, V512) -> case V512 of {'Idris.TTImp.TTImp.IPrimVal', E57, E58} -> (fun (V513, V514) -> case V514 of {'Idris.Core.TT.Str', E69} -> (fun (V515) -> case V508 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V513, {'Idris.Core.TT.Str', V515}}}; _ -> case V13 of {'Idris.Prelude.Types.Just', E70} -> (fun (V516) -> case V15 of [E71 | E72] -> (fun (V517, V518) -> case V517 of {'Idris.Builtin.MkPair', E73, E74} -> (fun (V519, V520) -> case V520 of {'Idris.Builtin.MkPair', E75, E76} -> (fun (V521, V522) -> case V522 of {'Idris.TTImp.TTImp.IPrimVal', E77, E78} -> (fun (V523, V524) -> case V524 of {'Idris.Core.TT.Ch', E79} -> (fun (V525) -> case V518 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V523, {'Idris.Core.TT.Ch', V525}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E79)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E77, E78)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E75, E76)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E73, E74)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E71, E72)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E70)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E69)); _ -> case V13 of {'Idris.Prelude.Types.Just', E59} -> (fun (V526) -> case V15 of [E60 | E61] -> (fun (V527, V528) -> case V527 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V529, V530) -> case V530 of {'Idris.Builtin.MkPair', E64, E65} -> (fun (V531, V532) -> case V532 of {'Idris.TTImp.TTImp.IPrimVal', E66, E67} -> (fun (V533, V534) -> case V534 of {'Idris.Core.TT.Ch', E68} -> (fun (V535) -> case V528 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V533, {'Idris.Core.TT.Ch', V535}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E68)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E66, E67)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E64, E65)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E62, E63)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E60, E61)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E59)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E57, E58)); _ -> case V13 of {'Idris.Prelude.Types.Just', E47} -> (fun (V536) -> case V15 of [E48 | E49] -> (fun (V537, V538) -> case V537 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V539, V540) -> case V540 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V541, V542) -> case V542 of {'Idris.TTImp.TTImp.IPrimVal', E54, E55} -> (fun (V543, V544) -> case V544 of {'Idris.Core.TT.Ch', E56} -> (fun (V545) -> case V538 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V543, {'Idris.Core.TT.Ch', V545}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E56)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E54, E55)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E52, E53)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E50, E51)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E48, E49)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E47)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E45, E46)); _ -> case V13 of {'Idris.Prelude.Types.Just', E35} -> (fun (V546) -> case V15 of [E36 | E37] -> (fun (V547, V548) -> case V547 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V549, V550) -> case V550 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V551, V552) -> case V552 of {'Idris.TTImp.TTImp.IPrimVal', E42, E43} -> (fun (V553, V554) -> case V554 of {'Idris.Core.TT.Ch', E44} -> (fun (V555) -> case V548 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V553, {'Idris.Core.TT.Ch', V555}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E44)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E42, E43)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E40, E41)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E38, E39)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E36, E37)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E35)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E33, E34)); _ -> case V13 of {'Idris.Prelude.Types.Just', E23} -> (fun (V556) -> case V15 of [E24 | E25] -> (fun (V557, V558) -> case V557 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V559, V560) -> case V560 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V561, V562) -> case V562 of {'Idris.TTImp.TTImp.IPrimVal', E30, E31} -> (fun (V563, V564) -> case V564 of {'Idris.Core.TT.Ch', E32} -> (fun (V565) -> case V558 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V563, {'Idris.Core.TT.Ch', V565}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E32)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E30, E31)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E28, E29)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E26, E27)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E24, E25)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E23)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E21, E22)); _ -> case V13 of {'Idris.Prelude.Types.Just', E11} -> (fun (V566) -> case V15 of [E12 | E13] -> (fun (V567, V568) -> case V567 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V569, V570) -> case V570 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V571, V572) -> case V572 of {'Idris.TTImp.TTImp.IPrimVal', E18, E19} -> (fun (V573, V574) -> case V574 of {'Idris.Core.TT.Ch', E20} -> (fun (V575) -> case V568 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V573, {'Idris.Core.TT.Ch', V575}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E20)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E18, E19)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E16, E17)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E14, E15)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E12, E13)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E11)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end(E10)); _ -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V576) -> case V15 of [E1 | E2] -> (fun (V577, V578) -> case V577 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V579, V580) -> case V580 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V581, V582) -> case V582 of {'Idris.TTImp.TTImp.IPrimVal', E7, E8} -> (fun (V583, V584) -> case V584 of {'Idris.Core.TT.Ch', E9} -> (fun (V585) -> case V578 of [] -> {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V583, {'Idris.Core.TT.Ch', V585}}}; _ -> {'Idris.TTImp.TTImp.Unique'} end end(E9)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E7, E8)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E5, E6)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E3, E4)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E1, E2)); _ -> {'Idris.TTImp.TTImp.Unique'} end end(E0)); _ -> {'Idris.TTImp.TTImp.Unique'} end end end.
'nested--12964-5571--in--un--notOverloadableFn'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V2 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Right', 1} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', 0} end end.
'nested--10214-3220--in--un--notLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V12) -> 1 end(E0)); _ -> 0 end.
'nested--10214-3218--in--un--mkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V37 = ('nested--10214-3217--in--un--wrapDot'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V8, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V15)))) end, V4)), case V14 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V33 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--10214-3215--in--un--buildAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'Idris.TTImp.TTImp.IVar', V2, V13}, V4))))), ('case--expandAmbigName,mkTerm-3811'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V13, V12, V11, V37, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq__DefFlag'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq__DefFlag'(V40, V41)) end end}, {'Idris.Core.Context.Macro'}, case V14 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V53 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'nested--10214-3219--in--un--mkAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> ('nested--10214-3218--in--un--mkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Idris.Core.Name.Resolved', V16}, V17)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-3212--in--un--lookupUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V14, V13)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-3216--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> 1; [E0 | E1] -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V12)), V13)), fun () -> ('nested--10214-3216--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V12)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10214-3215--in--un--buildAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> V11; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10214-3215--in--un--buildAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'Idris.TTImp.TTImp.IApp', V15, V11, V18}, V14)) end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10214-3215--in--un--buildAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'Idris.TTImp.TTImp.IAutoApp', V15, V11, V18}, V14)) end()); {'Idris.Prelude.Types.Just', E7} -> (fun (V20) -> ('nested--10214-3215--in--un--buildAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'Idris.TTImp.TTImp.INamedApp', V15, V11, V20, V18}, V14)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stripDelay'(V0, V1) -> case V1 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--stripDelay'('erased', V4)) end(E0, E1, E2)); _ -> V1 end.
'un--pruneByType'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('un--couldBe'(V1, V0, V10, ('un--stripDelay'('erased', V4)), V11)) end, V5, []))(V6))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V16 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V15) -> V15 end, V14))), begin (V17 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.prune"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Prune by"/utf8>> end, V3, V4, V6))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V35 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.prun"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Bool'(V22, V23)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V24) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V24)) end, fun (V25) -> fun (V26) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V25, V26)) end end}}, V20)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Bool'(V30, V31)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V32) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V33, V34)) end end}}, V27, V28)) end end}, V16)) end))(V6))), case V35 of {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V37) -> begin (V39 = (('case--pruneByType-5787'(V0, V5, V4, V3, V2, V1, V10, V14, V16, V19, V37, ('Idris.Idris2.Data.Bool.Extra':'un--anyTrue'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V38)) end, V16))))))(V6))), case V39 of {'Idris.Prelude.Types.Left', E8} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V41) -> (('case--pruneByType-5893'(V0, V5, V4, V3, V2, V1, V10, V14, V16, V19, V37, V41, ('Idris.Idris2.Data.List':'un--isNil'('erased', V41))))(V6)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--notOverloadable'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('nested--12964-5571--in--un--notOverloadableFn'(V2, V3, V0, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V3)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mightMatchD'(V0, V1, V2, V3, V4) -> ('un--mightMatch'(V0, V1, V2, ('un--stripDelay'('erased', V3)), ('un--stripDelay'('erased', V4)))).
'un--mightMatchArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 0} end; _ -> fun (V6) -> {'Idris.Prelude.Types.Right', 1} end end; [E0 | E1] -> (fun (V7, V8) -> case V4 of [E2 | E3] -> (fun (V9, V10) -> fun (V11) -> begin (V12 = ('un--mightMatchArg'(V0, V1, V2, V7, V9, V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 0 -> (('un--mightMatchArgs'(V0, V1, V2, V8, V10))(V11)); 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--mightMatchArg'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V3))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, [], V2, V4))(V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = (('un--mightMatchD'(V0, V1, V2, V8, V11))(V5))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', case V14 of {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> 1 end()); _ -> 0 end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mightMatch'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NBind', E56, E57, E58, E59} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E116, E117, E118, E119} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (((V8(V2))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E120} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V16) -> (('un--mightMatchD'(V0, V1, V2, V3, V16))(V13)) end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116, E117, E118, E119)); _ -> case V3 of {'Idris.Core.Value.NTCon', E65, E66, E67, E68, E69} -> (fun (V17, V18, V19, V20, V21) -> case V4 of {'Idris.Core.Value.NTCon', E75, E76, E77, E78, E79} -> (fun (V22, V23, V24, V25, V26) -> ('case--mightMatch-4837'(V1, V22, V17, V21, V20, V19, V18, V26, V25, V24, V23, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V18, V23)))) end(E75, E76, E77, E78, E79)); _ -> case V4 of {'Idris.Core.Value.NApp', E70, E71, E72} -> (fun (V27, V28, V29) -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E70, E71, E72)); {'Idris.Core.Value.NErased', E73, E74} -> (fun (V31, V32) -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E73, E74)); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E65, E66, E67, E68, E69)); {'Idris.Core.Value.NDCon', E80, E81, E82, E83, E84} -> (fun (V35, V36, V37, V38, V39) -> case V4 of {'Idris.Core.Value.NDCon', E90, E91, E92, E93, E94} -> (fun (V40, V41, V42, V43, V44) -> ('case--mightMatch-4975'(V1, V40, V35, V39, V38, V37, V36, V44, V43, V42, V41, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V37, V42)))) end(E90, E91, E92, E93, E94)); _ -> case V4 of {'Idris.Core.Value.NApp', E85, E86, E87} -> (fun (V45, V46, V47) -> fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E85, E86, E87)); {'Idris.Core.Value.NErased', E88, E89} -> (fun (V49, V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E88, E89)); _ -> fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E80, E81, E82, E83, E84)); {'Idris.Core.Value.NPrimVal', E95, E96} -> (fun (V53, V54) -> case V4 of {'Idris.Core.Value.NPrimVal', E102, E103} -> (fun (V55, V56) -> ('case--mightMatch-5113'(V1, V55, V53, V54, V56, V2, V0, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Constant'(V54, V56)))) end(E102, E103)); _ -> case V4 of {'Idris.Core.Value.NApp', E97, E98, E99} -> (fun (V57, V58, V59) -> fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E97, E98, E99)); {'Idris.Core.Value.NErased', E100, E101} -> (fun (V61, V62) -> fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E100, E101)); _ -> fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E95, E96)); {'Idris.Core.Value.NType', E104} -> (fun (V65) -> case V4 of {'Idris.Core.Value.NType', E110} -> (fun (V66) -> fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}} end end(E110)); _ -> case V4 of {'Idris.Core.Value.NApp', E105, E106, E107} -> (fun (V68, V69, V70) -> fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E105, E106, E107)); {'Idris.Core.Value.NErased', E108, E109} -> (fun (V72, V73) -> fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E108, E109)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E104)); {'Idris.Core.Value.NApp', E111, E112, E113} -> (fun (V76, V77, V78) -> fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E111, E112, E113)); {'Idris.Core.Value.NErased', E114, E115} -> (fun (V80, V81) -> fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E114, E115)); _ -> case V4 of {'Idris.Core.Value.NApp', E60, E61, E62} -> (fun (V83, V84, V85) -> fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E60, E61, E62)); {'Idris.Core.Value.NErased', E63, E64} -> (fun (V87, V88) -> fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E63, E64)); _ -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end end(E56, E57, E58, E59)); _ -> case V3 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V91, V92, V93, V94, V95) -> case V4 of {'Idris.Core.Value.NTCon', E15, E16, E17, E18, E19} -> (fun (V96, V97, V98, V99, V100) -> ('case--mightMatch-4837'(V1, V96, V91, V95, V94, V93, V92, V100, V99, V98, V97, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V92, V97)))) end(E15, E16, E17, E18, E19)); _ -> case V4 of {'Idris.Core.Value.NApp', E10, E11, E12} -> (fun (V101, V102, V103) -> fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E10, E11, E12)); {'Idris.Core.Value.NErased', E13, E14} -> (fun (V105, V106) -> fun (V107) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E13, E14)); _ -> fun (V108) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NDCon', E20, E21, E22, E23, E24} -> (fun (V109, V110, V111, V112, V113) -> case V4 of {'Idris.Core.Value.NDCon', E30, E31, E32, E33, E34} -> (fun (V114, V115, V116, V117, V118) -> ('case--mightMatch-4975'(V1, V114, V109, V113, V112, V111, V110, V118, V117, V116, V115, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V111, V116)))) end(E30, E31, E32, E33, E34)); _ -> case V4 of {'Idris.Core.Value.NApp', E25, E26, E27} -> (fun (V119, V120, V121) -> fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E25, E26, E27)); {'Idris.Core.Value.NErased', E28, E29} -> (fun (V123, V124) -> fun (V125) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E28, E29)); _ -> fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E20, E21, E22, E23, E24)); {'Idris.Core.Value.NPrimVal', E35, E36} -> (fun (V127, V128) -> case V4 of {'Idris.Core.Value.NPrimVal', E42, E43} -> (fun (V129, V130) -> ('case--mightMatch-5113'(V1, V129, V127, V128, V130, V2, V0, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Constant'(V128, V130)))) end(E42, E43)); _ -> case V4 of {'Idris.Core.Value.NApp', E37, E38, E39} -> (fun (V131, V132, V133) -> fun (V134) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E37, E38, E39)); {'Idris.Core.Value.NErased', E40, E41} -> (fun (V135, V136) -> fun (V137) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E40, E41)); _ -> fun (V138) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E35, E36)); {'Idris.Core.Value.NType', E44} -> (fun (V139) -> case V4 of {'Idris.Core.Value.NType', E50} -> (fun (V140) -> fun (V141) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}} end end(E50)); _ -> case V4 of {'Idris.Core.Value.NApp', E45, E46, E47} -> (fun (V142, V143, V144) -> fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E45, E46, E47)); {'Idris.Core.Value.NErased', E48, E49} -> (fun (V146, V147) -> fun (V148) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E48, E49)); _ -> fun (V149) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end(E44)); {'Idris.Core.Value.NApp', E51, E52, E53} -> (fun (V150, V151, V152) -> fun (V153) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E51, E52, E53)); {'Idris.Core.Value.NErased', E54, E55} -> (fun (V154, V155) -> fun (V156) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E54, E55)); _ -> case V4 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V157, V158, V159) -> fun (V160) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E0, E1, E2)); {'Idris.Core.Value.NErased', E3, E4} -> (fun (V161, V162) -> fun (V163) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end(E3, E4)); _ -> fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.NoMatch'}} end end end end.
'un--getName'(V0) -> case V0 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V3, V4, V5) -> ('un--getName'(V4)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.INamedApp', E5, E6, E7, E8} -> (fun (V6, V7, V8, V9) -> ('un--getName'(V7)) end(E5, E6, E7, E8)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V10, V11, V12) -> ('un--getName'(V11)) end(E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--filterCore'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ((V1(V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('un--filterCore'('erased', V1, V5))(V6))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> case V9 of 0 -> {'Idris.Prelude.Types.Right', [V4 | V12]}; 1 -> {'Idris.Prelude.Types.Right', V12}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'Idris.TTImp.Elab.Check.InLHS', E14} -> (fun (V10) -> case V8 of {'Idris.TTImp.TTImp.IBindVar', E29, E30} -> (fun (V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E31} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V17) -> (('case--expandAmbigName-3154'(V0, V10, V12, V11, V9, V7, V6, V5, V4, V2, V1, V17, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V20, V21)) end end}, {'Idris.Core.Name.UN', V12}, case V17 of {'Idris.TTImp.Elab.Check.MkEState', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V29 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V13)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29, E30)); _ -> case V8 of {'Idris.TTImp.TTImp.IVar', E17, E18} -> (fun (V35, V36) -> ('case--expandAmbigName-3980'(V0, V36, V35, V9, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V39, V40)) end end}, V36, V4)))) end(E17, E18)); {'Idris.TTImp.TTImp.IApp', E19, E20, E21} -> (fun (V41, V42, V43) -> ('un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, [{'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V43}} | V7], V42, V9)) end(E19, E20, E21)); {'Idris.TTImp.TTImp.INamedApp', E22, E23, E24, E25} -> (fun (V44, V45, V46, V47) -> ('un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, [{'Idris.Builtin.MkPair', V44, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V46}}, V47}} | V7], V45, V9)) end(E22, E23, E24, E25)); {'Idris.TTImp.TTImp.IAutoApp', E26, E27, E28} -> (fun (V48, V49, V50) -> ('un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, [{'Idris.Builtin.MkPair', V48, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}, V50}} | V7], V49, V9)) end(E26, E27, E28)); _ -> fun (V51) -> begin (V52 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"No ambiguity "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V6)))) end))(V51))), case V52 of {'Idris.Prelude.Types.Left', E15} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V54) -> {'Idris.Prelude.Types.Right', V6} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E14)); _ -> case V8 of {'Idris.TTImp.TTImp.IVar', E2, E3} -> (fun (V55, V56) -> ('case--expandAmbigName-3980'(V0, V56, V55, V9, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V59, V60)) end end}, V56, V4)))) end(E2, E3)); {'Idris.TTImp.TTImp.IApp', E4, E5, E6} -> (fun (V61, V62, V63) -> ('un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, [{'Idris.Builtin.MkPair', V61, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V63}} | V7], V62, V9)) end(E4, E5, E6)); {'Idris.TTImp.TTImp.INamedApp', E7, E8, E9, E10} -> (fun (V64, V65, V66, V67) -> ('un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, [{'Idris.Builtin.MkPair', V64, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V66}}, V67}} | V7], V65, V9)) end(E7, E8, E9, E10)); {'Idris.TTImp.TTImp.IAutoApp', E11, E12, E13} -> (fun (V68, V69, V70) -> ('un--expandAmbigName'(V0, V1, V2, V3, V4, V5, V6, [{'Idris.Builtin.MkPair', V68, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}, V70}} | V7], V69, V9)) end(E11, E12, E13)); _ -> fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"No ambiguity "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V6)))) end))(V71))), case V72 of {'Idris.Prelude.Types.Left', E0} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V74) -> {'Idris.Prelude.Types.Right', V6} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--couldBeName'(V0, V1, V2, V3, V4, V5) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V4, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V32 of {'Idris.Prelude.Types.Left', E26} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end()); {'Idris.Prelude.Types.Just', E28} -> (fun (V35) -> begin (V36 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V2, {'Idris.Core.Env.Nil'}, V35))(V5))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> (('un--mightMatchD'(V0, V1, V2, V3, V38))(V5)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--couldBeFn'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V5, V6) -> fun (V7) -> ('un--couldBeName'(V0, V1, V2, V3, V6, V7)) end end(E0, E1)); {'Idris.TTImp.TTImp.IAlternative', E2, E3, E4} -> (fun (V8, V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Concrete'}} end end(E2, E3, E4)); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Ambiguity.Poly'}} end end.
'un--couldBe'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> begin (V11 = (('un--couldBeFn'(V0, V1, V2, V3, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V4))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> case V13 of {'Idris.TTImp.Elab.Ambiguity.Concrete'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 0, V4}}} end()); {'Idris.TTImp.Elab.Ambiguity.Poly'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V4}}} end()); {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NPrimVal', E7, E8} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--couldBeFn'(V0, V1, V2, V3, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V4))))(V16))), case V17 of {'Idris.Prelude.Types.Left', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V19) -> case V19 of {'Idris.TTImp.Elab.Ambiguity.Concrete'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 0, V4}}} end()); {'Idris.TTImp.Elab.Ambiguity.Poly'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V4}}} end()); {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); {'Idris.Core.Value.NType', E11} -> (fun (V20) -> fun (V21) -> begin (V22 = (('un--couldBeFn'(V0, V1, V2, V3, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V4))))(V21))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> case V24 of {'Idris.TTImp.Elab.Ambiguity.Concrete'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 0, V4}}} end()); {'Idris.TTImp.Elab.Ambiguity.Poly'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V4}}} end()); {'Idris.TTImp.Elab.Ambiguity.NoMatch'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', 1, V4}}} end end.
'un--checkAmbigDepth'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--getAmbigLimit'(V1, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V15 = case V4 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V9, V10, V11, V12, V13, V14) -> V14 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V15)), V8)) of 0 -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguityTooDeep', V3, {'Idris.Core.Name.Resolved', case V19 of {'Idris.TTImp.Elab.Check.MkEState', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V21 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V15}, V5)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkAlternative'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V10 of {'Idris.TTImp.TTImp.UniqueDefault', E68} -> (fun (V13) -> fun (V14) -> begin (V15 = ('un--checkAmbigDepth'('erased', V1, V4, V9, V6, V14))), case V15 of {'Idris.Prelude.Types.Left', E69} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V17) -> begin (V31 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V18) -> begin (V19 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"altTy"/utf8>>, V18))), case V19 of {'Idris.Prelude.Types.Left', E71} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V21) -> begin (V26 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V21, {'Idris.Core.TT.TType', V9}, V18))), case V26 of {'Idris.Prelude.Types.Left', E73} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V28))} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V29) -> fun (V30) -> {'Idris.Prelude.Types.Right', V29} end end end, V12))(V14))), case V31 of {'Idris.Prelude.Types.Left', E75} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V33) -> begin (V40 = ('case--checkAlternative-6107'(V0, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V17, V33, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E77, E78, E79, E80, E81, E82} -> (fun (V34, V35, V36, V37, V38, V39) -> V34 end(E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, V33, fun (V41) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--ambiguous'(V41)) end, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V42) -> fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V40, {'Idris.Core.Unify.Normal'}, V43))), case V44 of {'Idris.Prelude.Types.Left', E83} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V46) -> begin (V48 = begin (V47 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E85} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V50) -> begin (V51 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V33))(V43))), case V51 of {'Idris.Prelude.Types.Left', E87} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V53) -> begin (V54 = case V42 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V53)); 1 -> V33; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V58 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V55) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V56, V57)) end end}, V11)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V9)), <<"\x{a}With default. Target type "/utf8>>)))))))) end, V8, V54, V43))), case V58 of {'Idris.Prelude.Types.Left', E89} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V60) -> begin (V64 = begin (V61 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V54))(V43))), case V61 of {'Idris.Prelude.Types.Left', E91} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V63) -> ('un--pruneByType'(V0, V1, V3, V8, V63, V11, V43)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E93} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V66) -> begin (V70 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.prun"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Pruned alts ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V66)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V68, V69)) end end}, V66)))))))) end))(V43))), case V70 of {'Idris.Prelude.Types.Left', E95} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V72) -> case V42 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--try'('erased', V0, V1, V2, V3, V4, ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, 1, V9, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V73) -> {'Idris.Builtin.MkPair', ('un--getName'(V73)), ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, (('un--addAmbig'('erased', V66, ('un--getName'(V73))))(V6)), V7, V8, V73, {'Idris.Prelude.Types.Just', V54}))} end, V66)))), fun (V74) -> begin (V75 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"All failed, running default"/utf8>> end))(V74))), case V75 of {'Idris.Prelude.Types.Left', E97} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V77) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, (('un--addAmbig'('erased', V66, ('un--getName'(V13))))(V6)), V7, V8, V13, {'Idris.Prelude.Types.Just', V54}))(V74)) end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V43)); 1 -> (('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, 0, V9, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V78) -> {'Idris.Builtin.MkPair', ('un--getName'(V78)), ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, (('un--addAmbig'('erased', V66, ('un--getName'(V78))))(V6)), V7, V8, V78, {'Idris.Prelude.Types.Just', V54}))} end, V66))))(V43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V14)) end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E68)); _ -> fun (V79) -> begin (V80 = ('un--checkAmbigDepth'('erased', V1, V4, V9, V6, V79))), case V80 of {'Idris.Prelude.Types.Left', E0} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V82) -> begin (V89 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V83) -> {'Idris.Prelude.Types.Right', []} end end, fun () -> fun (V84) -> fun (V85) -> begin (V86 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V84))(V85))), case V86 of {'Idris.Prelude.Types.Left', E2} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V88) -> ('un--pruneByType'(V0, V1, V3, V8, V88, V11, V85)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V12))(V79))), case V89 of {'Idris.Prelude.Types.Left', E4} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V91) -> case V91 of [E36 | E37] -> (fun (V92, V93) -> case V93 of [] -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V92, V12))(V79)); _ -> begin (V107 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V94) -> begin (V95 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"altTy"/utf8>>, V94))), case V95 of {'Idris.Prelude.Types.Left', E38} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V97) -> begin (V102 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V98) -> fun (V99) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V98, V99)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V100) -> fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V100, V101)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V97, {'Idris.Core.TT.TType', V9}, V94))), case V102 of {'Idris.Prelude.Types.Left', E40} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V104) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V104))} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V105) -> fun (V106) -> {'Idris.Prelude.Types.Right', V105} end end end, V12))(V79))), case V107 of {'Idris.Prelude.Types.Left', E42} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V109) -> begin (V116 = ('case--case block in checkAlternative-6686'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V82, V91, V109, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E44, E45, E46, E47, E48, E49} -> (fun (V110, V111, V112, V113, V114, V115) -> V110 end(E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, V109, fun (V117) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--ambiguous'(V117)) end, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V118) -> fun (V119) -> begin (V121 = begin (V120 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V120} end), case V121 of {'Idris.Prelude.Types.Left', E50} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V123) -> begin (V124 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V109))(V119))), case V124 of {'Idris.Prelude.Types.Left', E52} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V126) -> begin (V127 = case V118 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V126)); 1 -> V109; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V131 = begin (V128 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V127))(V119))), case V128 of {'Idris.Prelude.Types.Left', E54} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V130) -> ('un--pruneByType'(V0, V1, V3, V8, V130, V11, V119)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V131 of {'Idris.Prelude.Types.Left', E56} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V133) -> begin (V137 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V118)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V134) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V134)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V135, V136)) end end}, V133)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V9)), <<"\x{a}Target type "/utf8>>)))))))))))) end, V8, V127, V119))), case V137 of {'Idris.Prelude.Types.Left', E58} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V139) -> begin (V142 = case V10 of {'Idris.TTImp.TTImp.FirstSuccess'} -> (fun () -> fun (V140) -> ('Idris.Idris2.TTImp.Elab.Check':'un--anyOne'(V0, V1, V2, V3, V4, V9, V140)) end end()); _ -> fun (V141) -> ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Basics':'un--not'(V118)), V9, V8, V141)) end end), ((V142(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V143) -> {'Idris.Builtin.MkPair', ('un--getName'(V143)), fun (V144) -> begin (V145 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, (('un--addAmbig'('erased', V133, ('un--getName'(V143))))(V6)), V7, V8, V143, {'Idris.Prelude.Types.Just', V127}))(V144))), case V145 of {'Idris.Prelude.Types.Left', E60} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V147) -> begin (V148 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V116, {'Idris.Core.Unify.Normal'}, V144))), case V148 of {'Idris.Prelude.Types.Left', E62} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V150) -> begin (V151 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V116, {'Idris.Core.Unify.Normal'}, V144))), case V151 of {'Idris.Prelude.Types.Left', E64} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V153) -> begin (V157 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V154) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V154)) end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V155, V156)) end end}, ('un--getName'(V143)))), <<" success"/utf8>>)) end))(V144))), case V157 of {'Idris.Prelude.Types.Left', E66} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V159) -> {'Idris.Prelude.Types.Right', V147} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end} end, V133))))(V119)) end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V79)) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37)); _ -> begin (V173 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V160) -> begin (V161 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"altTy"/utf8>>, V160))), case V161 of {'Idris.Prelude.Types.Left', E6} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V163) -> begin (V168 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V164) -> fun (V165) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V164, V165)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V166) -> fun (V167) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V166, V167)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V163, {'Idris.Core.TT.TType', V9}, V160))), case V168 of {'Idris.Prelude.Types.Left', E8} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V170) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V170))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V171) -> fun (V172) -> {'Idris.Prelude.Types.Right', V171} end end end, V12))(V79))), case V173 of {'Idris.Prelude.Types.Left', E10} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V175) -> begin (V182 = ('case--case block in checkAlternative-6686'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V82, V91, V175, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V176, V177, V178, V179, V180, V181) -> V176 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, V175, fun (V183) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--ambiguous'(V183)) end, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V184) -> fun (V185) -> begin (V187 = begin (V186 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V186} end), case V187 of {'Idris.Prelude.Types.Left', E18} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V189) -> begin (V190 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V175))(V185))), case V190 of {'Idris.Prelude.Types.Left', E20} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V192) -> begin (V193 = case V184 of 0 -> ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V192)); 1 -> V175; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V197 = begin (V194 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V193))(V185))), case V194 of {'Idris.Prelude.Types.Left', E22} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V196) -> ('un--pruneByType'(V0, V1, V3, V8, V196, V11, V185)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V197 of {'Idris.Prelude.Types.Left', E24} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V199) -> begin (V203 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.ambiguous"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V184)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V200) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V200)) end, fun (V201) -> fun (V202) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V201, V202)) end end}, V199)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show__FC'(V9)), <<"\x{a}Target type "/utf8>>)))))))))))) end, V8, V193, V185))), case V203 of {'Idris.Prelude.Types.Left', E26} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V205) -> begin (V208 = case V10 of {'Idris.TTImp.TTImp.FirstSuccess'} -> (fun () -> fun (V206) -> ('Idris.Idris2.TTImp.Elab.Check':'un--anyOne'(V0, V1, V2, V3, V4, V9, V206)) end end()); _ -> fun (V207) -> ('Idris.Idris2.TTImp.Elab.Check':'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Basics':'un--not'(V184)), V9, V8, V207)) end end), ((V208(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V209) -> {'Idris.Builtin.MkPair', ('un--getName'(V209)), fun (V210) -> begin (V211 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, (('un--addAmbig'('erased', V199, ('un--getName'(V209))))(V6)), V7, V8, V209, {'Idris.Prelude.Types.Just', V193}))(V210))), case V211 of {'Idris.Prelude.Types.Left', E28} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V213) -> begin (V214 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V182, {'Idris.Core.Unify.Normal'}, V210))), case V214 of {'Idris.Prelude.Types.Left', E30} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V216) -> begin (V217 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V182, {'Idris.Core.Unify.Normal'}, V210))), case V217 of {'Idris.Prelude.Types.Left', E32} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V219) -> begin (V223 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V220) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V220)) end, fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V221, V222)) end end}, ('un--getName'(V209)))), <<" success"/utf8>>)) end))(V210))), case V223 of {'Idris.Prelude.Types.Left', E34} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V225) -> {'Idris.Prelude.Types.Right', V213} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end} end, V199))))(V185)) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V79)) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--addAmbig'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> V3 end end()); _ -> case V1 of [] -> fun (V4) -> V4 end; [E7 | E8] -> (fun (V5, V6) -> case V6 of [] -> fun (V7) -> V7 end; _ -> case V2 of {'Idris.Prelude.Types.Just', E9} -> (fun (V8) -> fun (V9) -> case V9 of {'Idris.TTImp.Elab.Check.MkElabInfo', E10, E11, E12, E13, E14, E15} -> (fun (V10, V11, V12, V13, V14, V15) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V10, V11, V12, V13, V14, [V8 | V15]} end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> case V17 of {'Idris.TTImp.Elab.Check.MkElabInfo', E1, E2, E3, E4, E5, E6} -> (fun (V18, V19, V20, V21, V22, V23) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V18, V19, V20, V21, V22, [V16 | V23]} end(E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
