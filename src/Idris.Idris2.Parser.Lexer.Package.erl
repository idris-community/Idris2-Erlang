-module('Idris.Idris2.Parser.Lexer.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lex-8055'/2,
  'nested--3723-8041--in--un--useful'/2,
  'dn--un--show_Show__Token'/1,
  'dn--un--showPrec_Show__Token'/2,
  'dn--un--pretty_Pretty__Token'/2,
  'dn--un--prettyPrec_Pretty__Token'/3,
  'dn--un--__Impl_Show_Token'/0,
  'dn--un--__Impl_Pretty_Token'/0,
  'un--separator'/0,
  'un--rawTokens'/0,
  'un--lex'/1,
  'un--equals'/0
]).
'case--lex-8055'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of <<""/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V8) -> ('nested--3723-8041--in--un--useful'(V0, case V8 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V2)), [{'Idris.Text.Bounded.MkBounded', {'Idris.Parser.Lexer.Package.EndOfInput'}, 1, V4, V6, V4, V6} | []]))}; _ -> {'Idris.Prelude.Types.Left', V3} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3723-8041--in--un--useful'(V0, V1) -> case V1 of {'Idris.Parser.Lexer.Package.Comment', E0} -> (fun (V2) -> 1 end(E0)); {'Idris.Parser.Lexer.Package.Space'} -> (fun () -> 1 end()); _ -> 0 end.
'dn--un--show_Show__Token'(V0) -> case V0 of {'Idris.Parser.Lexer.Package.Comment', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Comment: "/utf8>>, V1)) end(E0)); {'Idris.Parser.Lexer.Package.EndOfInput'} -> (fun () -> <<"EndOfInput"/utf8>> end()); {'Idris.Parser.Lexer.Package.Equals'} -> (fun () -> <<"Equals"/utf8>> end()); {'Idris.Parser.Lexer.Package.DotSepIdent', E1, E2} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"DotSepIdentifier: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show__Namespace'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show__Namespace'(V5, V6)) end end}, V2)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V3)))))))) end(E1, E2)); {'Idris.Parser.Lexer.Package.Separator'} -> (fun () -> <<"Separator"/utf8>> end()); {'Idris.Parser.Lexer.Package.Space'} -> (fun () -> <<"Space"/utf8>> end()); {'Idris.Parser.Lexer.Package.StringLit', E3} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"StringLit: "/utf8>>, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__Token'(V0, V1) -> ('dn--un--show_Show__Token'(V1)).
'dn--un--pretty_Pretty__Token'(V0, V1) -> case V1 of {'Idris.Parser.Lexer.Package.Comment', E0} -> (fun (V2) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Comment:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V2)))) end(E0)); {'Idris.Parser.Lexer.Package.EndOfInput'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V3) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V3)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"EndOfInput"/utf8>>)))))) end()); {'Idris.Parser.Lexer.Package.Equals'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V4)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Equals"/utf8>>)))))) end()); {'Idris.Parser.Lexer.Package.DotSepIdent', E1, E2} -> (fun (V5, V6) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"DotSepIdentifier:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__(Maybe $a)'('erased', 'erased', {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty__Namespace'('erased', V8)) end end, fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--prettyPrec_Pretty__Namespace'('erased', V10, V11)) end end end}, V5)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V6)))))) end(E1, E2)); {'Idris.Parser.Lexer.Package.Separator'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V12)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Separator"/utf8>>)))))) end()); {'Idris.Parser.Lexer.Package.Space'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V13)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Space"/utf8>>)))))) end()); {'Idris.Parser.Lexer.Package.StringLit', E3} -> (fun (V14) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"StringLit:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V14)))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty__Token'(V0, V1, V2) -> ('dn--un--pretty_Pretty__Token'('erased', V2)).
'dn--un--__Impl_Show_Token'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__Token'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Token'() -> {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty__Token'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty__Token'('erased', V3, V4)) end end end}.
'un--separator'() -> ('Idris.Idris2.Text.Lexer':'un--is'($,)).
'un--rawTokens'() -> [{'Idris.Builtin.MkPair', ('un--equals'()), fun (V0) -> {'Idris.Parser.Lexer.Package.Equals'} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--comment'()), fun (V1) -> {'Idris.Parser.Lexer.Package.Comment', ('Idris.Idris2.Data.String.Extra':'un--drop'((1 + (1 + 0)), V1))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--namespacedIdent'()), fun (V2) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'('erased', 'erased', 'erased', fun (V3) -> fun (V4) -> {'Idris.Parser.Lexer.Package.DotSepIdent', V3, V4} end end, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespacedIdent'(V2)))) end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--identAllowDashes'()), fun (V5) -> {'Idris.Parser.Lexer.Package.DotSepIdent', {'Idris.Prelude.Types.Nothing'}, V5} end} | [{'Idris.Builtin.MkPair', ('un--separator'()), fun (V6) -> {'Idris.Parser.Lexer.Package.Separator'} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--spacesOrNewlines'()), fun (V7) -> {'Idris.Parser.Lexer.Package.Space'} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--stringLit'()), fun (V8) -> {'Idris.Parser.Lexer.Package.StringLit', ('Idris.Idris2.Utils.String':'un--stripQuotes'(V8))} end} | []]]]]]]].
'un--lex'(V0) -> ('case--lex-8055'(V0, ('Idris.Idris2.Text.Lexer.Core':'un--lexTo'('erased', fun (V1) -> 1 end, ('un--rawTokens'()), V0)))).
'un--equals'() -> ('Idris.Idris2.Text.Lexer':'un--is'($=)).
