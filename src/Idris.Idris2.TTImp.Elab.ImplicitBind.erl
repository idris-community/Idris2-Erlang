-module('Idris.Idris2.TTImp.Elab.ImplicitBind').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkBindHere-15358'/20,
  'case--case block in checkBindHere-15300'/28,
  'case--case block in checkBindHere-15191'/24,
  'case--case block in checkBindHere-15089'/25,
  'case--case block in checkBindHere-15015'/33,
  'case--case block in checkBindHere-14906'/37,
  'case--checkBindHere-14660'/21,
  'case--case block in case block in case block in checkBindVar-14401'/25,
  'case--case block in case block in case block in checkBindVar-14286'/23,
  'case--case block in case block in checkBindVar-14131'/19,
  'case--case block in checkBindVar-14080'/19,
  'case--checkBindVar-14008'/14,
  'case--checkBindVar-13943'/14,
  'case--getToBind-13658'/9,
  'case--getToBind-13611'/11,
  'case--getToBind,insert-13364'/18,
  'case--case block in getToBind,normImps-13182'/23,
  'case--getToBind,normImps-13131'/17,
  'case--getToBind,normImps-13007'/17,
  'case--implicitBind-12877'/5,
  'case--bindImplVars-12715'/9,
  'case--bindImplVars,getBinds-12638'/22,
  'case--case block in bindImplVars,getBinds-12486'/23,
  'case--bindImplVars,getBinds-12435'/21,
  'case--push-12227'/13,
  'case--swapVars-11975'/10,
  'case--swapIsVar-11903'/10,
  'case--case block in bindUnsolved,mkImplicit-11539'/24,
  'case--bindUnsolved,mkImplicit-11447'/20,
  'case--case block in bindUnsolved,makeBoundVar-11337'/21,
  'case--bindUnsolved,makeBoundVar-11179'/17,
  'case--mkPatternHole-11036'/15,
  'case--mkPatternHole-10886'/11,
  'case--mkOuterHole-10679'/13,
  'nested--12124-12385--in--un--tidyName'/9,
  'nested--11404-11780--in--un--swapP'/10,
  'nested--12771-12933--in--un--normImps'/12,
  'nested--12771-12932--in--un--normBindingTy'/11,
  'nested--12631-12803--in--un--nHoles'/10,
  'nested--10745-11159--in--un--mkImplicit'/12,
  'nested--10429-10924--in--un--mkArgs'/13,
  'nested--10745-11158--in--un--makeBoundVar'/16,
  'nested--12054-12322--in--un--liftImps\x{27}'/6,
  'nested--13633-13714--in--un--isIncompatible'/14,
  'nested--12771-12934--in--un--insert'/13,
  'nested--12124-12386--in--un--getBinds'/14,
  'nested--12771-12935--in--un--depSort'/11,
  'nested--13633-13715--in--un--combine'/15,
  'nested--10429-10925--in--un--bindInner'/15,
  'un--swapVars'/5,
  'un--swapIsVarH'/6,
  'un--swapIsVar'/7,
  'un--push'/5,
  'un--normaliseHolesScope'/5,
  'un--mkPatternHole'/10,
  'un--mkOuterHole'/9,
  'un--liftImps'/3,
  'un--implicitBind'/4,
  'un--getToBind'/9,
  'un--checkBindVar'/12,
  'un--checkBindHere'/14,
  'un--bindUnsolved'/7,
  'un--bindImplicits'/9,
  'un--bindImplVars'/8
]).
'case--checkBindHere-15358'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V20, V21, V22, V23, V24, V25) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V20, V3, V22, 0, V24, V25} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkBindHere-15300'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.UnifyState.MkUState', V28, V29, V30, V31, V32, V33, V34, V35, [], V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkBindHere-15191'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V24) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--case block in checkBindHere-15089'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V25) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--case block in checkBindHere-15015'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V32 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.TTImp.Elab.Check.MkEState', V33, V34, V35, V36, [], V38, V39, V40, V41, V42, V43, V44, V45} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkBindHere-14906'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V36 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V37, V38) -> fun (V39) -> begin (V43 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V40) -> fun (V41) -> ('un--implicitBind'(V12, V10, V40, V41)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V42) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V42)) end, V30))))(V39))), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V12, V10, V9, V8, V7, V5, V4, V37, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V38)), V1))(V39)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkBindHere-14660'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V31 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V12, V10, begin (V24 = {'Idris.Builtin.MkPair', V21, V22}), ('case--case block in checkBindHere-15191'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22, V24, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V25, V26, V27, V28, V29, V30) -> V25 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, {'Idris.Core.Unify.Normal'}, V23))), case V31 of {'Idris.Prelude.Types.Left', E8} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V33) -> begin (V41 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V12, V10, V19, begin (V34 = {'Idris.Builtin.MkPair', V21, V22}), ('case--case block in checkBindHere-15089'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22, V34, V33, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E10, E11, E12, E13, E14, E15} -> (fun (V35, V36, V37, V38, V39, V40) -> V35 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, {'Idris.Core.Unify.Defaults'}, V23))), case V41 of {'Idris.Prelude.Types.Left', E16} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E18} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V47) -> begin (V79 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V48) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V0, V12, V11, V10, V9, case V47 of {'Idris.Core.UnifyState.MkUState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V57 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48)) end, fun (V59) -> fun (V60) -> begin (V62 = begin (V61 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E30} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V64) -> begin (V76 = begin (V75 = ('erlang':'put'(V10, case V64 of {'Idris.Core.UnifyState.MkUState', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> {'Idris.Core.UnifyState.MkUState', V65, V66, V67, V68, V69, V70, V71, V72, [], V74} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E42} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V59, V60)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V23))), case V79 of {'Idris.Prelude.Types.Left', E44} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.Unify':'un--checkDots'(V10, V12, V23))), case V82 of {'Idris.Prelude.Types.Left', E46} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V12, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Binding names"/utf8>> end, V21, V23))), case V85 of {'Idris.Prelude.Types.Left', E48} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V87) -> begin (V88 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V12, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, V5, V21))(V23))), case V88 of {'Idris.Prelude.Types.Left', E50} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V90) -> begin (V97 = (('un--getToBind'(V0, V12, V9, V10, V4, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E52, E53, E54, E55, E56, E57} -> (fun (V91, V92, V93, V94, V95, V96) -> V91 end(E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V5, V17))(V23))), case V97 of {'Idris.Prelude.Types.Left', E58} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V99) -> begin (V100 = ('Idris.Idris2.TTImp.Elab.Check':'un--clearToBind'('erased', V9, V17, V23))), case V100 of {'Idris.Prelude.Types.Left', E60} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V102) -> begin (V104 = begin (V103 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V103} end), case V104 of {'Idris.Prelude.Types.Left', E62} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V106) -> begin (V134 = begin (V133 = ('erlang':'put'(V9, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'('erased', case V13 of {'Idris.TTImp.Elab.Check.MkEState', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> V107 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14, V15, V16, case V106 of {'Idris.TTImp.Elab.Check.MkEState', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132) -> {'Idris.TTImp.Elab.Check.MkEState', V120, V121, V122, V123, [], V125, V126, V127, V128, V129, V130, V131, V132} end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), {'Idris.Prelude.Types.Right', V133} end), case V134 of {'Idris.Prelude.Types.Left', E90} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V136) -> begin (V137 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V22))(V23))), case V137 of {'Idris.Prelude.Types.Left', E92} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V139) -> begin (V141 = begin (V140 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E94} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V143) -> begin (V150 = begin (V144 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V12, V0, V143, V5, V21, V23))), case V144 of {'Idris.Prelude.Types.Left', E96} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V146) -> begin (V147 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V12, V0, V143, V5, V139, V23))), case V147 of {'Idris.Prelude.Types.Left', E98} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V149) -> (('un--bindImplicits'(V12, V0, V4, V3, V143, V5, V99, V146, V149))(V23)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V150 of {'Idris.Prelude.Types.Left', E100} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V152) -> case V152 of {'Idris.Builtin.MkPair', E102, E103} -> (fun (V153, V154) -> begin (V158 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V155) -> fun (V156) -> ('un--implicitBind'(V12, V10, V155, V156)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V157) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V157)) end, V99))))(V23))), case V158 of {'Idris.Prelude.Types.Left', E104} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V160) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V12, V10, V9, V8, V7, V5, V4, V153, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V5, V154)), V1))(V23)) end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkBindVar-14401'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.TTImp.Elab.Check.MkEState', V25, V26, V27, V28, [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V18, V19}} | V29], [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V18, V20}} | V30], V31, V32, V33, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkBindVar-14286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.TTImp.TTImp.PI', E0} -> (fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Unify':'un--setInvertible'(V11, V3, V14, V24)) end end(E0)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in case block in checkBindVar-14131'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V21, V22) -> fun (V23) -> begin (V31 = begin (V24 = {'Idris.Builtin.MkPair', V19, {'Idris.Builtin.MkPair', V21, V22}}), (('case--case block in case block in case block in checkBindVar-14286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V21, V22, V24, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V25, V26, V27, V28, V29, V30) -> V26 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23)) end), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> begin (V124 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Added Bound implicit "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V35, V36)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V38)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V39, V40)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V43, V44)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V46) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V47, V48)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V50, V51)) end end}}, V45)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V55, V56)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V58, V59)) end end}}, V52, V53)) end end}}, V41)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V62)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V63, V64)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V66) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V67, V68)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V70, V71)) end end}}, V65)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V75, V76)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V78, V79)) end end}}, V72, V73)) end end}}, V60, V61)) end end}}, V37)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V82)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V83, V84)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V85) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V86)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V87, V88)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V89) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V91, V92)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V94, V95)) end end}}, V89)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V99, V100)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V101) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V102, V103)) end end}}, V96, V97)) end end}}, V85)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V107, V108)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V111, V112)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V114, V115)) end end}}, V109)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V119, V120)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V122, V123)) end end}}, V116, V117)) end end}}, V104, V105)) end end}}, V80, V81)) end end}}, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V19, {'Idris.Builtin.MkPair', V21, V22}}}})))) end))(V23))), case V124 of {'Idris.Prelude.Types.Left', E12} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V126) -> begin (V128 = begin (V127 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V127} end), case V128 of {'Idris.Prelude.Types.Left', E14} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V130) -> begin (V145 = begin (V144 = ('erlang':'put'(V8, case V130 of {'Idris.TTImp.Elab.Check.MkEState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143) -> {'Idris.TTImp.Elab.Check.MkEState', V131, V132, V133, V134, [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V19, V21}} | V135], [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V19, V22}} | V136], V137, V138, V139, V140, V141, V142, V143} end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V144} end), case V145 of {'Idris.Prelude.Types.Left', E29} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V147) -> begin (V148 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V11, V10, V3, {'Idris.Core.Name.UN', V2}, V4, V21, V23))), case V148 of {'Idris.Prelude.Types.Left', E31} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V150) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V11, V9, V8, V7, V6, V4, V3, V19, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V21)), V1))(V23)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkBindVar-14080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V26 = (('un--mkPatternHole'(V0, V8, V11, V9, V3, V7, V14, V4, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V20, V21, V22, V23, V24, V25) -> V21 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V19))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V31, V32) -> begin (V40 = begin (V33 = {'Idris.Builtin.MkPair', V29, {'Idris.Builtin.MkPair', V31, V32}}), (('case--case block in case block in case block in checkBindVar-14286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V29, V31, V32, V33, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V34, V35, V36, V37, V38, V39) -> V35 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V19)) end), case V40 of {'Idris.Prelude.Types.Left', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V42) -> begin (V133 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Added Bound implicit "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V44, V45)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V48, V49)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V52, V53)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V55) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V56, V57)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V58) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V58)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V59, V60)) end end}}, V54)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V64, V65)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V66) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V67, V68)) end end}}, V61, V62)) end end}}, V50)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V72, V73)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V76, V77)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V78) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V78)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V79, V80)) end end}}, V74)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V84, V85)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V86)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V87, V88)) end end}}, V81, V82)) end end}}, V69, V70)) end end}}, V46)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show__ZeroOneOmega'(V92, V93)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V96, V97)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V98) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V100, V101)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V102) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V103, V104)) end end}}, V98)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V108, V109)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V111, V112)) end end}}, V105, V106)) end end}}, V94)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V116, V117)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V120, V121)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V122) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V122)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V123, V124)) end end}}, V118)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V127) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V128, V129)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V131, V132)) end end}}, V125, V126)) end end}}, V113, V114)) end end}}, V89, V90)) end end}}, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V29, {'Idris.Builtin.MkPair', V31, V32}}}})))) end))(V19))), case V133 of {'Idris.Prelude.Types.Left', E20} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V135) -> begin (V137 = begin (V136 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V136} end), case V137 of {'Idris.Prelude.Types.Left', E22} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V139) -> begin (V154 = begin (V153 = ('erlang':'put'(V8, case V139 of {'Idris.TTImp.Elab.Check.MkEState', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> {'Idris.TTImp.Elab.Check.MkEState', V140, V141, V142, V143, [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V29, V31}} | V144], [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V29, V32}} | V145], V146, V147, V148, V149, V150, V151, V152} end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V153} end), case V154 of {'Idris.Prelude.Types.Left', E37} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V11, V10, V3, {'Idris.Core.Name.UN', V2}, V4, V31, V19))), case V157 of {'Idris.Prelude.Types.Left', E39} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V159) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V11, V9, V8, V7, V6, V4, V3, V29, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V31)), V1))(V19)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E41} -> (fun (V160) -> fun (V161) -> begin (V162 = (('nested--13633-13715--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, {'Idris.Core.Name.UN', V2}, V7, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingRig'('erased', V160))))(V161))), case V162 of {'Idris.Prelude.Types.Left', E42} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V164) -> begin (V165 = ('Idris.Idris2.TTImp.Elab.Check':'un--bindingTerm'('erased', V160))), begin (V166 = ('Idris.Idris2.TTImp.Elab.Check':'un--bindingType'('erased', V160))), begin (V167 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V11, V10, V3, {'Idris.Core.Name.UN', V2}, V4, V166, V161))), case V167 of {'Idris.Prelude.Types.Left', E44} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V169) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V11, V9, V8, V7, V6, V4, V3, V165, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V166)), V1))(V161)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkBindVar-14008'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 1 -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V32 = {'Idris.Core.Name.PV', {'Idris.Core.Name.UN', V2}, case V18 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V33 = (('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'('erased', V8, V12, {'Idris.Core.Name.UN', V2}))(V14))), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'('erased', V8, V32, V14))), case V36 of {'Idris.Prelude.Types.Left', E17} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E19} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V42) -> (('case--case block in checkBindVar-14080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V18, V32, V35, V38, V42, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V45, V46)) end end}, V32, case V42 of {'Idris.TTImp.Elab.Check.MkEState', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V51 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V14)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V11, V10, V9, V8, V7, V6, V5, V4, {'Idris.TTImp.TTImp.IVar', V3, {'Idris.Core.Name.UN', V2}}, V1)) end.
'case--checkBindVar-13943'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.TTImp.TTImp.PI', E0} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> 1 end, fun () -> fun (V15) -> 0 end end, ('Idris.Idris2.Core.Env':'un--defined'(V0, {'Idris.Core.Name.UN', V2}, V4)))) end(E0)); _ -> 1 end.
'case--getToBind-13658'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V4 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V9) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--getToBind-13611'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V4 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V11) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--getToBind,insert-13364'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> [{'Idris.Builtin.MkPair', V9, V10} | [{'Idris.Builtin.MkPair', V11, V12} | V13]]; 1 -> [{'Idris.Builtin.MkPair', V11, V12} | ('nested--12771-12934--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, {'Idris.Builtin.MkPair', V9, V10}, V15, [V11 | V14], V13))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getToBind,normImps-13182'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V24 = (('nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, [V19 | V12], V11))(V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> begin (V27 = (('nested--12771-12932--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V10))(V23))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V19, V29} | V26]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getToBind,normImps-13131'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V17 of {'Idris.Core.TT.Meta', E2, E3, E4, E5} -> (fun (V19, V20, V21, V22) -> fun (V23) -> begin (V24 = ('Idris.Idris2.Core.UnifyState':'un--isCurrentHole'(V6, V21, V23))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> (('case--case block in getToBind,normImps-13182'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V22, V21, V20, V18, V26, ('Idris.Idris2.Prelude.Basics':'un--&&'(V26, fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V29, V30)) end end}, V20, V12)))) end))))(V23)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end end(E0, E1)); _ -> ('nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end.
'case--getToBind,normImps-13007'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> ('nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V13, V12)); 1 -> fun (V17) -> begin (V18 = (('nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, [{'Idris.Core.Name.PV', V10, V9} | V13], V12))(V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = (('nested--12771-12932--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V11))(V17))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', {'Idris.Core.Name.PV', V10, V9}, V23} | V20]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--implicitBind-12877'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Core.Context.Hole', E1, E2} -> (fun (V6, V7) -> fun (V8) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--updateDef'(V2, V0, fun (V9) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.ImpBind'}} end, V8))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> ('Idris.Idris2.Core.UnifyState':'un--removeHoleName'(V2, V1, V0, V8)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--bindImplVars-12715'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', ('nested--12124-12385--in--un--tidyName'('erased', V1, V2, V3, V4, V5, V6, V7, V9)), {'Idris.Builtin.MkPair', V9, V10}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bindImplVars,getBinds-12638'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> begin (V24 = ('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', V20, V15))), begin (V25 = ('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', V20, V14))), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V12, {'Idris.Core.TT.PLet', V7, V16, V25, V24}, V22}, {'Idris.Core.TT.Bind', V7, V12, {'Idris.Core.TT.PLet', V7, V16, V25, V24}, V23}} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in bindImplVars,getBinds-12486'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V6 of {'Idris.TTImp.TTImp.PI', E0} -> (fun (V23) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V10, {'Idris.Core.TT.Pi', V7, V23, {'Idris.Core.TT.Implicit'}, V22}, V20}, {'Idris.Core.TT.TType', V7}} end(E0)); _ -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V10, {'Idris.Core.TT.PVar', V7, V14, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__PiInfo'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken__Term'('erased', 'erased', ('Idris.Idris2.Core.TT.Bounds':'un--sizeOf'('erased', V19)), V24)) end, V13)), V22}, V20}, {'Idris.Core.TT.Bind', V7, V10, {'Idris.Core.TT.PVTy', V7, V14, V22}, V21}} end.
'case--bindImplVars,getBinds-12435'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> begin (V23 = ('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', V19, V12))), case V6 of {'Idris.TTImp.TTImp.PI', E2} -> (fun (V24) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V10, {'Idris.Core.TT.Pi', V7, V24, {'Idris.Core.TT.Implicit'}, V23}, V21}, {'Idris.Core.TT.TType', V7}} end(E2)); _ -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V10, {'Idris.Core.TT.PVar', V7, V14, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__PiInfo'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken__Term'('erased', 'erased', ('Idris.Idris2.Core.TT.Bounds':'un--sizeOf'('erased', V19)), V25)) end, V13)), V23}, V21}, {'Idris.Core.TT.Bind', V7, V10, {'Idris.Core.TT.PVTy', V7, V14, V23}, V22}} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--push-12227'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Bind', V11, V3, V10, V9} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> {'Idris.Core.TT.Bind', V8, {'Idris.Core.Name.PV', V2, V1}, {'Idris.Core.TT.Pi', V6, V5, {'Idris.Core.TT.Implicit'}, V13}, ('un--push'([{'Idris.Core.Name.PV', V2, V1} | V0], V11, V3, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__Binder'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V14)) end, V10)), ('un--swapVars'('erased', 'erased', 'erased', [], V7))))} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--swapVars-11975'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> {'Idris.Core.TT.Local', V8, V7, V9}.
'case--swapIsVar-11903'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> (1 + V9).
'case--case block in bindUnsolved,mkImplicit-11539'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V1 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V24) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--bindUnsolved,mkImplicit-11447'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of {'Idris.Core.Context.Hole', E1, E2} -> (fun (V21, V22) -> fun (V23) -> begin (V27 = begin (V24 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V6, V10, V18, V11, V14, V23))), case V24 of {'Idris.Prelude.Types.Left', E3} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V26) -> (('nested--10745-11158--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V8, V9, V12, V17, V15, V16, V26))(V23)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V10, V6, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Added unbound implicit"/utf8>> end, V29, V23))), case V30 of {'Idris.Prelude.Types.Left', E7} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V32) -> begin (V52 = ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__Term'(V34, V35, V36, V37, V38, V39, V40, V41, V42)) end end end end end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__Term'(V43, V44, V45, V46, V47, V48, V49, V50, V51)) end end end end end end end end end}, V10, V6, V3))(case V1 of {'Idris.TTImp.Elab.Check.InLHS', E9} -> (fun (V33) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E9)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end))(V2))(V11))(V13))(V29))(V23))), case V52 of {'Idris.Prelude.Types.Left', E10} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in bindUnsolved,makeBoundVar-11337'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.TTImp.Elab.Check.MkEState', V21, V22, V23, V24, V25, [{'Idris.Builtin.MkPair', V17, {'Idris.TTImp.Elab.Check.NameBinding', V4, V14, V20, ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V10, V18)), ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V10, V16))}} | V26], V27, V28, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bindUnsolved,makeBoundVar-11179'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V6, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V20, V21)) end end}, V9, V17))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Can\x{27}t bind implicit "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V15)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" of type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V8, V24))))))))}, V17)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V25) -> fun (V26) -> begin (V27 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V6, V3, ('Idris.Idris2.Core.Name':'un--nameRoot'(V15)), V26))), case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V7, V6, V3, V2, V14, V12, V29, V25, V26))), case V30 of {'Idris.Prelude.Types.Left', E5} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E7} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.TT':'un--forgetDef'('erased', 'erased', V13))), begin (V52 = begin (V51 = ('erlang':'put'(V5, case V36 of {'Idris.TTImp.Elab.Check.MkEState', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.TTImp.Elab.Check.MkEState', V38, V39, V40, V41, V42, [{'Idris.Builtin.MkPair', V29, {'Idris.TTImp.Elab.Check.NameBinding', V4, V14, V37, ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V10, V32)), ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V10, V25))}} | V43], V44, V45, V46, V47, V48, V49, V50} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E22} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V54) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V11, V32))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkPatternHole-11036'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--mkPatternHole'(V0, V9, V8, V7, V6, V5, V4, V3, V2, {'Idris.Prelude.Types.Nothing'})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> fun (V16) -> begin (V30 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V10 of {'Idris.TTImp.Elab.Check.MkEState', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V17 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8, V7, V6, V5, V12, V4, V15, V16))), case V30 of {'Idris.Prelude.Types.Left', E14} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--apply'('erased', V6, ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V11, V32)), ('nested--10429-10924--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V0, V11)))), {'Idris.Builtin.MkPair', V13, ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V11, V15))}}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkPatternHole-10886'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V12, V12}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkOuterHole-10679'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--mkOuterHole'(V0, V8, V7, V6, V5, V4, V3, V2, {'Idris.Prelude.Types.Nothing'})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> begin (V27 = case V9 of {'Idris.TTImp.Elab.Check.MkEState', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V16 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V28) -> begin (V42 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V9 of {'Idris.TTImp.Elab.Check.MkEState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V29 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V6, V5, V4, V27, V3, V13, V28))), case V42 of {'Idris.Prelude.Types.Left', E27} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V10, V44)), ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V10, V13))}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12124-12385--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V9, V10) -> ('nested--12124-12385--in--un--tidyName'('erased', V1, V2, V3, V4, V5, V6, V7, V10)) end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V11, V12) -> ('nested--12124-12385--in--un--tidyName'('erased', V1, V2, V3, V4, V5, V6, V7, V11)) end(E2, E3)); {'Idris.Core.Name.Nested', E4, E5} -> (fun (V13, V14) -> ('nested--12124-12385--in--un--tidyName'('erased', V1, V2, V3, V4, V5, V6, V7, V14)) end(E4, E5)); _ -> V8 end.
'nested--11404-11780--in--un--swapP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of 0 -> 0; _ -> begin (V10 = (V8 - 1)), (1 + (1 + V10)) end end.
'nested--12771-12933--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V15 of {'Idris.Core.Name.PV', E8, E9} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V1, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Implicit pattern var "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'({'Idris.Core.Name.PV', V17, V18})))) end, V2, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingType'('erased', V16))))(V19))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> (('case--getToBind,normImps-13007'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V18, V17, V16, V14, V10, V9, V22, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V25, V26)) end end}, {'Idris.Core.Name.PV', V17, V18}, V10))))(V19)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingTerm'('erased', V16)), V27))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Normalising implicit "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V15)))) end, V30, V27))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> (('case--getToBind,normImps-13131'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V16, V14, V10, V9, V30, V33, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V30))))(V27)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12771-12932--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V15, V16))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Check.NameBinding', V1, V12, V13, V14, V19}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E7, E8, E9, E10, E11, E12} -> (fun (V20, V21, V22, V23, V24, V25) -> fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V24, V26))), case V27 of {'Idris.Prelude.Types.Left', E13} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V25, V26))), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Check.AsBinding', V1, V21, V22, V23, V29, V32}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12631-12803--in--un--nHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> case V11 of {'Idris.TTImp.Elab.Check.NameBinding', E2, E3, E4, E5, E6} -> (fun (V12, V13, V14, V15, V16) -> fun (V17) -> begin (V18 = (('un--normaliseHolesScope'(V8, V0, V5, V4, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.TTImp.Elab.Check.NameBinding', V0, V13, V14, V15, V20}}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5, E6)); {'Idris.TTImp.Elab.Check.AsBinding', E9, E10, E11, E12, E13, E14} -> (fun (V21, V22, V23, V24, V25, V26) -> fun (V27) -> begin (V28 = (('un--normaliseHolesScope'(V8, V0, V5, V4, V25))(V27))), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.TTImp.Elab.Check.AsBinding', V0, V22, V23, V24, V30, V26}}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10745-11159--in--un--mkImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V24, V25) -> fun (V26) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V12, case V8 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V27 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26))), case V53 of {'Idris.Prelude.Types.Left', E40} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V55) -> case V55 of {'Idris.Prelude.Types.Just', E42} -> (fun (V56) -> case V56 of {'Idris.Core.Context.Hole', E43, E44} -> (fun (V57, V58) -> begin (V62 = begin (V59 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V6, V16, V8, V18, V24, V26))), case V59 of {'Idris.Prelude.Types.Left', E45} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V61) -> (('nested--10745-11158--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V16, V12, V14, V20, V9, V25, V10, V61))(V26)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E47} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V16, V6, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Added unbound implicit"/utf8>> end, V64, V26))), case V65 of {'Idris.Prelude.Types.Left', E49} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V67) -> begin (V87 = ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__Term'(V69, V70, V71, V72, V73, V74, V75, V76, V77)) end end end end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__Term'(V78, V79, V80, V81, V82, V83, V84, V85, V86)) end end end end end end end end end}, V16, V6, V3))(case V1 of {'Idris.TTImp.Elab.Check.InLHS', E51} -> (fun (V68) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E51)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end))(V2))(V18))(V22))(V64))(V26))), case V87 of {'Idris.Prelude.Types.Left', E52} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E42)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10429-10924--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.TT.SubRefl'} -> (fun () -> [] end()); _ -> case V11 of [E0 | E1] -> (fun (V13, V14) -> case V12 of {'Idris.Core.TT.DropCons', E2} -> (fun (V15) -> [{'Idris.Core.TT.Local', V6, {'Idris.Prelude.Types.Nothing'}, 0} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V16)) end, ('nested--10429-10924--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V14, V15))))] end(E2)); _ -> [] end end(E0, E1)); _ -> [] end end.
'nested--10745-11158--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> ('case--bindUnsolved,makeBoundVar-11179'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V14, V13, V12, V11, V10, V9, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V15, V13)))).
'nested--12054-12322--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V7 of {'Idris.Core.Name.PV', E8, E9} -> (fun (V10, V11) -> case V8 of {'Idris.Core.TT.Pi', E14, E15, E16, E17} -> (fun (V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Core.TT.Bind', V6, {'Idris.Core.Name.PV', V10, V11}, V8, ('nested--12054-12322--in--un--liftImps\x{27}'(V0, V1, V2, V3, [{'Idris.Core.Name.PV', V10, V11} | V4], V9))} end()); _ -> case V8 of {'Idris.Core.TT.Pi', E18, E19, E20, E21} -> (fun (V16, V17, V18, V19) -> ('un--push'(V4, V6, V7, V8, ('nested--12054-12322--in--un--liftImps\x{27}'(V0, V1, V2, V3, [V7 | V4], V9)))) end(E18, E19, E20, E21)); _ -> V5 end end end(E14, E15, E16, E17)); _ -> case V8 of {'Idris.Core.TT.Pi', E10, E11, E12, E13} -> (fun (V20, V21, V22, V23) -> ('un--push'(V4, V6, V7, V8, ('nested--12054-12322--in--un--liftImps\x{27}'(V0, V1, V2, V3, [V7 | V4], V9)))) end(E10, E11, E12, E13)); _ -> V5 end end end(E8, E9)); _ -> case V8 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V24, V25, V26, V27) -> ('un--push'(V4, V6, V7, V8, ('nested--12054-12322--in--un--liftImps\x{27}'(V0, V1, V2, V3, [V7 | V4], V9)))) end(E4, E5, E6, E7)); _ -> V5 end end end(E0, E1, E2, E3)); _ -> V5 end.
'nested--13633-13714--in--un--isIncompatible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V20, V21)) end end}}, V12)), fun () -> ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V28, V29)) end end}}, V13)) end)), fun () -> ('Idris.Idris2.Algebra.Preorder':'un--<'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V30, V31)) end end, fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V32)) end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V33, V34, V35, V36, V37)) end end end end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V40, V41)) end end}}, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V12, V13)))) end)).
'nested--12771-12934--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> [V9 | []]; _ -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V12 of [E2 | E3] -> (fun (V15, V16) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> begin (V24 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V22, V23)) end end}, V19, V10)) end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.TTImp.Elab.Check':'un--bindingMetas'('erased', V18))))))), ('case--getToBind,insert-13364'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V14, V17, V18, V16, V11, V10, V24, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V27, V28)) end end}, V13, V24)))) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--12124-12386--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V10 of [] -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', V11, V12)), ('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', V11, V13))}; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V18, V19) -> case V19 of {'Idris.TTImp.Elab.Check.NameBinding', E6, E7, E8, E9, E10} -> (fun (V20, V21, V22, V23, V24) -> ('case--bindImplVars,getBinds-12435'('erased', V1, V2, V3, V4, V5, V6, V7, V20, V23, V16, V18, V24, V22, V21, V15, V13, V12, 'erased', V11, ('nested--12124-12386--in--un--getBinds'('erased', V1, V2, V3, V4, V5, V6, V7, 'erased', 'erased', V15, {'Idris.Core.TT.Bounds.Add', V16, V18, V11}, V12, V13)))) end(E6, E7, E8, E9, E10)); {'Idris.TTImp.Elab.Check.AsBinding', E11, E12, E13, E14, E15, E16} -> (fun (V25, V26, V27, V28, V29, V30) -> ('case--bindImplVars,getBinds-12638'('erased', V1, V2, V3, V4, V5, V6, V7, 'erased', V25, V27, V28, V16, V18, V30, V29, V26, V15, V13, V12, V11, ('nested--12124-12386--in--un--getBinds'('erased', V1, V2, V3, V4, V5, V6, V7, 'erased', 'erased', V15, {'Idris.Core.TT.Bounds.Add', V16, V18, V11}, V12, V13)))) end(E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12771-12935--in--un--depSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> []; [E0 | E1] -> (fun (V11, V12) -> ('nested--12771-12934--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V9, [], ('nested--12771-12935--in--un--depSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13633-13715--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case ('nested--13633-13714--in--un--isIncompatible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14)) of 0 -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.LinearUsed', V3, (1 + (1 + 0)), V12}, V15)) end; 1 -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10429-10925--in--un--bindInner'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Prelude.Types.Just', V13} end()); _ -> case V11 of [E0 | E1] -> (fun (V15, V16) -> case V12 of {'Idris.Core.Env.::', E2, E3} -> (fun (V17, V18) -> case V14 of {'Idris.Core.TT.DropCons', E4} -> (fun (V19) -> ('nested--10429-10925--in--un--bindInner'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V16, V18, {'Idris.Core.TT.Bind', V6, V15, V17, V13}, V19)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end.
'un--swapVars'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V5, V6, V7) -> ('case--swapVars-11975'('erased', 'erased', 'erased', V3, 'erased', V7, 'erased', V6, V5, ('un--swapIsVar'('erased', 'erased', 'erased', 'erased', V3, V7, 'erased')))) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V8, V9, V10) -> {'Idris.Core.TT.Ref', V8, V9, V10} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V11, V12, V13, V14) -> {'Idris.Core.TT.Meta', V11, V12, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('un--swapVars'('erased', 'erased', 'erased', V3, V15)) end, V14))} end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V16, V17, V18, V19) -> {'Idris.Core.TT.Bind', V16, V17, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__Binder'('erased', 'erased', fun (V20) -> ('un--swapVars'('erased', 'erased', 'erased', V3, V20)) end, V18)), ('un--swapVars'('erased', 'erased', 'erased', [V17 | V3], V19))} end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V21, V22, V23) -> {'Idris.Core.TT.App', V21, ('un--swapVars'('erased', 'erased', 'erased', V3, V22)), ('un--swapVars'('erased', 'erased', 'erased', V3, V23))} end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V24, V25, V26, V27) -> {'Idris.Core.TT.As', V24, V25, ('un--swapVars'('erased', 'erased', 'erased', V3, V26)), ('un--swapVars'('erased', 'erased', 'erased', V3, V27))} end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V28, V29, V30) -> {'Idris.Core.TT.TDelayed', V28, V29, ('un--swapVars'('erased', 'erased', 'erased', V3, V30))} end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V31, V32, V33, V34) -> {'Idris.Core.TT.TDelay', V31, V32, ('un--swapVars'('erased', 'erased', 'erased', V3, V33)), ('un--swapVars'('erased', 'erased', 'erased', V3, V34))} end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V35, V36, V37) -> {'Idris.Core.TT.TForce', V35, V36, ('un--swapVars'('erased', 'erased', 'erased', V3, V37))} end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V38, V39) -> {'Idris.Core.TT.PrimVal', V38, V39} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V40, V41) -> {'Idris.Core.TT.Erased', V40, V41} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V42) -> {'Idris.Core.TT.TType', V42} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--swapIsVarH'(V0, V1, V2, V3, V4, V5) -> case V4 of 0 -> (1 + 0); _ -> begin (V6 = (V4 - 1)), ('nested--11404-11780--in--un--swapP'('erased', 'erased', 'erased', 'erased', V6, 'erased', V4, 'erased', V6, 'erased')) end end.
'un--swapIsVar'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> ('un--swapIsVarH'('erased', 'erased', 'erased', 'erased', V5, 'erased')); [E0 | E1] -> (fun (V7, V8) -> case V5 of 0 -> 0; _ -> begin (V9 = (V5 - 1)), begin (V10 = (1 + V9)), ('case--swapIsVar-11903'('erased', 'erased', 'erased', 'erased', V9, V7, V8, 'erased', V10, ('un--swapIsVar'('erased', 'erased', 'erased', 'erased', V8, V9, 'erased')))) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--push'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V6 of {'Idris.Core.Name.PV', E4, E5} -> (fun (V9, V10) -> case V7 of {'Idris.Core.TT.Pi', E6, E7, E8, E9} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Implicit'} -> (fun () -> begin (V15 = {'Idris.Core.TT.Bind', V5, {'Idris.Core.Name.PV', V9, V10}, {'Idris.Core.TT.Pi', V11, V12, {'Idris.Core.TT.Implicit'}, V14}, V8}), ('case--push-12227'(V0, V10, V9, V2, V14, V12, V11, V8, V5, V15, V3, V1, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V14, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})))) end end()); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end end(E6, E7, E8, E9)); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end end(E4, E5)); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end end(E0, E1, E2, E3)); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end.
'un--normaliseHolesScope'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> fun (V9) -> begin (V10 = (('un--normaliseHolesScope'(V0, [V6 | V1], V2, {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V5, ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V7)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V7))}, V3}, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V5, V6, V7, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> fun (V13) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V1, V2, V3, V4, V13)) end end.
'un--mkPatternHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.TTImp.TTImp.PI', E31} -> (fun (V10) -> fun (V11) -> begin (V12 = (('un--mkOuterHole'(V0, V1, V2, V3, V4, V5, V6, V7, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E32} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V16, V16}}} end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E1} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V22) -> begin (V36 = case V22 of {'Idris.TTImp.Elab.Check.MkEState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V26 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V50 = case V22 of {'Idris.TTImp.Elab.Check.MkEState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V39 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V51 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V17))(V18))), case V51 of {'Idris.Prelude.Types.Left', E29} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V53) -> (('case--mkPatternHole-11036'(V0, V17, V8, V7, V6, V5, V4, V3, V2, V1, V22, V36, V50, V53, ('nested--10429-10925--in--un--bindInner'(V0, V17, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', V0, V7, V53, V36))))(V18)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V54) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V4, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unknown type for pattern variable "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V6))))}, V54)) end end end.
'un--mkOuterHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> begin (V28 = case V14 of {'Idris.TTImp.Elab.Check.MkEState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V29 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V9))(V10))), case V29 of {'Idris.Prelude.Types.Left', E16} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V31) -> (('case--mkOuterHole-10679'(V0, V9, V7, V6, V5, V4, V3, V2, V1, V14, V28, V31, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V31, V28))))(V10)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V50 = case V36 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V40 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V64 = case V36 of {'Idris.TTImp.Elab.Check.MkEState', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V53 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V65 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V2, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"type_of_"/utf8>>, ('Idris.Idris2.Core.Name':'un--nameRoot'(V6)))), V32))), case V65 of {'Idris.Prelude.Types.Left', E46} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V67) -> begin (V85 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(case V36 of {'Idris.TTImp.Elab.Check.MkEState', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V68 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V81, V82)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V83, V84)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V64, V67, {'Idris.Core.TT.TType', V4}, V32))), case V85 of {'Idris.Prelude.Types.Left', E61} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V87) -> begin (V88 = (('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Made metavariable for type of "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V6)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V67)))))))) end))(V32))), case V88 of {'Idris.Prelude.Types.Left', E63} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V90) -> begin (V92 = begin (V91 = ('erlang':'put'(V1, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V67, V5, {'Idris.Core.TT.Explicit'}, V7, ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V50, V87)), {'Idris.Core.TT.TType', V4}, V36))))), {'Idris.Prelude.Types.Right', V91} end), case V92 of {'Idris.Prelude.Types.Left', E65} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V94) -> begin (V108 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V36 of {'Idris.TTImp.Elab.Check.MkEState', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V95 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V4, V5, V64, V6, V87, V32))), case V108 of {'Idris.Prelude.Types.Left', E80} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V50, V110)), ('Idris.Idris2.Core.TT':'un--embedSub'('erased', 'erased', V50, V87))}} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftImps'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.PI', E0} -> (fun (V3) -> case V2 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V4, V5) -> case V5 of {'Idris.Core.TT.TType', E3} -> (fun (V6) -> {'Idris.Builtin.MkPair', ('nested--12054-12322--in--un--liftImps\x{27}'(V0, V3, V4, V6, V0, V4)), {'Idris.Core.TT.TType', V6}} end(E3)); _ -> V2 end end(E1, E2)); _ -> V2 end end(E0)); _ -> V2 end.
'un--implicitBind'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> case V37 of {'Idris.Core.Context.Hole', E31, E32} -> (fun (V38, V39) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--updateDef'(V0, V2, fun (V40) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.ImpBind'}} end, V3))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> ('Idris.Idris2.Core.UnifyState':'un--removeHoleName'(V0, V1, V2, V3)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E30)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getToBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> fun (V10) -> begin (V12 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, case V5 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V11) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end, {'Idris.Core.Unify.Normal'}, V10))), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> begin (V15 = (('un--bindUnsolved'(V0, V1, V2, V3, V4, V5, V6))(V10))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V19 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, case V5 of {'Idris.TTImp.Elab.Check.InLHS', E5} -> (fun (V18) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E5)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end, {'Idris.Core.Unify.Normal'}, V10))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> begin (V48 = ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V30) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V33, V34)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V30)), V8)))) end, case V29 of {'Idris.TTImp.Elab.Check.MkEState', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V40 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V49 = (('nested--12771-12933--in--un--normImps'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V25, [], V48))(V10))), case V49 of {'Idris.Prelude.Types.Left', E25} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V51) -> begin (V53 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V52) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V52)) end, V51))), begin (V54 = ('nested--12771-12935--in--un--depSort'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V53, V51))), begin (V70 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Bound names: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V57, V58)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V59) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show__(ImplBinding $vars)'('erased', V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V60, V61)) end end}}, V55)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V65, V66)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show__(ImplBinding $vars)'('erased', V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V68, V69)) end end}}, V62, V63)) end end}, V51)))) end))(V10))), case V70 of {'Idris.Prelude.Types.Left', E27} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V72) -> begin (V88 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Sorted: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V75, V76)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show__(ImplBinding $vars)'('erased', V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V78, V79)) end end}}, V73)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V82)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V83, V84)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V85) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show__(ImplBinding $vars)'('erased', V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V86, V87)) end end}}, V80, V81)) end end}, V54)))) end))(V10))), case V88 of {'Idris.Prelude.Types.Left', E29} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V90) -> {'Idris.Prelude.Types.Right', V54} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--checkBindVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V18 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> V12 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('case--checkBindVar-14008'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V18, ('case--checkBindVar-13943'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V18, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E6, E7, E8, E9, E10, E11} -> (fun (V19, V20, V21, V22, V23, V24) -> V20 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--checkBindHere'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V31 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V45 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V35 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V59 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V52 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V74 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V60) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V60)) end, case V17 of {'Idris.TTImp.Elab.Check.MkEState', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V66 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V76 = begin (V75 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'('erased', V0, V8, {'Idris.Core.TT.SubRefl'}, [], V17))))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E54} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V1, V13))), case V79 of {'Idris.Prelude.Types.Left', E56} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V81) -> begin (V88 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E58, E59, E60, E61, E62, E63} -> (fun (V82, V83, V84, V85, V86, V87) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V82, V10, V84, 0, V86, V87} end(E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V8, V11, V12))(V13))), case V88 of {'Idris.Prelude.Types.Left', E64} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V90) -> case V90 of {'Idris.Builtin.MkPair', E66, E67} -> (fun (V91, V92) -> begin (V100 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, begin (V93 = {'Idris.Builtin.MkPair', V91, V92}), ('case--case block in checkBindHere-15191'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V17, V31, V45, V59, V74, V78, V81, V91, V92, V93, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E68, E69, E70, E71, E72, E73} -> (fun (V94, V95, V96, V97, V98, V99) -> V94 end(E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, {'Idris.Core.Unify.Normal'}, V13))), case V100 of {'Idris.Prelude.Types.Left', E74} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V102) -> begin (V110 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V1, V3, V81, begin (V103 = {'Idris.Builtin.MkPair', V91, V92}), ('case--case block in checkBindHere-15089'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V17, V31, V45, V59, V74, V78, V81, V91, V92, V103, V102, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E76, E77, E78, E79, E80, E81} -> (fun (V104, V105, V106, V107, V108, V109) -> V104 end(E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, {'Idris.Core.Unify.Defaults'}, V13))), case V110 of {'Idris.Prelude.Types.Left', E82} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V112) -> begin (V114 = begin (V113 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V113} end), case V114 of {'Idris.Prelude.Types.Left', E84} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V116) -> begin (V148 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V117) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V0, V1, V2, V3, V4, case V116 of {'Idris.Core.UnifyState.MkUState', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V126 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V117)) end, fun (V128) -> fun (V129) -> begin (V131 = begin (V130 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V130} end), case V131 of {'Idris.Prelude.Types.Left', E96} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V133) -> begin (V145 = begin (V144 = ('erlang':'put'(V3, case V133 of {'Idris.Core.UnifyState.MkUState', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V134, V135, V136, V137, V138, V139, V140, V141, V142, V143) -> {'Idris.Core.UnifyState.MkUState', V134, V135, V136, V137, V138, V139, V140, V141, [], V143} end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V144} end), case V145 of {'Idris.Prelude.Types.Left', E108} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V147) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V128, V129)) end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13))), case V148 of {'Idris.Prelude.Types.Left', E110} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V150) -> begin (V151 = ('Idris.Idris2.Core.Unify':'un--checkDots'(V3, V1, V13))), case V151 of {'Idris.Prelude.Types.Left', E112} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V153) -> begin (V154 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Binding names"/utf8>> end, V91, V13))), case V154 of {'Idris.Prelude.Types.Left', E114} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V156) -> begin (V157 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, V8, V91))(V13))), case V157 of {'Idris.Prelude.Types.Left', E116} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V159) -> begin (V166 = (('un--getToBind'(V0, V1, V4, V3, V9, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E118, E119, E120, E121, E122, E123} -> (fun (V160, V161, V162, V163, V164, V165) -> V160 end(E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10, V8, V74))(V13))), case V166 of {'Idris.Prelude.Types.Left', E124} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V168) -> begin (V169 = ('Idris.Idris2.TTImp.Elab.Check':'un--clearToBind'('erased', V4, V74, V13))), case V169 of {'Idris.Prelude.Types.Left', E126} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V171) -> begin (V173 = begin (V172 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V172} end), case V173 of {'Idris.Prelude.Types.Left', E128} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V175) -> begin (V203 = begin (V202 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'('erased', case V17 of {'Idris.TTImp.Elab.Check.MkEState', E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188) -> V176 end(E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V31, V45, V59, case V175 of {'Idris.TTImp.Elab.Check.MkEState', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155} -> (fun (V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> {'Idris.TTImp.Elab.Check.MkEState', V189, V190, V191, V192, [], V194, V195, V196, V197, V198, V199, V200, V201} end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), {'Idris.Prelude.Types.Right', V202} end), case V203 of {'Idris.Prelude.Types.Left', E156} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V205) -> begin (V206 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V92))(V13))), case V206 of {'Idris.Prelude.Types.Left', E158} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V208) -> begin (V210 = begin (V209 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V209} end), case V210 of {'Idris.Prelude.Types.Left', E160} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V212) -> begin (V219 = begin (V213 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V212, V8, V91, V13))), case V213 of {'Idris.Prelude.Types.Left', E162} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V215) -> begin (V216 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V212, V8, V208, V13))), case V216 of {'Idris.Prelude.Types.Left', E164} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V218) -> (('un--bindImplicits'(V1, V0, V9, V10, V212, V8, V168, V215, V218))(V13)) end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V219 of {'Idris.Prelude.Types.Left', E166} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V221) -> case V221 of {'Idris.Builtin.MkPair', E168, E169} -> (fun (V222, V223) -> begin (V227 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V224) -> fun (V225) -> ('un--implicitBind'(V1, V3, V224, V225)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V226) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V226)) end, V168))))(V13))), case V227 of {'Idris.Prelude.Types.Left', E170} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V229) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V222, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V223)), V12))(V13)) end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindUnsolved'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V30 = case V12 of {'Idris.TTImp.Elab.Check.MkEState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V23 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V35 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Bindable unsolved implicits: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V32, V33)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V34) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V34)) end, V30)))))) end))(V8))), case V35 of {'Idris.Prelude.Types.Left', E17} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V37) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V38) -> ('nested--10745-11159--in--un--mkImplicit'(V6, V5, V4, V3, V0, V2, V1, case V12 of {'Idris.TTImp.Elab.Check.MkEState', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V39 end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16, case V12 of {'Idris.TTImp.Elab.Check.MkEState', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V54 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.TTImp.Elab.Check.MkEState', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V68 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38)) end, case V12 of {'Idris.TTImp.Elab.Check.MkEState', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V84 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--bindImplicits'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V8}} end end()); _ -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('nested--12631-12803--in--un--nHoles'(V1, V8, V7, V6, V5, V4, V3, V2, V0, V11)) end, V6, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('un--liftImps'(V1, V3, ('un--bindImplVars'('erased', V2, V3, V4, V5, V14, V7, V8))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--bindImplVars'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> {'Idris.Builtin.MkPair', V6, V7} end()); _ -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', ('nested--12124-12385--in--un--tidyName'('erased', V7, V6, V5, V4, V3, V2, V1, V9)), {'Idris.Builtin.MkPair', V9, V10}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5))), ('nested--12124-12386--in--un--getBinds'('erased', V7, V6, V5, V4, V3, V2, V1, 'erased', 'erased', V11, {'Idris.Core.TT.Bounds.None'}, V6, V7)) end end.
