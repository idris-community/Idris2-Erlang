-module('Idris.Idris2.TTImp.ProcessRecord').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in elabRecord-5314'/27,
  'case--case block in elabRecord-5124'/19,
  'case--elabRecord-5084'/18,
  'case--case block in elabRecord,elabGetters-4892'/37,
  'case--case block in elabRecord,elabGetters-4726'/38,
  'case--case block in elabRecord,elabGetters-4560'/39,
  'case--case block in elabRecord,elabGetters-4374'/44,
  'case--case block in elabRecord,elabGetters-4011'/29,
  'case--elabRecord,elabGetters-3931'/29,
  'case--elabRecord,recTy-3704'/15,
  'nested--9497-3583--in--un--recTy'/14,
  'nested--9497-3579--in--un--paramTelescope'/14,
  'nested--9497-3582--in--un--mkTy'/16,
  'nested--9516-3587--in--un--jname'/15,
  'nested--9497-3580--in--un--fname'/15,
  'nested--9497-3581--in--un--farg'/15,
  'nested--9497-3586--in--un--elabGetters'/21,
  'nested--9497-3584--in--un--elabAsData'/15,
  'nested--9497-3585--in--un--countExp'/16,
  'nested--9520-3665--in--un--apply'/16,
  'un--projVis'/1,
  'un--processRecord'/10,
  'un--mkDataTy'/2,
  'un--elabRecord'/15
]).
'case--case block in case block in elabRecord-5314'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V27, V28, V20, [V23 | V21], V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord-5124'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V21 = (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V20) -> {'Idris.Core.Name.RF', V20} end, {'Idris.Core.Env.Nil'}, V17))(V19))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V13, V19))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> case V26 of 0 -> (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V27) -> {'Idris.Core.Name.UN', V27} end, {'Idris.Core.Env.Nil'}, V17))(V19)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V28) -> begin (V55 = case V16 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V31 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V82 = case V16 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V59 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V83) -> begin (V84 = ('Idris.Idris2.Core.Context':'un--extendNS'(V13, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V28)), V83))), case V84 of {'Idris.Prelude.Types.Left', E57} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--getNS'(V13, V83))), case V87 of {'Idris.Prelude.Types.Left', E59} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V89) -> begin (V91 = (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V90) -> {'Idris.Core.Name.RF', V90} end, {'Idris.Core.Env.Nil'}, V17))(V83))), case V91 of {'Idris.Prelude.Types.Left', E61} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V93) -> begin (V98 = begin (V94 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V13, V83))), case V94 of {'Idris.Prelude.Types.Left', E63} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V96) -> case V96 of 0 -> (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V97) -> {'Idris.Core.Name.UN', V97} end, {'Idris.Core.Env.Nil'}, V17))(V83)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V98 of {'Idris.Prelude.Types.Left', E65} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V100) -> begin (V102 = begin (V101 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E67} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V104) -> begin (V131 = ('erlang':'put'(V13, case V104 of {'Idris.Core.Context.MkDefs', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130) -> {'Idris.Core.Context.MkDefs', V105, V106, V55, [V89 | V82], V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130} end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V131} end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabRecord-5084'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V21 = (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V20) -> {'Idris.Core.Name.RF', V20} end, {'Idris.Core.Env.Nil'}, V18))(V19))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V13, V19))), case V24 of {'Idris.Prelude.Types.Left', E3} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V26) -> case V26 of 0 -> (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V27) -> {'Idris.Core.Name.UN', V27} end, {'Idris.Core.Env.Nil'}, V18))(V19)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V28) -> begin (V55 = case V16 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V31 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V82 = case V16 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V59 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V83) -> begin (V84 = ('Idris.Idris2.Core.Context':'un--extendNS'(V13, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V28)), V83))), case V84 of {'Idris.Prelude.Types.Left', E58} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--getNS'(V13, V83))), case V87 of {'Idris.Prelude.Types.Left', E60} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V89) -> begin (V91 = (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V90) -> {'Idris.Core.Name.RF', V90} end, {'Idris.Core.Env.Nil'}, V18))(V83))), case V91 of {'Idris.Prelude.Types.Left', E62} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V93) -> begin (V98 = begin (V94 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V13, V83))), case V94 of {'Idris.Prelude.Types.Left', E64} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V96) -> case V96 of 0 -> (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], fun (V97) -> {'Idris.Core.Name.UN', V97} end, {'Idris.Core.Env.Nil'}, V18))(V83)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V98 of {'Idris.Prelude.Types.Left', E66} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V100) -> begin (V102 = begin (V101 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E68} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V104) -> begin (V131 = ('erlang':'put'(V13, case V104 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130) -> {'Idris.Core.Context.MkDefs', V105, V106, V55, [V89 | V82], V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130} end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V131} end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V132) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Adding "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V3)), <<"failed"/utf8>>))))}, V132)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-4892'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V36 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V37, V38)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V39, V40)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-4726'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of 0 -> [{'Idris.TTImp.TTImp.IBindVar', V9, V28} | []]; 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-4560'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V38 of 0 -> V37; 1 -> {'Idris.TTImp.TTImp.INamedApp', V9, V37, {'Idris.Core.Name.UN', V28}, {'Idris.TTImp.TTImp.IBindVar', V9, V28}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-4374'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V43 of 0 -> (1 + V26); 1 -> V26; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-4011'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of 0 -> (1 + V26); 1 -> V26; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabRecord,elabGetters-3931'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of 0 -> ('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V16 | V14], V27, ('case--case block in elabRecord,elabGetters-4011'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.TT':'dn--un--==_Eq__(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(Term $vars)'('erased', V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__(Term $vars)'('erased', V31, V32)) end end}, V19, {'Idris.Core.TT.Explicit'})), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V35, V36)) end end}, V16, V6)))) end)))), V25, V24, {'Idris.Core.Env.::', V21, V23}, V17)); 1 -> begin (V37 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V16))), fun (V38) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V13, (V24(V37))))(V38))), case V39 of {'Idris.Prelude.Types.Left', E0} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V41) -> begin (V42 = (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V14, V13, V23, V18))(V38))), case V42 of {'Idris.Prelude.Types.Left', E2} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V6, V25, V44))), begin (V46 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.field"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Field type: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V45)))) end))(V38))), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V49 = {'Idris.Core.Name.MN', <<"rec"/utf8>>, 0}), begin (V52 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V13, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V50) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V50)) end, V2)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V51) -> ('nested--9497-3580--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V51)) end, V0)), V6)))), ('nested--9497-3582--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('nested--9497-3579--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.TTImp.TTImp.IPi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V49}, ('nested--9497-3583--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), V45})), V38))), case V52 of {'Idris.Prelude.Types.Left', E6} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V54) -> begin (V55 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.projection"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Projection "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V41)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V54)))))))) end))(V38))), case V55 of {'Idris.Prelude.Types.Left', E8} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V57) -> begin (V66 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IClaim', V9, ('case--case block in elabRecord,elabGetters-4892'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V37, V41, V44, V45, V48, V49, V54, V57, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V58, V59)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V60, V61)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V64, V65)) end end}}, V20)))), ('un--projVis'(V4)), [{'Idris.TTImp.TTImp.Inline'} | []], {'Idris.TTImp.TTImp.MkImpTy', V9, V41, V54}}))(V38))), case V66 of {'Idris.Prelude.Types.Left', E10} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V68) -> begin (V73 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V9, V27}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--replicate'('erased', V26, {'Idris.TTImp.TTImp.Implicit', V9, 0})), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('case--case block in elabRecord,elabGetters-4726'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V37, V41, V44, V45, V48, V49, V54, V57, V68, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(Term $vars)'('erased', V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__(Term $vars)'('erased', V71, V72)) end end}, V19, {'Idris.Core.TT.Explicit'})))), ('Idris.Idris2.Data.List':'un--replicate'('erased', ('nested--9497-3585--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V17)), {'Idris.TTImp.TTImp.Implicit', V9, 0}))))))))), begin (V78 = {'Idris.TTImp.TTImp.IApp', V9, {'Idris.TTImp.TTImp.IVar', V9, V41}, ('case--case block in elabRecord,elabGetters-4560'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V37, V41, V44, V45, V48, V49, V54, V57, V68, V73, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(Term $vars)'('erased', V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__(Term $vars)'('erased', V76, V77)) end end}, V19, {'Idris.Core.TT.Explicit'}))))}), begin (V79 = {'Idris.TTImp.TTImp.IVar', V9, {'Idris.Core.Name.UN', V37}}), begin (V80 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.projection"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Projection "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V78)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V79)))))))) end))(V38))), case V80 of {'Idris.Prelude.Types.Left', E12} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V82) -> begin (V83 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IDef', V9, V41, [{'Idris.TTImp.TTImp.PatClause', V9, V78, V79} | []]}))(V38))), case V83 of {'Idris.Prelude.Types.Left', E14} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V85) -> begin (V86 = [{'Idris.Builtin.MkPair', V16, {'Idris.TTImp.TTImp.IApp', V9, {'Idris.TTImp.TTImp.IVar', V9, V41}, {'Idris.TTImp.TTImp.IVar', V9, V49}}} | V25]), (('nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V16 | V14], V27, ('case--case block in elabRecord,elabGetters-4374'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V37, V41, V44, V45, V48, V49, V54, V57, V68, V73, V78, V79, V82, V85, V86, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq__(Term $vars)'('erased', V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__(Term $vars)'('erased', V89, V90)) end end}, V19, {'Idris.Core.TT.Explicit'})))), V86, V24, {'Idris.Core.Env.::', V21, V23}, V17))(V38)) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabRecord,recTy-3704'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V9, V15}, V19}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9497-3583--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('nested--9520-3665--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Idris.TTImp.TTImp.IVar', V9, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V9, V15}, V19}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)))).
'nested--9497-3579--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> ('nested--9516-3587--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)) end, V2)).
'nested--9497-3582--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of [] -> V15; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V22, V23) -> {'Idris.TTImp.TTImp.IPi', V9, V20, V22, V18, V23, ('nested--9497-3582--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17, V15))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9516-3587--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V15}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Implicit'}, V20}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9497-3580--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> V18 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9497-3581--in--un--farg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V18}, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V17, V19}}} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9497-3586--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V21, V22, V23, V24) -> case V23 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V25, V26, V27, V28) -> begin (V29 = {'Idris.Core.TT.Pi', V25, V26, V27, V28}), ('case--elabRecord,elabGetters-3931'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V25, V22, V24, V28, V27, V26, V29, V21, V19, V18, V17, V16, V15, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V32, V33)) end end}, V22, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V34) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V34)) end, V2)))), fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V37, V38)) end end}, V22, V6)) end)))) end end(E4, E5, E6, E7)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2, E3)); _ -> fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'nested--9497-3584--in--un--elabAsData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V16 = ('nested--9497-3582--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('nested--9497-3579--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), ('nested--9497-3582--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('nested--9497-3581--in--un--farg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15)) end, V0)), ('nested--9497-3583--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13))))))), fun (V17) -> begin (V20 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V13, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V2)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> ('nested--9497-3580--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V19)) end, V0)), V6)))), V16, V17))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> begin (V23 = {'Idris.TTImp.TTImp.MkImpTy', V9, V14, V22}), begin (V26 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V13, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V24)) end, V2)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> ('nested--9497-3580--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25)) end, V0)), V6)))), ('un--mkDataTy'(V9, V2)), V17))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V29 = {'Idris.TTImp.TTImp.MkImpData', V9, V3, V28, [], [V23 | []]}), begin (V30 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Record data type "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__ImpData'(V29)))) end))(V17))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IData', V9, V4, V29}))(V17)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--9497-3585--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Explicit'} -> (fun () -> (1 + ('nested--9497-3585--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V19))) end()); _ -> ('nested--9497-3585--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V19)) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); _ -> 0 end.
'nested--9520-3665--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [] -> V14; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> case V21 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('nested--9520-3665--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Idris.TTImp.TTImp.IApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V14)), V14, V20}, V17)) end()); _ -> ('nested--9520-3665--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Idris.TTImp.TTImp.INamedApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V14)), V14, V18, V20}, V17)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--projVis'(V0) -> case V0 of {'Idris.Core.TT.Public'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> {'Idris.Core.TT.Private'} end.
'un--processRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> fun (V15) -> ('un--elabRecord'(V0, V1, V2, V3, V4, V10, V6, V5, V7, V8, V11, V12, V13, V14, V15)) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkDataTy'(V0, V1) -> case V1 of [] -> {'Idris.TTImp.TTImp.IType', V0}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.TTImp.TTImp.IPi', V0, V6, V8, {'Idris.Prelude.Types.Just', V4}, V9, ('un--mkDataTy'(V0, V3))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--elabRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V15 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V12))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = (('nested--9497-3584--in--un--elabAsData'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, V17))(V14))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V51 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V24 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V25 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V51 of {'Idris.Prelude.Types.Left', E32} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Just', E34} -> (fun (V54) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V56 = (('nested--9497-3586--in--un--elabGetters'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, [], V17, 0, [], fun (V55) -> {'Idris.Core.Name.RF', V55} end, {'Idris.Core.Env.Nil'}, V54))(V14))), case V56 of {'Idris.Prelude.Types.Left', E35} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V1, V14))), case V59 of {'Idris.Prelude.Types.Left', E37} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V61) -> case V61 of 0 -> (('nested--9497-3586--in--un--elabGetters'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, [], V17, 0, [], fun (V62) -> {'Idris.Core.Name.UN', V62} end, {'Idris.Core.Env.Nil'}, V54))(V14)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V63) -> begin (V90 = case V24 of {'Idris.Core.Context.MkDefs', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V66 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V117 = case V24 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V94 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V118 = ('Idris.Idris2.Core.Context':'un--extendNS'(V1, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V63)), V14))), case V118 of {'Idris.Prelude.Types.Left', E92} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V120) -> begin (V121 = ('Idris.Idris2.Core.Context':'un--getNS'(V1, V14))), case V121 of {'Idris.Prelude.Types.Left', E94} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V123) -> begin (V125 = (('nested--9497-3586--in--un--elabGetters'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, [], V17, 0, [], fun (V124) -> {'Idris.Core.Name.RF', V124} end, {'Idris.Core.Env.Nil'}, V54))(V14))), case V125 of {'Idris.Prelude.Types.Left', E96} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V127) -> begin (V132 = begin (V128 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V1, V14))), case V128 of {'Idris.Prelude.Types.Left', E98} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V130) -> case V130 of 0 -> (('nested--9497-3586--in--un--elabGetters'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, [], V17, 0, [], fun (V131) -> {'Idris.Core.Name.UN', V131} end, {'Idris.Core.Env.Nil'}, V54))(V14)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V132 of {'Idris.Prelude.Types.Left', E100} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V134) -> begin (V136 = begin (V135 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V135} end), case V136 of {'Idris.Prelude.Types.Left', E102} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V138) -> begin (V165 = ('erlang':'put'(V1, case V138 of {'Idris.Core.Context.MkDefs', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164) -> {'Idris.Core.Context.MkDefs', V139, V140, V90, [V123 | V117], V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164} end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V165} end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Adding "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V10)), <<"failed"/utf8>>))))}, V14)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
