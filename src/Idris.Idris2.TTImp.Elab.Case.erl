-module('Idris.Idris2.TTImp.Elab.Case').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkCase-14551'/22,
  'case--case block in checkCase-14448'/22,
  'case--case block in checkCase-14283'/20,
  'case--checkCase-14225'/16,
  'case--checkCase-14162'/14,
  'case--case block in case block in checkCase,guessScrType-13933'/26,
  'case--case block in checkCase,guessScrType-13859'/22,
  'case--checkCase,guessScrType-13803'/19,
  'case--checkCase,getRetTy-13678'/21,
  'case--caseBlock-13407'/26,
  'case--case block in caseBlock-13308'/47,
  'case--case block in caseBlock-13196'/50,
  'case--case block in caseBlock-13040'/35,
  'case--caseBlock-12697'/28,
  'case--case block in caseBlock-12476'/26,
  'case--caseBlock-12421'/24,
  'case--caseBlock,updateClause-12308'/23,
  'case--caseBlock,updateClause-12240'/26,
  'case--caseBlock,updateClause-12168'/24,
  'case--caseBlock,replace-11961'/19,
  'case--caseBlock,addEnv-11887'/24,
  'case--caseBlock,getBindName-11762'/20,
  'case--caseBlock,getBindName-11666'/21,
  'case--bindCaseLocals,getNameFrom-11458'/12,
  'case--case block in findScrutinee-11340'/7,
  'case--findScrutinee-11295'/7,
  'case--toRig1-10884'/7,
  'case--changeVar-10665'/13,
  'nested--11785-11538--in--un--usedIn'/17,
  'nested--11785-11541--in--un--updateClause'/21,
  'nested--11785-11536--in--un--replace'/19,
  'nested--11785-11539--in--un--nestLHS'/19,
  'nested--11785-11537--in--un--mkSplit'/20,
  'nested--14177-13547--in--un--guessScrType'/15,
  'nested--14177-13546--in--un--getRetTy'/16,
  'nested--11654-11424--in--un--getNameFrom'/9,
  'nested--11785-11534--in--un--getBindName'/19,
  'nested--11654-11423--in--un--getArg'/10,
  'nested--14177-13544--in--un--checkConcrete'/16,
  'nested--14177-13545--in--un--applyTo'/17,
  'nested--11785-11540--in--un--applyNested'/18,
  'nested--11785-11535--in--un--addEnv'/20,
  'un--updateMults'/3,
  'un--toRig1'/5,
  'un--toRig0'/5,
  'un--getNestData'/3,
  'un--findScrutinee'/3,
  'un--findImpsIn'/5,
  'un--explicitPi'/2,
  'un--checkCase'/15,
  'un--changeVar'/4,
  'un--caseBlock'/17,
  'un--bindCaseLocals'/5,
  'un--allow'/3
]).
'case--case block in checkCase-14551'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Core.Core.LinearMisuse', E0, E1, E2, E3} -> (fun (V22, V23, V24, V25) -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V32, V33)) end end}}, fun () -> fun (V34) -> begin (V39 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V13, V12, V11, V10, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V13, V12, V11, V10, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V37, V38)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V7, V6, V4, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V6, V15))})), V34))), case V39 of {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V41)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V41)), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V21, V46)) end end, V24)) end(E0, E1, E2, E3)); _ -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V21, V47)) end end.
'case--case block in checkCase-14448'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V24))(V26))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V13, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Scrutinee type"/utf8>> end, V6, V29))(V26))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> begin (V40 = begin (V37 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V0, V36, V6, V29))(V26))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> (('nested--14177-13544--in--un--checkConcrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V39))(V26)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V40 of {'Idris.Prelude.Types.Left', E12} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V42) -> ('un--caseBlock'(V0, V13, V12, V11, V10, V9, V8, V5, V7, V6, V4, V22, V29, V25, V2, V1, V26)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkCase-14283'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkCase-14225'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V13, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected scrutinee type"/utf8>> end, V16, V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V31 = begin (V22 = {'Idris.Builtin.MkPair', V16, V17}), ('case--case block in checkCase-14283'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V17, V22, V21, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V29, V30)) end end}}, V9)))) end), begin (V32 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V31)))))))) end))(V18))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V66 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V13, V12, V11, V10, fun (V35) -> begin (V36 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V13, V12, V11, V10, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V13, V12, V11, V10, V31, V8, V7, V6, V4, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V6, V16))})), V35))), case V36 of {'Idris.Prelude.Types.Left', E6} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V38)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V38)), V31}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V39) -> case V39 of {'Idris.Core.Core.LinearMisuse', E8, E9, E10, E11} -> (fun (V40, V41, V42, V43) -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V50, V51)) end end}}, fun () -> fun (V52) -> begin (V57 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V13, V12, V11, V10, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V13, V12, V11, V10, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V53) -> fun (V54) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V53, V54)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V55) -> fun (V56) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V55, V56)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V7, V6, V4, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V6, V16))})), V52))), case V57 of {'Idris.Prelude.Types.Left', E12} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V59)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V59)), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V60, V61)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V62, V63)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V64) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V39, V64)) end end, V42)) end(E8, E9, E10, E11)); _ -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V39, V65)) end end end, V18))), case V66 of {'Idris.Prelude.Types.Left', E14} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V68) -> case V68 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V69, V70) -> case V70 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V71, V72) -> begin (V73 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V71))(V18))), case V73 of {'Idris.Prelude.Types.Left', E20} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V75) -> begin (V76 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V13, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Scrutinee type"/utf8>> end, V6, V75))(V18))), case V76 of {'Idris.Prelude.Types.Left', E22} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V78) -> begin (V80 = begin (V79 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E24} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V82) -> begin (V86 = begin (V83 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V0, V82, V6, V75))(V18))), case V83 of {'Idris.Prelude.Types.Left', E26} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V85) -> (('nested--14177-13544--in--un--checkConcrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V85))(V18)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V86 of {'Idris.Prelude.Types.Left', E28} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V88) -> ('un--caseBlock'(V0, V13, V12, V11, V10, V9, V8, V5, V7, V6, V4, V69, V75, V72, V2, V1, V18)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkCase-14162'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V3 of {'Idris.TTImp.TTImp.Implicit', E0, E1} -> (fun (V14, V15) -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V2)) end(E0, E1)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end.
'case--case block in case block in checkCase,guessScrType-13933'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V27, V28) -> ('nested--14177-13545--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V20, {'Idris.TTImp.TTImp.IVar', V5, V27}, V28)) end(E1, E2)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E0)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end.
'case--case block in checkCase,guessScrType-13859'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V26, V27) -> case V23 of [] -> fun (V28) -> begin (V32 = begin (V29 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V20, {'Idris.Core.Env.Nil'}, V27))(V28))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> (('nested--14177-13546--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V20, V31))(V28)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Just', E10} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V36, V37) -> (('nested--14177-13545--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V20, {'Idris.TTImp.TTImp.IVar', V5, V36}, V37))(V28)) end(E11, E12)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V28)) end end(E10)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V28)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E4, E5)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E2, E3)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E0, E1)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end.
'case--checkCase,guessScrType-13803'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V52 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V20, case V25 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V26 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V21))), case V52 of {'Idris.Prelude.Types.Left', E30} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V54) -> case V54 of [E32 | E33] -> (fun (V55, V56) -> case V55 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V57, V58) -> case V58 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V59, V60) -> case V56 of [] -> begin (V64 = begin (V61 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V25, {'Idris.Core.Env.Nil'}, V60))(V21))), case V61 of {'Idris.Prelude.Types.Left', E38} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V63) -> (('nested--14177-13546--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25, V63))(V21)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E40} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V66) -> case V66 of {'Idris.Prelude.Types.Just', E42} -> (fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V68, V69) -> (('nested--14177-13545--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25, {'Idris.TTImp.TTImp.IVar', V5, V68}, V69))(V21)) end(E43, E44)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E42)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E36, E37)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E34, E35)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E32, E33)); _ -> (('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end.
'case--checkCase,getRetTy-13678'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> fun (V22) -> begin (V23 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V19, {'Idris.Core.Env.Nil'}, V21))(V22))), case V23 of {'Idris.Prelude.Types.Left', E1} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V18, V25}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock-13407'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V1 of {'Idris.Prelude.Types.Just', E2} -> (fun (V26) -> ('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V26)) end(E2)); _ -> fun (V27) -> begin (V28 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V15, V13, <<"caseTy"/utf8>>, V27))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V15, V13, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V31, V32)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V21, V30, {'Idris.Core.TT.TType', V9}, V27)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in caseBlock-13308'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V45 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.UnifyState.MkUState', V47, V48, V49, V50, V51, V52, V53, V54, [], V56} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in caseBlock-13196'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> case V49 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> {'Idris.Core.UnifyState.MkUState', V50, V51, V52, V53, V54, V55, V56, V57, V46, V59} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in caseBlock-13040'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V34 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V37, V38)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock-12697'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> begin (V31 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V9, ('un--allow'('erased', V25, ('un--explicitPi'('erased', V21)))), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.TT.Bind', V9, V19, {'Idris.Core.TT.Pi', V9, V3, {'Idris.Core.TT.Explicit'}, V4}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V28))} end, fun () -> fun (V30) -> V28 end end, V25))))), fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V15, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), <<"Case env"/utf8>>, V21, V32))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> begin (V36 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V15, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Case function type: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V20)))) end, {'Idris.Core.Env.Nil'}, V31))(V32))), case V36 of {'Idris.Prelude.Types.Left', E4} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V38) -> begin (V39 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', V17)))) of 0 -> (('un--findImpsIn'([], V9, {'Idris.Core.Env.Nil'}, [], V31))(V32)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V39 of {'Idris.Prelude.Types.Left', E6} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V41) -> begin (V51 = ('Idris.Idris2.Core.Context':'un--addDef'(V15, V20, ('Idris.Idris2.Core.Context':'un--newDef'(V9, V20, begin (V42 = {'Idris.Builtin.MkPair', V28, V29}), ('case--case block in caseBlock-13040'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V26, V29, V24, V28, V42, V31, V35, V38, V41, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V43, V44)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V45, V46)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V49, V50)) end end}}, V11)))) end, [], V31, V24, {'Idris.Core.Context.None'})), V32))), case V51 of {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Context':'un--setFlag'(V15, V9, {'Idris.Core.Name.Resolved', V53}, {'Idris.Core.Context.SetTotal', {'Idris.Core.TT.PartialOK'}}, V32))), case V54 of {'Idris.Prelude.Types.Left', E10} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V56) -> begin (V57 = {'Idris.Core.TT.Ref', V9, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V53}}), begin (V61 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V15, V9, V20, {'Idris.Core.Context.Inline'}, V60)) end end end, V25))(V32))), case V61 of {'Idris.Prelude.Types.Left', E12} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V9, V57, V21))), begin (V66 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.TT.App', V9, V64, V5} end, fun () -> fun (V65) -> V64 end end, V25))), begin (V68 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V67) -> ('nested--11785-11541--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V25, V8, V21, V67)) end, V2))), begin (V157 = (('Idris.Idris2.Core.Context.Log':'un--log'(V15, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Nested: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V71, V72)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V76, V77)) end end}, V74)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V81, V82)) end end}, V78, V79)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V85, V86)) end end}, V83)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V89) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V89)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V90, V91)) end end}, V87, V88)) end end}}, V73)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V96, V97)) end end}, V94)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V101, V102)) end end}, V98, V99)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V105, V106)) end end}, V103)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V110, V111)) end end}, V107, V108)) end end}}, V92, V93)) end end}}, V69)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V115, V116)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V120, V121)) end end}, V118)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V124)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V125, V126)) end end}, V122, V123)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V127) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V128) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V129, V130)) end end}, V127)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V133) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V133)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V134, V135)) end end}, V131, V132)) end end}}, V117)) end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V138) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V140, V141)) end end}, V138)) end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V144)) end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V145, V146)) end end}, V142, V143)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V147) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V148) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V148)) end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V149, V150)) end end}, V147)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V153) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V153)) end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V154, V155)) end end}, V151, V152)) end end}}, V136, V137)) end end}}, V112, V113)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V156) -> ('un--getNestData'('erased', 'erased', V156)) end, V8)))))) end))(V32))), case V157 of {'Idris.Prelude.Types.Left', E14} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V159) -> begin (V163 = (('Idris.Idris2.Core.Context.Log':'un--log'(V15, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Generated alts: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V160) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__ImpClause'(V160)) end, fun (V161) -> fun (V162) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__ImpClause'(V161, V162)) end end}, V68)))) end))(V32))), case V163 of {'Idris.Prelude.Types.Left', E16} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V165) -> begin (V166 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V15, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> <<"Case application"/utf8>> end, V21, V66))(V32))), case V166 of {'Idris.Prelude.Types.Left', E18} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V168) -> begin (V169 = []), begin (V171 = begin (V170 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V170} end), case V171 of {'Idris.Prelude.Types.Left', E20} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V173) -> begin (V184 = case V173 of {'Idris.Core.UnifyState.MkUState', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V174, V175, V176, V177, V178, V179, V180, V181, V182, V183) -> V182 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V196 = begin (V195 = ('erlang':'put'(V13, case V173 of {'Idris.Core.UnifyState.MkUState', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V185, V186, V187, V188, V189, V190, V191, V192, V193, V194) -> {'Idris.Core.UnifyState.MkUState', V185, V186, V187, V188, V189, V190, V191, V192, [], V194} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V195} end), case V196 of {'Idris.Prelude.Types.Left', E42} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V198) -> begin (V199 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V15, V14, V13, [{'Idris.TTImp.Elab.Check.InCase'} | []], V169, {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IDef', V9, V20, V68}))(V32))), case V199 of {'Idris.Prelude.Types.Left', E44} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V201) -> begin (V203 = begin (V202 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V202} end), case V203 of {'Idris.Prelude.Types.Left', E46} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V205) -> begin (V217 = begin (V216 = ('erlang':'put'(V13, case V205 of {'Idris.Core.UnifyState.MkUState', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V206, V207, V208, V209, V210, V211, V212, V213, V214, V215) -> {'Idris.Core.UnifyState.MkUState', V206, V207, V208, V209, V210, V211, V212, V213, V184, V215} end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V216} end), case V217 of {'Idris.Prelude.Types.Left', E58} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V219) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V66, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V21, V28))}} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in caseBlock-12476'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> {'Idris.Core.TT.Public'}; 1 -> {'Idris.Core.TT.Private'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock-12421'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> begin (V25 = {'Idris.Prelude.Types.Just', V24}), ('case--case block in caseBlock-12476'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V24, V25, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Visibility'(case V24 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V35 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Public'})))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock,updateClause-12308'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> begin (V25 = ('nested--11785-11537--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, 'erased', V20, V16, V24))), begin (V26 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V17, V21}, V25))), {'Idris.TTImp.TTImp.ImpossibleClause', V17, ('nested--11785-11540--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V26))} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock,updateClause-12240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V26, V27) -> begin (V28 = ('nested--11785-11537--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, 'erased', V23, V19, V27))), begin (V29 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V20, V24}, V28))), {'Idris.TTImp.TTImp.WithClause', V20, ('nested--11785-11540--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V22, V29)), V18, V17, V16} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock,updateClause-12168'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> begin (V26 = ('nested--11785-11537--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, 'erased', V21, V17, V25))), begin (V27 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V18, V22}, V26))), {'Idris.TTImp.TTImp.PatClause', V18, ('nested--11785-11540--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V27)), ('un--bindCaseLocals'('erased', V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('un--getNestData'('erased', 'erased', V28)) end, V20)), V24, V16))} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock,replace-11961'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of {'Idris.TTImp.TTImp.IAs', E0, E1, E2, E3} -> (fun (V19, V20, V21, V22) -> {'Idris.TTImp.TTImp.IAs', V19, V20, V21, V18} end(E0, E1, E2, E3)); _ -> V18 end.
'case--caseBlock,addEnv-11887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> begin (V26 = [V22 | V24]), {'Idris.Builtin.MkPair', V26, [{'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.TT.UseLeft'}, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V22)), {'Idris.TTImp.TTImp.Implicit', V9, 0}} | V25]} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock,getBindName-11762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> {'Idris.Builtin.MkPair', V17, {'Idris.Core.Name.MN', <<"_cn"/utf8>>, V18}}; 1 -> {'Idris.Builtin.MkPair', V17, V17}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--caseBlock,getBindName-11666'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of 0 -> {'Idris.Builtin.MkPair', V18, {'Idris.Core.Name.MN', V17, V19}}; 1 -> {'Idris.Builtin.MkPair', V18, V18}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bindCaseLocals,getNameFrom-11458'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> V12 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findScrutinee-11340'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Just', (1 + V6)}.
'case--findScrutinee-11295'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> {'Idris.Prelude.Types.Just', 0}; 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--findScrutinee'(V0, V2, {'Idris.TTImp.TTImp.IVar', V5, V4})), fun (V7) -> {'Idris.Prelude.Types.Just', (1 + V7)} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toRig1-10884'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V3, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})))), V2}; 1 -> {'Idris.Core.Env.::', V3, V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--changeVar-10665'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> {'Idris.Core.TT.Local', V11, V10, V3}; 1 -> {'Idris.Core.TT.Local', V11, V10, V8}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.TTImp.TTImp.IBindVar', E0, E1} -> (fun (V17, V18) -> [{'Idris.Core.Name.UN', V18} | []] end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20)), ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21)))) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAs', E5, E6, E7, E8} -> (fun (V22, V23, V24, V25) -> [V24 | ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V25))] end(E5, E6, E7, E8)); {'Idris.TTImp.TTImp.IAlternative', E9, E10, E11} -> (fun (V26, V27, V28) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V36, V37, V38)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V39, V40)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V41) -> ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V41)) end))(V28)) end(E9, E10, E11)); _ -> [] end.
'nested--11785-11541--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V21, V22, V23) -> ('case--caseBlock,updateClause-12168'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V23, V22, V21, V19, V18, V17, V16, ('nested--11785-11535--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V22)))))) end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7} -> (fun (V24, V25, V26, V27, V28) -> ('case--caseBlock,updateClause-12240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V28, V27, V26, V25, V24, V19, V18, V17, V16, ('nested--11785-11535--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V25)))))) end(E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ImpossibleClause', E8, E9} -> (fun (V29, V30) -> ('case--caseBlock,updateClause-12308'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V30, V29, V19, V18, V17, V16, ('nested--11785-11535--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--11785-11538--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V30)))))) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11785-11536--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of 0 -> case V18 of [E2 | E3] -> (fun (V19, V20) -> begin (V25 = case V19 of {'Idris.TTImp.TTImp.IAs', E4, E5, E6, E7} -> (fun (V21, V22, V23, V24) -> {'Idris.TTImp.TTImp.IAs', V21, V22, V23, V17} end(E4, E5, E6, E7)); _ -> V17 end), [V25 | V20] end end(E2, E3)); _ -> V18 end; _ -> begin (V26 = (V16 - 1)), case V18 of [E0 | E1] -> (fun (V27, V28) -> [V27 | ('nested--11785-11536--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V26, V17, V28))] end(E0, E1)); _ -> V18 end end end.
'nested--11785-11539--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V23, V24) -> {'Idris.Builtin.MkPair', V19, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V17, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V19 end, V21))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> {'Idris.TTImp.TTImp.Implicit', V17, 1} end, V23))))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11785-11537--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Data.List':'un--reverse'('erased', [V18 | V19])) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> ('Idris.Idris2.Data.List':'un--reverse'('erased', ('nested--11785-11536--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V18, V19)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V5, 1}} end; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.TTImp.TTImp.PatClause', E2, E3, E4} -> (fun (V18, V19, V20) -> ('case--checkCase,guessScrType-13803'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V20, V19, V17, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V19)))) end(E2, E3, E4)); _ -> ('nested--14177-13547--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14177-13546--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> fun (V24) -> begin (V25 = (((V19(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V16, 1}))))(V24))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> (('nested--14177-13546--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V27))(V24)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V29, V30, V31, V32, V33) -> fun (V34) -> begin (V61 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V30, case V14 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V35 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34))), case V61 of {'Idris.Prelude.Types.Left', E41} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V63) -> case V63 of {'Idris.Prelude.Types.Just', E43} -> (fun (V64) -> begin (V65 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V14, {'Idris.Core.Env.Nil'}, V64))(V34))), case V65 of {'Idris.Prelude.Types.Left', E44} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V30, V67}}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13, E14)); _ -> fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'nested--11654-11424--in--un--getNameFrom'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--bindCaseLocals,getNameFrom-11458'('erased', V1, V2, V3, V4, V5, V6, V7, 'erased', V8, 'erased', ('nested--11654-11423--in--un--getArg'('erased', V1, V2, V3, V4, V5, V6, V7, V6, V8)))).
'nested--11785-11534--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Core.Name.UN', E0} -> (fun (V19) -> begin (V20 = {'Idris.Core.Name.UN', V19}), ('case--caseBlock,getBindName-11666'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V19, V20, V16, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V23, V24)) end end}, V20, V18)))) end end(E0)); _ -> ('case--caseBlock,getBindName-11762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V17, V16, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V27, V28)) end end}, V17, V18)))) end.
'nested--11654-11423--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V9 of 0 -> {'Idris.Prelude.Types.Just', V13}; _ -> case V9 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V14 = (V9 - 1)), ('nested--11654-11423--in--un--getArg'('erased', V1, V2, V3, V4, V5, V6, V7, V11, V14)) end end end end(E2, E3)); _ -> case V9 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V15 = (V9 - 1)), ('nested--11654-11423--in--un--getArg'('erased', V1, V2, V3, V4, V5, V6, V7, V11, V15)) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14177-13544--in--un--checkConcrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V19, V20, V21) -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), <<"Can\x{27}t infer type for case scrutinee"/utf8>>}, V22)) end end(E3, E4, E5)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'nested--14177-13545--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V21, V22, V23, V24) -> case V23 of {'Idris.Core.TT.Explicit'} -> (fun () -> fun (V25) -> begin (V26 = (((V20(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V17, 1}))))(V25))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> (('nested--14177-13545--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.TTImp.TTImp.IApp', V17, V15, {'Idris.TTImp.TTImp.Implicit', V17, 1}}, V28))(V25)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V29) -> begin (V30 = (((V20(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V29))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> (('nested--14177-13545--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.TTImp.TTImp.INamedApp', V5, V15, V18, {'Idris.TTImp.TTImp.Implicit', V5, 1}}, V32))(V29)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', V15} end end end(E0, E1, E2, E3)); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', V15} end end.
'nested--11785-11540--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V17))), ('Idris.Idris2.TTImp.Utils':'un--substNames'([], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> ('nested--11785-11539--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, 'erased', V18, V19)) end, V16)), V17)) end.
'nested--11785-11535--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V16 of [] -> case V18 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Builtin.MkPair', [], []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V20, V21) -> case V18 of {'Idris.Core.Env.::', E2, E3} -> (fun (V22, V23) -> begin (V24 = ('nested--11785-11534--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V20, V19))), ('case--caseBlock,addEnv-11887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V21, V23, V22, V19, V17, V24, ('nested--11785-11535--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21, ((V17 + 1) rem 9223372036854775808), V23, [('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24)) | V19])))) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateMults'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> ('un--updateMults'('erased', V4, ('un--toRig0'('erased', 'erased', V3, 'erased', V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toRig1'(V0, V1, V2, V3, V4) -> case V2 of 0 -> case V4 of {'Idris.Core.Env.::', E2, E3} -> (fun (V5, V6) -> begin (V7 = 0), ('case--toRig1-10884'('erased', 'erased', V6, V5, V7, 'erased', ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V14, V15)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V5)))))) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V16 = (V2 - 1)), case V4 of {'Idris.Core.Env.::', E0, E1} -> (fun (V17, V18) -> {'Idris.Core.Env.::', V17, ('un--toRig1'('erased', 'erased', V16, 'erased', V18))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--toRig0'(V0, V1, V2, V3, V4) -> case V2 of 0 -> case V4 of {'Idris.Core.Env.::', E2, E3} -> (fun (V5, V6) -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V5, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})))), V6} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V11 = (V2 - 1)), case V4 of {'Idris.Core.Env.::', E0, E1} -> (fun (V12, V13) -> {'Idris.Core.Env.::', V12, ('un--toRig0'('erased', 'erased', V11, 'erased', V13))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getNestData'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, V7}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findScrutinee'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V5, V6) -> case V2 of {'Idris.TTImp.TTImp.IVar', E4, E5} -> (fun (V7, V8) -> ('case--findScrutinee-11295'(V4, V3, V6, V5, V8, V7, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V3, V8)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Core.TT':'un--isLet'('erased', V5)))) end)))) end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--findImpsIn'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, [{'Idris.Builtin.MkPair', V6, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V12))} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V13)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V13))))} end, V3))], V8)) end()); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V14)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V14))))} end, V3)), V8)) end end(E4, E5, E6, E7)); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V15)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V15))))} end, V3)), V8)) end end(E0, E1, E2, E3)); _ -> case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', V3)))) of 0 -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TryWithImplicits', V0, V1, V2, ('Idris.Idris2.Data.List':'un--reverse'('erased', V3))}, V16)) end; 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--explicitPi'(V0, V1) -> case V1 of {'Idris.Core.Env.::', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Core.TT.Pi', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V4, V5, {'Idris.Core.TT.Explicit'}, V7}, ('un--explicitPi'('erased', V3))} end(E2, E3, E4, E5)); _ -> {'Idris.Core.Env.::', V2, ('un--explicitPi'('erased', V3))} end end(E0, E1)); {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayElab'(V0, V1, V2, V3, V4, V9, V5, V8, V13, 0, fun (V15) -> begin (V18 = case V11 of {'Idris.TTImp.TTImp.Implicit', E0, E1} -> (fun (V16, V17) -> (('nested--14177-13547--in--un--guessScrType'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V12))(V15)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V11} end), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V25 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V6, V7, V8, V20, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))}))(V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected scrutinee type"/utf8>> end, V28, V15))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V42 = begin (V33 = {'Idris.Builtin.MkPair', V28, V29}), ('case--case block in checkCase-14283'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V20, V28, V29, V33, V32, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V36, V37)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V40, V41)) end end}}, V5)))) end), begin (V43 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V42)))))))) end))(V15))), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V77 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V1, V2, V3, V4, fun (V46) -> begin (V47 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V1, V2, V3, V4, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V42, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V28))})), V46))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V49)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V49)), V42}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V50) -> case V50 of {'Idris.Core.Core.LinearMisuse', E14, E15, E16, E17} -> (fun (V51, V52, V53, V54) -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V55) -> fun (V56) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V55, V56)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V57) -> fun (V58) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V57, V58)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V59) -> fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V61, V62)) end end}}, fun () -> fun (V63) -> begin (V68 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V1, V2, V3, V4, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V64, V65)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V66) -> fun (V67) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V66, V67)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V28))})), V63))), case V68 of {'Idris.Prelude.Types.Left', E18} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V70)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V70)), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V71) -> fun (V72) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V71, V72)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V73) -> fun (V74) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V73, V74)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V50, V75)) end end, V53)) end(E14, E15, E16, E17)); _ -> fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V50, V76)) end end end, V15))), case V77 of {'Idris.Prelude.Types.Left', E20} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V79) -> case V79 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V80, V81) -> case V81 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V82, V83) -> begin (V84 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V82))(V15))), case V84 of {'Idris.Prelude.Types.Left', E26} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V86) -> begin (V87 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Scrutinee type"/utf8>> end, V8, V86))(V15))), case V87 of {'Idris.Prelude.Types.Left', E28} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V89) -> begin (V91 = begin (V90 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V90} end), case V91 of {'Idris.Prelude.Types.Left', E30} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V93) -> begin (V97 = begin (V94 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V93, V8, V86))(V15))), case V94 of {'Idris.Prelude.Types.Left', E32} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V96) -> (('nested--14177-13544--in--un--checkConcrete'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', V96))(V15)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V97 of {'Idris.Prelude.Types.Left', E34} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V99) -> ('un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V9, V7, V8, V10, V80, V86, V83, V12, V13, V15)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V14)).
'un--changeVar'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E25, E26, E27} -> (fun (V4, V5, V6) -> ('case--changeVar-10665'('erased', 'erased', 'erased', V2, 'erased', V1, 'erased', 'erased', V6, 'erased', V5, V4, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V1, V6)))) end(E25, E26, E27)); _ -> case V3 of {'Idris.Core.TT.Meta', E21, E22, E23, E24} -> (fun (V7, V8, V9, V10) -> {'Idris.Core.TT.Meta', V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V11) -> ('un--changeVar'('erased', V1, V2, V11)) end, V10))} end(E21, E22, E23, E24)); _ -> case V3 of {'Idris.Core.TT.Bind', E17, E18, E19, E20} -> (fun (V12, V13, V14, V15) -> {'Idris.Core.TT.Bind', V12, V13, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__Binder'('erased', 'erased', fun (V16) -> ('un--changeVar'('erased', V1, V2, V16)) end, V14)), ('un--changeVar'('erased', (1 + V1), (1 + V2), V15))} end(E17, E18, E19, E20)); _ -> case V3 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V17, V18, V19) -> {'Idris.Core.TT.App', V17, ('un--changeVar'('erased', V1, V2, V18)), ('un--changeVar'('erased', V1, V2, V19))} end(E0, E1, E2)); {'Idris.Core.TT.As', E3, E4, E5, E6} -> (fun (V20, V21, V22, V23) -> {'Idris.Core.TT.As', V20, V21, ('un--changeVar'('erased', V1, V2, V22)), ('un--changeVar'('erased', V1, V2, V23))} end(E3, E4, E5, E6)); {'Idris.Core.TT.TDelayed', E7, E8, E9} -> (fun (V24, V25, V26) -> {'Idris.Core.TT.TDelayed', V24, V25, ('un--changeVar'('erased', V1, V2, V26))} end(E7, E8, E9)); {'Idris.Core.TT.TDelay', E10, E11, E12, E13} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.TT.TDelay', V27, V28, ('un--changeVar'('erased', V1, V2, V29)), ('un--changeVar'('erased', V1, V2, V30))} end(E10, E11, E12, E13)); {'Idris.Core.TT.TForce', E14, E15, E16} -> (fun (V31, V32, V33) -> {'Idris.Core.TT.TForce', V31, V32, ('un--changeVar'('erased', V1, V2, V33))} end(E14, E15, E16)); _ -> V3 end end end end.
'un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V33 = (('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--getToBind'(V0, V1, V4, V3, V7, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V21, V22, V23, V24, V25, V26) -> V21 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32) -> V28 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, []))(V16))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V51 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Doing a case under unbound implicits "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V38, V39)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show__(ImplBinding $vars)'('erased', V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V41, V42)) end end}}, V36)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V46, V47)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show__(ImplBinding $vars)'('erased', V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V49, V50)) end end}}, V43, V44)) end end}, V35)))) end))(V16))), case V51 of {'Idris.Prelude.Types.Left', E16} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"scr"/utf8>>, V16))), case V54 of {'Idris.Prelude.Types.Left', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V56) -> begin (V80 = begin (V74 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V59, V60)) end end}, {'Idris.Core.Name.Resolved', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V62 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V16))), case V74 of {'Idris.Prelude.Types.Left', E33} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V76) -> begin (V77 = (('Idris.Idris2.Core.Context':'un--prettyName'(V1, V76))(V16))), case V77 of {'Idris.Prelude.Types.Left', E35} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V79) -> ('Idris.Idris2.Core.UnifyState':'un--genCaseName'(V1, V3, V79, V16)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V80 of {'Idris.Prelude.Types.Left', E37} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V82) -> begin (V96 = ('un--updateMults'('erased', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V93 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), begin (V98 = begin (V97 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E52} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V100) -> begin (V140 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V102 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, case V100 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139) -> V114 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V140 of {'Idris.Prelude.Types.Left', E93} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V142) -> begin (V166 = case V142 of {'Idris.Prelude.Types.Just', E95} -> (fun (V143) -> begin (V144 = {'Idris.Prelude.Types.Just', V143}), ('case--case block in caseBlock-12476'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V20, V35, V53, V56, V82, V96, V100, V143, V144, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Visibility'(case V143 of {'Idris.Core.Context.MkGlobalDef', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V154 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Public'})))) end end(E95)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V167 = ('un--findScrutinee'(V0, V96, V10))), begin (V176 = case V15 of {'Idris.Prelude.Types.Just', E119} -> (fun (V168) -> (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V168))(V16)) end(E119)); _ -> begin (V169 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"caseTy"/utf8>>, V16))), case V169 of {'Idris.Prelude.Types.Left', E117} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V171) -> ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V7, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V172) -> fun (V173) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V172, V173)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V174) -> fun (V175) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V174, V175)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V96, V171, {'Idris.Core.TT.TType', V7}, V16)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V176 of {'Idris.Prelude.Types.Left', E120} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V178) -> begin (V185 = (('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--bindImplicits'(V1, V0, V7, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E122, E123, E124, E125, E126, E127} -> (fun (V179, V180, V181, V182, V183, V184) -> V180 end(E122, E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V100, V96, V35, V178, {'Idris.Core.TT.TType', V7}))(V16))), case V185 of {'Idris.Prelude.Types.Left', E128} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V187) -> case V187 of {'Idris.Builtin.MkPair', E130, E131} -> (fun (V188, V189) -> begin (V191 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V7, ('un--allow'('erased', V167, ('un--explicitPi'('erased', V96)))), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.TT.Bind', V7, V56, {'Idris.Core.TT.Pi', V7, V13, {'Idris.Core.TT.Explicit'}, V12}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V188))} end, fun () -> fun (V190) -> V188 end end, V167))))), begin (V192 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), <<"Case env"/utf8>>, V96, V16))), case V192 of {'Idris.Prelude.Types.Left', E132} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V194) -> begin (V195 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Case function type: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V82)))) end, {'Idris.Core.Env.Nil'}, V191))(V16))), case V195 of {'Idris.Prelude.Types.Left', E134} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V197) -> begin (V198 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', V35)))) of 0 -> (('un--findImpsIn'([], V7, {'Idris.Core.Env.Nil'}, [], V191))(V16)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V198 of {'Idris.Prelude.Types.Left', E136} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V200) -> begin (V210 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V82, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V82, begin (V201 = {'Idris.Builtin.MkPair', V188, V189}), ('case--case block in caseBlock-13040'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V20, V35, V53, V56, V82, V96, V100, V142, V167, V178, V189, V166, V188, V201, V191, V194, V197, V200, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V202) -> fun (V203) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V202, V203)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V204) -> fun (V205) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V204, V205)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V206) -> fun (V207) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V208, V209)) end end}}, V5)))) end, [], V191, V166, {'Idris.Core.Context.None'})), V16))), case V210 of {'Idris.Prelude.Types.Left', E138} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V212) -> begin (V213 = ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, {'Idris.Core.Name.Resolved', V212}, {'Idris.Core.Context.SetTotal', {'Idris.Core.TT.PartialOK'}}, V16))), case V213 of {'Idris.Prelude.Types.Left', E140} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V215) -> begin (V216 = {'Idris.Core.TT.Ref', V7, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V212}}), begin (V220 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V217) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V82, {'Idris.Core.Context.Inline'}, V219)) end end end, V167))(V16))), case V220 of {'Idris.Prelude.Types.Left', E142} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V222) -> begin (V223 = ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V7, V216, V96))), begin (V225 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.TT.App', V7, V223, V11} end, fun () -> fun (V224) -> V223 end end, V167))), begin (V227 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V226) -> ('nested--11785-11541--in--un--updateClause'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V82, V167, V8, V96, V226)) end, V14))), begin (V316 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Nested: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V228) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V229) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V229)) end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V230, V231)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V232) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V233) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V234) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V234)) end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V235, V236)) end end}, V233)) end, fun (V237) -> fun (V238) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V239) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V239)) end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V240, V241)) end end}, V237, V238)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V242) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V243) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V243)) end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V244, V245)) end end}, V242)) end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V248) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V248)) end, fun (V249) -> fun (V250) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V249, V250)) end end}, V246, V247)) end end}}, V232)) end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V253) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V254) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V254)) end, fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V255, V256)) end end}, V253)) end, fun (V257) -> fun (V258) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V259) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V259)) end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V260, V261)) end end}, V257, V258)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V262) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V263) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V263)) end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V264, V265)) end end}, V262)) end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V268) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V268)) end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V269, V270)) end end}, V266, V267)) end end}}, V251, V252)) end end}}, V228)) end, fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V273) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V273)) end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V274, V275)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V276) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V277) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V278) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V278)) end, fun (V279) -> fun (V280) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V279, V280)) end end}, V277)) end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V283) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V283)) end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V284, V285)) end end}, V281, V282)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V286) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V287) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V287)) end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V288, V289)) end end}, V286)) end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V292) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V292)) end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V293, V294)) end end}, V290, V291)) end end}}, V276)) end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V297) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V298) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V298)) end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V299, V300)) end end}, V297)) end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V303) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V303)) end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V304, V305)) end end}, V301, V302)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V306) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V307) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V307)) end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V308, V309)) end end}, V306)) end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V312) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V312)) end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V313, V314)) end end}, V310, V311)) end end}}, V295, V296)) end end}}, V271, V272)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V315) -> ('un--getNestData'('erased', 'erased', V315)) end, V8)))))) end))(V16))), case V316 of {'Idris.Prelude.Types.Left', E144} -> (fun (V317) -> {'Idris.Prelude.Types.Left', V317} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V318) -> begin (V322 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Generated alts: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V319) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__ImpClause'(V319)) end, fun (V320) -> fun (V321) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__ImpClause'(V320, V321)) end end}, V227)))) end))(V16))), case V322 of {'Idris.Prelude.Types.Left', E146} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V324) -> begin (V325 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> <<"Case application"/utf8>> end, V96, V225))(V16))), case V325 of {'Idris.Prelude.Types.Left', E148} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V327) -> begin (V328 = []), begin (V330 = begin (V329 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V329} end), case V330 of {'Idris.Prelude.Types.Left', E150} -> (fun (V331) -> {'Idris.Prelude.Types.Left', V331} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V332) -> begin (V343 = case V332 of {'Idris.Core.UnifyState.MkUState', E152, E153, E154, E155, E156, E157, E158, E159, E160, E161} -> (fun (V333, V334, V335, V336, V337, V338, V339, V340, V341, V342) -> V341 end(E152, E153, E154, E155, E156, E157, E158, E159, E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V355 = begin (V354 = ('erlang':'put'(V3, case V332 of {'Idris.Core.UnifyState.MkUState', E162, E163, E164, E165, E166, E167, E168, E169, E170, E171} -> (fun (V344, V345, V346, V347, V348, V349, V350, V351, V352, V353) -> {'Idris.Core.UnifyState.MkUState', V344, V345, V346, V347, V348, V349, V350, V351, [], V353} end(E162, E163, E164, E165, E166, E167, E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V354} end), case V355 of {'Idris.Prelude.Types.Left', E172} -> (fun (V356) -> {'Idris.Prelude.Types.Left', V356} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V357) -> begin (V358 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V1, V2, V3, [{'Idris.TTImp.Elab.Check.InCase'} | []], V328, {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IDef', V7, V82, V227}))(V16))), case V358 of {'Idris.Prelude.Types.Left', E174} -> (fun (V359) -> {'Idris.Prelude.Types.Left', V359} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V360) -> begin (V362 = begin (V361 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V361} end), case V362 of {'Idris.Prelude.Types.Left', E176} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V364) -> begin (V376 = begin (V375 = ('erlang':'put'(V3, case V364 of {'Idris.Core.UnifyState.MkUState', E178, E179, E180, E181, E182, E183, E184, E185, E186, E187} -> (fun (V365, V366, V367, V368, V369, V370, V371, V372, V373, V374) -> {'Idris.Core.UnifyState.MkUState', V365, V366, V367, V368, V369, V370, V371, V372, V343, V374} end(E178, E179, E180, E181, E182, E183, E184, E185, E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V375} end), case V376 of {'Idris.Prelude.Types.Left', E188} -> (fun (V377) -> {'Idris.Prelude.Types.Left', V377} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V378) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V225, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V96, V188))}} end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindCaseLocals'(V0, V1, V2, V3, V4) -> case V2 of [] -> V4; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> {'Idris.TTImp.TTImp.ICaseLocal', V1, V7, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V7 end, V9)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V11) -> ('nested--11654-11424--in--un--getNameFrom'('erased', V7, V9, V10, V6, V4, V3, V1, V11)) end, V10)), ('un--bindCaseLocals'('erased', V1, V6, V3, V4))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allow'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V2 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--toRig1'('erased', 'erased', V3, 'erased', V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
