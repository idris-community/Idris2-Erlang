-module('Idris.Idris2.TTImp.Elab.Check').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkExpP-7882'/21,
  'case--case block in checkExpP-7623'/14,
  'case--checkExpP-7592'/14,
  'case--case block in convertWithLazy-7445'/18,
  'case--case block in convertWithLazy-7313'/18,
  'case--convertWithLazy-7265'/17,
  'case--convertWithLazy-7093'/12,
  'case--exactlyOne\x{27}-6869'/11,
  'case--exactlyOne\x{27},altError-6792'/12,
  'case--case block in exactlyOne\x{27},getRight-6656'/14,
  'case--exactlyOne\x{27},getRight-6578'/13,
  'case--successful-6301'/18,
  'case--successful-6105'/11,
  'case--handle-6023'/9,
  'case--try-5953'/9,
  'case--tryError-5879'/16,
  'case--searchVar-5577'/11,
  'case--case block in metaVarI-5484'/16,
  'case--metaVarI-5447'/10,
  'case--implBindVar-5385'/9,
  'case--metaVar-5335'/9,
  'case--notePatVar-5291'/4,
  'case--noteLHSPatVar-5225'/5,
  'case--clearToBind-5160'/5,
  'case--strengthenedEState,strTms-4772'/17,
  'case--strengthenedEState,strTms-4620'/15,
  'case--strengthenedEState,removeArg-4523'/9,
  'case--saveHole-4198'/4,
  'nested--11205-4223--in--un--wknTms'/5,
  'nested--11360-4384--in--un--strTms'/8,
  'nested--11360-4382--in--un--removeArgVars'/8,
  'nested--11360-4383--in--un--removeArg'/8,
  'nested--10155-3269--in--un--insertAll'/8,
  'nested--13721-6563--in--un--getRight'/12,
  'nested--13721-6564--in--un--getRes'/11,
  'nested--13721-6565--in--un--getDepthError'/10,
  'nested--11360-4385--in--un--dropTop'/8,
  'nested--11360-4380--in--un--dropSub'/10,
  'nested--13721-6566--in--un--depthError'/10,
  'nested--13721-6567--in--un--altError'/12,
  'dn--un--show_Show__ElabMode'/1,
  'dn--un--show_Show__(ImplBinding $vars)'/2,
  'dn--un--showPrec_Show__(ImplBinding $vars)'/3,
  'dn--un--__Impl_Show_(ImplBinding $vars)'/1,
  'dn--un--__Impl_Eq_ElabOpt'/0,
  'dn--un--==_Eq__ElabOpt'/2,
  'dn--un--/=_Eq__ElabOpt'/2,
  'un--weakenedEState'/4,
  'un--updateEnv'/6,
  'un--tryError'/8,
  'un--try'/9,
  'un--successful'/8,
  'un--strengthenedEState'/7,
  'un--searchVar'/11,
  'un--saveHole'/4,
  'un--processDecl'/8,
  'un--notePatVar'/4,
  'un--noteLHSPatVar'/4,
  'un--metaVarI'/9,
  'un--metaVar'/9,
  'un--initElabInfo'/1,
  'un--initEStateSub'/5,
  'un--initEState'/3,
  'un--inScope'/9,
  'un--implBindVar'/9,
  'un--handle'/9,
  'un--exactlyOne\x{27}'/9,
  'un--exactlyOne'/8,
  'un--convertWithLazy'/11,
  'un--convertP'/10,
  'un--convert'/9,
  'un--clearToBind'/4,
  'un--clearBindIfUnsolved'/2,
  'un--checkImp'/11,
  'un--checkExpP'/12,
  'un--checkExp'/11,
  'un--check'/11,
  'un--bindingType'/2,
  'un--bindingTerm'/2,
  'un--bindingRig'/2,
  'un--bindingPiInfo'/2,
  'un--bindingMetas'/2,
  'un--argVar'/8,
  'un--anyOne'/7,
  'un--addBindIfUnsolved'/8
]).
'case--case block in checkExpP-7882'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V2}} end end()); {'Idris.Core.Unify.AddForce', E0} -> (fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V4, V22, V3}, V1}} end end(E0)); {'Idris.Core.Unify.AddDelay', E1} -> (fun (V24) -> fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V2))(V25))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V4, V24, V28, V3}, V1}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkExpP-7623'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Solved"/utf8>> end, V3, V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V2}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.Unify.AddForce', E2} -> (fun (V18) -> fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Force"/utf8>> end, V3, V19))), case V20 of {'Idris.Prelude.Types.Left', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Got"/utf8>> end, V5, V2, V19))), case V23 of {'Idris.Prelude.Types.Left', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Exp"/utf8>> end, V5, V1, V19))), case V26 of {'Idris.Prelude.Types.Left', E7} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V4, V18, V3}, V1}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); {'Idris.Core.Unify.AddDelay', E9} -> (fun (V29) -> fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V2))(V30))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Delay"/utf8>> end, V3, V30))), case V34 of {'Idris.Prelude.Types.Left', E12} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V4, V29, V33, V3}, V1}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkExpP-7592'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> ('case--case block in checkExpP-7623'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, case V12 of {'Idris.Core.Unify.MkUnifyResult', E16, E17, E18, E19} -> (fun (V14, V15, V16, V17) -> V17 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Not solved"/utf8>> end, V3, V18))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V25, V18))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V1))(V18))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> begin (V32 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V10, V11, V4, V8, V5, V3, V31, V13))(V18))), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V10, V11, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), 1, V18))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> (('case--case block in checkExpP-7882'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V25, V28, V31, V34, V37, case V12 of {'Idris.Core.Unify.MkUnifyResult', E12, E13, E14, E15} -> (fun (V38, V39, V40, V41) -> V41 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V18)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in convertWithLazy-7445'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V13 of 0 -> (((((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__NF'(V18, V19, V20, V21, V22, V23, V24, V25)) end end end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__NF'(V26, V27, V28, V29, V30, V31, V32, V33)) end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V16))(V17)); 1 -> (((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__NF'(V34, V35, V36, V37, V38, V39, V40, V41)) end end end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__NF'(V42, V43, V44, V45, V46, V47, V48, V49)) end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V16))(V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in convertWithLazy-7313'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V13 of 0 -> (((((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__Term'(V18, V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__Term'(V27, V28, V29, V30, V31, V32, V33, V34, V35)) end end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V16))(V17)); 1 -> (((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__Term'(V36, V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__Term'(V45, V46, V47, V48, V49, V50, V51, V52, V53)) end end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V16))(V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--convertWithLazy-7265'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V2))(V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V1))(V17))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> case V13 of 0 -> ((((((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__Term'(V24, V25, V26, V27, V28, V29, V30, V31, V32)) end end end end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__Term'(V33, V34, V35, V36, V37, V38, V39, V40, V41)) end end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V20))(V23))(V17)); 1 -> ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__Term'(V42, V43, V44, V45, V46, V47, V48, V49, V50)) end end end end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__Term'(V51, V52, V53, V54, V55, V56, V57, V58, V59)) end end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V20))(V23))(V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V10, V2))(V60))), case V61 of {'Idris.Prelude.Types.Left', E4} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V63) -> begin (V64 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V10, V1))(V60))), case V64 of {'Idris.Prelude.Types.Left', E6} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V66) -> case V13 of 0 -> ((((((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__NF'(V67, V68, V69, V70, V71, V72, V73, V74)) end end end end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__NF'(V75, V76, V77, V78, V79, V80, V81, V82)) end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V63))(V66))(V60)); 1 -> ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify__NF'(V83, V84, V85, V86, V87, V88, V89, V90)) end end end end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify__NF'(V91, V92, V93, V94, V95, V96, V97, V98)) end end end end end end end end}, V0, V10, V9))(V11))(V5))(V3))(V63))(V66))(V60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--convertWithLazy-7093'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V12) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(V6)) end.
'case--exactlyOne\x{27}-6869'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Right', E0} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'put'(V6, V16))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V22) -> begin (V24 = begin (V23 = ('erlang':'put'(V5, V17))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'put'(V8, V14))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--commit'(V8, V18))), case V31 of {'Idris.Prelude.Types.Left', E13} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V12} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', ('nested--13721-6567--in--un--altError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', ('Idris.Idris2.Data.Either':'un--lefts'('erased', 'erased', V9)), V34)), V35)) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--exactlyOne\x{27},altError-6792'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Core.AllFailed', V10} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> V12 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in exactlyOne\x{27},getRight-6656'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V15 of [] -> {'Idris.Prelude.Types.Right', V17}; _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V18)) end, V12))} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V19)) end, V12))} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V20)) end, V12))} end.
'case--exactlyOne\x{27},getRight-6578'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V14 of [] -> {'Idris.Prelude.Types.Right', V16}; _ -> ('case--case block in exactlyOne\x{27},getRight-6656'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', 'erased', V11, V12, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V17)), 0)) end, V12)))) end end(E2, E3)); _ -> ('case--case block in exactlyOne\x{27},getRight-6656'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', 'erased', V11, V12, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)), 0)) end, V12)))) end end(E0, E1)); _ -> ('case--case block in exactlyOne\x{27},getRight-6656'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', 'erased', V11, V12, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V19)), 0)) end, V12)))) end.
'case--successful-6301'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V5 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)); 1 -> ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', ('Idris.Idris2.Data.IntMap':'un--toList'('erased', case V17 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V19 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--successful-6105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V5 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)); 1 -> ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', ('Idris.Idris2.Data.IntMap':'un--toList'('erased', case V10 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V12 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--handle-6023'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Right', E0} -> (fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', V9} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> (V2(V11)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--try-5953'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Right', E0} -> (fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', V9} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> V2 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tryError-5879'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V10 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, case V15 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V66 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V41} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--searchVar-5577'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', V12} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in metaVarI-5484'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Context.MkHoleFlags', E0, E1} -> (fun (V16, V17) -> {'Idris.Core.Context.MkHoleFlags', V16, 0} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--metaVarI-5447'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V10, V11, V12) -> case V11 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V13, V14, V15) -> begin (V16 = {'Idris.Core.Value.NApp', V10, {'Idris.Core.Value.NMeta', V13, V14, V15}, V12}), ('case--case block in metaVarI-5484'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V12, V13, V14, V15, V16, ('Idris.Idris2.Core.Context':'un--holeInit'(1)))) end end(E3, E4, E5)); _ -> ('Idris.Idris2.Core.Context':'un--holeInit'(1)) end end(E0, E1, E2)); _ -> ('Idris.Idris2.Core.Context':'un--holeInit'(1)) end.
'case--implBindVar-5385'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', V10} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--metaVar-5335'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', V10} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--notePatVar-5291'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.TTImp.Elab.Check.MkEState', V4, V5, V6, V7, V8, V9, V10, V11, [V1 | V12], V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--noteLHSPatVar-5225'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.TTImp.Elab.Check.MkEState', V5, V6, V7, V8, V9, V10, V11, [V2 | V12], V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearToBind-5160'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.TTImp.Elab.Check.MkEState', V5, V6, V7, V8, V9, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V18) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V21, V22)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)), V1)) end, V10)), V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--strengthenedEState,strTms-4772'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Types.Just', E2} -> (fun (V19) -> case V18 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Types.Just', E5} -> (fun (V22) -> case V21 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V23, V24) -> case V23 of {'Idris.Prelude.Types.Just', E8} -> (fun (V25) -> case V24 of {'Idris.Prelude.Types.Just', E9} -> (fun (V26) -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, {'Idris.TTImp.Elab.Check.AsBinding', V0, V11, V19, V22, V25, V26}}} end end(E9)); _ -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V28)) end end end(E8)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V29)) end end end(E6, E7)); _ -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V30)) end end end(E5)); _ -> fun (V31) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V31)) end end end(E3, E4)); _ -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V32)) end end end(E2)); _ -> fun (V33) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V33)) end end end(E0, E1)); _ -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V8}, V34)) end end.
'case--strengthenedEState,strTms-4620'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Types.Just', E2} -> (fun (V17) -> case V16 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Types.Just', E5} -> (fun (V20) -> case V19 of {'Idris.Prelude.Types.Just', E6} -> (fun (V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, {'Idris.TTImp.Elab.Check.NameBinding', V0, V10, V17, V20, V21}}} end end(E6)); _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V7}, V23)) end end end(E5)); _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V7}, V24)) end end end(E3, E4)); _ -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V7}, V25)) end end end(E2)); _ -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V7}, V26)) end end end(E0, E1)); _ -> fun (V27) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V6, V7}, V27)) end end.
'case--strengthenedEState,removeArg-4523'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--11360-4382--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, 'erased', V10)), fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V9, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', ('Idris.Idris2.Core.TT':'un--apply'('erased', ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V9)), V12, V11)))) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--saveHole-4198'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.TTImp.Elab.Check.MkEState', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V1, {'Idris.Builtin.MkUnit'}, V15)), V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11205-4223--in--un--wknTms'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.TTImp.Elab.Check.NameBinding', E2, E3, E4, E5, E6} -> (fun (V7, V8, V9, V10, V11) -> {'Idris.Builtin.MkPair', V5, {'Idris.TTImp.Elab.Check.NameBinding', [V0 | V7], V8, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__PiInfo'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V12)) end, V9)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V10)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V11))}} end(E2, E3, E4, E5, E6)); {'Idris.TTImp.Elab.Check.AsBinding', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> {'Idris.Builtin.MkPair', V5, {'Idris.TTImp.Elab.Check.AsBinding', [V0 | V13], V14, ('Idris.Idris2.Core.TT':'dn--un--map_Functor__PiInfo'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V19)) end, V15)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V16)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V17)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V18))}} end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11360-4384--in--un--strTms'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.TTImp.Elab.Check.NameBinding', E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14) -> case V10 of [E7 | E8] -> (fun (V15, V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V13, V17))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V14, V17))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> (('case--strengthenedEState,strTms-4620'(V0, V1, V2, V3, V4, V5, V8, V14, V13, V12, V11, V6, V20, V23, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--shrinkPi'('erased', 'erased', V12, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), {'Idris.Builtin.MkPair', ('nested--11360-4383--in--un--removeArg'(V0, V1, V2, V3, V4, V5, 'erased', V20)), ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V23, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))}}))(V17)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6)); {'Idris.TTImp.Elab.Check.AsBinding', E13, E14, E15, E16, E17, E18} -> (fun (V24, V25, V26, V27, V28, V29) -> case V24 of [E19 | E20] -> (fun (V30, V31) -> fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V27, V32))), case V33 of {'Idris.Prelude.Types.Left', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V28, V32))), case V36 of {'Idris.Prelude.Types.Left', E23} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V29, V32))), case V39 of {'Idris.Prelude.Types.Left', E25} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V41) -> (('case--strengthenedEState,strTms-4772'(V0, V1, V2, V3, V4, V5, V8, V29, V28, V27, V26, V25, V6, V35, V38, V41, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--shrinkPi'('erased', 'erased', V26, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V35, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V38, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V41, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))}}}))(V32)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11360-4382--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [])); [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Local', E2, E3, E4} -> (fun (V10, V11, V12) -> case V12 of 0 -> ('nested--11360-4382--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, 'erased', V9)); _ -> begin (V13 = (V12 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--11360-4382--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, 'erased', V9)), fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [{'Idris.Core.TT.Local', V10, V11, V13} | V14])) end)) end end end(E2, E3, E4)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V8, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--11360-4382--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, 'erased', V9)), fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [V15 | V16])) end)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11360-4383--in--un--removeArg'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--strengthenedEState,removeArg-4523'(V0, V1, V2, V3, V4, V5, 'erased', V7, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V7)))).
'nested--10155-3269--in--un--insertAll'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> V7; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V10, V11, ('nested--10155-3269--in--un--insertAll'(V0, V1, V2, V3, V4, V5, V9, V7)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13721-6563--in--un--getRight'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('case--exactlyOne\x{27},getRight-6578'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', 'erased', V11, ('Idris.Idris2.Data.Either':'un--rights'('erased', 'erased', V11)))).
'nested--13721-6564--in--un--getRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> V13 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13721-6565--in--un--getDepthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Core.AmbiguityTooDeep', E0, E1, E2} -> (fun (V10, V11, V12) -> {'Idris.Prelude.Types.Just', V9} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--11360-4385--in--un--dropTop'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V8 = (V7 - 1)), {'Idris.Prelude.Types.Just', V8} end end.
'nested--11360-4380--in--un--dropSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.TT.DropCons', E0} -> (fun (V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', V10} end end(E0)); _ -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Badly formed weakened environment"/utf8>>}, V12)) end end.
'nested--13721-6566--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('nested--13721-6566--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11)) end, fun () -> fun (V14) -> {'Idris.Prelude.Types.Just', V14} end end, ('nested--13721-6565--in--un--getDepthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13721-6567--in--un--altError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> ('case--exactlyOne\x{27},altError-6792'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', V10, ('nested--13721-6566--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)))); _ -> {'Idris.Core.Core.AmbiguousElab', V0, V3, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V12) -> ('nested--13721-6564--in--un--getRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, 'erased', V12)) end, V11))} end.
'dn--un--show_Show__ElabMode'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InType'} -> (fun () -> <<"InType"/utf8>> end()); {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"InLHS "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(V1)))) end(E0)); {'Idris.TTImp.Elab.Check.InExpr'} -> (fun () -> <<"InExpr"/utf8>> end()); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> <<"InTransform"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__(ImplBinding $vars)'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V7) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V2, V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V2, V8, V9)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V2, V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V2, V11, V12)) end end}}, {'Idris.Builtin.MkPair', V5, V6})) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V13, V14, V15, V16, V17, V18) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V13, V19)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V13, V20, V21)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V13, V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V13, V23, V24)) end end}}, {'Idris.Builtin.MkPair', V16, V17})), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"@"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V13, V16)))))) end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__(ImplBinding $vars)'(V0, V1, V2) -> ('dn--un--show_Show__(ImplBinding $vars)'('erased', V2)).
'dn--un--__Impl_Show_(ImplBinding $vars)'(V0) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V1) -> ('dn--un--show_Show__(ImplBinding $vars)'('erased', V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show__(ImplBinding $vars)'('erased', V2, V3)) end end}.
'dn--un--__Impl_Eq_ElabOpt'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__ElabOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__ElabOpt'(V2, V3)) end end}.
'dn--un--==_Eq__ElabOpt'(V0, V1) -> case V0 of {'Idris.TTImp.Elab.Check.HolesOkay'} -> (fun () -> case V1 of {'Idris.TTImp.Elab.Check.HolesOkay'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.TTImp.Elab.Check.InCase'} -> (fun () -> case V1 of {'Idris.TTImp.Elab.Check.InCase'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.TTImp.Elab.Check.InPartialEval'} -> (fun () -> case V1 of {'Idris.TTImp.Elab.Check.InPartialEval'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.TTImp.Elab.Check.InTrans'} -> (fun () -> case V1 of {'Idris.TTImp.Elab.Check.InTrans'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq__ElabOpt'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__ElabOpt'(V0, V1)))).
'un--weakenedEState'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V180 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.TTImp.Elab.Check.EST'}, {'Idris.TTImp.Elab.Check.MkEState', case V7 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V22 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V36 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.DropCons', case V7 of {'Idris.TTImp.Elab.Check.MkEState', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V50 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V60) -> ('nested--11205-4223--in--un--wknTms'(V0, V1, V2, 'erased', V60)) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V65 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V74) -> ('nested--11205-4223--in--un--wknTms'(V0, V1, V2, 'erased', V74)) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V80 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V7 of {'Idris.TTImp.Elab.Check.MkEState', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V94 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V108 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> V122 end(E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131} -> (fun (V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139) -> V136 end(E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V140) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Var'('erased', 'erased', V140)) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144} -> (fun (V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V151 end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V7 of {'Idris.TTImp.Elab.Check.MkEState', E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157} -> (fun (V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166) -> V165 end(E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170} -> (fun (V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179) -> V179 end(E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V3))), case V180 of {'Idris.Prelude.Types.Left', E171} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V182) -> {'Idris.Prelude.Types.Right', V182} end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateEnv'(V0, V1, V2, V3, V4, V5) -> {'Idris.TTImp.Elab.Check.MkEState', V1, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V7 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V23 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V37 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V52 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V66 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V80 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> V94 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> V108 end(E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.TTImp.Elab.Check.MkEState', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V122 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--tryError'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--branch'(V2, V7))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V23) -> begin (V24 = (V6(V23))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--commit'(V2, V23))), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V26}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V30) -> fun (V31) -> begin (V33 = begin (V32 = ('erlang':'put'(V4, V11))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'put'(V5, V15))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V39) -> begin (V41 = begin (V40 = ('erlang':'put'(V3, V19))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E16} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E18} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V47) -> begin (V101 = begin (V100 = ('erlang':'put'(V2, case V22 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> {'Idris.Core.Context.MkDefs', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, case V47 of {'Idris.Core.Context.MkDefs', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V98 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V73} end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V100} end), case V101 of {'Idris.Prelude.Types.Left', E72} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V103) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V30}} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--try'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--tryError'('erased', V1, V2, V3, V4, V5, V6, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', V12} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> (V7(V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--successful'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V28 = case V6 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)); 1 -> ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', ('Idris.Idris2.Data.IntMap':'un--toList'('erased', case V17 of {'Idris.Core.UnifyState.MkUState', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V19 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = begin (V29 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--branch'(V2, V13))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V40) -> begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V2, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V41) -> begin (V49 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', <<"__"/utf8>>}} end end, fun () -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V47, V48)) end end}, V43, V44)) end end end, V11))(V41))), case V49 of {'Idris.Prelude.Types.Left', E22} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V51) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Running "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V51))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V40))), case V52 of {'Idris.Prelude.Types.Left', E24} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V54) -> begin (V55 = (V12(V40))), case V55 of {'Idris.Prelude.Types.Left', E26} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E28} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V61) -> begin (V72 = case V6 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)); 1 -> ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', ('Idris.Idris2.Data.IntMap':'un--toList'('erased', case V61 of {'Idris.Core.UnifyState.MkUState', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V63 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V74 = begin (V73 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E40} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V76) -> begin (V78 = begin (V77 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E42} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V80) -> begin (V82 = begin (V81 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V81} end), case V82 of {'Idris.Prelude.Types.Left', E44} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V84) -> begin (V86 = begin (V85 = ('erlang':'put'(V4, V17))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E46} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V88) -> begin (V90 = begin (V89 = ('erlang':'put'(V5, V32))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E48} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V92) -> begin (V94 = begin (V93 = ('erlang':'put'(V3, V36))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E50} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V96) -> begin (V98 = begin (V97 = ('erlang':'put'(V2, V39))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E52} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V100) -> begin (V112 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V2, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V101) -> begin (V109 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V102) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', <<"__"/utf8>>}} end end, fun () -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V107, V108)) end end}, V103, V104)) end end end, V11))(V101))), case V109 of {'Idris.Prelude.Types.Left', E54} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V111) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Success "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V111)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V72)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" - "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V28)), <<")"/utf8>>))))))))))))} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V40))), case V112 of {'Idris.Prelude.Types.Left', E56} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V114) -> begin (V115 = (('un--successful'('erased', V1, V2, V3, V4, V5, V6, V10))(V40))), case V115 of {'Idris.Prelude.Types.Left', E58} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V117) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--minus'(V72, V28)), {'Idris.Builtin.MkPair', V57, {'Idris.Builtin.MkPair', V84, {'Idris.Builtin.MkPair', V61, V76}}}}} | V117]} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V118) -> fun (V119) -> begin (V121 = begin (V120 = ('erlang':'put'(V4, V17))), {'Idris.Prelude.Types.Right', V120} end), case V121 of {'Idris.Prelude.Types.Left', E60} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V123) -> begin (V125 = begin (V124 = ('erlang':'put'(V5, V32))), {'Idris.Prelude.Types.Right', V124} end), case V125 of {'Idris.Prelude.Types.Left', E62} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V127) -> begin (V129 = begin (V128 = ('erlang':'put'(V3, V36))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E64} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V131) -> begin (V133 = begin (V132 = ('erlang':'put'(V2, V39))), {'Idris.Prelude.Types.Right', V132} end), case V133 of {'Idris.Prelude.Types.Left', E66} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V135) -> begin (V136 = (('un--successful'('erased', V1, V2, V3, V4, V5, V6, V10))(V119))), case V136 of {'Idris.Prelude.Types.Left', E68} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V138) -> begin (V139 = (('Idris.Idris2.Core.Normalise':'un--normaliseErr'(V2, V118))(V119))), case V139 of {'Idris.Prelude.Types.Left', E70} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V141) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Left', {'Idris.Builtin.MkPair', V11, V141}} | V138]} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--strengthenedEState'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V28 = (('nested--11360-4380--in--un--dropSub'(V1, V0, V5, V4, V3, V2, 'erased', 'erased', 'erased', case V10 of {'Idris.TTImp.Elab.Check.MkEState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V18 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> begin (V45 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('nested--11360-4384--in--un--strTms'(V1, V0, V5, V4, V3, V2, V14, V31)) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V36 end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V6))), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> begin (V62 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('nested--11360-4384--in--un--strTms'(V1, V0, V5, V4, V3, V2, V14, V48)) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V54 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V6))), case V62 of {'Idris.Prelude.Types.Left', E47} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Check.MkEState', case V10 of {'Idris.TTImp.Elab.Check.MkEState', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V65 end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V79 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V93 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V30, V47, V64, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V110 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113} -> (fun (V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V124 end(E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126} -> (fun (V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142) -> V138 end(E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155) -> V152 end(E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V156) -> ('nested--11360-4385--in--un--dropTop'(V1, V0, V5, V4, V3, V2, 'erased', V156)) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169) -> V167 end(E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V10 of {'Idris.TTImp.Elab.Check.MkEState', E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165} -> (fun (V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182) -> V181 end(E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178} -> (fun (V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195) -> V195 end(E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--searchVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = (('Idris.Idris2.Core.UnifyState':'un--newSearch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', V15} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--saveHole'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V21 = ('erlang':'put'(V1, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V2, {'Idris.Builtin.MkUnit'}, V19)), V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.TTImp.ProcessDecls':'un--process'(V0, V1, V2, V3, V4, V5, V6, V7)).
'un--notePatVar'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V21 = ('erlang':'put'(V1, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, V14, V15, [V2 | V16], V17, V18, V19, V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--noteLHSPatVar'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V4) -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V23 = ('erlang':'put'(V1, case V9 of {'Idris.TTImp.Elab.Check.MkEState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.TTImp.Elab.Check.MkEState', V10, V11, V12, V13, V14, V15, V16, [V3 | V17], V18, V19, V20, V21, V22} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V23} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--metaVarI'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V12, V5, V7))(V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V23 = case V15 of {'Idris.Core.Value.NApp', E4, E5, E6} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E7, E8, E9} -> (fun (V19, V20, V21) -> begin (V22 = {'Idris.Core.Value.NApp', V16, {'Idris.Core.Value.NMeta', V19, V20, V21}, V18}), ('case--case block in metaVarI-5484'(V0, V7, V6, V5, V4, V3, V2, V1, V12, V16, V18, V19, V20, V21, V22, ('Idris.Idris2.Core.Context':'un--holeInit'(1)))) end end(E7, E8, E9)); _ -> ('Idris.Idris2.Core.Context':'un--holeInit'(1)) end end(E4, E5, E6)); _ -> ('Idris.Idris2.Core.Context':'un--holeInit'(1)) end), (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V5)), V23}, 0))(V8)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--metaVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V5)), ('Idris.Idris2.Core.Context':'un--holeInit'(1))}, 0))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', V13} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initElabInfo'(V0) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V0, {'Idris.TTImp.TTImp.NONE'}, 1, 0, 1, []}.
'un--initEStateSub'(V0, V1, V2, V3, V4) -> {'Idris.TTImp.Elab.Check.MkEState', V1, V2, V3, V4, [], [], [], [], [], 0, [], ('Idris.Idris2.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Data.StringMap':'un--empty'('erased'))}.
'un--initEState'(V0, V1, V2) -> ('un--initEStateSub'('erased', V0, V1, V2, {'Idris.Core.TT.SubRefl'})).
'un--inScope'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--weakenedEState'(V1, V2, V4, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ((V7(V11))(V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('un--strengthenedEState'(V1, V2, V3, V11, V5, V6, V8))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'put'(V4, V17))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', V14} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--implBindVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V5)), ('Idris.Idris2.Core.Context':'un--holeInit'(0))}, 0))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', V13} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--handle'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--tryError'('erased', V1, V2, V3, V4, V5, V6, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', V12} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> ((V7(V13))(V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [E2 | E3] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V11, V12) -> case V10 of [] -> V12; _ -> fun (V13) -> begin (V14 = (('un--successful'('erased', V0, V1, V2, V3, V4, V5, V8))(V13))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> (('case--exactlyOne\x{27}-6869'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V16, ('nested--13721-6563--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', 'erased', V16))))(V13)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6, E7)); _ -> fun (V17) -> begin (V18 = (('un--successful'('erased', V0, V1, V2, V3, V4, V5, V8))(V17))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> (('case--exactlyOne\x{27}-6869'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V20, ('nested--13721-6563--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', 'erased', V20))))(V17)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> fun (V21) -> begin (V22 = (('un--successful'('erased', V0, V1, V2, V3, V4, V5, V8))(V21))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> (('case--exactlyOne\x{27}-6869'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V24, ('nested--13721-6563--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', 'erased', V24))))(V21)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--exactlyOne'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, 0, V5, V6, V7)).
'un--convertWithLazy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V17 = ('case--convertWithLazy-7093'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V11, V12, V13, V14, V15, V16) -> V11 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--isLazyActive'(V1, V19))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Basics':'un--&&'(V22, fun () -> V4 end))), begin (V30 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unifying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Bool'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('dn--un--show_Show__ElabMode'(case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E8, E9, E10, E11, E12, E13} -> (fun (V24, V25, V26, V27, V28, V29) -> V24 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V8, V9, V19))), case V30 of {'Idris.Prelude.Types.Left', E14} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"....with"/utf8>> end, V8, V10, V19))), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> begin (V36 = (('case--convertWithLazy-7265'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V17, V22, V23, V32, V35, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Normalise':'un--isFromTerm'('erased', V9)), fun () -> ('Idris.Idris2.Core.Normalise':'un--isFromTerm'('erased', V10)) end))))(V19))), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> begin (V43 = case case V38 of {'Idris.Core.Unify.MkUnifyResult', E20, E21, E22, E23} -> (fun (V39, V40, V41, V42) -> V40 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V2, V17, {'Idris.Core.Unify.Normal'}, V19)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V43 of {'Idris.Prelude.Types.Left', E24} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V45) -> {'Idris.Prelude.Types.Right', V38} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V46) -> fun (V47) -> begin (V49 = begin (V48 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E26} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V9))(V47))), case V52 of {'Idris.Prelude.Types.Left', E28} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V54) -> begin (V55 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V10))(V47))), case V55 of {'Idris.Prelude.Types.Left', E30} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V57) -> begin (V61 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V58) -> ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V2, V17, {'Idris.Core.Unify.Normal'}, V58)) end, fun (V59) -> fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, V47))), case V61 of {'Idris.Prelude.Types.Left', E32} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V63) -> begin (V65 = begin (V64 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E34} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V67) -> begin (V68 = (('Idris.Idris2.Core.Normalise':'un--normaliseErr'(V1, {'Idris.Core.Core.WhenUnifying', V0, V6, V8, V54, V57, V46}))(V47))), case V68 of {'Idris.Prelude.Types.Left', E36} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V70) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V70, V47)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V18)) end end.
'un--convertP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('un--convertWithLazy'(V0, V1, V2, V3, 1, V4, V5, V6, V7, V8, V9)).
'un--convert'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('un--convertWithLazy'(V0, V1, V2, V3, 1, 1, V4, V5, V6, V7, V8)).
'un--clearToBind'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('erlang':'put'(V1, ('case--clearToBind-5160'('erased', V2, V1, V7, ('un--clearBindIfUnsolved'('erased', V7))))))), {'Idris.Prelude.Types.Right', V8} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearBindIfUnsolved'(V0, V1) -> {'Idris.TTImp.Elab.Check.MkEState', case V1 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V2 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V16 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V30 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V44 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V58 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> V72 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], case V1 of {'Idris.TTImp.Elab.Check.MkEState', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> V87 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V101 end(E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V115 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V129 end(E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> V143 end(E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.TTImp.Elab.Check.MkEState', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157) -> V157 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.TTImp.Elab.Term':'un--checkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)).
'un--checkExpP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> begin (V14 = (('un--convertWithLazy'(V0, V1, V2, V3, 0, V5, V8, V6, V7, V10, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> (('case--checkExpP-7592'(V0, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V16, case V16 of {'Idris.Core.Unify.MkUnifyResult', E3, E4, E5, E6} -> (fun (V17, V18, V19, V20) -> V17 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, V10}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('un--checkExpP'(V0, V1, V2, V3, V4, case V5 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V11, V12, V13, V14, V15, V16) -> V15 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7, V8, V9, V10)).
'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.TTImp.TTImp.ICoerced', E18, E19} -> (fun (V11, V12) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V10)) end(E18, E19)); {'Idris.TTImp.TTImp.ILet', E20, E21, E22, E23, E24, E25} -> (fun (V13, V14, V15, V16, V17, V18) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)) end(E20, E21, E22, E23, E24, E25)); {'Idris.TTImp.TTImp.ILocal', E26, E27, E28} -> (fun (V19, V20, V21) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)) end(E26, E27, E28)); {'Idris.TTImp.TTImp.IUpdate', E29, E30, E31} -> (fun (V22, V23, V24) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)) end(E29, E30, E31)); _ -> fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V40 = (('Idris.Idris2.TTImp.Elab.Ambiguity':'un--expandAmbigName'(V0, V1, V4, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V34, V35, V36, V37, V38, V39) -> V34 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V8, V9, [], V9, V10))(V25))), case V40 of {'Idris.Prelude.Types.Left', E10} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V42) -> (('Idris.Idris2.TTImp.Elab.Term':'case--check-8993'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V29, V33, V42, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V43, V44, V45, V46, V47, V48) -> V43 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V25)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--bindingType'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> V6 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12) -> V11 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingTerm'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> V5 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12) -> V10 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingRig'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> V3 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12) -> V8 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingPiInfo'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> V4 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12) -> V9 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingMetas'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V6)) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12) -> ('nested--10155-3269--in--un--insertAll'(V7, V12, V11, V10, V9, V8, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V11)))), ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V12)))) end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--argVar'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Core.UnifyState':'un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V5)), ('Idris.Idris2.Core.Context':'un--holeInit'(1))}, 1, 0)).
'un--anyOne'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V5, <<"No elaborators provided"/utf8>>}, V7)) end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V9 of [] -> V11; _ -> fun (V12) -> ('un--try'('erased', V0, V1, V2, V3, V4, V11, ('un--anyOne'(V0, V1, V2, V3, V4, V5, V9)), V12)) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addBindIfUnsolved'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.TTImp.Elab.Check.MkEState', case V7 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V22 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V36 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V50 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V64 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V78 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V6, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V89 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}}}}} | case V7 of {'Idris.TTImp.Elab.Check.MkEState', E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V105 end(E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end], case V7 of {'Idris.TTImp.Elab.Check.MkEState', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V119 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V133 end(E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150) -> V147 end(E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163) -> V161 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168} -> (fun (V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176) -> V175 end(E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181} -> (fun (V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189) -> V189 end(E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
