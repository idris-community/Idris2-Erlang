-module('Idris.Idris2.TTImp.Elab.App').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--checkAppWith-5383'/24,
  'case--checkApp-8234'/16,
  'case--case block in checkApp-8052'/25,
  'case--checkApp-7890'/17,
  'case--case block in checkApp,updateElabInfo-7774'/23,
  'case--checkApp,updateElabInfo-7715'/24,
  'case--checkAppWith-7473'/19,
  'case--case block in checkAppWith-7245'/39,
  'case--checkAppWith-7090'/28,
  'case--checkAppWith-6867'/26,
  'case--checkAppWith-6726'/25,
  'case--checkAppWith-6584'/24,
  'case--case block in checkAppWith-6321'/33,
  'case--checkAppWith-6248'/25,
  'case--checkAppWith-6080'/24,
  'case--case block in checkAppWith-5893'/25,
  'case--checkAppWith-5777'/24,
  'case--case block in with block in checkAppWith-5570'/26,
  'case--with block in checkAppWith-5418'/24,
  'case--findNamed-5296'/3,
  'case--case block in checkRestApp-5140'/31,
  'case--case block in case block in case block in case block in checkRestApp-4762'/52,
  'case--case block in case block in case block in case block in case block in checkRestApp-4436'/52,
  'case--case block in case block in case block in case block in checkRestApp-4319'/51,
  'case--case block in case block in case block in checkRestApp-4148'/44,
  'case--case block in case block in checkRestApp-4010'/38,
  'case--case block in checkRestApp-3875'/31,
  'case--checkRestApp-3785'/28,
  'case--checkRestApp-3673'/25,
  'case--case block in case block in case block in dotErased-3521'/13,
  'case--case block in case block in dotErased-3493'/11,
  'case--case block in dotErased-3431'/10,
  'case--dotErased-3386'/9,
  'case--dotErased,dotTerm-3219'/9,
  'case--case block in case block in dotErased,countConstructors-3059'/17,
  'case--case block in dotErased,countConstructors-3026'/15,
  'case--dotErased,countConstructors-2981'/14,
  'case--case block in case block in checkPatTyValid-2826'/16,
  'case--case block in checkPatTyValid-2782'/15,
  'case--checkPatTyValid-2746'/13,
  'case--needsDelayExpr-2522'/5,
  'case--makeDefImplicit-2271'/24,
  'case--makeAutoImplicit-2004'/23,
  'case--case block in case block in getVarType-1437'/18,
  'case--case block in getVarType-1364'/16,
  'case--case block in getVarType-1275'/10,
  'case--getVarType-1242'/10,
  'case--case block in case block in getNameType-927'/16,
  'case--case block in getNameType-881'/10,
  'case--case block in getNameType-800'/16,
  'case--getNameType-690'/9,
  'case--case block in checkVisibleNS-583'/10,
  'case--checkVisibleNS-551'/6,
  'nested--10773-1171--in--un--useVars'/12,
  'nested--18024-7635--in--un--updateElabInfo'/21,
  'nested--10225-664--in--un--rigSafe'/11,
  'nested--18024-7634--in--un--normalisePrims'/21,
  'nested--11457-2261--in--un--metavarImp'/24,
  'nested--11451-1994--in--un--metavarImp'/23,
  'nested--11473-2966--in--un--dotTerm'/9,
  'nested--11473-2965--in--un--countConstructors'/9,
  'nested--18089-7643--in--un--boundSafe'/22,
  'un--onLHS'/1,
  'un--needsDelayLHS'/2,
  'un--needsDelayExpr'/3,
  'un--needsDelay'/4,
  'un--makeImplicit'/21,
  'un--makeDefImplicit'/22,
  'un--makeAutoImplicit'/21,
  'un--isImplicitAs'/1,
  'un--isHole'/2,
  'un--isBindAllExpPattern'/1,
  'un--getVarType'/9,
  'un--getNameType'/8,
  'un--findNamed'/2,
  'un--findBindAllExpPattern'/1,
  'un--dotErased'/8,
  'un--concrete'/4,
  'un--checkVisibleNS'/4,
  'un--checkRestApp'/22,
  'un--checkPatTyValid'/8,
  'un--checkAppWith'/18,
  'un--checkApp'/15
]).
'with--checkAppWith-5383'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Data.List1.:::', E1, E2} -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V10))), ('un--checkRestApp'(V3, V23, V22, V21, V20, V19, V29, V18, V17, V16, V15, V14, V1, V9, V11, V8, V28, [], V7, V26, V6, V5)) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--with block in checkAppWith-5418'(V4, V23, V22, V21, V3, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V1, V0, ('un--findBindAllExpPattern'(V0)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkApp-8234'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V14, V17))(V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> (('un--checkAppWith'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V16, V21, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V4, V3, V2, 1, V1))(V18)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp-8052'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V26, V27) -> case V26 of {'Idris.Prelude.Types.Just', E3} -> (fun (V28) -> V28 end(E3)); _ -> V1 end end(E1, E2)); _ -> V1 end end(E0)); _ -> V1 end.
'case--checkApp-7890'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V15, V20))(V21))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V15, V21))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V34 = (('nested--18024-7635--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V27, case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E8, E9, E10, E11, E12, E13} -> (fun (V28, V29, V30, V31, V32, V33) -> V28 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V6, V10))(V21))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V80 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V15, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V15, V0, V41, V8, V24, V37))), case V42 of {'Idris.Prelude.Types.Left', E18} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V44) -> begin (V61 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V46) -> fun (V47) -> begin (V48 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V46))(V47))), case V48 of {'Idris.Prelude.Types.Left', E20} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V15, V0, V41, V8, V50, V47))), case V51 of {'Idris.Prelude.Types.Left', E22} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V53) -> begin (V58 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V15, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V56, V57)) end end}, V53, V47))), case V58 of {'Idris.Prelude.Types.Left', E24} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V60}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V37))), case V61 of {'Idris.Prelude.Types.Left', E26} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V63) -> begin (V64 = (('Idris.Idris2.Core.Context':'un--getFullName'(V15, V1))(V37))), case V64 of {'Idris.Prelude.Types.Left', E28} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V66) -> begin (V71 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V15, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V69, V70)) end end}, V44, V37))), case V71 of {'Idris.Prelude.Types.Left', E30} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V66)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V75, V76)) end end}, V6)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V73)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V78, V79)) end end}, V63))))))))))))))))))))))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V21))), case V80 of {'Idris.Prelude.Types.Left', E32} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V82) -> begin (V88 = begin (V83 = {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V19, V20}}), ('case--case block in checkApp-8052'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V19, V20, V83, V24, V27, V36, V82, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V86, V87)) end end}, V1, V9)))) end), begin (V89 = (('un--checkAppWith'(V0, V15, V14, V13, V12, V11, V36, V9, V8, V7, V17, V24, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V88}, V19}, V6, V5, V4, 1, V3))(V21))), case V89 of {'Idris.Prelude.Types.Left', E34} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V91) -> ('nested--18024-7634--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, V27, V8, V91, V21)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp,updateElabInfo-7774'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V19 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V23, V24, V25, V26, V27, V28) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkApp,updateElabInfo-7715'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', case V19 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V25, V26, V27, V28, V29, V30) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', V19} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-7473'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V16, V14, V13, V12, V11, V9, V8, V7, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V16, V0, V17, V9, V6)), V1)); 1 -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvalidArgs', V0, V8, V9, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> {'Idris.Core.Name.UN', <<"<auto>"/utf8>>} end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V3)))), V7}, V19)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAppWith-7245'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V38 of [] -> fun (V39) -> {'Idris.Prelude.Types.Right', V36} end; _ -> fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V33))(V40))), case V41 of {'Idris.Prelude.Types.Left', E0} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V4, V17, V19, V11, V15, V12, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V36)), V43, V38))(V40))), case V44 of {'Idris.Prelude.Types.Left', E2} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V46, ('Idris.Idris2.Core.Normalise':'un--gnf'(V4, V12, V26))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkAppWith-7090'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> begin (V30 = {'Idris.Core.TT.App', V11, V10, V28}), fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V19))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> begin (V36 = (('Idris.Idris2.Core.Normalise':'un--nf'(V19, V4, V35, V12, V26))(V31))), case V36 of {'Idris.Prelude.Types.Left', E4} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V4, V12, {'Idris.Core.TT.Bind', V11, V22, {'Idris.Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V24}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V26))}))), begin (V40 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V4, V19, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V12, V39, V31))), case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> begin (V46 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V4, V19, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V12, V44, V45)) end end end, V5))(V31))), case V46 of {'Idris.Prelude.Types.Left', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V48) -> begin (V49 = (('un--checkAppWith'(V4, V19, V18, V17, V16, V15, V14, V13, V12, V11, V30, V38, {'Idris.Builtin.MkPair', V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1))}, V3, V8, V7, V6, V5))(V31))), case V49 of {'Idris.Prelude.Types.Left', E10} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V4, V19, V17, V16, V11, V14, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V19, V4, V35, V12, V9)), V39))(V31))), case V52 of {'Idris.Prelude.Types.Left', E12} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V54) -> begin (V55 = {'Idris.Builtin.MkPair', V28, V29}), (('case--case block in checkAppWith-7245'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V28, V29, V55, V30, V35, V38, V39, V42, V48, V51, V54, case V54 of {'Idris.Core.Unify.MkUnifyResult', E14, E15, E16, E17} -> (fun (V56, V57, V58, V59) -> V56 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V31)) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-6867'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeDefImplicit'(V0, V23, V22, V21, V20, V19, V24, V18, V17, V16, V15, V14, V6, V2, V3, V5, V13, V12, V11, V10, V9, V8)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Data.List1.:::', E1, E2} -> (fun (V27, V28) -> case V27 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V29, V30) -> ('un--checkRestApp'(V0, V23, V22, V21, V20, V19, V24, V18, V17, V16, V15, V14, V6, V3, V5, V13, V30, V12, V11, V28, V9, V8)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-6726'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeImplicit'(V0, V22, V21, V20, V19, V18, V23, V17, V16, V15, V14, V13, V5, V2, V4, V12, V11, V10, V9, V8, V7)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> case V25 of {'Idris.Data.List1.:::', E1, E2} -> (fun (V26, V27) -> case V26 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V28, V29) -> ('un--checkRestApp'(V0, V22, V21, V20, V19, V18, V23, V17, V16, V15, V14, V13, V5, V2, V4, V12, V29, V11, V10, V27, V8, V7)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-6584'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Data.List1.:::', E1, E2} -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V27, V28) -> ('un--checkRestApp'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V28, V10, [], V26, V8, V7)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeAutoImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V10, [], V9, V8, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAppWith-6321'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V32 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V21, V19, V18, V17, V16, V14, V13, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V24, V14, V11)), {'Idris.Prelude.Types.Just', V2})); 1 -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-6248'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V25, V26, V27, V28) -> case V27 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V29, V30, V31, V32) -> case V31 of {'Idris.Core.TT.DefImplicit', E8} -> (fun (V33) -> fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert__NF'(V21, V0, V24, V14, V5, V33, V34))), case V35 of {'Idris.Prelude.Types.Left', E9} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V37) -> case V37 of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V21, V19, V18, V17, V16, V14, V13, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V24, V14, V11)), {'Idris.Prelude.Types.Just', V2}))(V34)); 1 -> (('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2}))(V34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E4, E5, E6, E7)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E0, E1, E2, E3)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end.
'case--checkAppWith-6080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})) end()); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E4, E5, E6, E7)); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E0, E1, E2, E3)); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end.
'case--case block in checkAppWith-5893'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> ('un--makeImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})); 1 -> fun (V25) -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V20, V19, V18, V17, ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})), fun (V26) -> ('un--makeImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end, V25)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-5777'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})) end()); _ -> ('case--case block in checkAppWith-5893'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E20, E21, E22, E23, E24, E25} -> (fun (V32, V33, V34, V35, V36, V37) -> V36 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E16, E17, E18, E19)); _ -> ('case--case block in checkAppWith-5893'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E10, E11, E12, E13, E14, E15} -> (fun (V38, V39, V40, V41, V42, V43) -> V42 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E6, E7, E8, E9)); _ -> ('case--case block in checkAppWith-5893'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V44, V45, V46, V47, V48, V49) -> V48 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'case--case block in with block in checkAppWith-5570'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V4, V1, V3, V5, V6, V7, V9, V10, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V4, V24, V9, V12)), V20)); 1 -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvalidArgs', V4, V10, V9, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V27) -> {'Idris.Core.Name.UN', <<"<auto>"/utf8>>} end, V18)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V28)) end, V22)))), V11}, V26)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in checkAppWith-5418'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E2} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V15))), ('un--checkRestApp'(V4, V1, V2, V3, V5, V6, V25, V7, V8, V9, V10, V11, V21, V16, V14, V17, V24, [], V18, V22, V19, V20)) end end(E2)); _ -> fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> (('case--case block in with block in checkAppWith-5570'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V30, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V40, V41, V42)) end end end end end}, fun (V43) -> ('un--isImplicitAs'(V43)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V31)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V32) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V32)))))) end, V22))))))))))(V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--findNamed-5296'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V3 of [E2 | E3] -> (fun (V5, V6) -> {'Idris.Prelude.Types.Just', {'Idris.Data.List1.:::', V5, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, V4))}} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in checkRestApp-5140'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V31, V32) -> fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V14, V32, V33))), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> begin (V38 = begin (V37 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E4} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V40) -> begin (V41 = {'Idris.Core.TT.App', V13, V12, V31}), begin (V42 = (((V9(V40))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V31))))(V33))), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> (('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V41, V44, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V25, V3))(V33)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in checkRestApp-4762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V51 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V52) -> fun (V53) -> begin (V55 = ('Idris.Idris2.Core.Context':'un--updateDef'(V22, {'Idris.Core.Name.Resolved', V30}, fun (V54) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V53))), case V55 of {'Idris.Prelude.Types.Left', E1} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V57) -> begin (V58 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V31, V43))(V53))), case V58 of {'Idris.Prelude.Types.Left', E3} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in case block in case block in case block in case block in checkRestApp-4436'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V51 of [] -> fun (V52) -> {'Idris.Prelude.Types.Right', V37} end; _ -> fun (V53) -> begin (V54 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V38))(V53))), case V54 of {'Idris.Prelude.Types.Left', E0} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V56) -> (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V20, V22, V13, V18, V14, V37, V56, V51))(V53)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in case block in checkRestApp-4319'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> case V50 of 0 -> fun (V51) -> begin (V52 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V22, V20, V19, V13, V16, V14, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V14, V31)), ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V14, V43))))(V51))), case V52 of {'Idris.Prelude.Types.Left', E0} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V54) -> (('case--case block in case block in case block in case block in case block in checkRestApp-4436'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V54, case V54 of {'Idris.Core.Unify.MkUnifyResult', E2, E3, E4, E5} -> (fun (V55, V56, V57, V58) -> V55 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V51)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V59) -> {'Idris.Prelude.Types.Right', V37} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkRestApp-4148'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V43 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V44, V45) -> fun (V46) -> begin (V53 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V47, V48, V49, V50, V51, V52) -> V47 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V40, V14, V41, V44, V45))(V46)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V53 of {'Idris.Prelude.Types.Left', E8} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V55) -> begin (V57 = begin (V56 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V56} end), case V57 of {'Idris.Prelude.Types.Left', E10} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V31)), <<" with"/utf8>>)))) end, V44, V46))), case V60 of {'Idris.Prelude.Types.Left', E12} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V62) -> begin (V63 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V31, V44))(V46))), case V63 of {'Idris.Prelude.Types.Left', E14} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V65) -> begin (V67 = begin (V66 = {'Idris.Builtin.MkPair', V44, V45}), (('case--case block in case block in case block in case block in checkRestApp-4319'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V44, V45, V66, V55, V59, V62, V65, ('Idris.Idris2.Prelude.Basics':'un--not'(V65))))(V46)) end), case V67 of {'Idris.Prelude.Types.Left', E16} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V69) -> begin (V77 = begin (V70 = {'Idris.Builtin.MkPair', V44, V45}), (('case--case block in case block in case block in case block in checkRestApp-4762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V44, V45, V70, V55, V59, V62, V65, V69, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E18, E19, E20, E21, E22, E23} -> (fun (V71, V72, V73, V74, V75, V76) -> V71 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V46)) end), case V77 of {'Idris.Prelude.Types.Left', E24} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V30, V46))), case V80 of {'Idris.Prelude.Types.Left', E26} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V69, V38}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkRestApp-4010'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V38, V39) -> fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E2} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V44) -> begin (V45 = (('Idris.Idris2.Core.Normalise':'un--nf'(V22, V0, V44, V14, V29))(V40))), case V45 of {'Idris.Prelude.Types.Left', E4} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V27)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V24)))))))) end, V14, V47, V40))), case V48 of {'Idris.Prelude.Types.Left', E6} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V50) -> begin (V51 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V44, V14, V47))}))(V40))), case V51 of {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V53) -> begin (V54 = {'Idris.Builtin.MkPair', V38, V39}), case V53 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V55, V56) -> begin (V63 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V57, V58, V59, V60, V61, V62) -> V57 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V44, V14, V47, V55, V56))(V40)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V63 of {'Idris.Prelude.Types.Left', E18} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V65) -> begin (V67 = begin (V66 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V66} end), case V67 of {'Idris.Prelude.Types.Left', E20} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V69) -> begin (V70 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V31)), <<" with"/utf8>>)))) end, V55, V40))), case V70 of {'Idris.Prelude.Types.Left', E22} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V72) -> begin (V73 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V31, V55))(V40))), case V73 of {'Idris.Prelude.Types.Left', E24} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V75) -> begin (V77 = begin (V76 = {'Idris.Builtin.MkPair', V55, V56}), (('case--case block in case block in case block in case block in checkRestApp-4319'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V38, V39, V54, V44, V47, V50, V55, V56, V76, V65, V69, V72, V75, ('Idris.Idris2.Prelude.Basics':'un--not'(V75))))(V40)) end), case V77 of {'Idris.Prelude.Types.Left', E26} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V79) -> begin (V87 = begin (V80 = {'Idris.Builtin.MkPair', V55, V56}), (('case--case block in case block in case block in case block in checkRestApp-4762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V38, V39, V54, V44, V47, V50, V55, V56, V80, V65, V69, V72, V75, V79, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E28, E29, E30, E31, E32, E33} -> (fun (V81, V82, V83, V84, V85, V86) -> V81 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V40)) end), case V87 of {'Idris.Prelude.Types.Left', E34} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V89) -> begin (V90 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V30, V40))), case V90 of {'Idris.Prelude.Types.Left', E36} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V79, V39}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkRestApp-3875'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V31, V32) -> begin (V33 = {'Idris.Core.TT.App', V13, V12, V32}), fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Delaying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V27)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V24)))))))) end, V14, V10, V34))), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V32, V34))), case V38 of {'Idris.Prelude.Types.Left', E4} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V40) -> begin (V41 = (((V9(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V32))))(V34))), case V41 of {'Idris.Prelude.Types.Left', E6} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V43) -> begin (V44 = (('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V33, V43, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V25, V3))(V34))), case V44 of {'Idris.Prelude.Types.Left', E8} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V46) -> begin (V47 = {'Idris.Builtin.MkPair', V31, V32}), case V46 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V48, V49) -> begin (V51 = begin (V50 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V53) -> begin (V54 = (('Idris.Idris2.Core.Normalise':'un--nf'(V22, V0, V53, V14, V29))(V34))), case V54 of {'Idris.Prelude.Types.Left', E14} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V27)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V24)))))))) end, V14, V56, V34))), case V57 of {'Idris.Prelude.Types.Left', E16} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V59) -> begin (V60 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V53, V14, V56))}))(V34))), case V60 of {'Idris.Prelude.Types.Left', E18} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V62) -> begin (V63 = {'Idris.Builtin.MkPair', V48, V49}), case V62 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V64, V65) -> begin (V72 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E22, E23, E24, E25, E26, E27} -> (fun (V66, V67, V68, V69, V70, V71) -> V66 end(E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V53, V14, V56, V64, V65))(V34)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V72 of {'Idris.Prelude.Types.Left', E28} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E30} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V32)), <<" with"/utf8>>)))) end, V64, V34))), case V79 of {'Idris.Prelude.Types.Left', E32} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V81) -> begin (V82 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V32, V64))(V34))), case V82 of {'Idris.Prelude.Types.Left', E34} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V84) -> begin (V86 = begin (V85 = {'Idris.Builtin.MkPair', V64, V65}), (('case--case block in case block in case block in case block in checkRestApp-4319'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V31, V32, V47, V33, V37, V40, V43, V48, V49, V63, V53, V56, V59, V64, V65, V85, V74, V78, V81, V84, ('Idris.Idris2.Prelude.Basics':'un--not'(V84))))(V34)) end), case V86 of {'Idris.Prelude.Types.Left', E36} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V88) -> begin (V96 = begin (V89 = {'Idris.Builtin.MkPair', V64, V65}), (('case--case block in case block in case block in case block in checkRestApp-4762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V31, V32, V47, V33, V37, V40, V43, V48, V49, V63, V53, V56, V59, V64, V65, V89, V74, V78, V81, V84, V88, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E38, E39, E40, E41, E42, E43} -> (fun (V90, V91, V92, V93, V94, V95) -> V90 end(E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V34)) end), case V96 of {'Idris.Prelude.Types.Left', E44} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V98) -> begin (V99 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V31, V34))), case V99 of {'Idris.Prelude.Types.Left', E46} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V88, V49}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkRestApp-3785'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> fun (V28) -> begin (V29 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V22, V20, V11))(V28))), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V23, V28))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V22, V0, V34, V14, V10, V28))), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = (('Idris.Idris2.TTImp.Elab.Check':'un--argVar'(V0, V22, V20, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V24)), V17, V14, V31, V37))(V28))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V41, V42) -> begin (V43 = {'Idris.Core.TT.App', V13, V12, V42}), begin (V44 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Delaying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V31)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V24)))))))) end, V14, V10, V28))), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V42, V28))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V50 = (((V9(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V42))))(V28))), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> begin (V53 = (('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V43, V52, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V25, V3))(V28))), case V53 of {'Idris.Prelude.Types.Left', E16} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V55) -> begin (V56 = {'Idris.Builtin.MkPair', V41, V42}), case V55 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V57, V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E20} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V62) -> begin (V63 = (('Idris.Idris2.Core.Normalise':'un--nf'(V22, V0, V62, V14, V37))(V28))), case V63 of {'Idris.Prelude.Types.Left', E22} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V31)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V24)))))))) end, V14, V65, V28))), case V66 of {'Idris.Prelude.Types.Left', E24} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V68) -> begin (V69 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V62, V14, V65))}))(V28))), case V69 of {'Idris.Prelude.Types.Left', E26} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V71) -> begin (V72 = {'Idris.Builtin.MkPair', V57, V58}), case V71 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V73, V74) -> begin (V81 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E30, E31, E32, E33, E34, E35} -> (fun (V75, V76, V77, V78, V79, V80) -> V75 end(E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V62, V14, V65, V73, V74))(V28)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V81 of {'Idris.Prelude.Types.Left', E36} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V83) -> begin (V85 = begin (V84 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E38} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V42)), <<" with"/utf8>>)))) end, V73, V28))), case V88 of {'Idris.Prelude.Types.Left', E40} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V90) -> begin (V91 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V42, V73))(V28))), case V91 of {'Idris.Prelude.Types.Left', E42} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V93) -> begin (V95 = begin (V94 = {'Idris.Builtin.MkPair', V73, V74}), (('case--case block in case block in case block in case block in checkRestApp-4319'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V31, V34, V37, V41, V42, V56, V43, V46, V49, V52, V57, V58, V72, V62, V65, V68, V73, V74, V94, V83, V87, V90, V93, ('Idris.Idris2.Prelude.Basics':'un--not'(V93))))(V28)) end), case V95 of {'Idris.Prelude.Types.Left', E44} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V97) -> begin (V105 = begin (V98 = {'Idris.Builtin.MkPair', V73, V74}), (('case--case block in case block in case block in case block in checkRestApp-4762'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V31, V34, V37, V41, V42, V56, V43, V46, V49, V52, V57, V58, V72, V62, V65, V68, V73, V74, V98, V83, V87, V90, V93, V97, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E46, E47, E48, E49, E50, E51} -> (fun (V99, V100, V101, V102, V103, V104) -> V99 end(E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V28)) end), case V105 of {'Idris.Prelude.Types.Left', E52} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V107) -> begin (V108 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V41, V28))), case V108 of {'Idris.Prelude.Types.Left', E54} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V97, V58}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V111) -> begin (V112 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Argument type "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V11)))) end, V14, V10, V111))), case V112 of {'Idris.Prelude.Types.Left', E56} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V114) -> begin (V115 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Full function type"/utf8>> end, V14, {'Idris.Core.Value.NBind', V13, V11, {'Idris.Core.TT.Pi', V13, V17, {'Idris.Core.TT.Explicit'}, V10}, V9}, V111))), case V115 of {'Idris.Prelude.Types.Left', E58} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V117) -> begin (V138 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V118) -> begin (V132 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V120) -> fun (V121) -> begin (V122 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V120))(V121))), case V122 of {'Idris.Prelude.Types.Left', E60} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V124) -> begin (V129 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V22, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V125, V126)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V127, V128)) end end}, V124, V121))), case V129 of {'Idris.Prelude.Types.Left', E62} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V131}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V118))), case V132 of {'Idris.Prelude.Types.Left', E64} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V134) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Overall expected type: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V135) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V135)) end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V136, V137)) end end}, V134))))} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V111))), case V138 of {'Idris.Prelude.Types.Left', E66} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V140) -> begin (V141 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V23, V14, V10))}))(V111))), case V141 of {'Idris.Prelude.Types.Left', E68} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V143) -> case V143 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V144, V145) -> begin (V146 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V14, V145, V111))), case V146 of {'Idris.Prelude.Types.Left', E72} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V148) -> begin (V150 = begin (V149 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V149} end), case V150 of {'Idris.Prelude.Types.Left', E74} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V152) -> begin (V153 = {'Idris.Core.TT.App', V13, V12, V144}), begin (V154 = (((V9(V152))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V144))))(V111))), case V154 of {'Idris.Prelude.Types.Left', E76} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V156) -> (('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V153, V156, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V25, V3))(V111)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkRestApp-3673'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V4 of 0 -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V26) -> begin (V27 = (((V9(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, {'Idris.Core.TT.Erased', V13, 1}))))(V26))), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> (('un--concrete'('erased', V23, V14, V29))(V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in dotErased-3521'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', V2} end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', ('nested--11473-2966--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in dotErased-3493'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), ('case--case block in case block in case block in dotErased-3521'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V15, V16)) end end}, V4, case V11 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V21 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', ('nested--11473-2966--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in dotErased-3431'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', V2} end; 1 -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V44 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V17) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, case V15 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V18 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end, V5))(V11))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> case V46 of {'Idris.Prelude.Types.Just', E30} -> (fun (V47) -> begin (V48 = {'Idris.Prelude.Types.Just', V47}), (('case--case block in case block in case block in dotErased-3521'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V15, V47, V48, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V51, V52)) end end}, V4, case V47 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V11)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('nested--11473-2966--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased-3386'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V10 = (('nested--11473-2965--in--un--countConstructors'('erased', V1, V2, V3, V4, V5, V6, V7, V6))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('case--case block in dotErased-3431'('erased', V1, V2, V3, V4, V5, V6, V7, V12, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V15, V16)) end end}, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1))})), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V19, V20)) end end}, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0))})) end))))(V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased,dotTerm-3219'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10} -> (fun (V16, V17, V18, V19) -> case V19 of {'Idris.TTImp.TTImp.IBindVar', E11, E12} -> (fun (V20, V21) -> V8 end(E11, E12)); {'Idris.TTImp.TTImp.Implicit', E13, E14} -> (fun (V22, V23) -> V8 end(E13, E14)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, {'Idris.TTImp.TTImp.IMustUnify', V16, {'Idris.Core.Core.ErasedArg'}, V8}} end end(E7, E8, E9, E10)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), {'Idris.Core.Core.ErasedArg'}, V8} end.
'case--case block in case block in dotErased,countConstructors-3059'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V23))}} end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in dotErased,countConstructors-3026'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> begin (V16 = {'Idris.Prelude.Types.Just', V15}), ('case--case block in case block in dotErased,countConstructors-3059'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V16, case V15 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V34 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased,countConstructors-2981'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V18 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V19 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E30} -> (fun (V48) -> begin (V49 = {'Idris.Prelude.Types.Just', V48}), (('case--case block in case block in dotErased,countConstructors-3059'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V18, V48, V49, case V48 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V67 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkPatTyValid-2826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.MatchTooSpecific', V0, V10, V8, V7}, V16)) end; 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkPatTyValid-2782'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V6))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = (('un--concrete'('erased', V9, V8, V18))(V15))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.MatchTooSpecific', V0, V10, V8, V7}, V15)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPatTyValid-2746'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> begin (V14 = {'Idris.Prelude.Types.Just', V13}), ('case--case block in checkPatTyValid-2782'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V21, V22)) end end}}, case V13 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V30 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--needsDelayExpr-2522'(V0, V1, V2, V3, V4) -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V6 of [E2 | E3] -> (fun (V7, V8) -> 0 end(E2, E3)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'case--makeDefImplicit-2271'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V22, V20, V11))(V24))), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V28, V24))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V22, V0, V34, V14, V9, V24))), case V35 of {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V22, V20, V13, V17, V14, V31, V37, V24))), case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> begin (V41 = {'Idris.Core.TT.App', V13, V12, V40}), begin (V42 = (((V8(V28))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V40))))(V24))), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V19))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V50 = begin (V49 = ('erlang':'put'(V19, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V31, V17, {'Idris.Core.TT.AutoImplicit'}, V14, V40, V37, V48))))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> (('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V41, V44, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V4, V3))(V24)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V53) -> begin (V55 = begin (V54 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E16} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V57, V53))), case V58 of {'Idris.Prelude.Types.Left', E18} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V22, V0, V60, V14, V10, V53))), case V61 of {'Idris.Prelude.Types.Left', E20} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V63) -> begin (V64 = {'Idris.Core.TT.App', V13, V12, V63}), begin (V65 = (((V8(V57))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V63))))(V53))), case V65 of {'Idris.Prelude.Types.Left', E22} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V67) -> (('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V64, V67, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V4, V3))(V53)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeAutoImplicit-2004'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V21, V19, V10))(V23))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V23))), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V21, V0, V33, V13, V9, V23))), case V34 of {'Idris.Prelude.Types.Left', E6} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V21, V19, V12, V16, V13, V30, V36, V23))), case V37 of {'Idris.Prelude.Types.Left', E8} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V39) -> begin (V40 = {'Idris.Core.TT.App', V12, V11, V39}), begin (V41 = (((V8(V27))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V39))))(V23))), case V41 of {'Idris.Prelude.Types.Left', E10} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V47) -> begin (V49 = begin (V48 = ('erlang':'put'(V18, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V30, V16, {'Idris.Core.TT.AutoImplicit'}, V13, V39, V36, V47))))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E14} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V51) -> (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V40, V43, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V4, V3))(V23)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E16} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V56) -> begin (V57 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V21, V19, V10))(V52))), case V57 of {'Idris.Prelude.Types.Left', E18} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V21, V0, V56, V13, V9, V52))), case V60 of {'Idris.Prelude.Types.Left', E20} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V62) -> begin (V64 = begin (V63 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E22} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Context':'un--getAutoImplicitLimit'(V21, V52))), case V67 of {'Idris.Prelude.Types.Left', E24} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V69) -> begin (V83 = ('Idris.Idris2.TTImp.Elab.Check':'un--searchVar'(V0, V21, V19, V12, V16, V69, {'Idris.Core.Name.Resolved', case V66 of {'Idris.TTImp.Elab.Check.MkEState', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V71 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V13, V59, V62, V52))), case V83 of {'Idris.Prelude.Types.Left', E39} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V85) -> begin (V86 = {'Idris.Core.TT.App', V12, V11, V85}), begin (V87 = (((V8(V56))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V85))))(V52))), case V87 of {'Idris.Prelude.Types.Left', E41} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V89) -> (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V86, V89, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V7, V6, V5, V4, V3))(V52)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getVarType-1437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V18, V19, V20, V21, V22) -> {'Idris.Core.TT.Func'} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V23, V24, V25) -> {'Idris.Core.TT.DataCon', V23, V24} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.TT.TyCon', V26, V27} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Func'} end.
'case--case block in getVarType-1364'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V14}, V16)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> begin (V40 = begin (V18 = {'Idris.Prelude.Types.Just', V17}), ('case--case block in case block in getVarType-1437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V18, case V17 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V36 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V41 = ((V11(V2))(V40))), begin (V63 = ('nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V41)), ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V17 of {'Idris.Core.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V44 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), fun (V64) -> begin (V107 = (('un--checkVisibleNS'(V8, V2, case V17 of {'Idris.Core.Context.MkGlobalDef', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V66 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V17 of {'Idris.Core.Context.MkGlobalDef', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V95 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V64))), case V107 of {'Idris.Prelude.Types.Left', E85} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V109) -> begin (V110 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)))) end, V63, V64))), case V110 of {'Idris.Prelude.Types.Left', E87} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V41, V64))), case V113 of {'Idris.Prelude.Types.Left', E89} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V115) -> begin (V116 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V13)))) end))(V64))), case V116 of {'Idris.Prelude.Types.Left', E91} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V118) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', V13, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V63))}}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getVarType-1275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', 0, V11}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getVarType-1242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V11 = (('un--getNameType'(V0, V8, V7, V6, V5, V3, V2, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', 0, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V19))), begin (V28 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V27) -> V27 end end, V17))), begin (V55 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V28, case V25 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V29 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V55 of {'Idris.Prelude.Types.Left', E37} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V57) -> case V57 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V28}, V21)) end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V58) -> begin (V81 = begin (V59 = {'Idris.Prelude.Types.Just', V58}), ('case--case block in case block in getVarType-1437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17, V19, V20, V25, V26, V28, V58, V59, case V58 of {'Idris.Core.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V77 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V82 = ((V20(V2))(V81))), begin (V104 = ('nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V82)), ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V58 of {'Idris.Core.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V85 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V147 = (('un--checkVisibleNS'(V8, V2, case V58 of {'Idris.Core.Context.MkGlobalDef', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V106 end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V58 of {'Idris.Core.Context.MkGlobalDef', E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V135 end(E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V147 of {'Idris.Prelude.Types.Left', E124} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V149) -> begin (V150 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V28)))) end, V104, V21))), case V150 of {'Idris.Prelude.Types.Left', E126} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V152) -> begin (V153 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V82, V21))), case V153 of {'Idris.Prelude.Types.Left', E128} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V155) -> begin (V156 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V26)))) end))(V21))), case V156 of {'Idris.Prelude.Types.Left', E130} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V158) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V82, {'Idris.Builtin.MkPair', V26, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V104))}}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getNameType-927'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V16, V17, V18, V19, V20) -> {'Idris.Core.TT.Func'} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V21, V22, V23) -> {'Idris.Core.TT.DataCon', V21, V22} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.TT.TyCon', V24, V25} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Func'} end.
'case--case block in getNameType-881'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V14, V15) -> case V11 of [] -> fun (V16) -> begin (V41 = begin (V17 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> (('un--checkVisibleNS'(V7, V2, V19, case V15 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V29 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V43) -> begin (V65 = ('nested--10225-664--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V15 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V51 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V16))), case V65 of {'Idris.Prelude.Types.Left', E52} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V67) -> begin (V90 = begin (V68 = [{'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, V15}} | []]), ('case--case block in case block in getNameType-927'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V14, V15, V68, V43, V67, case V15 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V86 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V90, {'Idris.Core.Name.Resolved', V14}}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V15 of {'Idris.Core.Context.MkGlobalDef', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V93 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V113) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V113)) end, V9))}, V112)) end end end(E4, E5)); _ -> fun (V114) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V115) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V115)) end, V9))}, V114)) end end end(E2, E3)); _ -> fun (V116) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V117) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V117)) end, V9))}, V116)) end end end(E0, E1)); [] -> fun (V118) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V118)) end; _ -> fun (V119) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V120) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V120)) end, V9))}, V119)) end end.
'case--case block in getNameType-800'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, [V8 | V26], V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNameType-690'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = ('nested--10225-664--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V4, V12))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V23 = ('Idris.Idris2.Core.Env':'un--getBinder'('erased', 'erased', {'Idris.Core.TT.dn--un--__mkWeaken', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken__Term'('erased', 'erased', V21, V22)) end end end end}, V0, V10, 'erased', V3))), begin (V24 = ('Idris.Idris2.Core.TT':'un--binderType'('erased', V23))), begin (V25 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V7, V6, V2, V1, V3, V24, V12))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> begin (V54 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V34, V35)) end end}}, V11)) of 0 -> begin (V37 = begin (V36 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E7} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V39) -> begin (V53 = ('erlang':'put'(V5, case V39 of {'Idris.TTImp.Elab.Check.MkEState', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.TTImp.Elab.Check.MkEState', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, [V10 | V50], V51, V52} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V54 of {'Idris.Prelude.Types.Left', E22} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'('erased', V23))}, V10}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V24))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> begin (V88 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V1, case V61 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V62 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V57))), case V88 of {'Idris.Prelude.Types.Left', E52} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V90) -> case V90 of [E54 | E55] -> (fun (V91, V92) -> case V91 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V93, V94) -> case V94 of {'Idris.Builtin.MkPair', E58, E59} -> (fun (V95, V96) -> case V92 of [] -> begin (V121 = begin (V97 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V93))(V57))), case V97 of {'Idris.Prelude.Types.Left', E60} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V99) -> (('un--checkVisibleNS'(V7, V2, V99, case V96 of {'Idris.Core.Context.MkGlobalDef', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> V109 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V57)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V121 of {'Idris.Prelude.Types.Left', E83} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V123) -> begin (V145 = ('nested--10225-664--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V96 of {'Idris.Core.Context.MkGlobalDef', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> V131 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V57))), case V145 of {'Idris.Prelude.Types.Left', E106} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V147) -> begin (V170 = begin (V148 = [{'Idris.Builtin.MkPair', V93, {'Idris.Builtin.MkPair', V95, V96}} | []]), ('case--case block in case block in getNameType-927'(V0, V1, V2, V3, V4, V5, V6, V7, V61, V93, V95, V96, V148, V123, V147, case V96 of {'Idris.Core.Context.MkGlobalDef', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128} -> (fun (V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169) -> V166 end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V170, {'Idris.Core.Name.Resolved', V95}}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V96 of {'Idris.Core.Context.MkGlobalDef', E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191) -> V173 end(E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V192) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V192)) end, V90))}, V57)) end end(E58, E59)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V193) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V193)) end, V90))}, V57)) end end(E56, E57)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V194) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V194)) end, V90))}, V57)) end end(E54, E55)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V57)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V195) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V195)) end, V90))}, V57)) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkVisibleNS-583'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V3, {'Idris.Core.Name.NS', V1, V0}, {'Idris.Prelude.Types.Nothing'}}, V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkVisibleNS-551'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getNS'(V4, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V4, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = 0), (('case--case block in checkVisibleNS-583'(V0, V1, V2, V3, V4, V16, V9, V12, V15, ('Idris.Idris2.Prelude.Basics':'un--||'(V9, fun () -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V12 | V15], {'Idris.Core.Name.NS', V1, V0}, V2)) end))))(V6)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V3, {'Idris.Core.Name.NS', V1, V0}, {'Idris.Prelude.Types.Just', V1}}, V17)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E8 | E9] -> (fun (V12, V13) -> case V11 of {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E30, E31, E32, E33} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V14, V15, {'Idris.Core.TT.Let', V18, V19, V12, V21}, ('nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V22)) end, V13)), V17))} end(E30, E31, E32, E33)); _ -> case V11 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V23, V24, V25, V26) -> case V25 of {'Idris.Core.TT.Let', E26, E27, E28, E29} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.TT.Bind', V23, V24, {'Idris.Core.TT.Let', V27, V28, V29, V30}, ('nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V24 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V31)) end, V10)), V26))} end(E26, E27, E28, E29)); _ -> V11 end end(E22, E23, E24, E25)); _ -> V11 end end end(E18, E19, E20, E21)); _ -> case V11 of {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V32, V33, V34, V35) -> case V34 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V36, V37, V38, V39) -> {'Idris.Core.TT.Bind', V32, V33, {'Idris.Core.TT.Let', V36, V37, V38, V39}, ('nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V33 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V40)) end, V10)), V35))} end(E14, E15, E16, E17)); _ -> V11 end end(E10, E11, E12, E13)); _ -> V11 end end end(E8, E9)); _ -> case V11 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V41, V42, V43, V44) -> case V43 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V45, V46, V47, V48) -> {'Idris.Core.TT.Bind', V41, V42, {'Idris.Core.TT.Let', V45, V46, V47, V48}, ('nested--10773-1171--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V42 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V49)) end, V10)), V44))} end(E4, E5, E6, E7)); _ -> V11 end end(E0, E1, E2, E3)); _ -> V11 end end.
'nested--18024-7635--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V17 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V21) -> case V19 of [E1 | E2] -> (fun (V22, V23) -> case V22 of {'Idris.TTImp.TTImp.IPrimVal', E3, E4} -> (fun (V24, V25) -> case V23 of [] -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context':'un--getFullName'(V15, V18))(V26))), case V27 of {'Idris.Prelude.Types.Left', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V29) -> (('case--checkApp,updateElabInfo-7715'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21, V25, V24, V20, V18, V16, V29, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V32, V33)) end end}, ('Idris.Idris2.Core.Name':'un--dropNS'(V29)), V16))))(V26)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V34) -> {'Idris.Prelude.Types.Right', V20} end end end(E3, E4)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', V20} end end end(E1, E2)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', V20} end end end(E0)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', V20} end end.
'nested--10225-664--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V14, V15)) end end, fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V16)) end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V17, V18, V19, V20, V21)) end end end end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V24, V25)) end end}}, V8, V9)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.LinearMisuse', V2, V13, V8, V9}, V10)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--18024-7634--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> begin (V29 = ('Idris.Idris2.Core.Normalise':'un--normalisePrims'('erased', V15, V16, fun (V21) -> ('nested--18089-7643--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V19, V18, V17, V21, case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V22, V23, V24, V25, V26, V27) -> V22 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V28) -> ('Idris.Idris2.TTImp.TTImp':'un--isIPrimVal'(V28)) end, V17, V1, V6, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V19)), V18, V20))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V19)) end, V31)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V19))}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11457-2261--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V24) -> 0 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 0 end()); _ -> 1 end.
'nested--11451-1994--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V23) -> 0 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 0 end()); _ -> 1 end.
'nested--11473-2966--in--un--dotTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10} -> (fun (V16, V17, V18, V19) -> case V19 of {'Idris.TTImp.TTImp.IBindVar', E11, E12} -> (fun (V20, V21) -> V8 end(E11, E12)); {'Idris.TTImp.TTImp.Implicit', E13, E14} -> (fun (V22, V23) -> V8 end(E13, E14)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, {'Idris.TTImp.TTImp.IMustUnify', V16, {'Idris.Core.Core.ErasedArg'}, V8}} end end(E7, E8, E9, E10)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), {'Idris.Core.Core.ErasedArg'}, V8} end.
'nested--11473-2965--in--un--countConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> ('case--dotErased,countConstructors-2981'('erased', V1, V2, V3, V4, V5, V6, V7, V9, V11, V13, V12, V10, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V13)), V12)))) end(E0, E1, E2, E3, E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'nested--18089-7643--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.TTImp.Elab.Check.InLHS', E1} -> (fun (V22) -> 0 end(E1)); _ -> case V20 of {'Idris.Core.TT.BI', E0} -> (fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs__Integer'(V23)), 100)) end(E0)); _ -> 0 end end.
'un--onLHS'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> 0 end(E0)); _ -> 1 end.
'un--needsDelayLHS'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V5, V6, V7) -> ('un--needsDelayLHS'(V0, V6)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V8, V9, V10) -> ('un--needsDelayLHS'(V0, V9)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> ('un--needsDelayLHS'(V0, V12)) end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IAlternative', E12, E13, E14} -> (fun (V15, V16, V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', 0} end end(E12, E13, E14)); {'Idris.TTImp.TTImp.ISearch', E15, E16} -> (fun (V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', 0} end end(E15, E16)); {'Idris.TTImp.TTImp.IPrimVal', E17, E18} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', 0} end end(E17, E18)); {'Idris.TTImp.TTImp.IType', E19} -> (fun (V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', 0} end end(E19)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--needsDelayExpr'(V0, V1, V2) -> case V1 of 1 -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; 0 -> case V2 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V5, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V39 of [E32 | E33] -> (fun (V40, V41) -> case V41 of [E34 | E35] -> (fun (V42, V43) -> 0 end(E34, E35)); _ -> 1 end end(E32, E33)); _ -> 1 end} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E36, E37, E38} -> (fun (V44, V45, V46) -> ('un--needsDelayExpr'(V0, 0, V45)) end(E36, E37, E38)); {'Idris.TTImp.TTImp.IAutoApp', E39, E40, E41} -> (fun (V47, V48, V49) -> ('un--needsDelayExpr'(V0, 0, V48)) end(E39, E40, E41)); {'Idris.TTImp.TTImp.INamedApp', E42, E43, E44, E45} -> (fun (V50, V51, V52, V53) -> ('un--needsDelayExpr'(V0, 0, V51)) end(E42, E43, E44, E45)); {'Idris.TTImp.TTImp.ILam', E46, E47, E48, E49, E50, E51} -> (fun (V54, V55, V56, V57, V58, V59) -> fun (V60) -> {'Idris.Prelude.Types.Right', 0} end end(E46, E47, E48, E49, E50, E51)); {'Idris.TTImp.TTImp.ICase', E52, E53, E54, E55} -> (fun (V61, V62, V63, V64) -> fun (V65) -> {'Idris.Prelude.Types.Right', 0} end end(E52, E53, E54, E55)); {'Idris.TTImp.TTImp.ILocal', E56, E57, E58} -> (fun (V66, V67, V68) -> fun (V69) -> {'Idris.Prelude.Types.Right', 0} end end(E56, E57, E58)); {'Idris.TTImp.TTImp.IUpdate', E59, E60, E61} -> (fun (V70, V71, V72) -> fun (V73) -> {'Idris.Prelude.Types.Right', 0} end end(E59, E60, E61)); {'Idris.TTImp.TTImp.IAlternative', E62, E63, E64} -> (fun (V74, V75, V76) -> fun (V77) -> {'Idris.Prelude.Types.Right', 0} end end(E62, E63, E64)); {'Idris.TTImp.TTImp.ISearch', E65, E66} -> (fun (V78, V79) -> fun (V80) -> {'Idris.Prelude.Types.Right', 0} end end(E65, E66)); {'Idris.TTImp.TTImp.IRewrite', E67, E68, E69} -> (fun (V81, V82, V83) -> fun (V84) -> {'Idris.Prelude.Types.Right', 0} end end(E67, E68, E69)); _ -> fun (V85) -> {'Idris.Prelude.Types.Right', 1} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--needsDelay'(V0, V1, V2, V3) -> case V1 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V4) -> ('un--needsDelayLHS'(V0, V3)) end(E0)); _ -> ('un--needsDelayExpr'(V0, V2, V3)) end.
'un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12))(V23))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V23))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V33, V9, V13, V23))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V10, V6, V9, V30, V36, V23))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = {'Idris.Core.TT.App', V10, V11, V39}), begin (V41 = (((V14(V27))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V39))))(V23))), case V41 of {'Idris.Prelude.Types.Left', E12} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V43) -> begin (V55 = case case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49) -> V47 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> begin (V51 = begin (V50 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> begin (V54 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V30, V6, {'Idris.Core.TT.Implicit'}, V9, V39, V36, V53))))), {'Idris.Prelude.Types.Right', V54} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E22} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V57) -> (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V40, V43, {'Idris.Builtin.MkPair', V21, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V22))}, V16, V17, V18, V19, V20))(V23)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> ('case--makeDefImplicit-2271'(V0, V22, V23, V21, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('nested--11457-2261--in--un--metavarImp'(V0, V22, V23, V21, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V24, V25, V26, V27, V28, V29) -> V24 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> ('case--makeAutoImplicit-2004'(V0, V21, V22, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('nested--11451-1994--in--un--metavarImp'(V0, V21, V22, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V23, V24, V25, V26, V27, V28) -> V23 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isImplicitAs'(V0) -> case V0 of {'Idris.TTImp.TTImp.IAs', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V2 of {'Idris.Core.TT.UseLeft'} -> (fun () -> case V4 of {'Idris.TTImp.TTImp.Implicit', E4, E5} -> (fun (V5, V6) -> 0 end(E4, E5)); _ -> 1 end end()); _ -> 1 end end(E0, E1, E2, E3)); _ -> 1 end.
'un--isHole'(V0, V1) -> case V1 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V5, V6, V7) -> 0 end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'un--isBindAllExpPattern'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of <<"_"/utf8>> -> 0; _ -> 1 end end(E0)); _ -> 1 end.
'un--getVarType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--getVarType-1242'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V11, V12)) end end}, V8, V5)))).
'un--getNameType'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--getNameType-690'(V0, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V5)))).
'un--findNamed'(V0, V1) -> ('case--findNamed-5296'(V1, V0, ('Idris.Idris2.Data.List':'un--partition'('erased', fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)), V0)) end, V1)))).
'un--findBindAllExpPattern'(V0) -> ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V3, V4)) end end}, {'Idris.Core.Name.UN', <<"_"/utf8>>}, V0)).
'un--dotErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V8) -> ('case--dotErased-3386'('erased', V8, V7, V6, V4, V3, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V15, V16)) end end}}, V8)))), fun () -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V23, V24)) end end}}, V6)) end)))) end(E0)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', V7} end end.
'un--concrete'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (((V7(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, {'Idris.Core.TT.Erased', V4, 1}))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('un--concrete'('erased', V1, V2, V15))(V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V17, V18, V19, V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', 0} end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NTCon', E15, E16, E17, E18, E19} -> (fun (V23, V24, V25, V26, V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', 0} end end(E15, E16, E17, E18, E19)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', 0} end end(E20, E21)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--checkVisibleNS'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isVisible'(V0, V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case V9 of 0 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V0, V6))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNS'(V0, V6))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V0, V6))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = 0), (('case--case block in checkVisibleNS-583'(V5, V4, V3, V1, V0, V19, V12, V15, V18, ('Idris.Idris2.Prelude.Basics':'un--||'(V12, fun () -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V15 | V18], {'Idris.Core.Name.NS', V4, V5}, V3)) end))))(V6)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V1, {'Idris.Core.Name.NS', V4, V5}, {'Idris.Prelude.Types.Just', V4}}, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V35 = (('un--dotErased'('erased', V1, V13, V22, V23, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V29, V30, V31, V32, V33, V34) -> V29 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V16))(V24))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> begin (V41 = case V20 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> begin (V38 = (((V14(V28))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, {'Idris.Core.TT.Erased', V10, 1}))))(V24))), case V38 of {'Idris.Prelude.Types.Left', E12} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V40) -> (('un--concrete'('erased', V28, V9, V40))(V24)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V41 of {'Idris.Prelude.Types.Left', E14} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V43) -> begin (V50 = (('un--needsDelay'(V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49) -> V44 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43, V16))(V24))), case V50 of {'Idris.Prelude.Types.Left', E22} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V52) -> (('case--checkRestApp-3785'(V0, V22, V23, V21, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V28, V37, V43, V52, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(('un--isHole'('erased', V13)), fun () -> V43 end)), fun () -> V52 end))))(V24)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkPatTyValid'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V8, V9, V10) -> case V9 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V12}, case V3 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V15 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E34} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', V44}), (('case--case block in checkPatTyValid-2782'(V0, V8, V10, V13, V12, V11, V7, V6, V4, V3, V2, V1, V44, V45, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V48, V49)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V52, V53)) end end}}, case V44 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V61 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V14)) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V11 of {'Idris.Core.Value.NBind', E40, E41, E42, E43} -> (fun (V18, V19, V20, V21) -> case V20 of {'Idris.Core.TT.Pi', E84, E85, E86, E87} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V13 of [E168 | E169] -> (fun (V26, V27) -> begin (V28 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V28, V6, V7, V8, V9, V10, V19, V25, V21, V12, V26, V27, V14, V15, V16, V17)) end end(E168, E169)); [] -> ('with--checkAppWith-5383'(V15, V19, ('un--findNamed'(V19, V15)), V0, V22, V17, V16, V14, V12, V25, V23, V21, V18, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)); _ -> case V12 of {'Idris.Builtin.MkPair', E130, E131} -> (fun (V29, V30) -> case V13 of [E134 | E135] -> (fun (V31, V32) -> fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V33))), case V34 of {'Idris.Prelude.Types.Left', E136} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V33))), case V37 of {'Idris.Prelude.Types.Left', E138} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V33))), case V40 of {'Idris.Prelude.Types.Left', E140} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V33))), case V43 of {'Idris.Prelude.Types.Left', E142} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V45) -> begin (V50 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V48, V49)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V42, {'Idris.Core.TT.TType', V9}, V33))), case V50 of {'Idris.Prelude.Types.Left', E144} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V52))), begin (V58 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V54) -> fun (V55) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V54, V55)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V56) -> fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V56, V57)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V45, {'Idris.Core.TT.TType', V9}, V33))), case V58 of {'Idris.Prelude.Types.Left', E146} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V31, {'Idris.Prelude.Types.Just', V53}))(V33))), case V61 of {'Idris.Prelude.Types.Left', E148} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V63) -> case V63 of {'Idris.Builtin.MkPair', E150, E151} -> (fun (V64, V65) -> begin (V66 = {'Idris.Core.TT.App', V9, V10, V64}), begin (V68 = begin (V67 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E152} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V70) -> begin (V71 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V70, V8, V60))(V33))), case V71 of {'Idris.Prelude.Types.Left', E154} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V73) -> begin (V74 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V42, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V52}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V60))}))), begin (V75 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V74, V33))), case V75 of {'Idris.Prelude.Types.Left', E156} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V77) -> begin (V81 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V79, V80)) end end end, V17))(V33))), case V81 of {'Idris.Prelude.Types.Left', E158} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V83) -> begin (V84 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V66, V73, {'Idris.Builtin.MkPair', V29, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V30))}, V32, V14, V15, V16, V17))(V33))), case V84 of {'Idris.Prelude.Types.Left', E160} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V86) -> begin (V87 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V70, V8, V11)), V74))(V33))), case V87 of {'Idris.Prelude.Types.Left', E162} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V89) -> begin (V90 = {'Idris.Builtin.MkPair', V64, V65}), (('case--case block in checkAppWith-7245'(V29, V30, V31, V32, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V36, V39, V42, V45, V52, V53, V60, V64, V65, V90, V66, V70, V73, V74, V77, V83, V86, V89, case V89 of {'Idris.Core.Unify.MkUnifyResult', E164, E165, E166, E167} -> (fun (V91, V92, V93, V94) -> V91 end(E164, E165, E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V33)) end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E134, E135)); _ -> case V13 of [] -> fun (V95) -> begin (V97 = begin (V96 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E132} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V99) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V99, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V109, V110, V111)) end end end end end}, fun (V112) -> ('un--isImplicitAs'(V112)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V100) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V100)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V101) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V101)))))) end, V15))))))))))(V95)) end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130, E131)); _ -> case V13 of [] -> fun (V113) -> begin (V115 = begin (V114 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V114} end), case V115 of {'Idris.Prelude.Types.Left', E128} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V117) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V117, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V127, V128, V129)) end end end end end}, fun (V130) -> ('un--isImplicitAs'(V130)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V118) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V118)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V119) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V119)))))) end, V15))))))))))(V113)) end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E170} -> (fun (V131) -> begin (V132 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), fun (V133) -> begin (V134 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V131))(V133))), case V134 of {'Idris.Prelude.Types.Left', E171} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V136) -> begin (V138 = begin (V137 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E173} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V140) -> begin (V141 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.Implicit'}, V25}, V21}), case V136 of {'Idris.Core.Value.NBind', E181, E182, E183, E184} -> (fun (V142, V143, V144, V145) -> case V144 of {'Idris.Core.TT.Pi', E191, E192, E193, E194} -> (fun (V146, V147, V148, V149) -> case V148 of {'Idris.Core.TT.Implicit'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V140, V8, V141)), {'Idris.Prelude.Types.Just', V131}))(V133)) end()); _ -> (('case--case block in checkAppWith-5893'(V0, V22, V131, V16, V12, V25, V23, V21, V19, V18, V141, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V132, V136, V140, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E195, E196, E197, E198, E199, E200} -> (fun (V150, V151, V152, V153, V154, V155) -> V154 end(E195, E196, E197, E198, E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V133)) end end(E191, E192, E193, E194)); _ -> (('case--case block in checkAppWith-5893'(V0, V22, V131, V16, V12, V25, V23, V21, V19, V18, V141, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V132, V136, V140, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E185, E186, E187, E188, E189, E190} -> (fun (V156, V157, V158, V159, V160, V161) -> V160 end(E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V133)) end end(E181, E182, E183, E184)); _ -> (('case--case block in checkAppWith-5893'(V0, V22, V131, V16, V12, V25, V23, V21, V19, V18, V141, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V132, V136, V140, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E175, E176, E177, E178, E179, E180} -> (fun (V162, V163, V164, V165, V166, V167) -> V166 end(E175, E176, E177, E178, E179, E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V133)) end end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E170)); _ -> begin (V168 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6726'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V168, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V169 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6726'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V169, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V170 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6726'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V170, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V171 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6726'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V171, ('un--findNamed'(V19, V15)))) end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E369} -> (fun (V172) -> begin (V173 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), fun (V174) -> begin (V175 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V172))(V174))), case V175 of {'Idris.Prelude.Types.Left', E370} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E370)); {'Idris.Prelude.Types.Right', E371} -> (fun (V177) -> begin (V179 = begin (V178 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V178} end), case V179 of {'Idris.Prelude.Types.Left', E372} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E372)); {'Idris.Prelude.Types.Right', E373} -> (fun (V181) -> begin (V182 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.AutoImplicit'}, V25}, V21}), case V177 of {'Idris.Core.Value.NBind', E374, E375, E376, E377} -> (fun (V183, V184, V185, V186) -> case V185 of {'Idris.Core.TT.Pi', E378, E379, E380, E381} -> (fun (V187, V188, V189, V190) -> case V189 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V181, V8, V182)), {'Idris.Prelude.Types.Just', V172}))(V174)) end()); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V173, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V172}))(V174)) end end(E378, E379, E380, E381)); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V173, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V172}))(V174)) end end(E374, E375, E376, E377)); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V173, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V172}))(V174)) end end end(E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E371)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E369)); _ -> case V14 of [E367 | E368] -> (fun (V191, V192) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V191, V13, V192, V15, V16, V17)) end(E367, E368)); [] -> begin (V193 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6584'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V193, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E329, E330} -> (fun (V194, V195) -> case V13 of [E333 | E334] -> (fun (V196, V197) -> fun (V198) -> begin (V199 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V198))), case V199 of {'Idris.Prelude.Types.Left', E335} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E335)); {'Idris.Prelude.Types.Right', E336} -> (fun (V201) -> begin (V202 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V198))), case V202 of {'Idris.Prelude.Types.Left', E337} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V204) -> begin (V205 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V198))), case V205 of {'Idris.Prelude.Types.Left', E339} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E339)); {'Idris.Prelude.Types.Right', E340} -> (fun (V207) -> begin (V208 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V198))), case V208 of {'Idris.Prelude.Types.Left', E341} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E341)); {'Idris.Prelude.Types.Right', E342} -> (fun (V210) -> begin (V215 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V211) -> fun (V212) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V211, V212)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V213) -> fun (V214) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V213, V214)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V207, {'Idris.Core.TT.TType', V9}, V198))), case V215 of {'Idris.Prelude.Types.Left', E343} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E343)); {'Idris.Prelude.Types.Right', E344} -> (fun (V217) -> begin (V218 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V217))), begin (V223 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V219) -> fun (V220) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V219, V220)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V221) -> fun (V222) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V221, V222)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V210, {'Idris.Core.TT.TType', V9}, V198))), case V223 of {'Idris.Prelude.Types.Left', E345} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E345)); {'Idris.Prelude.Types.Right', E346} -> (fun (V225) -> begin (V226 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V196, {'Idris.Prelude.Types.Just', V218}))(V198))), case V226 of {'Idris.Prelude.Types.Left', E347} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E347)); {'Idris.Prelude.Types.Right', E348} -> (fun (V228) -> case V228 of {'Idris.Builtin.MkPair', E349, E350} -> (fun (V229, V230) -> begin (V231 = {'Idris.Core.TT.App', V9, V10, V229}), begin (V233 = begin (V232 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V232} end), case V233 of {'Idris.Prelude.Types.Left', E351} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E351)); {'Idris.Prelude.Types.Right', E352} -> (fun (V235) -> begin (V236 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V235, V8, V225))(V198))), case V236 of {'Idris.Prelude.Types.Left', E353} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E353)); {'Idris.Prelude.Types.Right', E354} -> (fun (V238) -> begin (V239 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V207, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V217}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V225))}))), begin (V240 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V239, V198))), case V240 of {'Idris.Prelude.Types.Left', E355} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E355)); {'Idris.Prelude.Types.Right', E356} -> (fun (V242) -> begin (V246 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V243) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V244, V245)) end end end, V17))(V198))), case V246 of {'Idris.Prelude.Types.Left', E357} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E357)); {'Idris.Prelude.Types.Right', E358} -> (fun (V248) -> begin (V249 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V231, V238, {'Idris.Builtin.MkPair', V194, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V195))}, V197, V14, V15, V16, V17))(V198))), case V249 of {'Idris.Prelude.Types.Left', E359} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E359)); {'Idris.Prelude.Types.Right', E360} -> (fun (V251) -> begin (V252 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V235, V8, V11)), V239))(V198))), case V252 of {'Idris.Prelude.Types.Left', E361} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E361)); {'Idris.Prelude.Types.Right', E362} -> (fun (V254) -> begin (V255 = {'Idris.Builtin.MkPair', V229, V230}), (('case--case block in checkAppWith-7245'(V194, V195, V196, V197, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V201, V204, V207, V210, V217, V218, V225, V229, V230, V255, V231, V235, V238, V239, V242, V248, V251, V254, case V254 of {'Idris.Core.Unify.MkUnifyResult', E363, E364, E365, E366} -> (fun (V256, V257, V258, V259) -> V256 end(E363, E364, E365, E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V198)) end end(E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E360)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E358)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E356)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E354)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E352)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E349, E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E346)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E344)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E342)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E340)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E333, E334)); _ -> case V13 of [] -> fun (V260) -> begin (V262 = begin (V261 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V261} end), case V262 of {'Idris.Prelude.Types.Left', E331} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V264) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V264, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V269, V270, V271)) end end end end end, fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V274, V275, V276)) end end end end end}, fun (V277) -> ('un--isImplicitAs'(V277)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V265) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V265)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V266) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V266)))))) end, V15))))))))))(V260)) end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E329, E330)); _ -> case V13 of [] -> fun (V278) -> begin (V280 = begin (V279 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V279} end), case V280 of {'Idris.Prelude.Types.Left', E327} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E327)); {'Idris.Prelude.Types.Right', E328} -> (fun (V282) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V282, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V287, V288, V289)) end end end end end, fun (V290) -> fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V292, V293, V294)) end end end end end}, fun (V295) -> ('un--isImplicitAs'(V295)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V283) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V283)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V284) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V284)))))) end, V15))))))))))(V278)) end(E328)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V14 of [E325 | E326] -> (fun (V296, V297) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V296, V13, V297, V15, V16, V17)) end(E325, E326)); [] -> begin (V298 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6584'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V298, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E287, E288} -> (fun (V299, V300) -> case V13 of [E291 | E292] -> (fun (V301, V302) -> fun (V303) -> begin (V304 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V303))), case V304 of {'Idris.Prelude.Types.Left', E293} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V306) -> begin (V307 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V303))), case V307 of {'Idris.Prelude.Types.Left', E295} -> (fun (V308) -> {'Idris.Prelude.Types.Left', V308} end(E295)); {'Idris.Prelude.Types.Right', E296} -> (fun (V309) -> begin (V310 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V303))), case V310 of {'Idris.Prelude.Types.Left', E297} -> (fun (V311) -> {'Idris.Prelude.Types.Left', V311} end(E297)); {'Idris.Prelude.Types.Right', E298} -> (fun (V312) -> begin (V313 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V303))), case V313 of {'Idris.Prelude.Types.Left', E299} -> (fun (V314) -> {'Idris.Prelude.Types.Left', V314} end(E299)); {'Idris.Prelude.Types.Right', E300} -> (fun (V315) -> begin (V320 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V316) -> fun (V317) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V316, V317)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V318) -> fun (V319) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V318, V319)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V312, {'Idris.Core.TT.TType', V9}, V303))), case V320 of {'Idris.Prelude.Types.Left', E301} -> (fun (V321) -> {'Idris.Prelude.Types.Left', V321} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V322) -> begin (V323 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V322))), begin (V328 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V324) -> fun (V325) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V324, V325)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V326) -> fun (V327) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V326, V327)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V315, {'Idris.Core.TT.TType', V9}, V303))), case V328 of {'Idris.Prelude.Types.Left', E303} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V330) -> begin (V331 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V301, {'Idris.Prelude.Types.Just', V323}))(V303))), case V331 of {'Idris.Prelude.Types.Left', E305} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E305)); {'Idris.Prelude.Types.Right', E306} -> (fun (V333) -> case V333 of {'Idris.Builtin.MkPair', E307, E308} -> (fun (V334, V335) -> begin (V336 = {'Idris.Core.TT.App', V9, V10, V334}), begin (V338 = begin (V337 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V337} end), case V338 of {'Idris.Prelude.Types.Left', E309} -> (fun (V339) -> {'Idris.Prelude.Types.Left', V339} end(E309)); {'Idris.Prelude.Types.Right', E310} -> (fun (V340) -> begin (V341 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V340, V8, V330))(V303))), case V341 of {'Idris.Prelude.Types.Left', E311} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E311)); {'Idris.Prelude.Types.Right', E312} -> (fun (V343) -> begin (V344 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V312, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V322}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V330))}))), begin (V345 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V344, V303))), case V345 of {'Idris.Prelude.Types.Left', E313} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E313)); {'Idris.Prelude.Types.Right', E314} -> (fun (V347) -> begin (V351 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V348) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V349) -> fun (V350) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V349, V350)) end end end, V17))(V303))), case V351 of {'Idris.Prelude.Types.Left', E315} -> (fun (V352) -> {'Idris.Prelude.Types.Left', V352} end(E315)); {'Idris.Prelude.Types.Right', E316} -> (fun (V353) -> begin (V354 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V336, V343, {'Idris.Builtin.MkPair', V299, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V300))}, V302, V14, V15, V16, V17))(V303))), case V354 of {'Idris.Prelude.Types.Left', E317} -> (fun (V355) -> {'Idris.Prelude.Types.Left', V355} end(E317)); {'Idris.Prelude.Types.Right', E318} -> (fun (V356) -> begin (V357 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V340, V8, V11)), V344))(V303))), case V357 of {'Idris.Prelude.Types.Left', E319} -> (fun (V358) -> {'Idris.Prelude.Types.Left', V358} end(E319)); {'Idris.Prelude.Types.Right', E320} -> (fun (V359) -> begin (V360 = {'Idris.Builtin.MkPair', V334, V335}), (('case--case block in checkAppWith-7245'(V299, V300, V301, V302, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V306, V309, V312, V315, V322, V323, V330, V334, V335, V360, V336, V340, V343, V344, V347, V353, V356, V359, case V359 of {'Idris.Core.Unify.MkUnifyResult', E321, E322, E323, E324} -> (fun (V361, V362, V363, V364) -> V361 end(E321, E322, E323, E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V303)) end end(E320)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E318)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E316)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E314)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E312)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E310)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E307, E308)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E306)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E298)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E291, E292)); _ -> case V13 of [] -> fun (V365) -> begin (V367 = begin (V366 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V366} end), case V367 of {'Idris.Prelude.Types.Left', E289} -> (fun (V368) -> {'Idris.Prelude.Types.Left', V368} end(E289)); {'Idris.Prelude.Types.Right', E290} -> (fun (V369) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V369, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> fun (V376) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V374, V375, V376)) end end end end end, fun (V377) -> fun (V378) -> fun (V379) -> fun (V380) -> fun (V381) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V379, V380, V381)) end end end end end}, fun (V382) -> ('un--isImplicitAs'(V382)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V370) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V370)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V371) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V371)))))) end, V15))))))))))(V365)) end(E290)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E287, E288)); _ -> case V13 of [] -> fun (V383) -> begin (V385 = begin (V384 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V384} end), case V385 of {'Idris.Prelude.Types.Left', E285} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E285)); {'Idris.Prelude.Types.Right', E286} -> (fun (V387) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V387, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> fun (V394) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V392, V393, V394)) end end end end end, fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> fun (V399) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V397, V398, V399)) end end end end end}, fun (V400) -> ('un--isImplicitAs'(V400)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V388) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V388)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V389) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V389)))))) end, V15))))))))))(V383)) end(E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V14 of [E283 | E284] -> (fun (V401, V402) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V401, V13, V402, V15, V16, V17)) end(E283, E284)); [] -> begin (V403 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6584'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V403, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E245, E246} -> (fun (V404, V405) -> case V13 of [E249 | E250] -> (fun (V406, V407) -> fun (V408) -> begin (V409 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V408))), case V409 of {'Idris.Prelude.Types.Left', E251} -> (fun (V410) -> {'Idris.Prelude.Types.Left', V410} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V411) -> begin (V412 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V408))), case V412 of {'Idris.Prelude.Types.Left', E253} -> (fun (V413) -> {'Idris.Prelude.Types.Left', V413} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V414) -> begin (V415 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V408))), case V415 of {'Idris.Prelude.Types.Left', E255} -> (fun (V416) -> {'Idris.Prelude.Types.Left', V416} end(E255)); {'Idris.Prelude.Types.Right', E256} -> (fun (V417) -> begin (V418 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V408))), case V418 of {'Idris.Prelude.Types.Left', E257} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E257)); {'Idris.Prelude.Types.Right', E258} -> (fun (V420) -> begin (V425 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V421) -> fun (V422) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V421, V422)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V423) -> fun (V424) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V423, V424)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V417, {'Idris.Core.TT.TType', V9}, V408))), case V425 of {'Idris.Prelude.Types.Left', E259} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E259)); {'Idris.Prelude.Types.Right', E260} -> (fun (V427) -> begin (V428 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V427))), begin (V433 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V429) -> fun (V430) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V429, V430)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V431) -> fun (V432) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V431, V432)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V420, {'Idris.Core.TT.TType', V9}, V408))), case V433 of {'Idris.Prelude.Types.Left', E261} -> (fun (V434) -> {'Idris.Prelude.Types.Left', V434} end(E261)); {'Idris.Prelude.Types.Right', E262} -> (fun (V435) -> begin (V436 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V406, {'Idris.Prelude.Types.Just', V428}))(V408))), case V436 of {'Idris.Prelude.Types.Left', E263} -> (fun (V437) -> {'Idris.Prelude.Types.Left', V437} end(E263)); {'Idris.Prelude.Types.Right', E264} -> (fun (V438) -> case V438 of {'Idris.Builtin.MkPair', E265, E266} -> (fun (V439, V440) -> begin (V441 = {'Idris.Core.TT.App', V9, V10, V439}), begin (V443 = begin (V442 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V442} end), case V443 of {'Idris.Prelude.Types.Left', E267} -> (fun (V444) -> {'Idris.Prelude.Types.Left', V444} end(E267)); {'Idris.Prelude.Types.Right', E268} -> (fun (V445) -> begin (V446 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V445, V8, V435))(V408))), case V446 of {'Idris.Prelude.Types.Left', E269} -> (fun (V447) -> {'Idris.Prelude.Types.Left', V447} end(E269)); {'Idris.Prelude.Types.Right', E270} -> (fun (V448) -> begin (V449 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V417, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V427}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V435))}))), begin (V450 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V449, V408))), case V450 of {'Idris.Prelude.Types.Left', E271} -> (fun (V451) -> {'Idris.Prelude.Types.Left', V451} end(E271)); {'Idris.Prelude.Types.Right', E272} -> (fun (V452) -> begin (V456 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V453) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V454) -> fun (V455) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V454, V455)) end end end, V17))(V408))), case V456 of {'Idris.Prelude.Types.Left', E273} -> (fun (V457) -> {'Idris.Prelude.Types.Left', V457} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V458) -> begin (V459 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V441, V448, {'Idris.Builtin.MkPair', V404, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V405))}, V407, V14, V15, V16, V17))(V408))), case V459 of {'Idris.Prelude.Types.Left', E275} -> (fun (V460) -> {'Idris.Prelude.Types.Left', V460} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V461) -> begin (V462 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V445, V8, V11)), V449))(V408))), case V462 of {'Idris.Prelude.Types.Left', E277} -> (fun (V463) -> {'Idris.Prelude.Types.Left', V463} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V464) -> begin (V465 = {'Idris.Builtin.MkPair', V439, V440}), (('case--case block in checkAppWith-7245'(V404, V405, V406, V407, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V411, V414, V417, V420, V427, V428, V435, V439, V440, V465, V441, V445, V448, V449, V452, V458, V461, V464, case V464 of {'Idris.Core.Unify.MkUnifyResult', E279, E280, E281, E282} -> (fun (V466, V467, V468, V469) -> V466 end(E279, E280, E281, E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V408)) end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E268)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E265, E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E264)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E262)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E260)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E256)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E249, E250)); _ -> case V13 of [] -> fun (V470) -> begin (V472 = begin (V471 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V471} end), case V472 of {'Idris.Prelude.Types.Left', E247} -> (fun (V473) -> {'Idris.Prelude.Types.Left', V473} end(E247)); {'Idris.Prelude.Types.Right', E248} -> (fun (V474) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V474, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V477) -> fun (V478) -> fun (V479) -> fun (V480) -> fun (V481) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V479, V480, V481)) end end end end end, fun (V482) -> fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V484, V485, V486)) end end end end end}, fun (V487) -> ('un--isImplicitAs'(V487)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V475) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V475)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V476) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V476)))))) end, V15))))))))))(V470)) end(E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E245, E246)); _ -> case V13 of [] -> fun (V488) -> begin (V490 = begin (V489 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V489} end), case V490 of {'Idris.Prelude.Types.Left', E243} -> (fun (V491) -> {'Idris.Prelude.Types.Left', V491} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V492) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V492, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> fun (V499) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V497, V498, V499)) end end end end end, fun (V500) -> fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V502, V503, V504)) end end end end end}, fun (V505) -> ('un--isImplicitAs'(V505)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V493) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V493)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V494) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V494)))))) end, V15))))))))))(V488)) end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V14 of [E241 | E242] -> (fun (V506, V507) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V506, V13, V507, V15, V16, V17)) end(E241, E242)); [] -> begin (V508 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V23))), ('case--checkAppWith-6584'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V508, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E203, E204} -> (fun (V509, V510) -> case V13 of [E207 | E208] -> (fun (V511, V512) -> fun (V513) -> begin (V514 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V513))), case V514 of {'Idris.Prelude.Types.Left', E209} -> (fun (V515) -> {'Idris.Prelude.Types.Left', V515} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V516) -> begin (V517 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V513))), case V517 of {'Idris.Prelude.Types.Left', E211} -> (fun (V518) -> {'Idris.Prelude.Types.Left', V518} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V519) -> begin (V520 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V513))), case V520 of {'Idris.Prelude.Types.Left', E213} -> (fun (V521) -> {'Idris.Prelude.Types.Left', V521} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V522) -> begin (V523 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V513))), case V523 of {'Idris.Prelude.Types.Left', E215} -> (fun (V524) -> {'Idris.Prelude.Types.Left', V524} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V525) -> begin (V530 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V526) -> fun (V527) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V526, V527)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V528) -> fun (V529) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V528, V529)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V522, {'Idris.Core.TT.TType', V9}, V513))), case V530 of {'Idris.Prelude.Types.Left', E217} -> (fun (V531) -> {'Idris.Prelude.Types.Left', V531} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V532) -> begin (V533 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V532))), begin (V538 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V534) -> fun (V535) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V534, V535)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V536) -> fun (V537) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V536, V537)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V525, {'Idris.Core.TT.TType', V9}, V513))), case V538 of {'Idris.Prelude.Types.Left', E219} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V540) -> begin (V541 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V511, {'Idris.Prelude.Types.Just', V533}))(V513))), case V541 of {'Idris.Prelude.Types.Left', E221} -> (fun (V542) -> {'Idris.Prelude.Types.Left', V542} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V543) -> case V543 of {'Idris.Builtin.MkPair', E223, E224} -> (fun (V544, V545) -> begin (V546 = {'Idris.Core.TT.App', V9, V10, V544}), begin (V548 = begin (V547 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V547} end), case V548 of {'Idris.Prelude.Types.Left', E225} -> (fun (V549) -> {'Idris.Prelude.Types.Left', V549} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V550) -> begin (V551 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V550, V8, V540))(V513))), case V551 of {'Idris.Prelude.Types.Left', E227} -> (fun (V552) -> {'Idris.Prelude.Types.Left', V552} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V553) -> begin (V554 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V522, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V532}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V540))}))), begin (V555 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V554, V513))), case V555 of {'Idris.Prelude.Types.Left', E229} -> (fun (V556) -> {'Idris.Prelude.Types.Left', V556} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V557) -> begin (V561 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V558) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V559) -> fun (V560) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V559, V560)) end end end, V17))(V513))), case V561 of {'Idris.Prelude.Types.Left', E231} -> (fun (V562) -> {'Idris.Prelude.Types.Left', V562} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V563) -> begin (V564 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V546, V553, {'Idris.Builtin.MkPair', V509, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V510))}, V512, V14, V15, V16, V17))(V513))), case V564 of {'Idris.Prelude.Types.Left', E233} -> (fun (V565) -> {'Idris.Prelude.Types.Left', V565} end(E233)); {'Idris.Prelude.Types.Right', E234} -> (fun (V566) -> begin (V567 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V550, V8, V11)), V554))(V513))), case V567 of {'Idris.Prelude.Types.Left', E235} -> (fun (V568) -> {'Idris.Prelude.Types.Left', V568} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V569) -> begin (V570 = {'Idris.Builtin.MkPair', V544, V545}), (('case--case block in checkAppWith-7245'(V509, V510, V511, V512, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V516, V519, V522, V525, V532, V533, V540, V544, V545, V570, V546, V550, V553, V554, V557, V563, V566, V569, case V569 of {'Idris.Core.Unify.MkUnifyResult', E237, E238, E239, E240} -> (fun (V571, V572, V573, V574) -> V571 end(E237, E238, E239, E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V513)) end end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E207, E208)); _ -> case V13 of [] -> fun (V575) -> begin (V577 = begin (V576 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V576} end), case V577 of {'Idris.Prelude.Types.Left', E205} -> (fun (V578) -> {'Idris.Prelude.Types.Left', V578} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V579) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V579, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> fun (V586) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V584, V585, V586)) end end end end end, fun (V587) -> fun (V588) -> fun (V589) -> fun (V590) -> fun (V591) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V589, V590, V591)) end end end end end}, fun (V592) -> ('un--isImplicitAs'(V592)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V580) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V580)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V581) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V581)))))) end, V15))))))))))(V575)) end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E203, E204)); _ -> case V13 of [] -> fun (V593) -> begin (V595 = begin (V594 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V594} end), case V595 of {'Idris.Prelude.Types.Left', E201} -> (fun (V596) -> {'Idris.Prelude.Types.Left', V596} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V597) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V597, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> fun (V604) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V602, V603, V604)) end end end end end, fun (V605) -> fun (V606) -> fun (V607) -> fun (V608) -> fun (V609) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V607, V608, V609)) end end end end end}, fun (V610) -> ('un--isImplicitAs'(V610)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V598) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V598)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V599) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V599)))))) end, V15))))))))))(V593)) end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); {'Idris.Core.TT.DefImplicit', E382} -> (fun (V611) -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E383} -> (fun (V612) -> begin (V613 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), fun (V614) -> begin (V615 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V612))(V614))), case V615 of {'Idris.Prelude.Types.Left', E384} -> (fun (V616) -> {'Idris.Prelude.Types.Left', V616} end(E384)); {'Idris.Prelude.Types.Right', E385} -> (fun (V617) -> begin (V619 = begin (V618 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V618} end), case V619 of {'Idris.Prelude.Types.Left', E386} -> (fun (V620) -> {'Idris.Prelude.Types.Left', V620} end(E386)); {'Idris.Prelude.Types.Right', E387} -> (fun (V621) -> begin (V622 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.DefImplicit', V611}, V25}, V21}), case V617 of {'Idris.Core.Value.NBind', E388, E389, E390, E391} -> (fun (V623, V624, V625, V626) -> case V625 of {'Idris.Core.TT.Pi', E392, E393, E394, E395} -> (fun (V627, V628, V629, V630) -> case V629 of {'Idris.Core.TT.DefImplicit', E396} -> (fun (V631) -> begin (V632 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert__NF'(V1, V0, V621, V8, V611, V631, V614))), case V632 of {'Idris.Prelude.Types.Left', E397} -> (fun (V633) -> {'Idris.Prelude.Types.Left', V633} end(E397)); {'Idris.Prelude.Types.Right', E398} -> (fun (V634) -> case V634 of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V621, V8, V622)), {'Idris.Prelude.Types.Just', V612}))(V614)); 1 -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V613, V6, V7, V8, V9, V10, V19, V611, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V612}))(V614)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E398)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E396)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V613, V6, V7, V8, V9, V10, V19, V611, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V612}))(V614)) end end(E392, E393, E394, E395)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V613, V6, V7, V8, V9, V10, V19, V611, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V612}))(V614)) end end(E388, E389, E390, E391)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V613, V6, V7, V8, V9, V10, V19, V611, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V612}))(V614)) end end end(E387)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E385)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E383)); _ -> begin (V635 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith-6867'(V0, V22, V611, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V635, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V636 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith-6867'(V0, V22, V611, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V636, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V637 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith-6867'(V0, V22, V611, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V637, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V638 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith-6867'(V0, V22, V611, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V638, ('un--findNamed'(V19, V15)))) end end end(E382)); _ -> case V12 of {'Idris.Builtin.MkPair', E90, E91} -> (fun (V639, V640) -> case V13 of [E94 | E95] -> (fun (V641, V642) -> fun (V643) -> begin (V644 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V643))), case V644 of {'Idris.Prelude.Types.Left', E96} -> (fun (V645) -> {'Idris.Prelude.Types.Left', V645} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V646) -> begin (V647 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V643))), case V647 of {'Idris.Prelude.Types.Left', E98} -> (fun (V648) -> {'Idris.Prelude.Types.Left', V648} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V649) -> begin (V650 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V643))), case V650 of {'Idris.Prelude.Types.Left', E100} -> (fun (V651) -> {'Idris.Prelude.Types.Left', V651} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V652) -> begin (V653 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V643))), case V653 of {'Idris.Prelude.Types.Left', E102} -> (fun (V654) -> {'Idris.Prelude.Types.Left', V654} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V655) -> begin (V660 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V656) -> fun (V657) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V656, V657)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V658) -> fun (V659) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V658, V659)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V652, {'Idris.Core.TT.TType', V9}, V643))), case V660 of {'Idris.Prelude.Types.Left', E104} -> (fun (V661) -> {'Idris.Prelude.Types.Left', V661} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V662) -> begin (V663 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V662))), begin (V668 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V664) -> fun (V665) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V664, V665)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V666) -> fun (V667) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V666, V667)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V655, {'Idris.Core.TT.TType', V9}, V643))), case V668 of {'Idris.Prelude.Types.Left', E106} -> (fun (V669) -> {'Idris.Prelude.Types.Left', V669} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V670) -> begin (V671 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V641, {'Idris.Prelude.Types.Just', V663}))(V643))), case V671 of {'Idris.Prelude.Types.Left', E108} -> (fun (V672) -> {'Idris.Prelude.Types.Left', V672} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V673) -> case V673 of {'Idris.Builtin.MkPair', E110, E111} -> (fun (V674, V675) -> begin (V676 = {'Idris.Core.TT.App', V9, V10, V674}), begin (V678 = begin (V677 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V677} end), case V678 of {'Idris.Prelude.Types.Left', E112} -> (fun (V679) -> {'Idris.Prelude.Types.Left', V679} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V680) -> begin (V681 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V680, V8, V670))(V643))), case V681 of {'Idris.Prelude.Types.Left', E114} -> (fun (V682) -> {'Idris.Prelude.Types.Left', V682} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V683) -> begin (V684 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V652, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V662}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V670))}))), begin (V685 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V684, V643))), case V685 of {'Idris.Prelude.Types.Left', E116} -> (fun (V686) -> {'Idris.Prelude.Types.Left', V686} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V687) -> begin (V691 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V688) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V689) -> fun (V690) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V689, V690)) end end end, V17))(V643))), case V691 of {'Idris.Prelude.Types.Left', E118} -> (fun (V692) -> {'Idris.Prelude.Types.Left', V692} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V693) -> begin (V694 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V676, V683, {'Idris.Builtin.MkPair', V639, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V640))}, V642, V14, V15, V16, V17))(V643))), case V694 of {'Idris.Prelude.Types.Left', E120} -> (fun (V695) -> {'Idris.Prelude.Types.Left', V695} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V696) -> begin (V697 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V680, V8, V11)), V684))(V643))), case V697 of {'Idris.Prelude.Types.Left', E122} -> (fun (V698) -> {'Idris.Prelude.Types.Left', V698} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V699) -> begin (V700 = {'Idris.Builtin.MkPair', V674, V675}), (('case--case block in checkAppWith-7245'(V639, V640, V641, V642, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V646, V649, V652, V655, V662, V663, V670, V674, V675, V700, V676, V680, V683, V684, V687, V693, V696, V699, case V699 of {'Idris.Core.Unify.MkUnifyResult', E124, E125, E126, E127} -> (fun (V701, V702, V703, V704) -> V701 end(E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V643)) end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E94, E95)); _ -> case V13 of [] -> fun (V705) -> begin (V707 = begin (V706 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V706} end), case V707 of {'Idris.Prelude.Types.Left', E92} -> (fun (V708) -> {'Idris.Prelude.Types.Left', V708} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V709) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V709, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V712) -> fun (V713) -> fun (V714) -> fun (V715) -> fun (V716) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V714, V715, V716)) end end end end end, fun (V717) -> fun (V718) -> fun (V719) -> fun (V720) -> fun (V721) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V719, V720, V721)) end end end end end}, fun (V722) -> ('un--isImplicitAs'(V722)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V710) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V710)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V711) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V711)))))) end, V15))))))))))(V705)) end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90, E91)); _ -> case V13 of [] -> fun (V723) -> begin (V725 = begin (V724 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V724} end), case V725 of {'Idris.Prelude.Types.Left', E88} -> (fun (V726) -> {'Idris.Prelude.Types.Left', V726} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V727) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V727, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V730) -> fun (V731) -> fun (V732) -> fun (V733) -> fun (V734) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V732, V733, V734)) end end end end end, fun (V735) -> fun (V736) -> fun (V737) -> fun (V738) -> fun (V739) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V737, V738, V739)) end end end end end}, fun (V740) -> ('un--isImplicitAs'(V740)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V728) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V728)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V729) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V729)))))) end, V15))))))))))(V723)) end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E84, E85, E86, E87)); _ -> case V12 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V741, V742) -> case V13 of [E50 | E51] -> (fun (V743, V744) -> fun (V745) -> begin (V746 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V745))), case V746 of {'Idris.Prelude.Types.Left', E52} -> (fun (V747) -> {'Idris.Prelude.Types.Left', V747} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V748) -> begin (V749 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V745))), case V749 of {'Idris.Prelude.Types.Left', E54} -> (fun (V750) -> {'Idris.Prelude.Types.Left', V750} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V751) -> begin (V752 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V745))), case V752 of {'Idris.Prelude.Types.Left', E56} -> (fun (V753) -> {'Idris.Prelude.Types.Left', V753} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V754) -> begin (V755 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V745))), case V755 of {'Idris.Prelude.Types.Left', E58} -> (fun (V756) -> {'Idris.Prelude.Types.Left', V756} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V757) -> begin (V762 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V758) -> fun (V759) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V758, V759)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V760) -> fun (V761) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V760, V761)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V754, {'Idris.Core.TT.TType', V9}, V745))), case V762 of {'Idris.Prelude.Types.Left', E60} -> (fun (V763) -> {'Idris.Prelude.Types.Left', V763} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V764) -> begin (V765 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V764))), begin (V770 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V766) -> fun (V767) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V766, V767)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V768) -> fun (V769) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V768, V769)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V757, {'Idris.Core.TT.TType', V9}, V745))), case V770 of {'Idris.Prelude.Types.Left', E62} -> (fun (V771) -> {'Idris.Prelude.Types.Left', V771} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V772) -> begin (V773 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V743, {'Idris.Prelude.Types.Just', V765}))(V745))), case V773 of {'Idris.Prelude.Types.Left', E64} -> (fun (V774) -> {'Idris.Prelude.Types.Left', V774} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V775) -> case V775 of {'Idris.Builtin.MkPair', E66, E67} -> (fun (V776, V777) -> begin (V778 = {'Idris.Core.TT.App', V9, V10, V776}), begin (V780 = begin (V779 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V779} end), case V780 of {'Idris.Prelude.Types.Left', E68} -> (fun (V781) -> {'Idris.Prelude.Types.Left', V781} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V782) -> begin (V783 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V782, V8, V772))(V745))), case V783 of {'Idris.Prelude.Types.Left', E70} -> (fun (V784) -> {'Idris.Prelude.Types.Left', V784} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V785) -> begin (V786 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V754, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V764}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V772))}))), begin (V787 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V786, V745))), case V787 of {'Idris.Prelude.Types.Left', E72} -> (fun (V788) -> {'Idris.Prelude.Types.Left', V788} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V789) -> begin (V793 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V790) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V791) -> fun (V792) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V791, V792)) end end end, V17))(V745))), case V793 of {'Idris.Prelude.Types.Left', E74} -> (fun (V794) -> {'Idris.Prelude.Types.Left', V794} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V795) -> begin (V796 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V778, V785, {'Idris.Builtin.MkPair', V741, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V742))}, V744, V14, V15, V16, V17))(V745))), case V796 of {'Idris.Prelude.Types.Left', E76} -> (fun (V797) -> {'Idris.Prelude.Types.Left', V797} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V798) -> begin (V799 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V782, V8, V11)), V786))(V745))), case V799 of {'Idris.Prelude.Types.Left', E78} -> (fun (V800) -> {'Idris.Prelude.Types.Left', V800} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V801) -> begin (V802 = {'Idris.Builtin.MkPair', V776, V777}), (('case--case block in checkAppWith-7245'(V741, V742, V743, V744, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V748, V751, V754, V757, V764, V765, V772, V776, V777, V802, V778, V782, V785, V786, V789, V795, V798, V801, case V801 of {'Idris.Core.Unify.MkUnifyResult', E80, E81, E82, E83} -> (fun (V803, V804, V805, V806) -> V803 end(E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V745)) end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E50, E51)); _ -> case V13 of [] -> fun (V807) -> begin (V809 = begin (V808 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V808} end), case V809 of {'Idris.Prelude.Types.Left', E48} -> (fun (V810) -> {'Idris.Prelude.Types.Left', V810} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V811) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V811, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V814) -> fun (V815) -> fun (V816) -> fun (V817) -> fun (V818) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V816, V817, V818)) end end end end end, fun (V819) -> fun (V820) -> fun (V821) -> fun (V822) -> fun (V823) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V821, V822, V823)) end end end end end}, fun (V824) -> ('un--isImplicitAs'(V824)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V812) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V812)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V813) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V813)))))) end, V15))))))))))(V807)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47)); _ -> case V13 of [] -> fun (V825) -> begin (V827 = begin (V826 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V826} end), case V827 of {'Idris.Prelude.Types.Left', E44} -> (fun (V828) -> {'Idris.Prelude.Types.Left', V828} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V829) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V829, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V832) -> fun (V833) -> fun (V834) -> fun (V835) -> fun (V836) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V834, V835, V836)) end end end end end, fun (V837) -> fun (V838) -> fun (V839) -> fun (V840) -> fun (V841) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V839, V840, V841)) end end end end end}, fun (V842) -> ('un--isImplicitAs'(V842)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V830) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V830)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V831) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V831)))))) end, V15))))))))))(V825)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42, E43)); {'Idris.Core.Value.NDelayed', E399, E400, E401} -> (fun (V843, V844, V845) -> case V845 of {'Idris.Core.Value.NBind', E442, E443, E444, E445} -> (fun (V846, V847, V848, V849) -> case V848 of {'Idris.Core.TT.Pi', E486, E487, E488, E489} -> (fun (V850, V851, V852, V853) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, {'Idris.Core.TT.TForce', V843, V844, V10}, V845, V12, V13, V14, V15, V16, V17)) end(E486, E487, E488, E489)); _ -> case V12 of {'Idris.Builtin.MkPair', E448, E449} -> (fun (V854, V855) -> case V13 of [E452 | E453] -> (fun (V856, V857) -> fun (V858) -> begin (V859 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V858))), case V859 of {'Idris.Prelude.Types.Left', E454} -> (fun (V860) -> {'Idris.Prelude.Types.Left', V860} end(E454)); {'Idris.Prelude.Types.Right', E455} -> (fun (V861) -> begin (V862 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V858))), case V862 of {'Idris.Prelude.Types.Left', E456} -> (fun (V863) -> {'Idris.Prelude.Types.Left', V863} end(E456)); {'Idris.Prelude.Types.Right', E457} -> (fun (V864) -> begin (V865 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V858))), case V865 of {'Idris.Prelude.Types.Left', E458} -> (fun (V866) -> {'Idris.Prelude.Types.Left', V866} end(E458)); {'Idris.Prelude.Types.Right', E459} -> (fun (V867) -> begin (V868 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V858))), case V868 of {'Idris.Prelude.Types.Left', E460} -> (fun (V869) -> {'Idris.Prelude.Types.Left', V869} end(E460)); {'Idris.Prelude.Types.Right', E461} -> (fun (V870) -> begin (V875 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V871) -> fun (V872) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V871, V872)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V873) -> fun (V874) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V873, V874)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V867, {'Idris.Core.TT.TType', V9}, V858))), case V875 of {'Idris.Prelude.Types.Left', E462} -> (fun (V876) -> {'Idris.Prelude.Types.Left', V876} end(E462)); {'Idris.Prelude.Types.Right', E463} -> (fun (V877) -> begin (V878 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V877))), begin (V883 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V879) -> fun (V880) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V879, V880)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V881) -> fun (V882) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V881, V882)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V870, {'Idris.Core.TT.TType', V9}, V858))), case V883 of {'Idris.Prelude.Types.Left', E464} -> (fun (V884) -> {'Idris.Prelude.Types.Left', V884} end(E464)); {'Idris.Prelude.Types.Right', E465} -> (fun (V885) -> begin (V886 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V856, {'Idris.Prelude.Types.Just', V878}))(V858))), case V886 of {'Idris.Prelude.Types.Left', E466} -> (fun (V887) -> {'Idris.Prelude.Types.Left', V887} end(E466)); {'Idris.Prelude.Types.Right', E467} -> (fun (V888) -> case V888 of {'Idris.Builtin.MkPair', E468, E469} -> (fun (V889, V890) -> begin (V891 = {'Idris.Core.TT.App', V9, V10, V889}), begin (V893 = begin (V892 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V892} end), case V893 of {'Idris.Prelude.Types.Left', E470} -> (fun (V894) -> {'Idris.Prelude.Types.Left', V894} end(E470)); {'Idris.Prelude.Types.Right', E471} -> (fun (V895) -> begin (V896 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V895, V8, V885))(V858))), case V896 of {'Idris.Prelude.Types.Left', E472} -> (fun (V897) -> {'Idris.Prelude.Types.Left', V897} end(E472)); {'Idris.Prelude.Types.Right', E473} -> (fun (V898) -> begin (V899 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V867, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V877}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V885))}))), begin (V900 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V899, V858))), case V900 of {'Idris.Prelude.Types.Left', E474} -> (fun (V901) -> {'Idris.Prelude.Types.Left', V901} end(E474)); {'Idris.Prelude.Types.Right', E475} -> (fun (V902) -> begin (V906 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V903) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V904) -> fun (V905) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V904, V905)) end end end, V17))(V858))), case V906 of {'Idris.Prelude.Types.Left', E476} -> (fun (V907) -> {'Idris.Prelude.Types.Left', V907} end(E476)); {'Idris.Prelude.Types.Right', E477} -> (fun (V908) -> begin (V909 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V891, V898, {'Idris.Builtin.MkPair', V854, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V855))}, V857, V14, V15, V16, V17))(V858))), case V909 of {'Idris.Prelude.Types.Left', E478} -> (fun (V910) -> {'Idris.Prelude.Types.Left', V910} end(E478)); {'Idris.Prelude.Types.Right', E479} -> (fun (V911) -> begin (V912 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V895, V8, V11)), V899))(V858))), case V912 of {'Idris.Prelude.Types.Left', E480} -> (fun (V913) -> {'Idris.Prelude.Types.Left', V913} end(E480)); {'Idris.Prelude.Types.Right', E481} -> (fun (V914) -> begin (V915 = {'Idris.Builtin.MkPair', V889, V890}), (('case--case block in checkAppWith-7245'(V854, V855, V856, V857, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V861, V864, V867, V870, V877, V878, V885, V889, V890, V915, V891, V895, V898, V899, V902, V908, V911, V914, case V914 of {'Idris.Core.Unify.MkUnifyResult', E482, E483, E484, E485} -> (fun (V916, V917, V918, V919) -> V916 end(E482, E483, E484, E485)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V858)) end end(E481)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E479)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E477)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E473)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E471)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E468, E469)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E467)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E465)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E463)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E461)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E459)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E457)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E452, E453)); _ -> case V13 of [] -> fun (V920) -> begin (V922 = begin (V921 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V921} end), case V922 of {'Idris.Prelude.Types.Left', E450} -> (fun (V923) -> {'Idris.Prelude.Types.Left', V923} end(E450)); {'Idris.Prelude.Types.Right', E451} -> (fun (V924) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V924, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V927) -> fun (V928) -> fun (V929) -> fun (V930) -> fun (V931) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V929, V930, V931)) end end end end end, fun (V932) -> fun (V933) -> fun (V934) -> fun (V935) -> fun (V936) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V934, V935, V936)) end end end end end}, fun (V937) -> ('un--isImplicitAs'(V937)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V925) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V925)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V926) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V926)))))) end, V15))))))))))(V920)) end(E451)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E448, E449)); _ -> case V13 of [] -> fun (V938) -> begin (V940 = begin (V939 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V939} end), case V940 of {'Idris.Prelude.Types.Left', E446} -> (fun (V941) -> {'Idris.Prelude.Types.Left', V941} end(E446)); {'Idris.Prelude.Types.Right', E447} -> (fun (V942) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V942, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V945) -> fun (V946) -> fun (V947) -> fun (V948) -> fun (V949) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V947, V948, V949)) end end end end end, fun (V950) -> fun (V951) -> fun (V952) -> fun (V953) -> fun (V954) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V952, V953, V954)) end end end end end}, fun (V955) -> ('un--isImplicitAs'(V955)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V943) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V943)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V944) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V944)))))) end, V15))))))))))(V938)) end(E447)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E442, E443, E444, E445)); _ -> case V12 of {'Idris.Builtin.MkPair', E404, E405} -> (fun (V956, V957) -> case V13 of [E408 | E409] -> (fun (V958, V959) -> fun (V960) -> begin (V961 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V960))), case V961 of {'Idris.Prelude.Types.Left', E410} -> (fun (V962) -> {'Idris.Prelude.Types.Left', V962} end(E410)); {'Idris.Prelude.Types.Right', E411} -> (fun (V963) -> begin (V964 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V960))), case V964 of {'Idris.Prelude.Types.Left', E412} -> (fun (V965) -> {'Idris.Prelude.Types.Left', V965} end(E412)); {'Idris.Prelude.Types.Right', E413} -> (fun (V966) -> begin (V967 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V960))), case V967 of {'Idris.Prelude.Types.Left', E414} -> (fun (V968) -> {'Idris.Prelude.Types.Left', V968} end(E414)); {'Idris.Prelude.Types.Right', E415} -> (fun (V969) -> begin (V970 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V960))), case V970 of {'Idris.Prelude.Types.Left', E416} -> (fun (V971) -> {'Idris.Prelude.Types.Left', V971} end(E416)); {'Idris.Prelude.Types.Right', E417} -> (fun (V972) -> begin (V977 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V973) -> fun (V974) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V973, V974)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V975) -> fun (V976) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V975, V976)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V969, {'Idris.Core.TT.TType', V9}, V960))), case V977 of {'Idris.Prelude.Types.Left', E418} -> (fun (V978) -> {'Idris.Prelude.Types.Left', V978} end(E418)); {'Idris.Prelude.Types.Right', E419} -> (fun (V979) -> begin (V980 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V979))), begin (V985 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V981) -> fun (V982) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V981, V982)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V983) -> fun (V984) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V983, V984)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V972, {'Idris.Core.TT.TType', V9}, V960))), case V985 of {'Idris.Prelude.Types.Left', E420} -> (fun (V986) -> {'Idris.Prelude.Types.Left', V986} end(E420)); {'Idris.Prelude.Types.Right', E421} -> (fun (V987) -> begin (V988 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V958, {'Idris.Prelude.Types.Just', V980}))(V960))), case V988 of {'Idris.Prelude.Types.Left', E422} -> (fun (V989) -> {'Idris.Prelude.Types.Left', V989} end(E422)); {'Idris.Prelude.Types.Right', E423} -> (fun (V990) -> case V990 of {'Idris.Builtin.MkPair', E424, E425} -> (fun (V991, V992) -> begin (V993 = {'Idris.Core.TT.App', V9, V10, V991}), begin (V995 = begin (V994 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V994} end), case V995 of {'Idris.Prelude.Types.Left', E426} -> (fun (V996) -> {'Idris.Prelude.Types.Left', V996} end(E426)); {'Idris.Prelude.Types.Right', E427} -> (fun (V997) -> begin (V998 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V997, V8, V987))(V960))), case V998 of {'Idris.Prelude.Types.Left', E428} -> (fun (V999) -> {'Idris.Prelude.Types.Left', V999} end(E428)); {'Idris.Prelude.Types.Right', E429} -> (fun (V1000) -> begin (V1001 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V969, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V979}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V987))}))), begin (V1002 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1001, V960))), case V1002 of {'Idris.Prelude.Types.Left', E430} -> (fun (V1003) -> {'Idris.Prelude.Types.Left', V1003} end(E430)); {'Idris.Prelude.Types.Right', E431} -> (fun (V1004) -> begin (V1008 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V1005) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V1006) -> fun (V1007) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1006, V1007)) end end end, V17))(V960))), case V1008 of {'Idris.Prelude.Types.Left', E432} -> (fun (V1009) -> {'Idris.Prelude.Types.Left', V1009} end(E432)); {'Idris.Prelude.Types.Right', E433} -> (fun (V1010) -> begin (V1011 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V993, V1000, {'Idris.Builtin.MkPair', V956, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V957))}, V959, V14, V15, V16, V17))(V960))), case V1011 of {'Idris.Prelude.Types.Left', E434} -> (fun (V1012) -> {'Idris.Prelude.Types.Left', V1012} end(E434)); {'Idris.Prelude.Types.Right', E435} -> (fun (V1013) -> begin (V1014 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V997, V8, V11)), V1001))(V960))), case V1014 of {'Idris.Prelude.Types.Left', E436} -> (fun (V1015) -> {'Idris.Prelude.Types.Left', V1015} end(E436)); {'Idris.Prelude.Types.Right', E437} -> (fun (V1016) -> begin (V1017 = {'Idris.Builtin.MkPair', V991, V992}), (('case--case block in checkAppWith-7245'(V956, V957, V958, V959, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V963, V966, V969, V972, V979, V980, V987, V991, V992, V1017, V993, V997, V1000, V1001, V1004, V1010, V1013, V1016, case V1016 of {'Idris.Core.Unify.MkUnifyResult', E438, E439, E440, E441} -> (fun (V1018, V1019, V1020, V1021) -> V1018 end(E438, E439, E440, E441)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V960)) end end(E437)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E435)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E433)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E431)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E429)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E427)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E424, E425)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E423)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E421)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E419)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E417)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E415)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E413)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E411)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E408, E409)); _ -> case V13 of [] -> fun (V1022) -> begin (V1024 = begin (V1023 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1023} end), case V1024 of {'Idris.Prelude.Types.Left', E406} -> (fun (V1025) -> {'Idris.Prelude.Types.Left', V1025} end(E406)); {'Idris.Prelude.Types.Right', E407} -> (fun (V1026) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1026, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1029) -> fun (V1030) -> fun (V1031) -> fun (V1032) -> fun (V1033) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V1031, V1032, V1033)) end end end end end, fun (V1034) -> fun (V1035) -> fun (V1036) -> fun (V1037) -> fun (V1038) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V1036, V1037, V1038)) end end end end end}, fun (V1039) -> ('un--isImplicitAs'(V1039)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V1027) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1027)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1028) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1028)))))) end, V15))))))))))(V1022)) end(E407)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E404, E405)); _ -> case V13 of [] -> fun (V1040) -> begin (V1042 = begin (V1041 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1041} end), case V1042 of {'Idris.Prelude.Types.Left', E402} -> (fun (V1043) -> {'Idris.Prelude.Types.Left', V1043} end(E402)); {'Idris.Prelude.Types.Right', E403} -> (fun (V1044) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1044, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1047) -> fun (V1048) -> fun (V1049) -> fun (V1050) -> fun (V1051) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V1049, V1050, V1051)) end end end end end, fun (V1052) -> fun (V1053) -> fun (V1054) -> fun (V1055) -> fun (V1056) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V1054, V1055, V1056)) end end end end end}, fun (V1057) -> ('un--isImplicitAs'(V1057)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V1045) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1045)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1046) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1046)))))) end, V15))))))))))(V1040)) end(E403)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E399, E400, E401)); _ -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V1058, V1059) -> case V13 of [E6 | E7] -> (fun (V1060, V1061) -> fun (V1062) -> begin (V1063 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V1062))), case V1063 of {'Idris.Prelude.Types.Left', E8} -> (fun (V1064) -> {'Idris.Prelude.Types.Left', V1064} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V1065) -> begin (V1066 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V1062))), case V1066 of {'Idris.Prelude.Types.Left', E10} -> (fun (V1067) -> {'Idris.Prelude.Types.Left', V1067} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V1068) -> begin (V1069 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V1062))), case V1069 of {'Idris.Prelude.Types.Left', E12} -> (fun (V1070) -> {'Idris.Prelude.Types.Left', V1070} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V1071) -> begin (V1072 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V1062))), case V1072 of {'Idris.Prelude.Types.Left', E14} -> (fun (V1073) -> {'Idris.Prelude.Types.Left', V1073} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V1074) -> begin (V1079 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1075) -> fun (V1076) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V1075, V1076)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V1077) -> fun (V1078) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V1077, V1078)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V1071, {'Idris.Core.TT.TType', V9}, V1062))), case V1079 of {'Idris.Prelude.Types.Left', E16} -> (fun (V1080) -> {'Idris.Prelude.Types.Left', V1080} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V1081) -> begin (V1082 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V1081))), begin (V1087 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1083) -> fun (V1084) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V1083, V1084)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V1085) -> fun (V1086) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V1085, V1086)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V1074, {'Idris.Core.TT.TType', V9}, V1062))), case V1087 of {'Idris.Prelude.Types.Left', E18} -> (fun (V1088) -> {'Idris.Prelude.Types.Left', V1088} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V1089) -> begin (V1090 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V1060, {'Idris.Prelude.Types.Just', V1082}))(V1062))), case V1090 of {'Idris.Prelude.Types.Left', E20} -> (fun (V1091) -> {'Idris.Prelude.Types.Left', V1091} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V1092) -> case V1092 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V1093, V1094) -> begin (V1095 = {'Idris.Core.TT.App', V9, V10, V1093}), begin (V1097 = begin (V1096 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1096} end), case V1097 of {'Idris.Prelude.Types.Left', E24} -> (fun (V1098) -> {'Idris.Prelude.Types.Left', V1098} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V1099) -> begin (V1100 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V1099, V8, V1089))(V1062))), case V1100 of {'Idris.Prelude.Types.Left', E26} -> (fun (V1101) -> {'Idris.Prelude.Types.Left', V1101} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V1102) -> begin (V1103 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V1071, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V1081}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V1089))}))), begin (V1104 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1103, V1062))), case V1104 of {'Idris.Prelude.Types.Left', E28} -> (fun (V1105) -> {'Idris.Prelude.Types.Left', V1105} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V1106) -> begin (V1110 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V1107) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V1108) -> fun (V1109) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1108, V1109)) end end end, V17))(V1062))), case V1110 of {'Idris.Prelude.Types.Left', E30} -> (fun (V1111) -> {'Idris.Prelude.Types.Left', V1111} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V1112) -> begin (V1113 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1095, V1102, {'Idris.Builtin.MkPair', V1058, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1059))}, V1061, V14, V15, V16, V17))(V1062))), case V1113 of {'Idris.Prelude.Types.Left', E32} -> (fun (V1114) -> {'Idris.Prelude.Types.Left', V1114} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V1115) -> begin (V1116 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1099, V8, V11)), V1103))(V1062))), case V1116 of {'Idris.Prelude.Types.Left', E34} -> (fun (V1117) -> {'Idris.Prelude.Types.Left', V1117} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V1118) -> begin (V1119 = {'Idris.Builtin.MkPair', V1093, V1094}), (('case--case block in checkAppWith-7245'(V1058, V1059, V1060, V1061, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1065, V1068, V1071, V1074, V1081, V1082, V1089, V1093, V1094, V1119, V1095, V1099, V1102, V1103, V1106, V1112, V1115, V1118, case V1118 of {'Idris.Core.Unify.MkUnifyResult', E36, E37, E38, E39} -> (fun (V1120, V1121, V1122, V1123) -> V1120 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1062)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> case V13 of [] -> fun (V1124) -> begin (V1126 = begin (V1125 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1125} end), case V1126 of {'Idris.Prelude.Types.Left', E4} -> (fun (V1127) -> {'Idris.Prelude.Types.Left', V1127} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V1128) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1128, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1131) -> fun (V1132) -> fun (V1133) -> fun (V1134) -> fun (V1135) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V1133, V1134, V1135)) end end end end end, fun (V1136) -> fun (V1137) -> fun (V1138) -> fun (V1139) -> fun (V1140) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V1138, V1139, V1140)) end end end end end}, fun (V1141) -> ('un--isImplicitAs'(V1141)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V1129) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1129)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1130) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1130)))))) end, V15))))))))))(V1124)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> case V13 of [] -> fun (V1142) -> begin (V1144 = begin (V1143 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1143} end), case V1144 of {'Idris.Prelude.Types.Left', E0} -> (fun (V1145) -> {'Idris.Prelude.Types.Left', V1145} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V1146) -> (('case--checkAppWith-7473'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1146, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1149) -> fun (V1150) -> fun (V1151) -> fun (V1152) -> fun (V1153) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V1151, V1152, V1153)) end end end end end, fun (V1154) -> fun (V1155) -> fun (V1156) -> fun (V1157) -> fun (V1158) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V1156, V1157, V1158)) end end end end end}, fun (V1159) -> ('un--isImplicitAs'(V1159)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V1147) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1147)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1148) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1148)))))) end, V15))))))))))(V1142)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.TTImp.TTImp.IApp', E6, E7, E8} -> (fun (V15, V16, V17) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V16, [V17 | V11], V12, V13, V14)) end(E6, E7, E8)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V18, V19, V20) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V18, V19, V11, [V20 | V12], V13, V14)) end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E12, E13, E14, E15} -> (fun (V21, V22, V23, V24) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V21, V22, V11, V12, [{'Idris.Builtin.MkPair', V23, V24} | V13], V14)) end(E12, E13, E14, E15)); {'Idris.TTImp.TTImp.IVar', E16, E17} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('un--getVarType'(V0, V1, V2, V4, V5, V7, V8, V9, V26))(V27))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V31, V32) -> case V32 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V33, V34) -> begin (V35 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V34))(V27))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V1, V27))), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V47 = (('nested--18024-7635--in--un--updateElabInfo'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V40, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E28, E29, E30, E31, E32, E33} -> (fun (V41, V42, V43, V44, V45, V46) -> V41 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V11, V6))(V27))), case V47 of {'Idris.Prelude.Types.Left', E34} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V49) -> begin (V93 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V50) -> begin (V52 = begin (V51 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E36} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V54, V8, V37, V50))), case V55 of {'Idris.Prelude.Types.Left', E38} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V57) -> begin (V74 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V59) -> fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V59))(V60))), case V61 of {'Idris.Prelude.Types.Left', E40} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V54, V8, V63, V60))), case V64 of {'Idris.Prelude.Types.Left', E42} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V66) -> begin (V71 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V69, V70)) end end}, V66, V60))), case V71 of {'Idris.Prelude.Types.Left', E44} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V73}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V14))(V50))), case V74 of {'Idris.Prelude.Types.Left', E46} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V76) -> begin (V77 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, V26))(V50))), case V77 of {'Idris.Prelude.Types.Left', E48} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V79) -> begin (V84 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V82, V83)) end end}, V57, V50))), case V84 of {'Idris.Prelude.Types.Left', E50} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V86) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V79)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V88, V89)) end end}, V11)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V86)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V91, V92)) end end}, V76))))))))))))))))))))))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V27))), case V93 of {'Idris.Prelude.Types.Left', E52} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V95) -> begin (V101 = begin (V96 = {'Idris.Builtin.MkPair', V31, {'Idris.Builtin.MkPair', V33, V34}}), ('case--case block in checkApp-8052'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V31, V33, V34, V96, V37, V40, V49, V95, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V99, V100)) end end}, V26, V7)))) end), begin (V102 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V49, V7, V8, V9, V31, V37, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V101}, V33}, V11, V12, V13, 1, V14))(V27))), case V102 of {'Idris.Prelude.Types.Left', E54} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V104) -> ('nested--18024-7634--in--un--normalisePrims'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V40, V8, V104, V27)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17)); _ -> fun (V105) -> begin (V106 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Nothing'}))(V105))), case V106 of {'Idris.Prelude.Types.Left', E0} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V108) -> case V108 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V109, V110) -> begin (V111 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V110))(V105))), case V111 of {'Idris.Prelude.Types.Left', E4} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V113) -> (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V109, V113, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V11, V12, V13, 1, V14))(V105)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
