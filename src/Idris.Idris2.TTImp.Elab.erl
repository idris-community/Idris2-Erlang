-module('Idris.Idris2.TTImp.Elab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkTermSub-13129'/14,
  'case--checkTermSub-13004'/18,
  'case--elabTermSub-12819'/20,
  'case--case block in elabTermSub-12739'/34,
  'case--case block in elabTermSub-12659'/34,
  'case--case block in case block in elabTermSub-12468'/41,
  'case--case block in elabTermSub-12196'/40,
  'case--case block in elabTermSub-11972'/45,
  'case--case block in elabTermSub-11811'/39,
  'case--case block in elabTermSub-11460'/28,
  'case--elabTermSub-11401'/26,
  'case--elabTermSub-11324'/18,
  'case--elabTermSub,addHoles-11156'/20,
  'case--addHoleToSave-11092'/4,
  'case--case block in normaliseHoleTypes,normaliseH-11000'/7,
  'case--normaliseHoleTypes,normaliseH-10987'/5,
  'case--normaliseHoleTypes,updateType-10965'/6,
  'case--getRigNeeded-10899'/2,
  'case--doPLetRenames-10831'/8,
  'case--doPLetRenames-10767'/12,
  'case--findPLetRenames-10666'/13,
  'nested--11883-10916--in--un--updateType'/6,
  'nested--11883-10917--in--un--normaliseH'/5,
  'nested--14157-12900--in--un--bindImps\x{27}'/19,
  'nested--14157-12901--in--un--bindImps'/19,
  'nested--12107-11141--in--un--addHoles'/17,
  'un--normaliseHoleTypes'/3,
  'un--getRigNeeded'/1,
  'un--findPLetRenames'/2,
  'un--elabTermSub'/14,
  'un--elabTerm'/11,
  'un--doPLetRenames'/4,
  'un--checkTermSub'/15,
  'un--checkTerm'/12,
  'un--addHoleToSave'/3
]).
'case--checkTermSub-13129'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V9 of {'Idris.TTImp.Elab.Check.InType'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Context':'un--branch'(V13, V14)) end end()); _ -> fun (V15) -> begin (V16 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V16} end end end.
'case--checkTermSub-13004'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.Core.TryWithImplicits', E0, E1, E2, E3} -> (fun (V18, V19, V20, V21) -> fun (V22) -> begin (V24 = begin (V23 = ('erlang':'put'(V13, V14))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'put'(V11, V15))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V12, V16))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> begin (V35 = (('nested--14157-12901--in--un--bindImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V19, V20, V21, V3))(V22))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> (('un--elabTermSub'(V0, V1, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V37, {'Idris.Prelude.Types.Just', V2}))(V22)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V17, V38)) end end.
'case--elabTermSub-12819'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.UnifyState.MkUState', V20, V21, V22, V23, V24, V25, V26, V27, [], V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabTermSub-12739'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V33 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.UnifyState.MkUState', V34, V35, V36, V37, V38, V39, V40, V41, V19, V43} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabTermSub-12659'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V33 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.UnifyState.MkUState', V34, V35, V36, V37, V38, V39, V40, V41, V19, V43} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in elabTermSub-12468'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V40 of 0 -> fun (V41) -> begin (V42 = ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V11, V13, ('Idris.Idris2.Prelude.Basics':'un--||'(V16, fun () -> V15 end)), V41))), case V42 of {'Idris.Prelude.Types.Left', E0} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V44) -> ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V1, V13, V11, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3)), V24, 1, V6, V39, V41)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> {'Idris.Prelude.Types.Right', V39} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabTermSub-12196'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V9 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V40) -> fun (V41) -> begin (V42 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V14)) of 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V11, V13, 0, V41)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V42 of {'Idris.Prelude.Types.Left', E1} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Right', V39} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> fun (V45) -> begin (V46 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V14)) of 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V11, V13, 0, V45)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V46 of {'Idris.Prelude.Types.Left', E3} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V48) -> {'Idris.Prelude.Types.Right', V39} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('case--case block in case block in elabTermSub-12468'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, ('Idris.Idris2.Prelude.Basics':'un--not'(V14)))) end.
'case--case block in elabTermSub-11972'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> case V9 of {'Idris.TTImp.Elab.Check.InLHS', E2} -> (fun (V45) -> begin (V46 = ('un--findPLetRenames'(V1, V40))), begin (V47 = ('un--doPLetRenames'(V1, V46, [], V40))), fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V26))(V48))), case V49 of {'Idris.Prelude.Types.Left', E3} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V47, ('Idris.Idris2.Core.Normalise':'un--gnf'(V1, V6, ('un--doPLetRenames'(V1, V46, [], V51))))}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2)); _ -> fun (V52) -> begin (V53 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V11, V13, <<"elab"/utf8>>, (1 + (1 + 0)), 1, V52))), case V53 of {'Idris.Prelude.Types.Left', E0} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V40, V26}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in elabTermSub-11811'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V15 of 0 -> fun (V39) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V13, V1, V38, V6, V25, V39)) end; 1 -> fun (V40) -> ('Idris.Idris2.Core.Normalise':'un--normaliseArgHoles'(V13, V1, V38, V6, V25, V40)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabTermSub-11460'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V9 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V28) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--elabTermSub-11401'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V26, V27) -> begin (V29 = case V9 of {'Idris.TTImp.Elab.Check.InLHS', E2} -> (fun (V28) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E2)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end), fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V13, V11, V29, {'Idris.Core.Unify.Normal'}, V30))), case V31 of {'Idris.Prelude.Types.Left', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V13, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Looking for delayed in "/utf8>> end, V26, V30))), case V34 of {'Idris.Prelude.Types.Left', E5} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V36) -> begin (V38 = begin (V37 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E7} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V40) -> begin (V74 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V41) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V1, V13, V12, V11, V23, ('Idris.Idris2.Data.List':'un--sortBy'('erased', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord__Nat'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V42)), ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V43)))) end end, case V40 of {'Idris.Core.UnifyState.MkUState', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V52 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V41)) end, fun (V54) -> fun (V55) -> begin (V57 = begin (V56 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V56} end), case V57 of {'Idris.Prelude.Types.Left', E19} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V59) -> begin (V71 = begin (V70 = ('erlang':'put'(V11, case V59 of {'Idris.Core.UnifyState.MkUState', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> {'Idris.Core.UnifyState.MkUState', V60, V61, V62, V63, V64, V65, V66, V67, V19, V69} end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V70} end), case V71 of {'Idris.Prelude.Types.Left', E31} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V73) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V54, V55)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V30))), case V74 of {'Idris.Prelude.Types.Left', E33} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V76) -> begin (V78 = begin (V77 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E35} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V80) -> begin (V92 = begin (V91 = ('erlang':'put'(V11, case V80 of {'Idris.Core.UnifyState.MkUState', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> {'Idris.Core.UnifyState.MkUState', V81, V82, V83, V84, V85, V86, V87, V88, V19, V90} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V91} end), case V92 of {'Idris.Prelude.Types.Left', E47} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V94) -> begin (V95 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V13, V11, V21, V29, {'Idris.Core.Unify.MatchArgs'}, V30))), case V95 of {'Idris.Prelude.Types.Left', E49} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V97) -> begin (V104 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V14)) of 0 -> begin (V98 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Resolving default hints"/utf8>> end))(V30))), case V98 of {'Idris.Prelude.Types.Left', E51} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V100) -> begin (V101 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V13, V11, V21, V29, {'Idris.Core.Unify.Defaults'}, V30))), case V101 of {'Idris.Prelude.Types.Left', E53} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V103) -> ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V13, V11, V21, V29, {'Idris.Core.Unify.LastChance'}, V30)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V104 of {'Idris.Prelude.Types.Left', E55} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V106) -> begin (V107 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V11, V13, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + 0)))), 1, V30))), case V107 of {'Idris.Prelude.Types.Left', E57} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V109) -> begin (V111 = begin (V110 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V110} end), case V111 of {'Idris.Prelude.Types.Left', E59} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V113) -> begin (V114 = case V15 of 0 -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V13, V1, V113, V6, V26, V30)); 1 -> ('Idris.Idris2.Core.Normalise':'un--normaliseArgHoles'(V13, V1, V113, V6, V26, V30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V114 of {'Idris.Prelude.Types.Left', E61} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V116) -> begin (V125 = begin (V117 = {'Idris.Builtin.MkPair', V26, V27}), case V9 of {'Idris.TTImp.Elab.Check.InLHS', E63} -> (fun (V118) -> begin (V119 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V14)) of 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V11, V13, 0, V30)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V119 of {'Idris.Prelude.Types.Left', E64} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V121) -> {'Idris.Prelude.Types.Right', V116} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> begin (V122 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V14)) of 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V11, V13, 0, V30)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V122 of {'Idris.Prelude.Types.Left', E66} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V124) -> {'Idris.Prelude.Types.Right', V116} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> (('case--case block in case block in elabTermSub-12468'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V26, V27, V117, V29, V33, V36, V40, V76, V80, V94, V97, V106, V109, V113, V116, ('Idris.Idris2.Prelude.Basics':'un--not'(V14))))(V30)) end end), case V125 of {'Idris.Prelude.Types.Left', E68} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V127) -> begin (V128 = ('un--normaliseHoleTypes'(V13, V11, V30))), case V128 of {'Idris.Prelude.Types.Left', E70} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V130) -> begin (V134 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V14)) of 0 -> begin (V131 = ('Idris.Idris2.Core.UnifyState':'un--getHoles'(V11, V30))), case V131 of {'Idris.Prelude.Types.Left', E72} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V133) -> ('Idris.Idris2.Core.UnifyState':'un--restoreHoles'(V11, ('nested--12107-11141--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Data.IntMap':'un--empty'('erased')), V133, ('Idris.Idris2.Data.IntMap':'un--toList'('erased', V17)))), V30)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V134 of {'Idris.Prelude.Types.Left', E74} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V136) -> begin (V138 = begin (V137 = ('erlang':'get'(V23))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E76} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V140) -> begin (V156 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V141) -> fun (V142) -> ('un--addHoleToSave'(V13, V141, V142)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', case V140 of {'Idris.TTImp.Elab.Check.MkEState', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155) -> V154 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V30))), case V156 of {'Idris.Prelude.Types.Left', E91} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V158) -> case V9 of {'Idris.TTImp.Elab.Check.InLHS', E95} -> (fun (V159) -> begin (V160 = ('un--findPLetRenames'(V1, V127))), begin (V161 = ('un--doPLetRenames'(V1, V160, [], V127))), begin (V162 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V27))(V30))), case V162 of {'Idris.Prelude.Types.Left', E96} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V161, ('Idris.Idris2.Core.Normalise':'un--gnf'(V1, V6, ('un--doPLetRenames'(V1, V160, [], V164))))}} end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E95)); _ -> begin (V165 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V11, V13, <<"elab"/utf8>>, (1 + (1 + 0)), 1, V30))), case V165 of {'Idris.Prelude.Types.Left', E93} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V167) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V127, V27}} end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabTermSub-11324'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> ('Idris.Idris2.Core.UnifyState':'un--saveHoles'(V11, V18)) end; 1 -> fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.IntMap':'un--empty'('erased'))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabTermSub,addHoles-11156'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--12107-11141--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V17, V16)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> ('nested--12107-11141--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Data.IntMap':'un--insert'('erased', V14, V15, V18)), V17, V16)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHoleToSave-11092'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V4))))), fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V10, V11)) end end, V5))(V6)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in normaliseHoleTypes,normaliseH-11000'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V7, V8) -> fun (V9) -> ('nested--11883-10916--in--un--updateType'(V0, V1, V3, V2, V4, V9)) end end(E0, E1)); _ -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--normaliseHoleTypes,normaliseH-10987'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in normaliseHoleTypes,normaliseH-11000'(V0, V1, V2, V3, V5, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V24 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--normaliseHoleTypes,updateType-10965'(V0, V1, V2, V3, V4, V5) -> case V2 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V5, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getRigNeeded-10899'(V0, V1) -> case V1 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V2, V3)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doPLetRenames-10831'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> {'Idris.Core.TT.Bind', V4, V10, ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V3, ('Idris.Idris2.Algebra.Preorder':'un--lub'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V11, V12)) end end, fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V13)) end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V14, V15, V16, V17, V18)) end end end end end}, V9, ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V3)))))), ('un--doPLetRenames'([V10 | V0], V6, [V10 | V5], ('Idris.Idris2.Core.TT':'un--renameTop'('erased', 'erased', V10, V2))))} end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Bind', V4, V1, V3, ('un--doPLetRenames'([V1 | V0], V6, V5, V2))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doPLetRenames-10767'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'('erased', 'erased', {'Idris.Core.TT.Erased', V8, 1}, ('un--doPLetRenames'([V5 | V0], V10, V9, V6)))); 1 -> {'Idris.Core.TT.Bind', V8, V5, V7, ('un--doPLetRenames'([V5 | V0], V10, V9, V6))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findPLetRenames-10666'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V13, V14) -> [{'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V8, V9}} | ('un--findPLetRenames'([V9 | V0], V10))] end(E0, E1)); _ -> ('un--findPLetRenames'([V9 | V0], V10)) end.
'nested--11883-10916--in--un--updateType'(V0, V1, V2, V3, V4, V5) -> begin (V27 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, [], V2, {'Idris.Core.Env.Nil'}, case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V27 of {'Idris.Prelude.Types.Left', E21} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V29) -> begin (V51 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V3}, case V4 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkGlobalDef', V30, V31, V29, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V51 of {'Idris.Prelude.Types.Left', E44} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11883-10917--in--un--normaliseH'(V0, V1, V2, V3, V4) -> begin (V31 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V3}, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V31 of {'Idris.Prelude.Types.Left', E26} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E28} -> (fun (V34) -> begin (V35 = {'Idris.Prelude.Types.Just', V34}), (('case--case block in normaliseHoleTypes,normaliseH-11000'(V0, V1, V3, V2, V34, V35, case V34 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V53 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E28)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--14157-12900--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of [] -> fun (V19) -> {'Idris.Prelude.Types.Right', V18} end; [E0 | E1] -> (fun (V20, V21) -> case V20 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V22, V23) -> fun (V24) -> begin (V25 = (('nested--14157-12900--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V21, V18))(V24))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPi', V15, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V22}, {'Idris.TTImp.TTImp.Implicit', V15, 0}, V27}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14157-12901--in--un--bindImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.TTImp.TTImp.IBindHere', E0, E1, E2} -> (fun (V19, V20, V21) -> fun (V22) -> begin (V23 = (('nested--14157-12900--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V21))(V22))), case V23 of {'Idris.Prelude.Types.Left', E3} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IBindHere', V19, V20, V25}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> ('nested--14157-12900--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end.
'nested--12107-11141--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> V14; [E0 | E1] -> (fun (V17, V18) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> ('case--elabTermSub,addHoles-11156'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V19, V20, V18, V15, V14, ('Idris.Idris2.Data.IntMap':'un--lookup'('erased', V19, V15)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--normaliseHoleTypes'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V17 = ('Idris.Idris2.Data.IntMap':'un--keys'('erased', case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V19 = begin (V18 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V22) -> fun (V23) -> ('nested--11883-10917--in--un--normaliseH'(V1, V0, V21, V22, V23)) end end, V17, []))(V2))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getRigNeeded'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InType'} -> (fun () -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V1, V2)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V3, V4)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})) end()); {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V5) -> ('case--getRigNeeded-10899'(V5, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V12, V13)) end end}}, V5)))) end(E0)); _ -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})) end.
'un--findPLetRenames'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.PLet', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Local', E8, E9, E10} -> (fun (V10, V11, V12) -> ('case--findPLetRenames-10666'(V0, V6, 'erased', V10, V11, V12, 'erased', V9, V7, V3, V5, V2, ('Idris.Idris2.Core.TT':'un--nameAt'('erased', V0, V12, 'erased')))) end(E8, E9, E10)); _ -> ('un--findPLetRenames'([V3 | V0], V5)) end end(E4, E5, E6, E7)); _ -> ('un--findPLetRenames'([V3 | V0], V5)) end end(E0, E1, E2, E3)); _ -> [] end.
'un--elabTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V18 = ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V16, V17)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V7))), begin (V23 = ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V21, V22)) end end}, {'Idris.TTImp.Elab.Check.InPartialEval'}, V7))), begin (V28 = ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V26, V27)) end end}, {'Idris.TTImp.Elab.Check.InTrans'}, V7))), fun (V29) -> begin (V30 = (('case--elabTermSub-11324'(V0, V1, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V18, V23, V28, ('Idris.Idris2.Prelude.Basics':'un--not'(V18))))(V29))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> begin (V47 = case V36 of {'Idris.Core.UnifyState.MkUState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V45 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V59 = begin (V58 = ('erlang':'put'(V4, case V36 of {'Idris.Core.UnifyState.MkUState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.UnifyState.MkUState', V48, V49, V50, V51, V52, V53, V54, V55, [], V57} end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V2, V29))), case V62 of {'Idris.Prelude.Types.Left', E26} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V64) -> begin (V66 = begin (V65 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E28} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.TTImp.Elab.Check.EST'}, ('Idris.Idris2.TTImp.Elab.Check':'un--initEStateSub'('erased', V0, V5, V10, V11)), V29))), case V69 of {'Idris.Prelude.Types.Left', E30} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V71) -> begin (V72 = ('un--getRigNeeded'(V6))), begin (V73 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V1, V2, V3, V4, V71, V72, ('Idris.Idris2.TTImp.Elab.Check':'un--initElabInfo'(V6)), V8, V9, V12, V13))(V29))), case V73 of {'Idris.Prelude.Types.Left', E32} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V75) -> case V75 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V76, V77) -> begin (V79 = case V6 of {'Idris.TTImp.Elab.Check.InLHS', E36} -> (fun (V78) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E36)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end), begin (V80 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V2, V4, V79, {'Idris.Core.Unify.Normal'}, V29))), case V80 of {'Idris.Prelude.Types.Left', E37} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V2, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Looking for delayed in "/utf8>> end, V76, V29))), case V83 of {'Idris.Prelude.Types.Left', E39} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V85) -> begin (V87 = begin (V86 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V86} end), case V87 of {'Idris.Prelude.Types.Left', E41} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V89) -> begin (V123 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V90) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V1, V2, V3, V4, V71, ('Idris.Idris2.Data.List':'un--sortBy'('erased', fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord__Nat'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V91)), ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V92)))) end end, case V89 of {'Idris.Core.UnifyState.MkUState', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> V101 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V90)) end, fun (V103) -> fun (V104) -> begin (V106 = begin (V105 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V105} end), case V106 of {'Idris.Prelude.Types.Left', E53} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V108) -> begin (V120 = begin (V119 = ('erlang':'put'(V4, case V108 of {'Idris.Core.UnifyState.MkUState', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> {'Idris.Core.UnifyState.MkUState', V109, V110, V111, V112, V113, V114, V115, V116, V47, V118} end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V119} end), case V120 of {'Idris.Prelude.Types.Left', E65} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V122) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V103, V104)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V29))), case V123 of {'Idris.Prelude.Types.Left', E67} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V125) -> begin (V127 = begin (V126 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E69} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V129) -> begin (V141 = begin (V140 = ('erlang':'put'(V4, case V129 of {'Idris.Core.UnifyState.MkUState', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V130, V131, V132, V133, V134, V135, V136, V137, V138, V139) -> {'Idris.Core.UnifyState.MkUState', V130, V131, V132, V133, V134, V135, V136, V137, V47, V139} end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E81} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V143) -> begin (V144 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V2, V4, V64, V79, {'Idris.Core.Unify.MatchArgs'}, V29))), case V144 of {'Idris.Prelude.Types.Left', E83} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V146) -> begin (V153 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V18)) of 0 -> begin (V147 = (('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Resolving default hints"/utf8>> end))(V29))), case V147 of {'Idris.Prelude.Types.Left', E85} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V149) -> begin (V150 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V2, V4, V64, V79, {'Idris.Core.Unify.Defaults'}, V29))), case V150 of {'Idris.Prelude.Types.Left', E87} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V152) -> ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V2, V4, V64, V79, {'Idris.Core.Unify.LastChance'}, V29)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V153 of {'Idris.Prelude.Types.Left', E89} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V155) -> begin (V156 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V4, V2, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + 0)))), 1, V29))), case V156 of {'Idris.Prelude.Types.Left', E91} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V158) -> begin (V160 = begin (V159 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V159} end), case V160 of {'Idris.Prelude.Types.Left', E93} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V162) -> begin (V163 = case V23 of 0 -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V2, V1, V162, V9, V76, V29)); 1 -> ('Idris.Idris2.Core.Normalise':'un--normaliseArgHoles'(V2, V1, V162, V9, V76, V29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V163 of {'Idris.Prelude.Types.Left', E95} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V165) -> begin (V174 = begin (V166 = {'Idris.Builtin.MkPair', V76, V77}), case V6 of {'Idris.TTImp.Elab.Check.InLHS', E97} -> (fun (V167) -> begin (V168 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V18)) of 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V4, V2, 0, V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V168 of {'Idris.Prelude.Types.Left', E98} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V170) -> {'Idris.Prelude.Types.Right', V165} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> begin (V171 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V18)) of 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHoles'(V4, V2, 0, V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V171 of {'Idris.Prelude.Types.Left', E100} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V173) -> {'Idris.Prelude.Types.Right', V165} end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> (('case--case block in case block in elabTermSub-12468'(V0, V1, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V18, V23, V28, V32, V36, V47, V61, V64, V68, V71, V72, V76, V77, V166, V79, V82, V85, V89, V125, V129, V143, V146, V155, V158, V162, V165, ('Idris.Idris2.Prelude.Basics':'un--not'(V18))))(V29)) end end), case V174 of {'Idris.Prelude.Types.Left', E102} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V176) -> begin (V177 = ('un--normaliseHoleTypes'(V2, V4, V29))), case V177 of {'Idris.Prelude.Types.Left', E104} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V179) -> begin (V183 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V18)) of 0 -> begin (V180 = ('Idris.Idris2.Core.UnifyState':'un--getHoles'(V4, V29))), case V180 of {'Idris.Prelude.Types.Left', E106} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V182) -> ('Idris.Idris2.Core.UnifyState':'un--restoreHoles'(V4, ('nested--12107-11141--in--un--addHoles'(V0, V1, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, ('Idris.Idris2.Data.IntMap':'un--empty'('erased')), V182, ('Idris.Idris2.Data.IntMap':'un--toList'('erased', V32)))), V29)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V183 of {'Idris.Prelude.Types.Left', E108} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V185) -> begin (V187 = begin (V186 = ('erlang':'get'(V71))), {'Idris.Prelude.Types.Right', V186} end), case V187 of {'Idris.Prelude.Types.Left', E110} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V189) -> begin (V205 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V190) -> fun (V191) -> ('un--addHoleToSave'(V2, V190, V191)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', case V189 of {'Idris.TTImp.Elab.Check.MkEState', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204) -> V203 end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V29))), case V205 of {'Idris.Prelude.Types.Left', E125} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V207) -> case V6 of {'Idris.TTImp.Elab.Check.InLHS', E129} -> (fun (V208) -> begin (V209 = ('un--findPLetRenames'(V1, V176))), begin (V210 = ('un--doPLetRenames'(V1, V209, [], V176))), begin (V211 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V77))(V29))), case V211 of {'Idris.Prelude.Types.Left', E130} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V213) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V210, ('Idris.Idris2.Core.Normalise':'un--gnf'(V1, V9, ('un--doPLetRenames'(V1, V209, [], V213))))}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E129)); _ -> begin (V214 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V4, V2, <<"elab"/utf8>>, (1 + (1 + 0)), 1, V29))), case V214 of {'Idris.Prelude.Types.Left', E127} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V216) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V176, V77}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--elabTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('un--elabTermSub'(V0, V0, V1, V2, V3, V4, V5, V6, V7, V8, V8, {'Idris.Core.TT.SubRefl'}, V9, V10)).
'un--doPLetRenames'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.PLet', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> begin (V12 = {'Idris.Core.TT.PLet', V8, V9, V10, V11}), ('case--doPLetRenames-10767'(V0, V8, V9, V11, V10, V5, V7, V12, V4, V2, V1, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V15, V16)) end end}, V5, V2)))) end end(E4, E5, E6, E7)); _ -> ('case--doPLetRenames-10831'(V0, V5, V7, V6, V4, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V19, V20)) end end}, V5, V1)))) end end(E0, E1, E2, E3)); _ -> V3 end.
'un--checkTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V16 = case V6 of {'Idris.TTImp.Elab.Check.InType'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--branch'(V2, V14)) end()); _ -> begin (V15 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V15} end end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V49 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', ('un--elabTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Just', V13})), fun (V27) -> case V27 of {'Idris.Core.Core.TryWithImplicits', E6, E7, E8, E9} -> (fun (V28, V29, V30, V31) -> fun (V32) -> begin (V34 = begin (V33 = ('erlang':'put'(V2, V18))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E10} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V36) -> begin (V38 = begin (V37 = ('erlang':'put'(V4, V22))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E12} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V40) -> begin (V42 = begin (V41 = ('erlang':'put'(V3, V26))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E14} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V44) -> begin (V45 = (('nested--14157-12901--in--un--bindImps'(V0, V1, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V28, V29, V30, V31, V12))(V32))), case V45 of {'Idris.Prelude.Types.Left', E16} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V47) -> (('un--elabTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V47, {'Idris.Prelude.Types.Just', V13}))(V32)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9)); _ -> fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V27, V48)) end end end, V14))), case V49 of {'Idris.Prelude.Types.Left', E18} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V51) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V51))} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('un--checkTermSub'(V0, V0, V1, V2, V3, V4, V5, V6, V7, V8, V8, {'Idris.Core.TT.SubRefl'}, V9, V10, V11)).
'un--addHoleToSave'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V36))))), begin (V38 = ('Idris.Idris2.Core.Context':'un--addToSave'(V0, V1, V2))), case V38 of {'Idris.Prelude.Types.Left', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V40) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V0, V41, V42)) end end, V37))(V2)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
