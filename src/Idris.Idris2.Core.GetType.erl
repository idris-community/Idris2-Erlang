-module('Idris.Idris2.Core.GetType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--chk-4268'/8,
  'case--chk-4119'/8,
  'case--chk-4005'/9,
  'case--chk-3943'/8,
  'un--getType'/4,
  'un--discharge'/6,
  'un--chkMeta'/6,
  'un--chkConstant'/3,
  'un--chkBinder'/4,
  'un--chk'/4
]).
'case--chk-4268'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V5, V0, V15, V4, V10))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Not a delayed type"/utf8>>}, V16)) end end.
'case--chk-4119'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V20) -> begin (V21 = (('un--chk'(V0, V5, V4, V1))(V16))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V24 = (((V11(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V1))))(V16))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V5, V0, V20, V4, V26))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11)); _ -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V6))(V27))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V3, V4, V30}, V27)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4, E5)); _ -> fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V6))(V31))), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V3, V4, V34}, V31)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--chk-4005'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Normalise':'un--nf'(V6, V0, V7, V5, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V9))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> (('un--chkMeta'(V0, V6, V4, V5, V13, V1))(V10)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V4, V3}, V14)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--chk-3943'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V8))))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V3, V1}, V10)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getType'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, V3)).
'un--discharge'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.Pi', V6, V7, V8, V9}, V5} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.Let', V10, V11, V12, V13}, V5} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> V4 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.PVTy', V18, V19, V21}, V5} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V22, V23, V24, V25) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.PLet', V22, V23, V24, V25}, V5} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V26, V27, V28) -> V4 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chkMeta'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E28} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V10, V3, V4))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of {'Idris.Core.Value.NBind', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V15, V16, V17, V18) -> case V5 of [E20 | E21] -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E22} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V25) -> begin (V26 = (('un--chk'(V0, V1, V3, V19))(V21))), case V26 of {'Idris.Prelude.Types.Left', E24} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V28) -> begin (V29 = (((V14(V25))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V19))))(V21))), case V29 of {'Idris.Prelude.Types.Left', E26} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V31) -> (('un--chkMeta'(V0, V1, V2, V3, V31, V20))(V21)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E20, E21)); _ -> fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V36, V3, V4, V32))), case V37 of {'Idris.Prelude.Types.Left', E18} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V39}, V32)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E12, E13, E14, E15)); _ -> fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E8} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V44, V3, V4, V40))), case V45 of {'Idris.Prelude.Types.Left', E10} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V47}, V40)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V48) -> begin (V50 = begin (V49 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E0} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V52, V3, V4, V48))), case V53 of {'Idris.Prelude.Types.Left', E2} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V55}, V48)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--chkConstant'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.IntType'}} end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V4) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.IntegerType'}} end(E1)); {'Idris.Core.TT.B8', E2} -> (fun (V5) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits8Type'}} end(E2)); {'Idris.Core.TT.B16', E3} -> (fun (V6) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits16Type'}} end(E3)); {'Idris.Core.TT.B32', E4} -> (fun (V7) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits32Type'}} end(E4)); {'Idris.Core.TT.B64', E5} -> (fun (V8) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits64Type'}} end(E5)); {'Idris.Core.TT.Str', E6} -> (fun (V9) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.StringType'}} end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V10) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.CharType'}} end(E7)); {'Idris.Core.TT.Db', E8} -> (fun (V11) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.DoubleType'}} end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.WorldType'}} end()); _ -> {'Idris.Core.TT.TType', V1} end.
'un--chkBinder'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V3)))).
'un--chk'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', ('Idris.Idris2.Core.Env':'un--getBinder'('erased', 'erased', {'Idris.Core.TT.dn--un--__mkWeaken', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken__Term'('erased', 'erased', V13, V14)) end end end end}, V0, V6, 'erased', V2))))))} end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V15, V16, V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V22 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V23 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V49 of {'Idris.Prelude.Types.Left', E34} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Just', E36} -> (fun (V52) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V52))))} end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V15, V17}, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E37, E38, E39, E40} -> (fun (V53, V54, V55, V56) -> fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E41} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V61) -> begin (V88 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V55}, case V61 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V62 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V57))), case V88 of {'Idris.Prelude.Types.Left', E69} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V90) -> case V90 of {'Idris.Prelude.Types.Just', E71} -> (fun (V91) -> begin (V92 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V61, V2, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V91))))(V57))), case V92 of {'Idris.Prelude.Types.Left', E72} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V94) -> (('un--chkMeta'(V0, V1, V53, V2, V94, V56))(V57)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V53, V54}, V57)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37, E38, E39, E40)); {'Idris.Core.TT.Bind', E74, E75, E76, E77} -> (fun (V95, V96, V97, V98) -> fun (V99) -> begin (V100 = (('un--chkBinder'(V0, V1, V2, V97))(V99))), case V100 of {'Idris.Prelude.Types.Left', E78} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V102) -> begin (V103 = (('un--chk'([V96 | V0], V1, {'Idris.Core.Env.::', V97, V2}, V98))(V99))), case V103 of {'Idris.Prelude.Types.Left', E80} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V105) -> begin (V106 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V102))(V99))), case V106 of {'Idris.Prelude.Types.Left', E82} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V108) -> begin (V109 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V105))(V99))), case V109 of {'Idris.Prelude.Types.Left', E84} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V111) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--discharge'('erased', V95, V96, V97, V108, V111))))} end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74, E75, E76, E77)); {'Idris.Core.TT.App', E86, E87, E88} -> (fun (V112, V113, V114) -> fun (V115) -> begin (V116 = (('un--chk'(V0, V1, V2, V113))(V115))), case V116 of {'Idris.Prelude.Types.Left', E89} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V118) -> begin (V119 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V118))(V115))), case V119 of {'Idris.Prelude.Types.Left', E91} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V121) -> case V121 of {'Idris.Core.Value.NBind', E95, E96, E97, E98} -> (fun (V122, V123, V124, V125) -> case V124 of {'Idris.Core.TT.Pi', E101, E102, E103, E104} -> (fun (V126, V127, V128, V129) -> begin (V131 = begin (V130 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V130} end), case V131 of {'Idris.Prelude.Types.Left', E105} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V133) -> begin (V134 = (('un--chk'(V0, V1, V2, V114))(V115))), case V134 of {'Idris.Prelude.Types.Left', E107} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V136) -> begin (V137 = (((V125(V133))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, V114))))(V115))), case V137 of {'Idris.Prelude.Types.Left', E109} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V139) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V133, V2, V139))} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101, E102, E103, E104)); _ -> begin (V140 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V118))(V115))), case V140 of {'Idris.Prelude.Types.Left', E99} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V142) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V112, V2, V142}, V115)) end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96, E97, E98)); _ -> begin (V143 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V118))(V115))), case V143 of {'Idris.Prelude.Types.Left', E93} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V145) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V112, V2, V145}, V115)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87, E88)); {'Idris.Core.TT.As', E111, E112, E113, E114} -> (fun (V146, V147, V148, V149) -> ('un--chk'(V0, V1, V2, V149)) end(E111, E112, E113, E114)); {'Idris.Core.TT.TDelayed', E115, E116, E117} -> (fun (V150, V151, V152) -> fun (V153) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V150))} end end(E115, E116, E117)); {'Idris.Core.TT.TDelay', E118, E119, E120, E121} -> (fun (V154, V155, V156, V157) -> fun (V158) -> begin (V159 = (('un--chk'(V0, V1, V2, V157))(V158))), case V159 of {'Idris.Prelude.Types.Left', E122} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V161) -> begin (V162 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V161))(V158))), case V162 of {'Idris.Prelude.Types.Left', E124} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V164) -> begin (V166 = begin (V165 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V165} end), case V166 of {'Idris.Prelude.Types.Left', E126} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V168) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V168, V2, {'Idris.Core.Value.NDelayed', V154, V155, V164}))} end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E118, E119, E120, E121)); {'Idris.Core.TT.TForce', E128, E129, E130} -> (fun (V169, V170, V171) -> fun (V172) -> begin (V173 = (('un--chk'(V0, V1, V2, V171))(V172))), case V173 of {'Idris.Prelude.Types.Left', E131} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V175) -> begin (V176 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V175))(V172))), case V176 of {'Idris.Prelude.Types.Left', E133} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V178) -> case V178 of {'Idris.Core.Value.NDelayed', E135, E136, E137} -> (fun (V179, V180, V181) -> begin (V183 = begin (V182 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V182} end), case V183 of {'Idris.Prelude.Types.Left', E138} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V185) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V185, V2, V181))} end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135, E136, E137)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V169, <<"Not a delayed type"/utf8>>}, V172)) end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128, E129, E130)); {'Idris.Core.TT.PrimVal', E140, E141} -> (fun (V186, V187) -> fun (V188) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--chkConstant'('erased', V186, V187))))} end end(E140, E141)); {'Idris.Core.TT.TType', E142} -> (fun (V189) -> fun (V190) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V189))} end end(E142)); {'Idris.Core.TT.Erased', E143, E144} -> (fun (V191, V192) -> fun (V193) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gErased'('erased', V191))} end end(E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
