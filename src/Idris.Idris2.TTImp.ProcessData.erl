-module('Idris.Idris2.TTImp.ProcessData').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in processData-13561'/28,
  'case--case block in case block in case block in processData-13342'/32,
  'case--case block in case block in processData-13263'/25,
  'case--case block in processData-13166'/23,
  'case--case block in processData-12843'/30,
  'case--processData-12726'/19,
  'case--case block in case block in processData-12488'/30,
  'case--case block in processData-12313'/17,
  'case--processData-12255'/16,
  'case--case block in findNewtype-12172'/6,
  'case--findNewtype-12158'/4,
  'case--getRelevantArg-12015'/12,
  'case--getDetags-11946'/5,
  'case--getDetags,getDisjointPos-11889'/8,
  'case--getDetags,allDisjoint-11839'/6,
  'case--getDetags,allDisjointWith-11785'/7,
  'case--getDetags,disjoint-11653'/14,
  'case--getDetags,disjoint-11546'/14,
  'case--getDetags,disjointArgs-11493'/8,
  'case--case block in checkCon-11183'/26,
  'case--checkCon-11025'/19,
  'case--updateNS,updateNSApp-10914'/6,
  'case--case block in checkFamily-10820'/14,
  'case--checkFamily-10769'/8,
  'case--checkIsType-10716'/7,
  'nested--10084-10905--in--un--updateNSApp'/4,
  'nested--10592-11358--in--un--getRetType'/4,
  'nested--10592-11359--in--un--getPats'/4,
  'nested--10672-11460--in--un--getDisjointPos'/5,
  'nested--10672-11456--in--un--disjointArgs'/5,
  'nested--10672-11457--in--un--disjoint'/5,
  'nested--10672-11458--in--un--allDisjointWith'/5,
  'nested--10672-11459--in--un--allDisjoint'/4,
  'un--updateNS'/3,
  'un--processDataOpt'/4,
  'un--processData'/10,
  'un--getRelevantArg'/5,
  'un--getIndexPats'/3,
  'un--getDetags'/3,
  'un--findNewtype'/2,
  'un--conName'/1,
  'un--checkRetType'/5,
  'un--checkIsType'/6,
  'un--checkFamily'/7,
  'un--checkCon'/11
]).
'case--case block in processData-13561'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V5 of {'Idris.Core.TT.Private'} -> (fun () -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V29) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V30) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V31, V32)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V35, V36)) end end}, V14, V29))), case V37 of {'Idris.Prelude.Types.Left', E0} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V39) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V40) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V41, V42)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V45, V46)) end end}, V21, V29)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in processData-13342'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V31 of 0 -> fun (V32) -> {'Idris.Prelude.Types.Right', V30} end; 1 -> fun (V33) -> begin (V55 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Previous"/utf8>> end, {'Idris.Core.Env.Nil'}, case V22 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V36 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V33))), case V55 of {'Idris.Prelude.Types.Left', E21} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V57) -> begin (V58 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Now"/utf8>> end, {'Idris.Core.Env.Nil'}, V21))(V33))), case V58 of {'Idris.Prelude.Types.Left', E23} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V33)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processData-13263'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32) -> case V31 of [] -> fun (V33) -> begin (V55 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert__Term'(V13, [], V17, {'Idris.Core.Env.Nil'}, V21, case V22 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V36 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V33))), case V55 of {'Idris.Prelude.Types.Left', E29} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V57) -> case V57 of 0 -> {'Idris.Prelude.Types.Right', V30}; 1 -> begin (V79 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Previous"/utf8>> end, {'Idris.Core.Env.Nil'}, case V22 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78) -> V60 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V33))), case V79 of {'Idris.Prelude.Types.Left', E52} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V81) -> begin (V82 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Now"/utf8>> end, {'Idris.Core.Env.Nil'}, V21))(V33))), case V82 of {'Idris.Prelude.Types.Left', E54} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V84) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V33)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V85)) end end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V86)) end end.
'case--case block in processData-13166'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> begin (V25 = {'Idris.Prelude.Types.Just', V24}), ('case--case block in case block in processData-13263'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V24, V25, case V24 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V43 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processData-12843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of 0 -> {'Idris.Core.TT.Private'}; 1 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processData-12726'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> begin (V21 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V7, V4, V8, V19))), fun (V22) -> begin (V49 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V14, case V17 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V23 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V22))), case V49 of {'Idris.Prelude.Types.Left', E28} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V51) -> begin (V76 = begin (V52 = {'Idris.Builtin.MkPair', V19, V20}), case V51 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E30} -> (fun (V53) -> begin (V54 = {'Idris.Prelude.Types.Just', V53}), (('case--case block in case block in processData-13263'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V19, V52, V21, V53, V54, case V53 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V72 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V22)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E52} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V78) -> begin (V79 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)))) end, {'Idris.Core.Env.Nil'}, V21))(V22))), case V79 of {'Idris.Prelude.Types.Left', E54} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V81) -> begin (V85 = begin (V82 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V7, V17, V8, V19))(V22))), case V82 of {'Idris.Prelude.Types.Left', E56} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V84) -> (('un--checkIsType'('erased', V13, V6, V14, V8, V84))(V22)) end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V85 of {'Idris.Prelude.Types.Left', E58} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V13, [], V17, {'Idris.Core.Env.Nil'}, V21, V22))), case V88 of {'Idris.Prelude.Types.Left', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V90) -> begin (V95 = ('Idris.Idris2.Core.Context':'un--addDef'(V13, V14, ('Idris.Idris2.Core.Context':'un--newDef'(V6, V14, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V91, V92)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V93, V94)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V7, V21, V5, {'Idris.Core.Context.TCon', 0, V90, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V22))), case V95 of {'Idris.Prelude.Types.Left', E62} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V97) -> begin (V115 = case V5 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V105 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V98) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V99, V100)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V103, V104)) end end}, V14, V22))), case V105 of {'Idris.Prelude.Types.Left', E64} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V107) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V108) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V109, V110)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V113, V114)) end end}, V21, V22)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V115 of {'Idris.Prelude.Types.Left', E66} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V117) -> begin (V119 = begin (V118 = {'Idris.Builtin.MkPair', V19, V20}), ('case--case block in processData-12843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V19, V118, V21, V51, V78, V81, V87, V90, V97, V117, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Visibility'(V5, {'Idris.Core.TT.Export'})))) end), begin (V121 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V120) -> ('un--checkCon'(V7, V13, V12, V11, V10, V9, V8, V119, V3, {'Idris.Core.Name.Resolved', V97}, V120)) end, V0, []))(V22))), case V121 of {'Idris.Prelude.Types.Left', E68} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V123) -> begin (V124 = {'Idris.Core.Context.MkData', {'Idris.Core.Context.MkCon', V4, V14, V90, V21}, V123}), begin (V125 = (('Idris.Idris2.Core.Context.Data':'un--addData'(V13, V7, V5, V97, V124))(V22))), case V125 of {'Idris.Prelude.Types.Left', E70} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V127) -> begin (V132 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V128) -> fun (V129) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq__DataOpt'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq__DataOpt'(V130, V131)) end end}, {'Idris.TTImp.TTImp.NoNewtype'}, V1)))) of 0 -> (('un--findNewtype'(V13, V123))(V22)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V132 of {'Idris.Prelude.Types.Left', E72} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V134) -> begin (V136 = begin (V135 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V135} end), case V136 of {'Idris.Prelude.Types.Left', E74} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V138) -> begin (V142 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.data"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" defined in a mutual block with "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V140, V141)) end end}, V78)))))) end))(V22))), case V142 of {'Idris.Prelude.Types.Left', E76} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V144) -> begin (V145 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V78, V22))), case V145 of {'Idris.Prelude.Types.Left', E78} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V147) -> begin (V149 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V148) -> ('un--processDataOpt'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V148)) end, V1))(V22))), case V149 of {'Idris.Prelude.Types.Left', E80} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V151) -> begin (V152 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V13, {'Idris.Core.Name.Resolved', V97}, V22))), case V152 of {'Idris.Prelude.Types.Left', E82} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V154) -> begin (V160 = (('un--getDetags'(V13, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V155) -> case V155 of {'Idris.Core.Context.MkCon', E84, E85, E86, E87} -> (fun (V156, V157, V158, V159) -> V159 end(E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V123))))(V22))), case V160 of {'Idris.Prelude.Types.Left', E88} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V162) -> begin (V163 = ('Idris.Idris2.Core.Context':'un--setDetags'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V162, V22))), case V163 of {'Idris.Prelude.Types.Left', E90} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V165) -> begin (V168 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V166, V167)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V19))))))(V22))), case V168 of {'Idris.Prelude.Types.Left', E92} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V170) -> begin (V171 = ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V14, V22))), case V171 of {'Idris.Prelude.Types.Left', E94} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V173) -> begin (V177 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V174) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V174)) end, fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V175, V176)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V19)))))))))))) end))(V22))), case V177 of {'Idris.Prelude.Types.Left', E96} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V179) -> begin (V181 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V180) -> ('un--conName'(V180)) end, V123))), begin (V188 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V182) -> fun (V183) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq__DataOpt'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq__DataOpt'(V184, V185)) end end}, {'Idris.TTImp.TTImp.NoHints'}, V1)))) of 0 -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V186, 0, 1, V187)) end end, V181))(V22)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V188 of {'Idris.Prelude.Types.Left', E98} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V190) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V191) -> fun (V192) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V13, V191, V192)) end end, [{'Idris.Core.Name.Resolved', V97} | V181]))(V22)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processData-12488'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V3 of {'Idris.Core.TT.Private'} -> (fun () -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V31) -> begin (V39 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V32) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V33, V34)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V37, V38)) end end}, V12, V31))), case V39 of {'Idris.Prelude.Types.Left', E0} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V41) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V42) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V43, V44)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V47, V48)) end end}, V19, V31)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in processData-12313'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> begin (V19 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V5, V2, V6, V17))), fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V12)))) end, {'Idris.Core.Env.Nil'}, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V27 = begin (V24 = (('Idris.Idris2.Core.Normalise':'un--nf'(V11, V5, V14, V6, V17))(V20))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> (('un--checkIsType'('erased', V11, V4, V12, V6, V26))(V20)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V11, [], V14, {'Idris.Core.Env.Nil'}, V19, V20))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--addDef'(V11, V12, ('Idris.Idris2.Core.Context':'un--newDef'(V4, V12, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V5, V19, V3, {'Idris.Core.Context.TCon', 0, V32, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V20))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--addMutData'(V11, {'Idris.Core.Name.Resolved', V39}, V20))), case V40 of {'Idris.Prelude.Types.Left', E12} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E14} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V46) -> begin (V101 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V11, V4, V47, case V46 of {'Idris.Core.Context.MkDefs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V50 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48)) end end, case V46 of {'Idris.Core.Context.MkDefs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V76 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V20))), case V101 of {'Idris.Prelude.Types.Left', E68} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V103) -> begin (V106 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V104, V105)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V17))))))(V20))), case V106 of {'Idris.Prelude.Types.Left', E70} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V108) -> begin (V109 = ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V12, V20))), case V109 of {'Idris.Prelude.Types.Left', E72} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V111) -> begin (V115 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V12)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V113, V114)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V17)))))))))))) end))(V20))), case V115 of {'Idris.Prelude.Types.Left', E74} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V117) -> case V3 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V125 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V118) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V119, V120)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V123, V124)) end end}, V12, V20))), case V125 of {'Idris.Prelude.Types.Left', E76} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V127) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V128) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V129, V130)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V131, V132)) end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V133, V134)) end end}, V19, V20)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processData-12255'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> begin (V25 = begin (V17 = (('Idris.Idris2.Core.Context':'un--resolveName'(V11, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V8, fun (V24) -> {'Idris.Core.Core.InCon', V4, V12, V24} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V5, V11, V10, V9, V19, {'Idris.TTImp.Elab.Check.InType'}, V8, V7, V6, {'Idris.TTImp.TTImp.IBindHere', V4, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V13}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V2))}))))(V16)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V5, V2, V6, V28))), begin (V31 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V12)))) end, {'Idris.Core.Env.Nil'}, V30))(V16))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V37 = begin (V34 = (('Idris.Idris2.Core.Normalise':'un--nf'(V11, V5, V14, V6, V28))(V16))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> (('un--checkIsType'('erased', V11, V4, V12, V6, V36))(V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V11, [], V14, {'Idris.Core.Env.Nil'}, V30, V16))), case V40 of {'Idris.Prelude.Types.Left', E12} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V42) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--addDef'(V11, V12, ('Idris.Idris2.Core.Context':'un--newDef'(V4, V12, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V43, V44)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V45, V46)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V5, V30, V3, {'Idris.Core.Context.TCon', 0, V42, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V16))), case V47 of {'Idris.Prelude.Types.Left', E14} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Context':'un--addMutData'(V11, {'Idris.Core.Name.Resolved', V49}, V16))), case V50 of {'Idris.Prelude.Types.Left', E16} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V56) -> begin (V111 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V11, V4, V57, case V56 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V60 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58)) end end, case V56 of {'Idris.Core.Context.MkDefs', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110) -> V86 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V111 of {'Idris.Prelude.Types.Left', E72} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V113) -> begin (V116 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V114, V115)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V28))))))(V16))), case V116 of {'Idris.Prelude.Types.Left', E74} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V118) -> begin (V119 = ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V12, V16))), case V119 of {'Idris.Prelude.Types.Left', E76} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V121) -> begin (V125 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V12)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V122)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V123, V124)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V28)))))))))))) end))(V16))), case V125 of {'Idris.Prelude.Types.Left', E78} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V127) -> case V3 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V135 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V128) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V129, V130)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V131, V132)) end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V133, V134)) end end}, V12, V16))), case V135 of {'Idris.Prelude.Types.Left', E80} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V137) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V138) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V138)) end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V139, V140)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V141, V142)) end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V143, V144)) end end}, V30, V16)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E82} -> (fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V4, V12}, V146)) end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findNewtype-12172'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.DCon', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V6, V7, {'Idris.Prelude.Types.Just', V3}}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--findNewtype-12158'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, case V0 of {'Idris.Core.Context.MkCon', E1, E2, E3, E4} -> (fun (V6, V7, V8, V9) -> V7 end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V10) -> case V10 of {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V11, V12, V13) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V11, V12, {'Idris.Prelude.Types.Just', V4}}} end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V5)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getRelevantArg-12015'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V3 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V12, V13) -> case V13 of {'Idris.Core.TT.WorldType'} -> (fun () -> fun () -> fun (V14) -> begin (V15 = (((V5(V10))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> (('un--getRelevantArg'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V9)), V8, 1, V17))(V14)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V18) -> begin (V19 = (((V5(V10))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V18))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> (('un--getRelevantArg'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V9)), {'Idris.Prelude.Types.Just', V9}, 1, V21))(V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V8)) end end end(E2, E3)); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V24) -> begin (V25 = (((V5(V10))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V24))), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> (('un--getRelevantArg'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V9)), {'Idris.Prelude.Types.Just', V9}, 1, V27))(V24)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V8)) end end.
'case--getDetags-11946'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end end.
'case--getDetags,getDisjointPos-11889'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', [V5 | V6]} end; 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', V6} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,allDisjoint-11839'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('nested--10672-11458--in--un--allDisjointWith'(V0, V1, V2, V3, V4)); 1 -> fun (V6) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,allDisjointWith-11785'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('nested--10672-11458--in--un--allDisjointWith'(V0, V1, V2, V5, V4)); 1 -> fun (V7) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,disjoint-11653'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, V20)) end, V9, []))(V15))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, V24)) end, V11, []))(V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> (('nested--10672-11456--in--un--disjointArgs'(V0, V1, V2, V23, V27))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,disjoint-11546'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, V20)) end, V9, []))(V15))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, V24)) end, V11, []))(V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> (('nested--10672-11456--in--un--disjointArgs'(V0, V1, V2, V23, V27))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,disjointArgs-11493'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('nested--10672-11456--in--un--disjointArgs'(V0, V1, V2, V4, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkCon-11183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V5 of {'Idris.Core.TT.Public'} -> (fun () -> fun (V26) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V12, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V27) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V28, V29)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V32, V33)) end end}, V13, V26))), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V12, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V37) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V38, V39)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V42, V43)) end end}, V21, V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--checkCon-11025'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V29 = begin (V20 = (('Idris.Idris2.Core.Context':'un--resolveName'(V12, V13))(V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V9, fun (V28) -> {'Idris.Core.Core.InCon', V2, V13, V28} end))(fun (V23) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V6, V12, V11, V10, V22, {'Idris.TTImp.Elab.Check.InType'}, V9, V8, V7, {'Idris.TTImp.TTImp.IBindHere', V2, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V14}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V2)), V23)) end))(V19)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V35 = begin (V32 = (('Idris.Idris2.Core.Normalise':'un--nf'(V12, V6, V17, V7, V31))(V19))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> (('un--checkFamily'('erased', V12, V2, V13, V3, V7, V34))(V19)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V35 of {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V6, V2, V7, V31))), begin (V39 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V12, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V13)))) end, {'Idris.Core.Env.Nil'}, V38))(V19))), case V39 of {'Idris.Prelude.Types.Left', E8} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V41) -> begin (V44 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V12, V42, V43)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V31))))))(V19))), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--addToSave'(V12, V13, V19))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V53 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V13)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V51, V52)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V31)))))))))))) end))(V19))), case V53 of {'Idris.Prelude.Types.Left', E14} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V55) -> begin (V73 = case V5 of {'Idris.Core.TT.Public'} -> (fun () -> begin (V63 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V12, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V56) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V57, V58)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V61, V62)) end end}, V13, V19))), case V63 of {'Idris.Prelude.Types.Left', E16} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V65) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V12, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V66) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V67, V68)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V71, V72)) end end}, V38, V19)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end), case V73 of {'Idris.Prelude.Types.Left', E18} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V12, [], V17, {'Idris.Core.Env.Nil'}, V38, V19))), case V76 of {'Idris.Prelude.Types.Left', E20} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkCon', V2, V13, V78, V38}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E22} -> (fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V2, V13}, V80)) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateNS,updateNSApp-10914'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.TTImp.TTImp.IVar', V4, V1}; 1 -> {'Idris.TTImp.TTImp.IVar', V4, V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkFamily-10820'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V5, V4, V3}, V15)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkFamily-10769'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NType', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V5, V4, V3}, V9)) end end(E0)); {'Idris.Core.Value.NTCon', E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = {'Idris.Core.Value.NTCon', V10, V11, V12, V13, V14}), ('case--case block in checkFamily-10820'('erased', V1, V2, V3, V4, V5, V6, V10, V12, V13, V14, V11, V15, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V3, V11)))) end end(E1, E2, E3, E4, E5)); _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V5, V4, V3}, V16)) end end.
'case--checkIsType-10716'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); _ -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadTypeConType', V4, V3}, V9)) end end.
'nested--10084-10905--in--un--updateNSApp'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> ('case--updateNS,updateNSApp-10914'(V0, V1, V2, V5, V4, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V5, V2)))) end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V6, V7, V8) -> {'Idris.TTImp.TTImp.IApp', V6, ('nested--10084-10905--in--un--updateNSApp'(V0, V1, V2, V7)), V8} end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IAutoApp', V9, ('nested--10084-10905--in--un--updateNSApp'(V0, V1, V2, V10)), V11} end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.INamedApp', V12, ('nested--10084-10905--in--un--updateNSApp'(V0, V1, V2, V13)), V14, V15} end(E8, E9, E10, E11)); _ -> V3 end.
'nested--10592-11358--in--un--getRetType'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (((V7(V2))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V4, 1}))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('nested--10592-11358--in--un--getRetType'(V0, V1, V2, V15))(V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end end(E0, E1, E2, E3)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V3} end end.
'nested--10592-11359--in--un--getPats'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, [], V2, V9)) end, V8, [])) end(E0, E1, E2, E3, E4)); _ -> fun (V10) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--10672-11460--in--un--getDisjointPos'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> begin (V9 = (('nested--10672-11460--in--un--getDisjointPos'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V3)), V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = (('nested--10672-11459--in--un--allDisjoint'(V0, V1, V2, V6))(V8))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 0 -> {'Idris.Prelude.Types.Right', [V3 | V11]}; 1 -> {'Idris.Prelude.Types.Right', V11}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10672-11456--in--un--disjointArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 1} end; _ -> case V4 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', 1} end; _ -> case V3 of [E0 | E1] -> (fun (V7, V8) -> case V4 of [E2 | E3] -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('nested--10672-11457--in--un--disjoint'(V0, V1, V2, V7, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> (('nested--10672-11456--in--un--disjointArgs'(V0, V1, V2, V8, V10))(V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--10672-11457--in--un--disjoint'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14) -> ('case--getDetags,disjoint-11546'(V0, V1, V2, V10, V11, V13, V5, V6, V8, V9, V7, V14, V12, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V7, V12)))) end(E5, E6, E7, E8, E9)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Core.Value.NDCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> ('case--getDetags,disjoint-11653'(V0, V1, V2, V21, V23, V24, V16, V18, V19, V20, V17, V25, V22, ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V17, V22)))) end(E15, E16, E17, E18, E19)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V27, V28) -> case V4 of {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Constant'(V28, V30))} end end(E22, E23)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end end(E20, E21)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', 1} end end.
'nested--10672-11458--in--un--allDisjointWith'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 0} end; _ -> case V3 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', 1} end end(E4, E5)); _ -> case V4 of [E0 | E1] -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('nested--10672-11457--in--un--disjoint'(V0, V1, V2, V3, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case V14 of 0 -> (('nested--10672-11458--in--un--allDisjointWith'(V0, V1, V2, V3, V10))(V11)); 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--10672-11459--in--un--allDisjoint'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', 1} end end(E4, E5)); _ -> fun (V10) -> begin (V11 = (('nested--10672-11459--in--un--allDisjoint'(V0, V1, V2, V6))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of 0 -> (('nested--10672-11458--in--un--allDisjointWith'(V0, V1, V2, V5, V6))(V10)); 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateNS'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V7, ('un--updateNS'(V0, V1, V8))} end(E0, E1, E2, E3, E4, E5)); _ -> ('nested--10084-10905--in--un--updateNSApp'(V2, V1, V0, V2)) end.
'un--processDataOpt'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.TTImp.TTImp.SearchBy', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setDetermining'(V0, V1, V2, V5, V6)) end end(E0)); {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> fun (V7) -> ('Idris.Idris2.Core.Context':'un--setUniqueSearch'(V0, V1, V2, 0, V7)) end end()); {'Idris.TTImp.TTImp.External'} -> (fun () -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--setExternal'(V0, V1, V2, 0, V8)) end end()); {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.MkImpLater', E0, E1, E2} -> (fun (V10, V11, V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V11))(V13))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], V0, V12, V13))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> begin (V50 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V23 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V24 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V50 of {'Idris.Prelude.Types.Left', E35} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V52) -> case V52 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V61 = begin (V53 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V16))(V13))), case V53 of {'Idris.Prelude.Types.Left', E37} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V55) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V60) -> {'Idris.Core.Core.InCon', V7, V16, V60} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V55, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V56) -> fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V56, V57)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V58, V59)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V19}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V10))}))))(V13)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V61 of {'Idris.Prelude.Types.Left', E39} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V63) -> case V63 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V64, V65) -> begin (V66 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V10, V6, V64))), begin (V67 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V16)))) end, {'Idris.Core.Env.Nil'}, V66))(V13))), case V67 of {'Idris.Prelude.Types.Left', E43} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V69) -> begin (V73 = begin (V70 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V23, V6, V64))(V13))), case V70 of {'Idris.Prelude.Types.Left', E45} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V72) -> (('un--checkIsType'('erased', V1, V7, V16, V6, V72))(V13)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V73 of {'Idris.Prelude.Types.Left', E47} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V23, {'Idris.Core.Env.Nil'}, V66, V13))), case V76 of {'Idris.Prelude.Types.Left', E49} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V78) -> begin (V83 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V16, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V16, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V79, V80)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V81, V82)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V0, V66, V8, {'Idris.Core.Context.TCon', 0, V78, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V13))), case V83 of {'Idris.Prelude.Types.Left', E51} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V85) -> begin (V86 = ('Idris.Idris2.Core.Context':'un--addMutData'(V1, {'Idris.Core.Name.Resolved', V85}, V13))), case V86 of {'Idris.Prelude.Types.Left', E53} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V88) -> begin (V90 = begin (V89 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E55} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V92) -> begin (V147 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, V93, case V92 of {'Idris.Core.Context.MkDefs', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> V96 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V94)) end end, case V92 of {'Idris.Core.Context.MkDefs', E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V122 end(E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V147 of {'Idris.Prelude.Types.Left', E109} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V149) -> begin (V152 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V150, V151)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V64))))))(V13))), case V152 of {'Idris.Prelude.Types.Left', E111} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V154) -> begin (V155 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V16, V13))), case V155 of {'Idris.Prelude.Types.Left', E113} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V157) -> begin (V161 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V16)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V158) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V158)) end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V159, V160)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V64)))))))))))) end))(V13))), case V161 of {'Idris.Prelude.Types.Left', E115} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V163) -> case V8 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V171 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V164) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V164)) end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V165, V166)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V167, V168)) end end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V169, V170)) end end}, V16, V13))), case V171 of {'Idris.Prelude.Types.Left', E117} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V173) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V174) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V174)) end, fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V175, V176)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V177, V178)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V179, V180)) end end}, V66, V13)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E119} -> (fun (V181) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V7, V16}, V13)) end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.MkImpData', E120, E121, E122, E123, E124} -> (fun (V182, V183, V184, V185, V186) -> fun (V187) -> begin (V188 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V183))(V187))), case V188 of {'Idris.Prelude.Types.Left', E125} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V190) -> begin (V191 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], V0, V184, V187))), case V191 of {'Idris.Prelude.Types.Left', E127} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V193) -> begin (V194 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V190)))) end))(V187))), case V194 of {'Idris.Prelude.Types.Left', E129} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V196) -> begin (V198 = begin (V197 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V197} end), case V198 of {'Idris.Prelude.Types.Left', E131} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V200) -> begin (V209 = begin (V201 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V190))(V187))), case V201 of {'Idris.Prelude.Types.Left', E133} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V203) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V208) -> {'Idris.Core.Core.InCon', V7, V190, V208} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V203, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V204) -> fun (V205) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V204, V205)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V206) -> fun (V207) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V206, V207)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V193}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V182))}))))(V187)) end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V209 of {'Idris.Prelude.Types.Left', E135} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V211) -> case V211 of {'Idris.Builtin.MkPair', E137, E138} -> (fun (V212, V213) -> begin (V214 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V182, V6, V212))), begin (V241 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V190, case V200 of {'Idris.Core.Context.MkDefs', E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164} -> (fun (V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240) -> V215 end(E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V187))), case V241 of {'Idris.Prelude.Types.Left', E165} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V243) -> begin (V268 = begin (V244 = {'Idris.Builtin.MkPair', V212, V213}), case V243 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E167} -> (fun (V245) -> begin (V246 = {'Idris.Prelude.Types.Just', V245}), (('case--case block in case block in processData-13263'(V186, V185, V184, V183, V182, V8, V7, V0, V6, V5, V4, V3, V2, V1, V190, V193, V196, V200, V213, V212, V244, V214, V245, V246, case V245 of {'Idris.Core.Context.MkGlobalDef', E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188} -> (fun (V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267) -> V264 end(E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V187)) end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V268 of {'Idris.Prelude.Types.Left', E189} -> (fun (V269) -> {'Idris.Prelude.Types.Left', V269} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V270) -> begin (V271 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V190)))) end, {'Idris.Core.Env.Nil'}, V214))(V187))), case V271 of {'Idris.Prelude.Types.Left', E191} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V273) -> begin (V277 = begin (V274 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V200, V6, V212))(V187))), case V274 of {'Idris.Prelude.Types.Left', E193} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V276) -> (('un--checkIsType'('erased', V1, V7, V190, V6, V276))(V187)) end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V277 of {'Idris.Prelude.Types.Left', E195} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V279) -> begin (V280 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V200, {'Idris.Core.Env.Nil'}, V214, V187))), case V280 of {'Idris.Prelude.Types.Left', E197} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V282) -> begin (V287 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V190, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V190, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V283) -> fun (V284) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V283, V284)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V285) -> fun (V286) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V285, V286)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V0, V214, V8, {'Idris.Core.Context.TCon', 0, V282, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V187))), case V287 of {'Idris.Prelude.Types.Left', E199} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V289) -> begin (V307 = case V8 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V297 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V290) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V290)) end, fun (V291) -> fun (V292) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V291, V292)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V293) -> fun (V294) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V293, V294)) end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V295, V296)) end end}, V190, V187))), case V297 of {'Idris.Prelude.Types.Left', E201} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V299) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V300) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V300)) end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V301, V302)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V303) -> fun (V304) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V303, V304)) end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V305, V306)) end end}, V214, V187)) end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V307 of {'Idris.Prelude.Types.Left', E203} -> (fun (V308) -> {'Idris.Prelude.Types.Left', V308} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V309) -> begin (V311 = begin (V310 = {'Idris.Builtin.MkPair', V212, V213}), ('case--case block in processData-12843'(V186, V185, V184, V183, V182, V8, V7, V0, V6, V5, V4, V3, V2, V1, V190, V193, V196, V200, V213, V212, V310, V214, V243, V270, V273, V279, V282, V289, V309, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Visibility'(V8, {'Idris.Core.TT.Export'})))) end), begin (V313 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V312) -> ('un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V311, V183, {'Idris.Core.Name.Resolved', V289}, V312)) end, V186, []))(V187))), case V313 of {'Idris.Prelude.Types.Left', E205} -> (fun (V314) -> {'Idris.Prelude.Types.Left', V314} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V315) -> begin (V316 = {'Idris.Core.Context.MkData', {'Idris.Core.Context.MkCon', V182, V190, V282, V214}, V315}), begin (V317 = (('Idris.Idris2.Core.Context.Data':'un--addData'(V1, V0, V8, V289, V316))(V187))), case V317 of {'Idris.Prelude.Types.Left', E207} -> (fun (V318) -> {'Idris.Prelude.Types.Left', V318} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V319) -> begin (V324 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V320) -> fun (V321) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq__DataOpt'(V320, V321)) end end, fun (V322) -> fun (V323) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq__DataOpt'(V322, V323)) end end}, {'Idris.TTImp.TTImp.NoNewtype'}, V185)))) of 0 -> (('un--findNewtype'(V1, V315))(V187)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V324 of {'Idris.Prelude.Types.Left', E209} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V326) -> begin (V328 = begin (V327 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V327} end), case V328 of {'Idris.Prelude.Types.Left', E211} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V330) -> begin (V334 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V190)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" defined in a mutual block with "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V331) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V331)) end, fun (V332) -> fun (V333) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V332, V333)) end end}, V270)))))) end))(V187))), case V334 of {'Idris.Prelude.Types.Left', E213} -> (fun (V335) -> {'Idris.Prelude.Types.Left', V335} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V336) -> begin (V337 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, {'Idris.Core.Name.Resolved', V289}, V270, V187))), case V337 of {'Idris.Prelude.Types.Left', E215} -> (fun (V338) -> {'Idris.Prelude.Types.Left', V338} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V339) -> begin (V341 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V340) -> ('un--processDataOpt'(V1, V7, {'Idris.Core.Name.Resolved', V289}, V340)) end, V185))(V187))), case V341 of {'Idris.Prelude.Types.Left', E217} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V343) -> begin (V344 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V1, {'Idris.Core.Name.Resolved', V289}, V187))), case V344 of {'Idris.Prelude.Types.Left', E219} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V346) -> begin (V352 = (('un--getDetags'(V1, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V347) -> case V347 of {'Idris.Core.Context.MkCon', E221, E222, E223, E224} -> (fun (V348, V349, V350, V351) -> V351 end(E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V315))))(V187))), case V352 of {'Idris.Prelude.Types.Left', E225} -> (fun (V353) -> {'Idris.Prelude.Types.Left', V353} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V354) -> begin (V355 = ('Idris.Idris2.Core.Context':'un--setDetags'(V1, V7, {'Idris.Core.Name.Resolved', V289}, V354, V187))), case V355 of {'Idris.Prelude.Types.Left', E227} -> (fun (V356) -> {'Idris.Prelude.Types.Left', V356} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V357) -> begin (V360 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V358) -> fun (V359) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V358, V359)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V212))))))(V187))), case V360 of {'Idris.Prelude.Types.Left', E229} -> (fun (V361) -> {'Idris.Prelude.Types.Left', V361} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V362) -> begin (V363 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V190, V187))), case V363 of {'Idris.Prelude.Types.Left', E231} -> (fun (V364) -> {'Idris.Prelude.Types.Left', V364} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V365) -> begin (V369 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V190)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V366) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V366)) end, fun (V367) -> fun (V368) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V367, V368)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V212)))))))))))) end))(V187))), case V369 of {'Idris.Prelude.Types.Left', E233} -> (fun (V370) -> {'Idris.Prelude.Types.Left', V370} end(E233)); {'Idris.Prelude.Types.Right', E234} -> (fun (V371) -> begin (V373 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V372) -> ('un--conName'(V372)) end, V315))), begin (V380 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V374) -> fun (V375) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq__DataOpt'(V374, V375)) end end, fun (V376) -> fun (V377) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq__DataOpt'(V376, V377)) end end}, {'Idris.TTImp.TTImp.NoHints'}, V185)))) of 0 -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V378) -> fun (V379) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V1, V7, {'Idris.Core.Name.Resolved', V289}, V378, 0, 1, V379)) end end, V373))(V187)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V380 of {'Idris.Prelude.Types.Left', E235} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V382) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V383) -> fun (V384) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V1, V383, V384)) end end, [{'Idris.Core.Name.Resolved', V289} | V373]))(V187)) end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRelevantArg'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> (('Idris.Idris2.Algebra.Semiring':'un--branchZero'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V23, V24)) end end}}, fun () -> ('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1)), V2, V3, V16)) end, case V12 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V25, V26) -> case V26 of {'Idris.Core.TT.WorldType'} -> (fun () -> fun () -> fun (V27) -> begin (V28 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V27))), case V28 of {'Idris.Prelude.Types.Left', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V30) -> (('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1)), V2, 1, V30))(V27)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V31) -> begin (V32 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V31))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> (('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1)), {'Idris.Prelude.Types.Just', V1}, 1, V34))(V31)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V35) -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V2)) end end end(E12, E13)); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V37) -> begin (V38 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V37))), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> (('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1)), {'Idris.Prelude.Types.Just', V1}, 1, V40))(V37)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V41) -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V2)) end end, V10))(V13)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V44) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V44}} end end, V2))} end end end(E0, E1, E2, E3)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V46) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V46}} end end, V2))} end end.
'un--getIndexPats'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V6, {'Idris.Core.Env.Nil'}, V1))(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('nested--10592-11358--in--un--getRetType'(V1, V0, V6, V9))(V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('nested--10592-11359--in--un--getPats'(V1, V0, V6, V12))(V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDetags'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; [E4 | E5] -> (fun (V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; _ -> fun (V7) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V8) -> fun (V9) -> ('un--getIndexPats'(V0, V8, V9)) end end, V2, []))(V7))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('nested--10672-11460--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'('erased', V12))))(V7))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case V15 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V15}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> fun (V16) -> begin (V19 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> fun (V18) -> ('un--getIndexPats'(V0, V17, V18)) end end, V2, []))(V16))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> begin (V22 = (('nested--10672-11460--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'('erased', V21))))(V16))), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> case V24 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V24}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findNewtype'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V16 = begin (V13 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V8, {'Idris.Core.Env.Nil'}, case V2 of {'Idris.Core.Context.MkCon', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> V12 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('un--getRelevantArg'(V8, 0, {'Idris.Prelude.Types.Nothing'}, 0, V15))(V4)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E12} -> (fun (V19) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V0, case V2 of {'Idris.Core.Context.MkCon', E13, E14, E15, E16} -> (fun (V20, V21, V22, V23) -> V21 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V24) -> case V24 of {'Idris.Core.Context.DCon', E17, E18, E19} -> (fun (V25, V26, V27) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V25, V26, {'Idris.Prelude.Types.Just', V19}}} end(E17, E18, E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V4)) end(E12)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--conName'(V0) -> case V0 of {'Idris.Core.Context.MkCon', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkRetType'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = (((V8(V17))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, {'Idris.Core.TT.Erased', V5, 1}))))(V13))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> (('un--checkRetType'('erased', V1, V2, V20, V4))(V13)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> (V4(V3)) end end(E0, E1, E2, E3)); _ -> (V4(V3)) end.
'un--checkIsType'(V0, V1, V2, V3, V4, V5) -> ('un--checkRetType'('erased', V1, V4, V5, fun (V6) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); _ -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadTypeConType', V2, V3}, V9)) end end end)).
'un--checkFamily'(V0, V1, V2, V3, V4, V5, V6) -> ('un--checkRetType'('erased', V1, V5, V6, fun (V7) -> case V7 of {'Idris.Core.Value.NType', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V2, V3, V4}, V9)) end end(E0)); {'Idris.Core.Value.NTCon', E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = {'Idris.Core.Value.NTCon', V10, V11, V12, V13, V14}), ('case--case block in checkFamily-10820'('erased', V6, V5, V4, V3, V2, V1, V10, V12, V13, V14, V11, V15, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V4, V11)))) end end(E1, E2, E3, E4, E5)); _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V2, V3, V4}, V16)) end end end)).
'un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V12))(V14))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V18 = ('un--updateNS'(V8, V9, V13))), begin (V19 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking constructor type "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V17)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V18)))))))) end))(V14))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V28 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Updated "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V23, V24)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V26, V27)) end end}}, {'Idris.Builtin.MkPair', V8, V9})))) end))(V14))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E9} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V34) -> begin (V61 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, case V34 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V35 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V61 of {'Idris.Prelude.Types.Left', E37} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V63) -> case V63 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V73 = begin (V64 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V17))(V14))), case V64 of {'Idris.Prelude.Types.Left', E39} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V66) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V72) -> {'Idris.Core.Core.InCon', V11, V17, V72} end))(fun (V67) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V66, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V11, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V68) -> fun (V69) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V68, V69)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V70) -> fun (V71) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V70, V71)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V18}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V11)), V67)) end))(V14)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V73 of {'Idris.Prelude.Types.Left', E41} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V75) -> begin (V79 = begin (V76 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V34, V6, V75))(V14))), case V76 of {'Idris.Prelude.Types.Left', E43} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V78) -> (('un--checkFamily'('erased', V1, V11, V17, V9, V6, V78))(V14)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V79 of {'Idris.Prelude.Types.Left', E45} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V11, V6, V75))), begin (V83 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V17)))) end, {'Idris.Core.Env.Nil'}, V82))(V14))), case V83 of {'Idris.Prelude.Types.Left', E47} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V85) -> begin (V88 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V86, V87)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V75))))))(V14))), case V88 of {'Idris.Prelude.Types.Left', E49} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V17, V14))), case V91 of {'Idris.Prelude.Types.Left', E51} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V93) -> begin (V97 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V17)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V95, V96)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V75)))))))))))) end))(V14))), case V97 of {'Idris.Prelude.Types.Left', E53} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V99) -> begin (V117 = case V7 of {'Idris.Core.TT.Public'} -> (fun () -> begin (V107 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V100) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V101, V102)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V105, V106)) end end}, V17, V14))), case V107 of {'Idris.Prelude.Types.Left', E55} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V109) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V110) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V111, V112)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V115, V116)) end end}, V82, V14)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end), case V117 of {'Idris.Prelude.Types.Left', E57} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V119) -> begin (V120 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V34, {'Idris.Core.Env.Nil'}, V82, V14))), case V120 of {'Idris.Prelude.Types.Left', E59} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkCon', V11, V17, V122, V82}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E61} -> (fun (V123) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V11, V17}, V14)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
