-module('Idris.Idris2.TTImp.Impossible').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getImpossibleTerm,expandNest-2357'/8,
  'case--getImpossibleTerm,addEnv-2300'/11,
  'case--buildApp-2103'/13,
  'case--case block in processArgs-1930'/14,
  'case--processArgs-1846'/13,
  'case--processArgs-1710'/14,
  'case--processArgs-1591'/13,
  'nested--7850-1218--in--un--sameRet'/7,
  'nested--8987-2280--in--un--expandNest'/6,
  'nested--8987-2281--in--un--applyEnv'/6,
  'nested--8987-2279--in--un--addEnv'/8,
  'un--processArgs'/7,
  'un--nextVar'/3,
  'un--mkTerm'/7,
  'un--match'/3,
  'un--getImpossibleTerm'/6,
  'un--dropNoMatch'/3,
  'un--buildApp'/9,
  'un--badClause'/6
]).
'case--getImpossibleTerm,expandNest-2357'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Types.Just', E3} -> (fun (V11) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> {'Idris.TTImp.TTImp.IVar', V6, V11} end(E4, E5)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V5} end end(E3)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V5} end end(E1, E2)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V5} end end(E0)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V5} end.
'case--getImpossibleTerm,addEnv-2300'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('nested--8987-2279--in--un--addEnv'(V0, V1, V2, V3, V4, V6, V9, V7)); 1 -> [{'Idris.TTImp.TTImp.Implicit', V9, 1} | ('nested--8987-2279--in--un--addEnv'(V0, V1, V2, V3, V4, V6, V9, V7))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildApp-2103'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V14 of [] -> fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise':'un--nf'(V7, [], V8, {'Idris.Core.Env.Nil'}, V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> (('un--processArgs'(V7, V6, {'Idris.Core.TT.Ref', V5, {'Idris.Core.TT.Func'}, V15}, V22, V2, V1, V0))(V19)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V24)) end, V12))}, V23)) end end end(E4, E5)); _ -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V26) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V26)) end, V12))}, V25)) end end end(E2, E3)); _ -> fun (V27) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V28)) end, V12))}, V27)) end end end(E0, E1)); [] -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V5, V4}, V29)) end; _ -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V31)) end, V12))}, V30)) end end.
'case--case block in processArgs-1930'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> begin (V15 = ('un--nextVar'(V9, V5, V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = (((V3(V11))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V17))))(V14))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> (('un--processArgs'(V10, V9, {'Idris.Core.TT.App', V5, V8, V17}, V20, V7, [], V6))(V14)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V21) -> case V21 of {'Idris.Data.List1.:::', E5, E6} -> (fun (V22, V23) -> case V22 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V24, V25) -> fun (V26) -> begin (V27 = (('un--mkTerm'(V10, V9, V25, {'Idris.Prelude.Types.Just', V2}, [], [], []))(V26))), case V27 of {'Idris.Prelude.Types.Left', E9} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V29) -> begin (V30 = (((V3(V11))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V29))))(V26))), case V30 of {'Idris.Prelude.Types.Left', E11} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V32) -> (('un--processArgs'(V10, V9, {'Idris.Core.TT.App', V5, V8, V29}, V32, V7, [], V23))(V26)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processArgs-1846'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V7 of [E0 | E1] -> (fun (V13, V14) -> fun (V15) -> begin (V16 = (('un--mkTerm'(V11, V10, V13, {'Idris.Prelude.Types.Just', V2}, [], [], []))(V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = (((V3(V12))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V18))))(V15))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> (('un--processArgs'(V11, V10, {'Idris.Core.TT.App', V5, V9, V18}, V21, V8, V14, V6))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); [] -> begin (V22 = []), ('case--case block in processArgs-1930'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12, V22, ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V4, V6)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processArgs-1710'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> begin (V15 = ('un--nextVar'(V10, V5, V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = (((V3(V12))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V17))))(V14))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> (('un--processArgs'(V11, V10, {'Idris.Core.TT.App', V5, V9, V17}, V20, V8, V7, V6))(V14)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V21) -> case V21 of {'Idris.Data.List1.:::', E5, E6} -> (fun (V22, V23) -> case V22 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V24, V25) -> fun (V26) -> begin (V27 = (('un--mkTerm'(V11, V10, V25, {'Idris.Prelude.Types.Just', V2}, [], [], []))(V26))), case V27 of {'Idris.Prelude.Types.Left', E9} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V29) -> begin (V30 = (((V3(V12))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V29))))(V26))), case V30 of {'Idris.Prelude.Types.Left', E11} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V32) -> (('un--processArgs'(V11, V10, {'Idris.Core.TT.App', V5, V9, V29}, V32, V8, V7, V23))(V26)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processArgs-1591'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Data.List1.:::', E1, E2} -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V16, V17) -> fun (V18) -> begin (V19 = (('un--mkTerm'(V10, V9, V17, {'Idris.Prelude.Types.Just', V2}, [], [], []))(V18))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V22 = (((V3(V11))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V21))))(V18))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> (('un--processArgs'(V10, V9, {'Idris.Core.TT.App', V5, V8, V21}, V24, [], V7, V15))(V18)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V25) -> ('un--badClause'('erased', V8, [], V7, V6, V25)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7850-1218--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NApp', E69, E70, E71} -> (fun (V7, V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', 0} end end(E69, E70, E71)); {'Idris.Core.Value.NErased', E72, E73} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', 0} end end(E72, E73)); _ -> case V5 of {'Idris.Core.Value.NApp', E12, E13, E14} -> (fun (V14, V15, V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', 0} end end(E12, E13, E14)); {'Idris.Core.Value.NErased', E15, E16} -> (fun (V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', 0} end end(E15, E16)); {'Idris.Core.Value.NTCon', E17, E18, E19, E20, E21} -> (fun (V21, V22, V23, V24, V25) -> case V6 of {'Idris.Core.Value.NTCon', E34, E35, E36, E37, E38} -> (fun (V26, V27, V28, V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V22, V27))} end end(E34, E35, E36, E37, E38)); _ -> case V6 of {'Idris.Core.Value.NBind', E22, E23, E24, E25} -> (fun (V32, V33, V34, V35) -> case V34 of {'Idris.Core.TT.Pi', E26, E27, E28, E29} -> (fun (V36, V37, V38, V39) -> fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> begin (V45 = (((V35(V44))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V32, 1}))))(V40))), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> (('nested--7850-1218--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V47))(V40)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27, E28, E29)); _ -> fun (V48) -> {'Idris.Prelude.Types.Right', 1} end end end(E22, E23, E24, E25)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', 1} end end end end(E17, E18, E19, E20, E21)); {'Idris.Core.Value.NPrimVal', E39, E40} -> (fun (V50, V51) -> case V6 of {'Idris.Core.Value.NPrimVal', E53, E54} -> (fun (V52, V53) -> fun (V54) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Constant'(V51, V53))} end end(E53, E54)); _ -> case V6 of {'Idris.Core.Value.NBind', E41, E42, E43, E44} -> (fun (V55, V56, V57, V58) -> case V57 of {'Idris.Core.TT.Pi', E45, E46, E47, E48} -> (fun (V59, V60, V61, V62) -> fun (V63) -> begin (V65 = begin (V64 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E49} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V67) -> begin (V68 = (((V58(V67))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V55, 1}))))(V63))), case V68 of {'Idris.Prelude.Types.Left', E51} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V70) -> (('nested--7850-1218--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V70))(V63)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47, E48)); _ -> fun (V71) -> {'Idris.Prelude.Types.Right', 1} end end end(E41, E42, E43, E44)); _ -> fun (V72) -> {'Idris.Prelude.Types.Right', 1} end end end end(E39, E40)); {'Idris.Core.Value.NType', E55} -> (fun (V73) -> case V6 of {'Idris.Core.Value.NType', E68} -> (fun (V74) -> fun (V75) -> {'Idris.Prelude.Types.Right', 0} end end(E68)); _ -> case V6 of {'Idris.Core.Value.NBind', E56, E57, E58, E59} -> (fun (V76, V77, V78, V79) -> case V78 of {'Idris.Core.TT.Pi', E60, E61, E62, E63} -> (fun (V80, V81, V82, V83) -> fun (V84) -> begin (V86 = begin (V85 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E64} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V88) -> begin (V89 = (((V79(V88))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V76, 1}))))(V84))), case V89 of {'Idris.Prelude.Types.Left', E66} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V91) -> (('nested--7850-1218--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V91))(V84)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60, E61, E62, E63)); _ -> fun (V92) -> {'Idris.Prelude.Types.Right', 1} end end end(E56, E57, E58, E59)); _ -> fun (V93) -> {'Idris.Prelude.Types.Right', 1} end end end end(E55)); _ -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V94, V95, V96, V97) -> case V96 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V98, V99, V100, V101) -> fun (V102) -> begin (V104 = begin (V103 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V103} end), case V104 of {'Idris.Prelude.Types.Left', E8} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V106) -> begin (V107 = (((V97(V106))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V94, 1}))))(V102))), case V107 of {'Idris.Prelude.Types.Left', E10} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V109) -> (('nested--7850-1218--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V109))(V102)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V110) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3)); _ -> fun (V111) -> {'Idris.Prelude.Types.Right', 1} end end end end.
'nested--8987-2280--in--un--expandNest'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V6, V7) -> ('case--getImpossibleTerm,expandNest-2357'(V0, V1, V2, V3, V4, V7, V6, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V10, V11)) end end}, V7, V2)))) end(E0, E1)); _ -> V5 end.
'nested--8987-2281--in--un--applyEnv'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.TTImp.TTImp.IApp', V6, ('nested--8987-2281--in--un--applyEnv'(V0, V1, V2, V3, V4, V7)), V8} end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E3, E4, E5} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IAutoApp', V9, ('nested--8987-2281--in--un--applyEnv'(V0, V1, V2, V3, V4, V10)), V11} end(E3, E4, E5)); {'Idris.TTImp.TTImp.INamedApp', E6, E7, E8, E9} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.INamedApp', V12, ('nested--8987-2281--in--un--applyEnv'(V0, V1, V2, V3, V4, V13)), V14, V15} end(E6, E7, E8, E9)); _ -> ('Idris.Idris2.TTImp.TTImp':'un--apply'(('nested--8987-2280--in--un--expandNest'(V0, V1, V2, V3, V4, V5)), ('nested--8987-2279--in--un--addEnv'(V0, V1, V2, V3, V4, V0, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V5)), V3)))) end.
'nested--8987-2279--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> case V7 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V8, V9) -> case V7 of {'Idris.Core.Env.::', E2, E3} -> (fun (V10, V11) -> ('case--getImpossibleTerm,addEnv-2300'(V0, V1, V2, V3, V4, V8, V9, V11, V10, V6, ('Idris.Idris2.Core.TT':'un--isLet'('erased', V10)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V4 of [E8 | E9] -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('un--mkTerm'(V0, V1, V15, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> begin (V25 = (((V10(V24))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V20))))(V17))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V20}, V27, V16, V5, V6))(V17)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); [] -> fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> (('case--processArgs-1591'(V11, V12, V14, V10, V8, V7, V6, V5, V2, V1, V0, V32, ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V8, V6))))(V28)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of [] -> case V5 of [] -> case V6 of [] -> fun (V33) -> {'Idris.Prelude.Types.Right', V2} end; _ -> fun (V34) -> ('un--badClause'('erased', V2, V4, V5, V6, V34)) end end; _ -> fun (V35) -> ('un--badClause'('erased', V2, V4, V5, V6, V35)) end end; _ -> fun (V36) -> ('un--badClause'('erased', V2, V4, V5, V6, V36)) end end end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E18} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V41) -> (('case--processArgs-1710'(V11, V12, V14, V10, V8, V7, V6, V5, V4, V2, V1, V0, V41, ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V8, V6))))(V37)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> case V5 of [E22 | E23] -> (fun (V47, V48) -> begin (V49 = (('un--mkTerm'(V0, V1, V47, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V42))), case V49 of {'Idris.Prelude.Types.Left', E24} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V51) -> begin (V52 = (((V10(V46))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V51))))(V42))), case V52 of {'Idris.Prelude.Types.Left', E26} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V54) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V51}, V54, V4, V48, V6))(V42)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); [] -> begin (V55 = []), (('case--case block in processArgs-1930'(V11, V12, V14, V10, V8, V7, V6, V4, V2, V1, V0, V46, V55, ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V8, V6))))(V42)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V4 of [] -> case V5 of [] -> case V6 of [] -> fun (V56) -> {'Idris.Prelude.Types.Right', V2} end; _ -> fun (V57) -> ('un--badClause'('erased', V2, V4, V5, V6, V57)) end end; _ -> fun (V58) -> ('un--badClause'('erased', V2, V4, V5, V6, V58)) end end; _ -> fun (V59) -> ('un--badClause'('erased', V2, V4, V5, V6, V59)) end end end end(E4, E5, E6, E7)); _ -> case V4 of [] -> case V5 of [] -> case V6 of [] -> fun (V60) -> {'Idris.Prelude.Types.Right', V2} end; _ -> fun (V61) -> ('un--badClause'('erased', V2, V4, V5, V6, V61)) end end; _ -> fun (V62) -> ('un--badClause'('erased', V2, V4, V5, V6, V62)) end end; _ -> fun (V63) -> ('un--badClause'('erased', V2, V4, V5, V6, V63)) end end end end(E0, E1, E2, E3)); _ -> case V4 of [] -> case V5 of [] -> case V6 of [] -> fun (V64) -> {'Idris.Prelude.Types.Right', V2} end; _ -> fun (V65) -> ('un--badClause'('erased', V2, V4, V5, V6, V65)) end end; _ -> fun (V66) -> ('un--badClause'('erased', V2, V4, V5, V6, V66)) end end; _ -> fun (V67) -> ('un--badClause'('erased', V2, V4, V5, V6, V67)) end end end.
'un--nextVar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"imp"/utf8>>, V6}}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mkTerm'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V7, V8) -> fun (V9) -> ('un--buildApp'(V0, V1, V7, V8, V3, V4, V5, V6, V9)) end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V10, V11, V12) -> ('un--mkTerm'(V0, V1, V11, V3, [V12 | V4], V5, V6)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V13, V14, V15) -> ('un--mkTerm'(V0, V1, V14, V3, V4, [V15 | V5], V6)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V16, V17, V18, V19) -> ('un--mkTerm'(V0, V1, V17, V3, V4, V5, [{'Idris.Builtin.MkPair', V18, V19} | V6])) end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IPrimVal', E12, E13} -> (fun (V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V20, V21}} end end(E12, E13)); _ -> fun (V23) -> ('un--nextVar'(V1, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V2)), V23)) end end.
'un--match'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V11, {'Idris.Core.Env.Nil'}, V6))(V7))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> (('nested--7850-1218--in--un--sameRet'(V3, V5, V6, V1, V0, V1, V14))(V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImpossibleTerm'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Normalise.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('un--mkTerm'(V1, V8, ('nested--8987-2281--in--un--applyEnv'(V0, V4, V3, V2, V1, V4)), {'Idris.Prelude.Types.Nothing'}, [], [], []))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropNoMatch'(V0, V1, V2) -> case V2 of [E1 | E2] -> (fun (V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', [V3 | []]} end; _ -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', V2} end end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V7) -> ('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V8) -> ('un--match'(V0, V7, V8)) end, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', V2} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> ('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V11) -> ('un--match'(V0, V10, V11)) end, V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V0, V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V20 = case ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V18, V19)) end end}, V3, V15)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t deal with constants here yet"/utf8>>}, V8)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V3, case V12 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V23 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V49 of {'Idris.Prelude.Types.Left', E32} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V51) -> begin (V52 = (('un--dropNoMatch'(V0, V4, V51))(V8))), case V52 of {'Idris.Prelude.Types.Left', E34} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V54) -> case V54 of [E36 | E37] -> (fun (V55, V56) -> case V55 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V57, V58) -> case V58 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V59, V60) -> case V56 of [] -> begin (V61 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V12, {'Idris.Core.Env.Nil'}, V60))(V8))), case V61 of {'Idris.Prelude.Types.Left', E42} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V63) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.Ref', V2, {'Idris.Core.TT.Func'}, V57}, V63, V5, V6, V7))(V8)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V64)) end, V54))}, V8)) end end(E40, E41)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V65)) end, V54))}, V8)) end end(E38, E39)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V66)) end, V54))}, V8)) end end(E36, E37)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V3}, V8)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V67) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V67)) end, V54))}, V8)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--badClause'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Badly formed impossible clause "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V6) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'([], V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'([], V7, V8)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V11) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V11)) end, fun (V12) -> fun (V13) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V12, V13)) end end}, V10)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V16) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V17, V18)) end end}, V14, V15)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V19) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V21) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V22, V23)) end end}, V20)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V26) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V27, V28)) end end}, V24, V25)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V32, V33)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V34) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V35, V36)) end end}}, V30)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V40, V41)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V43, V44)) end end}}, V37, V38)) end end}, V29)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V49, V50)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V52, V53)) end end}}, V47)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V57, V58)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V59) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V60, V61)) end end}}, V54, V55)) end end}, V45, V46)) end end}}, V19)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V66, V67)) end end}, V64)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V71, V72)) end end}, V68, V69)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V76, V77)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V78) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V78)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V79, V80)) end end}}, V74)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V84, V85)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V86) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V86)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V87, V88)) end end}}, V81, V82)) end end}, V73)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V93, V94)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V96, V97)) end end}}, V91)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V101, V102)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V104, V105)) end end}}, V98, V99)) end end}, V89, V90)) end end}}, V62, V63)) end end}}, V9)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V110, V111)) end end}, V108)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V114) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V115, V116)) end end}, V112, V113)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V119) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V120, V121)) end end}, V118)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V124) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V124)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V125, V126)) end end}, V122, V123)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V127) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V128) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V129)) end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V130, V131)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V132) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V132)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V133, V134)) end end}}, V128)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V137) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V138, V139)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V140) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V140)) end, fun (V141) -> fun (V142) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V141, V142)) end end}}, V135, V136)) end end}, V127)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V145) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V146) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V146)) end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V147, V148)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V149) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V149)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V150, V151)) end end}}, V145)) end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V154) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V154)) end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V155, V156)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V157) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V157)) end, fun (V158) -> fun (V159) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V158, V159)) end end}}, V152, V153)) end end}, V143, V144)) end end}}, V117)) end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V162) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V163) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V163)) end, fun (V164) -> fun (V165) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V164, V165)) end end}, V162)) end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V168) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V168)) end, fun (V169) -> fun (V170) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V169, V170)) end end}, V166, V167)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V171) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V172) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V173) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V173)) end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V174, V175)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V176) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V176)) end, fun (V177) -> fun (V178) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V177, V178)) end end}}, V172)) end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V181) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V181)) end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V182, V183)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V184) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V184)) end, fun (V185) -> fun (V186) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V185, V186)) end end}}, V179, V180)) end end}, V171)) end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V189) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V190) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V190)) end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V191, V192)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V193) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V193)) end, fun (V194) -> fun (V195) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V194, V195)) end end}}, V189)) end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V198) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V198)) end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V199, V200)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V201) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V201)) end, fun (V202) -> fun (V203) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V202, V203)) end end}}, V196, V197)) end end}, V187, V188)) end end}}, V160, V161)) end end}}, V106, V107)) end end}}, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}}))))}, V5)).
