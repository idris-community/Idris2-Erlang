-module('Idris.Idris2.Parser.Lexer.Source').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lexTo-9131'/3,
  'case--lexTo,notComment-9106'/4,
  'case--rawTokens,parseNamespace-8891'/2,
  'case--rawTokens,parseIdent-8880'/2,
  'case--case block in fromOctLit-8853'/3,
  'case--fromOctLit-8837'/2,
  'case--case block in fromHexLit-8809'/3,
  'case--fromHexLit-8793'/2,
  'case--fromBinLit-8750'/2,
  'nested--4533-8873--in--un--parseNamespace'/1,
  'nested--4533-8872--in--un--parseIdent'/1,
  'nested--4749-9101--in--un--notComment'/3,
  'nested--4366-8706--in--un--fromBin'/2,
  'nested--4366-8705--in--un--castBin'/2,
  'dn--un--show_Show__Token'/1,
  'dn--un--showPrec_Show__Token'/2,
  'dn--un--pretty_Pretty__Token'/2,
  'dn--un--prettyPrec_Pretty__Token'/3,
  'dn--un--__Impl_Show_Token'/0,
  'dn--un--__Impl_Pretty_Token'/0,
  'un--validSymbol'/0,
  'un--toEndComment'/1,
  'un--symbols'/0,
  'un--singleDash'/1,
  'un--singleBrace'/1,
  'un--reservedSymbols'/0,
  'un--rawTokens'/0,
  'un--pragma'/0,
  'un--mkDirective'/1,
  'un--lexTo'/2,
  'un--lex'/1,
  'un--keywords'/0,
  'un--isOpChar'/1,
  'un--holeIdent'/0,
  'un--fromOctLit'/1,
  'un--fromHexLit'/1,
  'un--fromBinLit'/1,
  'un--doubleLit'/0,
  'un--doubleDash'/1,
  'un--dotIdent'/0,
  'un--docComment'/0,
  'un--cgDirective'/0,
  'un--blockComment'/0
]).
'case--lexTo-9131'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> case V8 of <<""/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V9) -> ('nested--4749-9101--in--un--notComment'(V0, V1, V9)) end, V3)), [{'Idris.Text.Bounded.MkBounded', {'Idris.Parser.Lexer.Source.EndInput'}, 1, V5, V7, V5, V7} | []]))}; _ -> {'Idris.Prelude.Types.Left', V4} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Left', V4} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', V4} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lexTo,notComment-9106'(V0, V1, V2, V3) -> case V3 of {'Idris.Parser.Lexer.Source.Comment', E0} -> (fun (V4) -> 1 end(E0)); _ -> 0 end.
'case--rawTokens,parseNamespace-8891'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--4533-8872--in--un--parseIdent'(V3)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V4) -> {'Idris.Parser.Lexer.Source.DotSepIdent', V4, V3} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--rawTokens,parseIdent-8880'(V0, V1) -> case V1 of 0 -> {'Idris.Parser.Lexer.Source.Keyword', V0}; 1 -> {'Idris.Parser.Lexer.Source.Ident', V0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in fromOctLit-8853'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V3)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromOctLit-8837'(V0, V1) -> case V1 of 0 -> 0; 1 -> begin (V2 = ('Idris.Idris2.Data.Strings':'un--strTail'(('Idris.Idris2.Data.Strings':'un--strTail'(V0))))), ('case--case block in fromOctLit-8853'(V0, V2, ('Idris.Idris2.Utils.Octal':'un--fromOct'(('Idris.Idris2.Prelude.Types':'un--reverse'(V2)))))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in fromHexLit-8809'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V3)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromHexLit-8793'(V0, V1) -> case V1 of 0 -> 0; 1 -> begin (V2 = ('Idris.Idris2.Data.Strings':'un--strTail'(('Idris.Idris2.Data.Strings':'un--strTail'(V0))))), ('case--case block in fromHexLit-8809'(V0, V2, ('Idris.Idris2.Utils.Hex':'un--fromHex'(('Idris.Idris2.Prelude.Types':'un--reverse'(V2)))))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromBinLit-8750'(V0, V1) -> case V1 of 0 -> 0; 1 -> begin (V2 = ('Idris.Idris2.Data.Strings':'un--strTail'(('Idris.Idris2.Data.Strings':'un--strTail'(V0))))), ('nested--4366-8706--in--un--fromBin'(V0, ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V3) -> ('nested--4366-8705--in--un--castBin'(V0, V3)) end, ('Idris.Idris2.Prelude.Types':'un--unpack'(V2)))))))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4533-8873--in--un--parseNamespace'(V0) -> ('case--rawTokens,parseNamespace-8891'(V0, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespacedIdent'(V0)))).
'nested--4533-8872--in--un--parseIdent'(V0) -> ('case--rawTokens,parseIdent-8880'(V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V3, V4)) end end}, V0, ('un--keywords'()))))).
'nested--4749-9101--in--un--notComment'(V0, V1, V2) -> ('case--lexTo,notComment-9106'(V0, V1, V2, case V2 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--4366-8706--in--un--fromBin'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case V2 of 0 -> (2 * ('nested--4366-8706--in--un--fromBin'(V0, V3))); 1 -> (1 + (2 * ('nested--4366-8706--in--un--fromBin'(V0, V3)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4366-8705--in--un--castBin'(V0, V1) -> case V1 of $1 -> 1; _ -> 0 end.
'dn--un--show_Show__Token'(V0) -> case V0 of {'Idris.Parser.Lexer.Source.CharLit', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"character "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V1)))) end(E0)); {'Idris.Parser.Lexer.Source.DoubleLit', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"double "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Double'(V2)))) end(E1)); {'Idris.Parser.Lexer.Source.IntegerLit', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"literal "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(V3)))) end(E2)); {'Idris.Parser.Lexer.Source.StringLit', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"string "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V4)))) end(E3)); {'Idris.Parser.Lexer.Source.HoleIdent', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"hole identifier "/utf8>>, V5)) end(E4)); {'Idris.Parser.Lexer.Source.Ident', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"identifier "/utf8>>, V6)) end(E5)); {'Idris.Parser.Lexer.Source.DotSepIdent', E6, E7} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"namespaced identifier "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show__Namespace'(V7)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V8)))))))) end(E6, E7)); {'Idris.Parser.Lexer.Source.DotIdent', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"dot+identifier "/utf8>>, V9)) end(E8)); {'Idris.Parser.Lexer.Source.Symbol', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"symbol "/utf8>>, V10)) end(E9)); {'Idris.Parser.Lexer.Source.Comment', E10} -> (fun (V11) -> <<"comment"/utf8>> end(E10)); {'Idris.Parser.Lexer.Source.DocComment', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"doc comment: \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, <<"\x{22}"/utf8>>)))) end(E11)); {'Idris.Parser.Lexer.Source.CGDirective', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"CGDirective "/utf8>>, V13)) end(E12)); {'Idris.Parser.Lexer.Source.EndInput'} -> (fun () -> <<"end of input"/utf8>> end()); {'Idris.Parser.Lexer.Source.Keyword', E13} -> (fun (V14) -> V14 end(E13)); {'Idris.Parser.Lexer.Source.Pragma', E14} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"pragma "/utf8>>, V15)) end(E14)); {'Idris.Parser.Lexer.Source.Unrecognised', E15} -> (fun (V16) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Unrecognised "/utf8>>, V16)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__Token'(V0, V1) -> ('dn--un--show_Show__Token'(V1)).
'dn--un--pretty_Pretty__Token'(V0, V1) -> case V1 of {'Idris.Parser.Lexer.Source.CharLit', E0} -> (fun (V2) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"character"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--squotes'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V2)))))) end(E0)); {'Idris.Parser.Lexer.Source.DoubleLit', E1} -> (fun (V3) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"double"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Double'('erased', V3)))) end(E1)); {'Idris.Parser.Lexer.Source.IntegerLit', E2} -> (fun (V4) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"literal"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Integer'('erased', V4)))) end(E2)); {'Idris.Parser.Lexer.Source.StringLit', E3} -> (fun (V5) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"string"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V5)))))) end(E3)); {'Idris.Parser.Lexer.Source.HoleIdent', E4} -> (fun (V6) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"hole identifier"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V6)))) end(E4)); {'Idris.Parser.Lexer.Source.Ident', E5} -> (fun (V7) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"identifier"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V7)))) end(E5)); {'Idris.Parser.Lexer.Source.DotSepIdent', E6, E7} -> (fun (V8, V9) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"namespaced identifier"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty__Namespace'('erased', V8)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V9)))))) end(E6, E7)); {'Idris.Parser.Lexer.Source.DotIdent', E8} -> (fun (V10) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"dot+identifier"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V10)))) end(E8)); {'Idris.Parser.Lexer.Source.Symbol', E9} -> (fun (V11) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"symbol"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V11)))) end(E9)); {'Idris.Parser.Lexer.Source.Comment', E10} -> (fun (V12) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"comment"/utf8>>)) end(E10)); {'Idris.Parser.Lexer.Source.DocComment', E11} -> (fun (V13) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"doc comment:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V13)))))) end(E11)); {'Idris.Parser.Lexer.Source.CGDirective', E12} -> (fun (V14) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"CGDirective"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V14)))) end(E12)); {'Idris.Parser.Lexer.Source.EndInput'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"end of input"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.Keyword', E13} -> (fun (V15) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V15)) end(E13)); {'Idris.Parser.Lexer.Source.Pragma', E14} -> (fun (V16) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"pragma"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V16)))) end(E14)); {'Idris.Parser.Lexer.Source.Unrecognised', E15} -> (fun (V17) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"Unrecognised"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V17)))) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty__Token'(V0, V1, V2) -> ('dn--un--pretty_Pretty__Token'('erased', V2)).
'dn--un--__Impl_Show_Token'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__Token'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Token'() -> {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty__Token'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty__Token'('erased', V3, V4)) end end end}.
'un--validSymbol'() -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V0) -> ('un--isOpChar'(V0)) end)))).
'un--toEndComment'(V0) -> case V0 of 0 -> ('Idris.Idris2.Text.Lexer.Core':'un--empty'()); _ -> begin (V1 = (V0 - 1)), ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V2) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V2, $-)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V2, ${)), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V2, $\x{22})) end)) end)) end)))), fun () -> ('un--toEndComment'((1 + V1))) end}, ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'(${)), fun () -> ('un--singleBrace'(V1)) end}, ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($-)), fun () -> ('un--singleDash'(V1)) end}, {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--stringLit'()), fun () -> ('un--toEndComment'((1 + V1))) end})))))) end end.
'un--symbols'() -> [<<".("/utf8>> | [<<"@{"/utf8>> | [<<"[|"/utf8>> | [<<"|]"/utf8>> | [<<"("/utf8>> | [<<")"/utf8>> | [<<"{"/utf8>> | [<<"}}"/utf8>> | [<<"}"/utf8>> | [<<"["/utf8>> | [<<"]"/utf8>> | [<<","/utf8>> | [<<";"/utf8>> | [<<"_"/utf8>> | [<<"`("/utf8>> | [<<"`{{"/utf8>> | [<<"`["/utf8>> | [<<"`"/utf8>> | []]]]]]]]]]]]]]]]]]].
'un--singleDash'(V0) -> ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($-)), fun () -> ('un--doubleDash'(V0)) end}, ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($})), fun () -> ('un--toEndComment'(V0)) end}, ('un--toEndComment'((1 + V0))))))).
'un--singleBrace'(V0) -> ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($-)), fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--is'($-)))) end}, fun () -> ('un--singleDash'((1 + V0))) end}, ('un--toEndComment'((1 + V0))))).
'un--reservedSymbols'() -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--symbols'()), [<<"%"/utf8>> | [<<"\x{5c}"/utf8>> | [<<":"/utf8>> | [<<"="/utf8>> | [<<":="/utf8>> | [<<"|"/utf8>> | [<<"|||"/utf8>> | [<<"<-"/utf8>> | [<<"->"/utf8>> | [<<"=>"/utf8>> | [<<"?"/utf8>> | [<<"!"/utf8>> | [<<"&"/utf8>> | [<<"**"/utf8>> | [<<".."/utf8>> | [<<"~"/utf8>> | []]]]]]]]]]]]]]]]])).
'un--rawTokens'() -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--comment'()), fun (V0) -> {'Idris.Parser.Lexer.Source.Comment', V0} end} | [{'Idris.Builtin.MkPair', ('un--blockComment'()), fun (V1) -> {'Idris.Parser.Lexer.Source.Comment', V1} end} | [{'Idris.Builtin.MkPair', ('un--docComment'()), fun (V2) -> {'Idris.Parser.Lexer.Source.DocComment', ('Idris.Idris2.Data.String.Extra':'un--drop'((1 + (1 + (1 + 0))), V2))} end} | [{'Idris.Builtin.MkPair', ('un--cgDirective'()), fun (V3) -> ('un--mkDirective'(V3)) end} | [{'Idris.Builtin.MkPair', ('un--holeIdent'()), fun (V4) -> {'Idris.Parser.Lexer.Source.HoleIdent', ('Idris.Idris2.Data.Strings':'un--strTail'(V4))} end} | []]]]]], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V5) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--exact'(V5)), fun (V6) -> {'Idris.Parser.Lexer.Source.Symbol', V6} end} end, ('un--symbols'()))), [{'Idris.Builtin.MkPair', ('un--doubleLit'()), fun (V7) -> {'Idris.Parser.Lexer.Source.DoubleLit', ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__String_Double'(V7))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--binLit'()), fun (V8) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('un--fromBinLit'(V8))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--hexLit'()), fun (V9) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('un--fromHexLit'(V9))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--octLit'()), fun (V10) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('un--fromOctLit'(V10))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--digits'()), fun (V11) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__String_Integer'(V11))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--stringLit'()), fun (V12) -> {'Idris.Parser.Lexer.Source.StringLit', ('Idris.Idris2.Utils.String':'un--stripQuotes'(V12))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--charLit'()), fun (V13) -> {'Idris.Parser.Lexer.Source.CharLit', ('Idris.Idris2.Utils.String':'un--stripQuotes'(V13))} end} | [{'Idris.Builtin.MkPair', ('un--dotIdent'()), fun (V14) -> {'Idris.Parser.Lexer.Source.DotIdent', ('Idris.Idris2.Data.Strings':'un--strTail'(V14))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--namespacedIdent'()), fun (V15) -> ('nested--4533-8873--in--un--parseNamespace'(V15)) end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()), fun (V16) -> ('nested--4533-8872--in--un--parseIdent'(V16)) end} | [{'Idris.Builtin.MkPair', ('un--pragma'()), fun (V17) -> {'Idris.Parser.Lexer.Source.Pragma', ('Idris.Idris2.Data.Strings':'un--strTail'(V17))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--space'()), fun (V18) -> {'Idris.Parser.Lexer.Source.Comment', V18} end} | [{'Idris.Builtin.MkPair', ('un--validSymbol'()), fun (V19) -> {'Idris.Parser.Lexer.Source.Symbol', V19} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Lexer':'un--symbol'()), fun (V20) -> {'Idris.Parser.Lexer.Source.Unrecognised', V20} end} | []]]]]]]]]]]]]]])))).
'un--pragma'() -> {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($%)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--mkDirective'(V0) -> {'Idris.Parser.Lexer.Source.CGDirective', ('Idris.Idris2.Data.Strings':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + (1 + (1 + 0))), ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V0)), V0))))}.
'un--lexTo'(V0, V1) -> ('case--lexTo-9131'(V1, V0, ('Idris.Idris2.Text.Lexer.Core':'un--lexTo'('erased', V0, ('un--rawTokens'()), V1)))).
'un--lex'(V0) -> ('un--lexTo'(fun (V1) -> 1 end, V0)).
'un--keywords'() -> [<<"data"/utf8>> | [<<"module"/utf8>> | [<<"where"/utf8>> | [<<"let"/utf8>> | [<<"in"/utf8>> | [<<"do"/utf8>> | [<<"record"/utf8>> | [<<"auto"/utf8>> | [<<"default"/utf8>> | [<<"implicit"/utf8>> | [<<"mutual"/utf8>> | [<<"namespace"/utf8>> | [<<"parameters"/utf8>> | [<<"with"/utf8>> | [<<"impossible"/utf8>> | [<<"case"/utf8>> | [<<"of"/utf8>> | [<<"if"/utf8>> | [<<"then"/utf8>> | [<<"else"/utf8>> | [<<"forall"/utf8>> | [<<"rewrite"/utf8>> | [<<"using"/utf8>> | [<<"interface"/utf8>> | [<<"implementation"/utf8>> | [<<"open"/utf8>> | [<<"import"/utf8>> | [<<"public"/utf8>> | [<<"export"/utf8>> | [<<"private"/utf8>> | [<<"infixl"/utf8>> | [<<"infixr"/utf8>> | [<<"infix"/utf8>> | [<<"prefix"/utf8>> | [<<"total"/utf8>> | [<<"partial"/utf8>> | [<<"covering"/utf8>> | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--isOpChar'(V0) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Char'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Char'(V3, V4)) end end}, V0, ('Idris.Idris2.Prelude.Types':'un--unpack'(<<":!#$%&*+./<=>?@\x{5c}^|-~"/utf8>>)))).
'un--holeIdent'() -> {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($?)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--fromOctLit'(V0) -> ('case--fromOctLit-8837'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord__Nat'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V0)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(2)))))).
'un--fromHexLit'(V0) -> ('case--fromHexLit-8793'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord__Nat'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V0)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(2)))))).
'un--fromBinLit'(V0) -> ('case--fromBinLit-8750'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord__Nat'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V0)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(2)))))).
'un--doubleLit'() -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--digits'()), fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($.)) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--digits'()) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--opt'({'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($e)), fun () -> ('Idris.Idris2.Text.Lexer':'un--opt'(('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', ('Idris.Idris2.Text.Lexer':'un--is'($-)), ('Idris.Idris2.Text.Lexer':'un--is'($+)))))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--digits'()) end})) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--digits'()), fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($.)) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--digits'()) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--opt'({'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($e)), fun () -> ('Idris.Idris2.Text.Lexer':'un--opt'(('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', ('Idris.Idris2.Text.Lexer':'un--is'($-)), ('Idris.Idris2.Text.Lexer':'un--is'($+)))))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--digits'()) end})) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--doubleDash'(V0) -> {'Idris.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--is'($-)))), ('Idris.Idris2.Text.Lexer':'un--choice'('erased', 0, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V8, V9, V10)) end end end end end}, [{'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($})), fun () -> ('un--toEndComment'(V0)) end} | [{'Idris.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($\x{a})))), ('un--toEndComment'((1 + V0)))} | []]]))}.
'un--dotIdent'() -> {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($.)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--docComment'() -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($|)), fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($\x{a})))) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'($|)), fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($\x{a})))) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cgDirective'() -> {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--exact'(<<"%cg"/utf8>>)), fun () -> ('Idris.Idris2.Text.Lexer.Core':'un--<|>'('erased', 'erased', case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)), fun () -> 1 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V0) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V0)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($})))) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V2)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V3)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($})))) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($})) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V4)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V5) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V5)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($})))) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) of 1 -> {'Idris.Text.Lexer.Core.SeqEmpty', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V6)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; 0 -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Text.Lexer':'un--some'(('Idris.Idris2.Text.Lexer.Core':'un--pred'(fun (V7) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V7)) end)))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'(${)) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($})))) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($})) end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Text.Lexer':'un--many'(('Idris.Idris2.Text.Lexer':'un--isNot'($\x{a})))))) end}.
'un--blockComment'() -> {'Idris.Text.Lexer.Core.SeqEat', {'Idris.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Text.Lexer':'un--is'(${)), fun () -> ('Idris.Idris2.Text.Lexer':'un--is'($-)) end}, fun () -> ('un--toEndComment'((1 + 0))) end}.
