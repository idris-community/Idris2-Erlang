-module('Idris.Idris2.Idris.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--nonEmptyCommand-14993'/1,
  'case--help-14948'/1,
  'case--setOption-13081'/1,
  'case--progHdr-12819'/3,
  'case--prog-12701'/4,
  'case--import_-12578'/5,
  'case--collectDefs-12391'/4,
  'case--topDecl-12294'/4,
  'case--fixDecl-11933'/4,
  'case--claim-11793'/4,
  'case--recordParam-11463'/6,
  'case--recordParam-11419'/8,
  'case--fieldDecl,fieldBody-10987'/7,
  'case--ifaceDecl-10628'/11,
  'case--usingDecls-9646'/4,
  'case--paramDecls-9456'/4,
  'case--transformDecl-9213'/4,
  'case--namespaceDecl-9093'/4,
  'case--stripBraces,drop-8081'/5,
  'case--dataDecl-8046'/4,
  'case--dataDeclBody-7954'/4,
  'case--dataBody-7816'/9,
  'case--simpleData-7558'/7,
  'case--simpleCon-7410'/6,
  'case--clause-7243'/5,
  'case--parseRHS-7094'/10,
  'case--parseRHS-7060'/9,
  'case--tyDecl-6785'/6,
  'case--doAct-6347'/6,
  'case--doAct-6307'/5,
  'case--validPatternVar-6013'/2,
  'case--doBlock-5940'/4,
  'case--rewrite_-5851'/4,
  'case--if_-5528'/5,
  'case--lambdaCase-5301'/4,
  'case--case_-5205'/4,
  'case--letBlock,letBinder-4949'/4,
  'case--pibindList-4375'/4,
  'case--simplerExpr-4008'/4,
  'case--simplerExpr-3986'/4,
  'case--case block in simpleExpr-3410'/6,
  'case--simpleExpr-3393'/4,
  'case--case block in nonEmptyTuple,mergePairs-3176'/14,
  'case--nonEmptyTuple,mergePairs-3142'/11,
  'case--nonEmptyTuple,optionalPair-3039'/8,
  'case--listExpr-2970'/6,
  'case--bracketedExpr-2682'/6,
  'case--dpairType-2263'/6,
  'case--opExpr-2135'/5,
  'case--opExpr-2112'/6,
  'case--with_-2020'/4,
  'case--argExpr-1816'/5,
  'case--case block in argExpr-1790'/5,
  'case--argExpr-1741'/4,
  'case--argExpr,braceArgs-1621'/8,
  'case--argExpr,braceArgs-1569'/10,
  'case--appExpr-1365'/5,
  'case--appExpr-1346'/5,
  'case--pnoeq-756'/1,
  'nested--11458-1850--in--un--singleName'/2,
  'nested--11500-5648--in--un--recFieldCompat'/3,
  'nested--17117-7124--in--un--parseWithArg'/3,
  'nested--24431-14485--in--un--parse'/3,
  'nested--24365-14412--in--un--parse'/3,
  'nested--24318-14358--in--un--parse'/3,
  'nested--24246-14278--in--un--parse'/3,
  'nested--24147-14168--in--un--parse'/4,
  'nested--24096-14110--in--un--parse'/3,
  'nested--24045-14053--in--un--parse'/3,
  'nested--23998-14000--in--un--parse'/3,
  'nested--23951-13947--in--un--parse'/3,
  'nested--23902-13892--in--un--parse'/3,
  'nested--23862-13847--in--un--parse'/3,
  'nested--11471-3005--in--un--optionalPair'/7,
  'nested--24431-14484--in--un--names'/3,
  'nested--24365-14411--in--un--names'/3,
  'nested--24318-14357--in--un--names'/3,
  'nested--24246-14277--in--un--names'/3,
  'nested--24147-14167--in--un--names'/4,
  'nested--24096-14109--in--un--names'/3,
  'nested--24045-14052--in--un--names'/3,
  'nested--23998-13999--in--un--names'/3,
  'nested--23951-13946--in--un--names'/3,
  'nested--23902-13891--in--un--names'/3,
  'nested--23862-13846--in--un--names'/3,
  'nested--11458-1851--in--un--nameList'/2,
  'nested--11508-6534--in--un--mkPi'/5,
  'nested--11471-3006--in--un--mergePairs'/9,
  'nested--11491-4902--in--un--letDecl'/2,
  'nested--11491-4901--in--un--letBinder'/2,
  'nested--11471-3003--in--un--lams'/7,
  'nested--11500-5647--in--un--fieldName'/4,
  'nested--21057-10951--in--un--fieldBody'/4,
  'nested--18357-8066--in--un--drop'/3,
  'nested--21591-11498--in--un--ctor'/3,
  'nested--11471-3004--in--un--buildOutput'/8,
  'nested--11457-1393--in--un--braceArgs'/5,
  'nested--11482-4165--in--un--binderName'/2,
  'nested--11490-4826--in--un--bindAll'/4,
  'nested--11456-1193--in--un--applyExpImp'/7,
  'nested--17117-7123--in--un--applyArgs'/5,
  'dn--un--show_Show__CmdArg'/1,
  'dn--un--showPrec_Show__CmdArg'/2,
  'dn--un--__Impl_Show_CmdArg'/0,
  'un--with_'/2,
  'un--withFlags'/0,
  'un--whereBlock'/2,
  'un--visibility'/0,
  'un--visOption'/0,
  'un--visOpt'/1,
  'un--validPatternVar'/1,
  'un--usingDecls'/2,
  'un--typeExpr'/3,
  'un--tyDecl'/3,
  'un--tuple'/5,
  'un--transformDecl'/2,
  'un--totalityOpt'/0,
  'un--topDecl'/2,
  'un--stripBraces'/1,
  'un--stringArgCmd'/3,
  'un--simplerExpr'/2,
  'un--simpleExpr'/2,
  'un--simpleData'/5,
  'un--simpleCon'/3,
  'un--setVarOption'/0,
  'un--setOption'/1,
  'un--runParseCmd'/1,
  'un--runElabDecl'/2,
  'un--rewrite_'/2,
  'un--replCmd'/1,
  'un--record_'/2,
  'un--recordParam'/2,
  'un--recordDecl'/2,
  'un--progHdr'/1,
  'un--prog'/1,
  'un--pnowith'/0,
  'un--pnoeq'/1,
  'un--plhs'/0,
  'un--pibindListName'/2,
  'un--pibindList'/2,
  'un--pibindAll'/4,
  'un--pdef'/0,
  'un--patAlt'/2,
  'un--parserCommandsForHelp'/0,
  'un--parseRHS'/7,
  'un--parseMode'/0,
  'un--paramDecls'/2,
  'un--optArgCmd'/4,
  'un--opExpr'/3,
  'un--onoff'/0,
  'un--onOffArgCmd'/3,
  'un--nonEmptyTuple'/5,
  'un--nonEmptyCommand'/0,
  'un--noArgCmd'/3,
  'un--nestedDpair'/4,
  'un--namespaceHead'/0,
  'un--namespaceDecl'/2,
  'un--nameArgCmd'/3,
  'un--mutualDecls'/2,
  'un--multiplicity'/0,
  'un--moduleArgCmd'/3,
  'un--mkTyConType'/2,
  'un--mkDataConType'/3,
  'un--loggingArgCmd'/3,
  'un--listRange'/5,
  'un--listExpr'/4,
  'un--let_'/2,
  'un--letBlock'/2,
  'un--lazy'/2,
  'un--lambdaCase'/2,
  'un--lam'/2,
  'un--import_'/2,
  'un--implicitPi'/2,
  'un--implDecl'/2,
  'un--implBinds'/2,
  'un--ifaceParam'/2,
  'un--ifaceDecl'/2,
  'un--if_'/2,
  'un--iOperator'/0,
  'un--help'/0,
  'un--getVisibility'/2,
  'un--getMult'/1,
  'un--getInitRange'/1,
  'un--gadtData'/6,
  'un--forall_'/2,
  'un--fnOpt'/0,
  'un--fnDirectOpt'/1,
  'un--fixDecl'/2,
  'un--fix'/0,
  'un--fieldDecl'/2,
  'un--field'/3,
  'un--extractNames'/1,
  'un--extension'/0,
  'un--exprArgCmd'/3,
  'un--expr'/3,
  'un--explicitPi'/2,
  'un--eval'/0,
  'un--editCmd'/0,
  'un--dpairType'/4,
  'un--doBlock'/2,
  'un--doAct'/2,
  'un--directiveDecl'/2,
  'un--directive'/2,
  'un--definition'/2,
  'un--defaultImplicitPi'/2,
  'un--declsArgCmd'/3,
  'un--dataOpt'/0,
  'un--dataDeclBody'/2,
  'un--dataDecl'/2,
  'un--dataBody'/7,
  'un--continueWith'/2,
  'un--constraints'/2,
  'un--compileArgsCmd'/3,
  'un--commitKeyword'/2,
  'un--command'/0,
  'un--collectDefs'/1,
  'un--clause'/3,
  'un--claim'/2,
  'un--case_'/2,
  'un--caseRHS'/5,
  'un--caseAlt'/2,
  'un--bracketedExpr'/4,
  'un--binder'/2,
  'un--bindSymbol'/0,
  'un--bindList'/2,
  'un--autoNumberArgCmd'/3,
  'un--autoImplicitPi'/2,
  'un--atom'/1,
  'un--argExpr'/3,
  'un--appExpr'/3
]).
'case--nonEmptyCommand-14993'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> V6 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--help-14948'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":"/utf8>>, V7)) end, V1)), {'Idris.Builtin.MkPair', V3, V5}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOption-13081'(V0) -> case V0 of 0 -> fun () -> ('un--setVarOption'()) end; 1 -> fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Unrecognised option"/utf8>>} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--progHdr-12819'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V1)), V5, V6, V3, []}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--prog-12701'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V1)), V6, V7, V4, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V15, V16, V17)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V18, V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V2))))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--import_-12578'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V5, V7, V8}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--collectDefs-12391'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V19 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V0, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V6)) end, V4))))))), begin (V23 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', fun (V20) -> fun (V21) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> {'Idris.Core.FC.EmptyFC'} end, ('Idris.Idris2.Core.FC':'un--mergeFC'(V20, V21)))) end end, V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V22)) end, V4))))), [{'Idris.Idris.Syntax.PDef', V23, V19} | ('un--collectDefs'(V5))] end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--topDecl-12294'(V0, V1, V2, V3) -> case V3 of {'Idris.Parser.Lexer.Source.CGDirective', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Just', V4} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--fixDecl-11933'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> {'Idris.Idris.Syntax.PFixity', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V6)), V8} end, V7))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--claim-11793'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V10, V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PClaim', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V10, V6, V8, V11}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--recordParam-11463'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', case V8 of {'Idris.Text.Bounded.MkBounded', E4, E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', {'Idris.Core.TT.Explicit'}, V9}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--recordParam-11419'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> {'Idris.Builtin.MkPair', case V10 of {'Idris.Text.Bounded.MkBounded', E4, E5, E6, E7, E8, E9} -> (fun (V12, V13, V14, V15, V16, V17) -> V12 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V4, V11}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fieldDecl,fieldBody-10987'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--ifaceDecl-10628'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> {'Idris.Builtin.MkPair', V13, V12} end, V11)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--usingDecls-9646'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUsing', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V13, V14, V15)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V16, V17)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V5))))}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--paramDecls-9456'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PParameters', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V13, V14, V15)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V16, V17)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V5))))}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--transformDecl-9213'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PTransform', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V6, V7}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--namespaceDecl-9093'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PNamespace', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V6, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V15, V16, V17)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V18, V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V7))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--stripBraces,drop-8081'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('nested--18357-8066--in--un--drop'(V0, V3, V2)); 1 -> [V1 | V2]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dataDecl-8046'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PData', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V6, V7}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dataDeclBody-7954'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--simpleData'('erased', V1, V2, V5, V0)), fun () -> ('un--gadtData'('erased', V1, V4, V2, V5, V0)) end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dataBody-7816'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V6, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V4, V7)))), V3, V1, V9, V10}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--simpleData-7558'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V5)))), V2, ('un--mkTyConType'(V9, V7)), [], V10}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--simpleCon-7410'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V2, V3))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Named arguments not allowed in ADT constructors"/utf8>>} end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V13, V14)) end end end end, fun (V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPTy', V10, V8, V6, V15}} end, ('un--mkDataConType'(V10, V1, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V23, V24, V25)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V26, V27)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V9)))))))) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clause-7243'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V2, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V8)))), fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Wrong number of \x{27}with\x{27} arguments"/utf8>>} end, fun () -> ('un--parseRHS'('erased', V2, V1, V3, V5, V0, ('nested--17117-7123--in--un--applyArgs'(V0, V1, V2, V7, V8)))) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseRHS-7094'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V5, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V4, V7)))), V1, V10, V11}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseRHS-7060'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkWithClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V5, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V4, V7)))), V1, V11, case V9 of {'Idris.Text.Bounded.MkBounded', E4, E5, E6, E7, E8, E9} -> (fun (V13, V14, V15, V16, V17, V18) -> V13 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tyDecl-6785'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPTy', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V3)), V8, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, V6)), V9}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doAct-6347'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoBindPat', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V3)))), case V2 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V7} | []]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doAct-6307'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoBind', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V5, V6} | []]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--validPatternVar-6013'(V0, V1) -> case V1 of 0 -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkUnit'}}; 1 -> {'Idris.Text.Parser.Core.Fail', 1, <<"Not a pattern variable"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doBlock-5940'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of <<"do"/utf8>> -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Commit'}, fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V7) -> ('un--doAct'(V1, V7)) end))}, fun (V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDoBlock', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V8)))), V4, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V22, V23, V24)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V25, V26)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(case V8 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}} end} end}; _ -> {'Idris.Text.Parser.Core.Fail', 1, <<"Not a namespaced \x{27}do\x{27}"/utf8>>} end end(E0, E1)); _ -> {'Idris.Text.Parser.Core.Fail', 1, <<"Not a namespaced \x{27}do\x{27}"/utf8>>} end.
'case--rewrite_-5851'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V5}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--if_-5528'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PIfThenElse', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V5, V7, V8}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lambdaCase-5301'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', begin (V6 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2))), begin (V7 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V4))), begin (V8 = {'Idris.Core.Name.MN', <<"lcase"/utf8>>, 0}), {'Idris.Idris.Syntax.PLam', V7, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V7, V8}, {'Idris.Idris.Syntax.PInfer', V7}, {'Idris.Idris.Syntax.PCase', V6, {'Idris.Idris.Syntax.PRef', V7, V8}, V5}} end end end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case_-5205'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PCase', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V5}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--letBlock,letBinder-4949'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2))}, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V6) -> fun (V7) -> V7 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)))), fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V8, ('un--typeExpr'(('un--pnoeq'(('un--pdef'()))), V1, V0)))) end})), fun (V9) -> case ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end}, fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V1, V0)), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V12) -> ('un--patAlt'(V1, V12)) end)), fun (V13) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V4)), fun (V14) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V14, V5, V9, V11, V13}} end} end} end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end}, fun () -> fun (V15) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V1, V0)), fun () -> fun (V16) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V17) -> ('un--patAlt'(V1, V17)) end)), fun (V18) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V4)), fun (V19) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V19, V5, V9, V16, V18}} end} end} end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--pibindList-4375'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', fun (V8) -> {'Idris.Prelude.Types.Just', V8} end, V6)), V7}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--simplerExpr-4008'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PAs', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), {'Idris.Core.Name.UN', V4}, V5}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--simplerExpr-3986'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnifyLog', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V5}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in simpleExpr-3410'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> V3; _ -> {'Idris.Idris.Syntax.PPostfixApp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V3, V4} end.
'case--simpleExpr-3393'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', case V5 of [] -> V4; _ -> {'Idris.Idris.Syntax.PPostfixApp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V5} end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in nonEmptyTuple,mergePairs-3176'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V11, V14)), {'Idris.Idris.Syntax.PPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V6, V8)))), V12, V15}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nonEmptyTuple,mergePairs-3142'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> ('case--case block in nonEmptyTuple,mergePairs-3176'('erased', V1, V2, V3, V4, 'erased', V6, V7, V8, V9, V11, V13, V14, ('nested--11471-3006--in--un--mergePairs'('erased', V1, V2, V3, V4, 'erased', V11, V8, V7)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nonEmptyTuple,optionalPair-3039'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', [], case V8 of {'Idris.Text.Bounded.MkBounded', E1, E2, E3, E4, E5, E6} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V15 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, V5))), begin (V16 = {'Idris.Idris.Syntax.PRef', V15, {'Idris.Core.Name.MN', <<"__infixTupleSection"/utf8>>, V6}}), {'Idris.Builtin.MkPair', ((V6 + 1) rem 9223372036854775808), {'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V15, V16} | []], V16}} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--listExpr-2970'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PComprehension', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V3, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V4)))), V6, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V15, V16, V17)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V18, V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V7))}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bracketedExpr-2682'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSectionL', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V3, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V4)))), V6, V7}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dpairType-2263'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nestedDpair'('erased', V3, V4, V1)), fun () -> ('un--expr'(('un--pdef'()), V3, V1)) end}}, fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V3, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V9)))), {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V3, V4)), {'Idris.Core.Name.UN', V6}}, V7, case V9 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--opExpr-2135'(V0, V1, V2, V3, V4) -> case V4 of 0 -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V5) -> fun (V6) -> V6 end end, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V7) -> fun (V8) -> V8 end end, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V0)))), fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V9, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)))) end})), fun (V10) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V10, ('un--opExpr'(V2, V1, V0)))) end}}, fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.POp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V11)))), {'Idris.Core.Name.UN', <<"="/utf8>>}, case V3 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> V12 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V11 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V18, V19, V20, V21, V22, V23) -> V18 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V24) -> fun (V25) -> V25 end end, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V26) -> fun (V27) -> V27 end end, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V0)))), fun (V28) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V28, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)))) end})), fun (V29) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V29, ('un--opExpr'(V2, V1, V0)))) end}}, fun () -> fun (V30) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.POp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V30)))), {'Idris.Core.Name.UN', <<"="/utf8>>}, case V3 of {'Idris.Text.Bounded.MkBounded', E12, E13, E14, E15, E16, E17} -> (fun (V31, V32, V33, V34, V35, V36) -> V31 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V30 of {'Idris.Text.Bounded.MkBounded', E18, E19, E20, E21, E22, E23} -> (fun (V37, V38, V39, V40, V41, V42) -> V37 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> {'Idris.Text.Parser.Core.Fail', 1, <<"= not allowed"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--opExpr-2112'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.POp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V4)))), V6, case V3 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with_-2020'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PWithUnambigNames', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V2)), V4, V5}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--argExpr-1816'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.PHole', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedExpArg', {'Idris.Idris.Syntax.PHole', V5, 0, V7}} | []]} end(E0, E1, E2)); _ -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedExpArg', V4} | []]} end.
'case--case block in argExpr-1790'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Idris.Parser.MkParseOpts', E0, E1} -> (fun (V5, V6) -> {'Idris.Idris.Parser.MkParseOpts', V5, 1} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--argExpr-1741'(V0, V1, V2, V3) -> case V3 of 0 -> fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V0)), fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(case V2 of {'Idris.Idris.Parser.MkParseOpts', E0, E1} -> (fun (V6, V7) -> {'Idris.Idris.Parser.MkParseOpts', V6, 1} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V0)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.WithArg', V8} | []]} end end} end end} end} end; 1 -> fun () -> {'Idris.Text.Parser.Core.Fail', 1, <<"| not allowed here"/utf8>>} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--argExpr,braceArgs-1621'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>))}, fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.NamedArg', {'Idris.Core.Name.UN', <<"_"/utf8>>}, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, V9))}} | []]} end end} end end}; 1 -> {'Idris.Text.Parser.Core.Fail', 1, <<"non-empty list required"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--argExpr,braceArgs-1569'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> [{'Idris.Idris.Parser.NamedArg', {'Idris.Core.Name.UN', <<"_"/utf8>>}, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V5, V8))))}} | []]; 1 -> V7; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--appExpr-1365'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Text.Parser.Core.Empty', ('nested--11456-1193--in--un--applyExpImp'(V0, V1, V2, ('Idris.Idris2.Text.Bounded':'un--start'('erased', V3)), ('Idris.Idris2.Text.Bounded':'un--end'('erased', V3)), V5, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V6))))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--appExpr-1346'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrefixOp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V3)), V5, V6}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--pnoeq-756'(V0) -> case V0 of {'Idris.Idris.Parser.MkParseOpts', E0, E1} -> (fun (V1, V2) -> {'Idris.Idris.Parser.MkParseOpts', 1, V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11458-1850--in--un--singleName'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', [V2 | []]} end end}.
'nested--11500-5648--in--un--recFieldCompat'(V0, V1, V2) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'()), fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end} end}.
'nested--17117-7124--in--un--parseWithArg'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--expr'(('un--plhs'()), V1, V0))}, fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V4)), case V4 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V5, V6, V7, V8, V9, V10) -> V5 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end}.
'nested--24431-14485--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--optional'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V7, V8)) end end end end, fun (V9) -> fun (V10) -> {'Idris.Data.List1.:::', V9, V10} end end, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun (V11) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V11, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--aDotIdent'()))))) end})), fun (V12) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V13) -> {'Idris.Text.Parser.Core.Empty', (V1(('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V12, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V13))))))} end end} end} end end} end end}.
'nested--24365-14412--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), <<"(interactive)"/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', ((V1(V6))(V5))} end end} end end} end end} end end}.
'nested--24318-14358--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--onOffLit'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1(V5))} end end} end end} end end}.
'nested--24246-14278--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1({'Idris.Prelude.Types.Nothing'}))} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', (V1({'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V6))}))} end end} end} end end} end end}.
'nested--24147-14168--in--un--parse'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V3)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--setOption'(V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', (V2(V6))} end end} end end} end end}.
'nested--24096-14110--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--topDecl'(<<"(interactive)"/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1(V5))} end end} end end} end end}.
'nested--24045-14053--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), <<"(interactive)"/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1(V5))} end end} end end} end end}.
'nested--23998-14000--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1(V5))} end end} end end} end end}.
'nested--23951-13947--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--strLit'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1(V5))} end end} end end} end end}.
'nested--23902-13892--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', (V1(V5))} end end} end end} end end}.
'nested--23862-13847--in--un--parse'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--runParseCmd'(V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', V1} end end} end end}.
'nested--11471-3005--in--un--optionalPair'(V0, V1, V2, V3, V4, V5, V6) -> ('case--nonEmptyTuple,optionalPair-3039'('erased', V1, V2, V3, V4, V6, V5, case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--24431-14484--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--24365-14411--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--24318-14357--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--24246-14277--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--24147-14167--in--un--names'(V0, V1, V2, V3) -> ('un--extractNames'(V3)).
'nested--24096-14109--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--24045-14052--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--23998-13999--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--23951-13946--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--23902-13891--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--23862-13846--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--11458-1851--in--un--nameList'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', V4} end end} end end} end} end end}.
'nested--11508-6534--in--un--mkPi'(V0, V1, V2, V3, V4) -> case V4 of [] -> case V3 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V5, V6, V7, V8, V9, V10) -> V5 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E6 | E7] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V13, V14) -> {'Idris.Idris.Syntax.PPi', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V3)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), V13, {'Idris.Prelude.Types.Nothing'}, case V3 of {'Idris.Text.Bounded.MkBounded', E10, E11, E12, E13, E14, E15} -> (fun (V15, V16, V17, V18, V19, V20) -> V15 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--11508-6534--in--un--mkPi'(V0, V1, V2, V14, V12))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11471-3006--in--un--mergePairs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> {'Idris.Builtin.MkPair', [], {'Idris.Idris.Syntax.PUnit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V7))))}}; [E0 | E1] -> (fun (V9, V10) -> case V10 of [] -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('nested--11471-3005--in--un--optionalPair'('erased', V1, V2, V3, V4, V6, V9)))); _ -> ('case--nonEmptyTuple,mergePairs-3142'('erased', V1, V2, V3, V4, 'erased', V9, V10, V7, V6, ('nested--11471-3005--in--un--optionalPair'('erased', V1, V2, V3, V4, V6, V9)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11491-4902--in--un--letDecl'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, V5)) end end end end, fun (V6) -> ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V14, V15, V16)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V6)))) end, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V19) -> {'Idris.Text.Parser.Core.Try', ('un--topDecl'(V1, V19))} end)))).
'nested--11491-4901--in--un--letBinder'(V0, V1) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V4, V5)) end end end end, fun (V6) -> fun (V7) -> {'Idris.Builtin.MkPair', V6, V7} end end, ('un--multiplicity'()))), fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V8, ('un--expr'(('un--plhs'()), V1, V0)))) end}}, fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Empty', case V9 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V9))}, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V19) -> fun (V20) -> V20 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)))), fun (V21) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V21, ('un--typeExpr'(('un--pnoeq'(('un--pdef'()))), V1, V0)))) end})), fun (V22) -> case ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end}, fun () -> fun (V23) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V1, V0)), fun () -> fun (V24) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V25) -> ('un--patAlt'(V1, V25)) end)), fun (V26) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V17)), fun (V27) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V27, V18, V22, V24, V26}} end} end} end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end}, fun () -> fun (V28) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V1, V0)), fun () -> fun (V29) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V30) -> ('un--patAlt'(V1, V30)) end)), fun (V31) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V17)), fun (V32) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V32, V18, V22, V29, V31}} end} end} end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V35, V36)) end end end end, fun (V37) -> fun (V38) -> {'Idris.Builtin.MkPair', V37, V38} end end, ('un--multiplicity'()))), fun (V39) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V39, ('un--expr'(('un--plhs'()), V1, V0)))) end}}, fun () -> fun (V40) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Empty', case V40 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V41, V42, V43, V44, V45, V46) -> V41 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V47) -> case V47 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V48, V49) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V40))}, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V50) -> fun (V51) -> V51 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)))), fun (V52) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V52, ('un--typeExpr'(('un--pnoeq'(('un--pdef'()))), V1, V0)))) end})), fun (V53) -> case ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end}, fun () -> fun (V54) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V1, V0)), fun () -> fun (V55) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V56) -> ('un--patAlt'(V1, V56)) end)), fun (V57) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V48)), fun (V58) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V58, V49, V53, V55, V57}} end} end} end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end}, fun () -> fun (V59) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V1, V0)), fun () -> fun (V60) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V61) -> ('un--patAlt'(V1, V61)) end)), fun (V62) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V48)), fun (V63) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V63, V49, V53, V60, V62}} end} end} end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11471-3003--in--un--lams'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> V6; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> {'Idris.Idris.Syntax.PLam', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V10, {'Idris.Idris.Syntax.PInfer', V9}, ('nested--11471-3003--in--un--lams'('erased', V1, V2, V3, V4, V8, V6))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11500-5647--in--un--fieldName'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.UN', E0} -> (fun (V4) -> V4 end(E0)); {'Idris.Core.Name.RF', E1} -> (fun (V5) -> V5 end(E1)); _ -> <<"_impossible"/utf8>> end.
'nested--21057-10951--in--un--fieldBody'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--multiplicity'()), fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--getMult'(V4)), fun (V5) -> begin (V14 = ('case--fieldDecl,fieldBody-10987'(V0, V1, V3, V2, V4, V5, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V12, V13)) end end}}, V5))))), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V15) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V16) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V1, V0)), fun () -> fun (V17) -> {'Idris.Text.Parser.Core.Empty', fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> {'Idris.Idris.Syntax.MkField', V18, V2, V14, V3, V19, V17} end, V15)) end} end end} end end} end end} end end} end}}, fun () -> fun (V20) -> {'Idris.Text.Parser.Core.Empty', case V20 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V21, V22, V23, V24, V25, V26) -> (V21(('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V20)))) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'nested--18357-8066--in--un--drop'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> ('case--stripBraces,drop-8081'(V0, V3, V4, V1, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Char'(V1, V3)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21591-11498--in--un--ctor'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"constructor"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), fun (V5) -> {'Idris.Text.Parser.Core.Empty', V4} end} end end} end end}.
'nested--11471-3004--in--un--buildOutput'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> ('nested--11471-3003--in--un--lams'('erased', V1, V2, V3, V4, V8, {'Idris.Idris.Syntax.PPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V4, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V6)))), V1, V9})) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11457-1393--in--un--braceArgs'(V0, V1, V2, V3, V4) -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>))}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'())}, fun () -> fun (V6) -> ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> 1 end)), {'Idris.Idris.Parser.NamedArg', {'Idris.Core.Name.UN', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V3, V6)), {'Idris.Core.Name.UN', case V6 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V13, V14, V15, V16, V17, V18) -> V13 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V19) -> fun (V20) -> V20 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)))), fun (V21) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V21, ('un--expr'(('un--pdef'()), V3, V4)))) end}, fun () -> fun (V22) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.NamedArg', {'Idris.Core.Name.UN', case V6 of {'Idris.Text.Bounded.MkBounded', E12, E13, E14, E15, E16, E17} -> (fun (V23, V24, V25, V26, V27, V28) -> V23 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V22}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V29) -> fun (V30) -> V30 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)))), fun (V31) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V31, ('un--expr'(('un--pdef'()), V3, V4)))) end}, fun () -> fun (V32) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Parser.NamedArg', {'Idris.Core.Name.UN', case V6 of {'Idris.Text.Bounded.MkBounded', E18, E19, E20, E21, E22, E23} -> (fun (V33, V34, V35, V36, V37, V38) -> V33 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V32}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end})), fun (V39) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), [], ('case--argExpr,braceArgs-1621'(V0, V1, V2, V4, V3, V5, V39, ('Idris.Idris2.Data.List':'un--isCons'('erased', V39)))))), fun (V40) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>))}, fun () -> fun (V41) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', ('case--argExpr,braceArgs-1569'(V0, V1, V2, V4, V3, V5, V39, V40, V41, ('Idris.Idris2.Data.List':'un--isNil'('erased', V39))))}, fun (V42) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V42, V39))} end} end end} end} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"@{"/utf8>>)), fun () -> fun (V43) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V44) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V3, V4)), fun () -> fun (V45) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V46) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedAutoArg', V45} | []]} end end} end end} end} end end} end}.
'nested--11482-4165--in--un--binderName'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V4, {'Idris.Text.Parser.Core.Empty', <<"_"/utf8>>})) end} end}.
'nested--11490-4826--in--un--bindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.Idris.Syntax.PLam', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V8)), V6, {'Idris.Core.TT.Explicit'}, case V8 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, ('nested--11490-4826--in--un--bindAll'(V0, V1, V5, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11456-1193--in--un--applyExpImp'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> V5; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Idris.Parser.UnnamedExpArg', E2} -> (fun (V9) -> ('nested--11456-1193--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V9}, V8)) end(E2)); {'Idris.Idris.Parser.UnnamedAutoArg', E3} -> (fun (V10) -> ('nested--11456-1193--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PAutoApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V10}, V8)) end(E3)); {'Idris.Idris.Parser.NamedArg', E4, E5} -> (fun (V11, V12) -> ('nested--11456-1193--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PNamedApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V11, V12}, V8)) end(E4, E5)); {'Idris.Idris.Parser.WithArg', E6} -> (fun (V13) -> ('nested--11456-1193--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PWithApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V13}, V8)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17117-7123--in--un--applyArgs'(V0, V1, V2, V3, V4) -> case V4 of [] -> V3; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> ('nested--17117-7123--in--un--applyArgs'(V0, V1, V2, {'Idris.Idris.Syntax.PApp', V7, V3, V8}, V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__CmdArg'(V0) -> case V0 of {'Idris.Idris.Parser.NoArg'} -> (fun () -> <<""/utf8>> end()); {'Idris.Idris.Parser.NameArg'} -> (fun () -> <<"<name>"/utf8>> end()); {'Idris.Idris.Parser.ExprArg'} -> (fun () -> <<"<expr>"/utf8>> end()); {'Idris.Idris.Parser.DeclsArg'} -> (fun () -> <<"<decls>"/utf8>> end()); {'Idris.Idris.Parser.NumberArg'} -> (fun () -> <<"<number>"/utf8>> end()); {'Idris.Idris.Parser.AutoNumberArg'} -> (fun () -> <<"<number|auto>"/utf8>> end()); {'Idris.Idris.Parser.OptionArg'} -> (fun () -> <<"<option>"/utf8>> end()); {'Idris.Idris.Parser.FileArg'} -> (fun () -> <<"<file>"/utf8>> end()); {'Idris.Idris.Parser.ModuleArg'} -> (fun () -> <<"<module>"/utf8>> end()); {'Idris.Idris.Parser.StringArg'} -> (fun () -> <<"<string>"/utf8>> end()); {'Idris.Idris.Parser.OnOffArg'} -> (fun () -> <<"(on|off)"/utf8>> end()); {'Idris.Idris.Parser.Args', E0} -> (fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V2) -> ('dn--un--show_Show__CmdArg'(V2)) end, V1)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__CmdArg'(V0, V1) -> ('dn--un--show_Show__CmdArg'(V1)).
'dn--un--__Impl_Show_CmdArg'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__CmdArg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__CmdArg'(V1, V2)) end end}.
'un--with_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"with"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Alt', 0, 0, ('nested--11458-1850--in--un--singleName'(V1, V0)), fun () -> ('nested--11458-1851--in--un--nameList'(V1, V0)) end}, fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Source.Token'})), fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, V6}} end end} end} end end} end} end end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PWithUnambigNames', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V7)), V15, V16}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--withFlags'() -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"syntactic"/utf8>>)), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--withFlags'()), fun (V1) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.TTImp.TTImp.Syntactic'} | V1]} end} end end}, fun () -> {'Idris.Text.Parser.Core.Empty', []} end}.
'un--whereBlock'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'('erased', V1, fun (V3) -> ('un--topDecl'(V0, V3)) end)), fun (V4) -> {'Idris.Text.Parser.Core.Empty', ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V12, V13, V14)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V15, V16)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V4))))} end} end end}.
'un--visibility'() -> {'Idris.Text.Parser.Core.Alt', 0, 1, ('un--visOption'()), fun () -> {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Private'}} end}.
'un--visOption'() -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"public"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"export"/utf8>>)))) end})), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Public'}})) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V6) -> fun (V7) -> V7 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"export"/utf8>>)))), fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V8, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Export'}})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V9) -> fun (V10) -> V10 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"private"/utf8>>)))), fun (V11) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V11, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Private'}})) end} end} end}.
'un--visOpt'(V0) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--visOption'()), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Left', V1}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--fnOpt'()), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Right', V2}} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--fnDirectOpt'(V0)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Right', V3}} end end} end} end}.
'un--validPatternVar'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> ('case--validPatternVar-6013'(V1, ('Idris.Idris2.Utils.String':'un--lowerFirst'(V1)))) end(E0)); _ -> {'Idris.Text.Parser.Core.Fail', 1, <<"Not a pattern variable"/utf8>>} end.
'un--usingDecls'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"using"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, {'Idris.Prelude.Types.Nothing'}, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V5}}} end end} end end})), fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V7, V8}} end end} end})), fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V11) -> ('un--topDecl'(V0, V11)) end)), fun () -> fun (V12) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V9, V12}} end end} end end} end} end end} end} end end}}, fun () -> fun (V13) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V13 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V14, V15, V16, V17, V18, V19) -> V14 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V21, V22) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUsing', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V13)), V21, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V30, V31, V32)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V33, V34)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V22))))}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--typeExpr'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--opExpr'(V0, V1, V2))}, fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Alt', 0, 1, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', {'Idris.Text.Parser.Core.SeqEat', 0, ('un--bindSymbol'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--opExpr'(('un--pdef'()), V1, V2))}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V5, V6}} end end} end end})), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', ('nested--11508-6534--in--un--mkPi'(V2, V1, V0, V3, V7))} end end} end}, fun () -> {'Idris.Text.Parser.Core.Empty', case V3 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end} end end}.
'un--tyDecl'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.MustWork', {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V1, V2)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V6}}} end end}} end end} end end} end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V18, V19) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPTy', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V7)), V18, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, V16)), V19}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}.
'un--tuple'(V0, V1, V2, V3, V4) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nonEmptyTuple'('erased', V1, V2, V3, V4)), fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--continueWith'(V3, <<")"/utf8>>))}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PBracketed', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V5)))), V4}} end end} end}.
'un--transformDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"transform"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--strLit'()), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--plhs'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V6}}} end end} end end} end end} end end} end end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V17, V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PTransform', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V7)), V15, V17, V18}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--totalityOpt'() -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"partial"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.PartialOK'}})) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"total"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Total'}})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V6) -> fun (V7) -> V7 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"covering"/utf8>>)))), fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V8, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.CoveringOnly'}})) end} end} end}.
'un--topDecl'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--dataDecl'(V0, V1)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', [V2 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--claim'(V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', [V3 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--definition'(V0, V1)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', [V4 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--fixDecl'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--ifaceDecl'(V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', [V5 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--implDecl'(V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', [V6 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--recordDecl'(V0, V1)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', [V7 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--namespaceDecl'(V0, V1)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.Empty', [V8 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--mutualDecls'(V0, V1)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', [V9 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--paramDecls'(V0, V1)), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.Empty', [V10 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--usingDecls'(V0, V1)), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', [V11 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--runElabDecl'(V0, V1)), fun () -> fun (V12) -> {'Idris.Text.Parser.Core.Empty', [V12 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--transformDecl'(V0, V1)), fun () -> fun (V13) -> {'Idris.Text.Parser.Core.Empty', [V13 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--directiveDecl'(V0, V1)), fun () -> fun (V14) -> {'Idris.Text.Parser.Core.Empty', [V14 | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.Terminal', <<"Expected CG directive"/utf8>>, fun (V15) -> ('case--topDecl-12294'(V1, V0, V15, case V15 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V16, V17, V18, V19, V20, V21) -> V16 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end}}, fun () -> fun (V22) -> {'Idris.Text.Parser.Core.Empty', [begin (V30 = ('Idris.Idris2.Data.Strings':'un--span'(fun (V23) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V23)) end, case V22 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V24, V25, V26, V27, V28, V29) -> V24 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Idris.Syntax.PDirective', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V22)), {'Idris.Idris.Syntax.CGAction', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V30)), ('un--stripBraces'(('Idris.Idris2.Data.Strings':'un--trim'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V30))))))}} end | []]} end end}, fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Couldn\x{27}t parse declaration"/utf8>>} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--stripBraces'(V0) -> ('Idris.Idris2.Prelude.Types':'un--pack'(('nested--18357-8066--in--un--drop'(V0, ${, ('Idris.Idris2.Data.List':'un--reverse'('erased', ('nested--18357-8066--in--un--drop'(V0, $}, ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Prelude.Types':'un--unpack'(V0)))))))))))).
'un--stringArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--23951-13946--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.StringArg'}, {'Idris.Builtin.MkPair', V2, ('nested--23951-13947--in--un--parse'(V2, V1, V0))}}}.
'un--simplerExpr'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"@"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--simpleExpr'(V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V5}} end end} end} end end} end end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PAs', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6)), {'Idris.Core.Name.UN', V14}, V15}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--atom'(V0)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--binder'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--rewrite_'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--record_'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)), fun (V16) -> fun (V17) -> V16 end end, {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun (V18) -> fun (V19) -> V19 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V20) -> fun (V21) -> V21 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<".("/utf8>>)))), fun (V22) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V22, {'Idris.Text.Parser.Core.Commit'})) end})), fun (V23) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V23, ('un--expr'(('un--pdef'()), V0, V1)))) end})), fun (V24) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V24, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDotted', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V25)), case V25 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V26, V27, V28, V29, V30, V31) -> V26 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)), fun (V32) -> fun (V33) -> V32 end end, {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun (V34) -> fun (V35) -> V35 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V36) -> fun (V37) -> V37 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<".("/utf8>>)))), fun (V38) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V38, {'Idris.Text.Parser.Core.Commit'})) end})), fun (V39) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V39, ('un--expr'(('un--pdef'()), V0, V1)))) end})), fun (V40) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V40, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V41) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDotted', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V41)), case V41 of {'Idris.Text.Bounded.MkBounded', E14, E15, E16, E17, E18, E19} -> (fun (V42, V43, V44, V45, V46, V47) -> V42 end(E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V48) -> fun (V49) -> V48 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V50) -> fun (V51) -> V51 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`("/utf8>>)))), fun (V52) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V52, ('un--expr'(('un--pdef'()), V0, V1)))) end})), fun (V53) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V53, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V54) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuote', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V54)), case V54 of {'Idris.Text.Bounded.MkBounded', E20, E21, E22, E23, E24, E25} -> (fun (V55, V56, V57, V58, V59, V60) -> V55 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V61) -> fun (V62) -> V61 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V63) -> fun (V64) -> V64 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`("/utf8>>)))), fun (V65) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V65, ('un--expr'(('un--pdef'()), V0, V1)))) end})), fun (V66) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V66, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V67) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuote', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V67)), case V67 of {'Idris.Text.Bounded.MkBounded', E26, E27, E28, E29, E30, E31} -> (fun (V68, V69, V70, V71, V72, V73) -> V68 end(E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V74) -> fun (V75) -> V74 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V76) -> fun (V77) -> V77 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`{{"/utf8>>)))), fun (V78) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V78, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end})), fun (V79) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V79, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}}"/utf8>>)))) end}}, fun () -> fun (V80) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuoteName', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V80)), case V80 of {'Idris.Text.Bounded.MkBounded', E32, E33, E34, E35, E36, E37} -> (fun (V81, V82, V83, V84, V85, V86) -> V81 end(E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V87) -> fun (V88) -> V87 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V89) -> fun (V90) -> V90 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`{{"/utf8>>)))), fun (V91) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V91, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end})), fun (V92) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V92, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}}"/utf8>>)))) end}}, fun () -> fun (V93) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuoteName', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V93)), case V93 of {'Idris.Text.Bounded.MkBounded', E38, E39, E40, E41, E42, E43} -> (fun (V94, V95, V96, V97, V98, V99) -> V94 end(E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V100) -> fun (V101) -> V100 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V102) -> fun (V103) -> V103 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`["/utf8>>)))), fun (V104) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V104, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V105) -> ('un--topDecl'(V0, V105)) end)))) end})), fun (V106) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V106, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)))) end}}, fun () -> fun (V107) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuoteDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V107)), ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V116, V117, V118)) end end end end end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V121, V122, V123)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V124, V125)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(case V107 of {'Idris.Text.Bounded.MkBounded', E44, E45, E46, E47, E48, E49} -> (fun (V108, V109, V110, V111, V112, V113) -> V108 end(E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V126) -> fun (V127) -> V126 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V128) -> fun (V129) -> V129 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`["/utf8>>)))), fun (V130) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V130, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V131) -> ('un--topDecl'(V0, V131)) end)))) end})), fun (V132) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V132, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)))) end}}, fun () -> fun (V133) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuoteDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V133)), ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V142, V143, V144)) end end end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V147, V148, V149)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V150, V151)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(case V133 of {'Idris.Text.Bounded.MkBounded', E50, E51, E52, E53, E54, E55} -> (fun (V134, V135, V136, V137, V138, V139) -> V134 end(E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V152) -> fun (V153) -> V153 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"~"/utf8>>)))), fun (V154) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V154, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V155) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnquote', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V155)), case V155 of {'Idris.Text.Bounded.MkBounded', E56, E57, E58, E59, E60, E61} -> (fun (V156, V157, V158, V159, V160, V161) -> V156 end(E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V162) -> fun (V163) -> V163 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"~"/utf8>>)))), fun (V164) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V164, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V165) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnquote', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V165)), case V165 of {'Idris.Text.Bounded.MkBounded', E62, E63, E64, E65, E66, E67} -> (fun (V166, V167, V168, V169, V170, V171) -> V166 end(E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>))}, fun () -> fun (V172) -> ('un--bracketedExpr'('erased', V0, V172, V1)) end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>))}, fun () -> fun (V173) -> ('un--listExpr'('erased', V0, V173, V1)) end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V174) -> fun (V175) -> V175 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V176) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V176, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V177) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PBang', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V177)), case V177 of {'Idris.Text.Bounded.MkBounded', E68, E69, E70, E71, E72, E73} -> (fun (V178, V179, V180, V181, V182, V183) -> V178 end(E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V184) -> fun (V185) -> V185 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V186) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V186, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V187) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PBang', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V187)), case V187 of {'Idris.Text.Bounded.MkBounded', E74, E75, E76, E77, E78, E79} -> (fun (V188, V189, V190, V191, V192, V193) -> V188 end(E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V194) -> fun (V195) -> V194 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V196) -> fun (V197) -> V197 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[|"/utf8>>)))), fun (V198) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V198, ('un--expr'(('un--pdef'()), V0, V1)))) end})), fun (V199) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V199, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|]"/utf8>>)))) end}}, fun () -> fun (V200) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PIdiom', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V200)), case V200 of {'Idris.Text.Bounded.MkBounded', E80, E81, E82, E83, E84, E85} -> (fun (V201, V202, V203, V204, V205, V206) -> V201 end(E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V207) -> fun (V208) -> V207 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V209) -> fun (V210) -> V210 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[|"/utf8>>)))), fun (V211) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V211, ('un--expr'(('un--pdef'()), V0, V1)))) end})), fun (V212) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V212, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|]"/utf8>>)))) end}}, fun () -> fun (V213) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PIdiom', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V213)), case V213 of {'Idris.Text.Bounded.MkBounded', E86, E87, E88, E89, E90, E91} -> (fun (V214, V215, V216, V217, V218, V219) -> V214 end(E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V220) -> fun (V221) -> V221 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)))), fun (V222) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V222, ('un--expr'(('un--pdef'()), V0, V1)))) end}}, fun () -> fun (V223) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRunElab', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V223)), case V223 of {'Idris.Text.Bounded.MkBounded', E92, E93, E94, E95, E96, E97} -> (fun (V224, V225, V226, V227, V228, V229) -> V224 end(E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V230) -> fun (V231) -> V231 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)))), fun (V232) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V232, ('un--expr'(('un--pdef'()), V0, V1)))) end}}, fun () -> fun (V233) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRunElab', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V233)), case V233 of {'Idris.Text.Bounded.MkBounded', E98, E99, E100, E101, E102, E103} -> (fun (V234, V235, V236, V237, V238, V239) -> V234 end(E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"logging"/utf8>>)), fun () -> fun (V240) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--optional'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V243, V244)) end end end end, fun (V245) -> fun (V246) -> {'Idris.Data.List1.:::', V245, V246} end end, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun (V247) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V247, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--aDotIdent'()))))) end})), fun (V248) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V249) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V250) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V248, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V249)))), V250}} end end} end end} end} end end}}, fun () -> fun (V251) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V251 of {'Idris.Text.Bounded.MkBounded', E104, E105, E106, E107, E108, E109} -> (fun (V252, V253, V254, V255, V256, V257) -> V252 end(E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V258) -> case V258 of {'Idris.Builtin.MkPair', E110, E111} -> (fun (V259, V260) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnifyLog', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V251)), V259, V260}} end(E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--simpleExpr'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 1, ('un--simplerExpr'(V0, V1)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'()))), fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end} end end}}, fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V4 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V5, V6, V7, V8, V9, V10) -> V5 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V12, V13) -> {'Idris.Text.Parser.Core.Empty', case V13 of [] -> V12; _ -> {'Idris.Idris.Syntax.PPostfixApp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V4)), V12, V13} end} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())))}, fun () -> fun (V14) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPostfixAppPartial', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V14)), case V14 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19, V20) -> V15 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end}.
'un--simpleData'(V0, V1, V2, V3, V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>))}, fun () -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V6))))), begin (V9 = ('Idris.Idris2.Idris.Syntax':'un--papply'(V7, {'Idris.Idris.Syntax.PRef', V7, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> {'Idris.Idris.Syntax.PRef', V7, V8} end, V5))))), {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), ('un--simpleCon'(V1, V9, V4)))), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V7, V10}}} end end} end end end end} end}}, fun () -> fun (V11) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V11 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> V12 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V21, V22) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V11)))), V3, ('un--mkTyConType'(V21, V19)), [], V22}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--simpleCon'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--argExpr'(('un--plhs'()), V0, V2)))), fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}} end} end end} end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V17, V18) -> begin (V19 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Named arguments not allowed in ADT constructors"/utf8>>} end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V22, V23)) end end end end, fun (V24) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPTy', V19, V17, V15, V24}} end, ('un--mkDataConType'(V19, V1, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V32, V33, V34)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V35, V36)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V18)))))))) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}.
'un--setVarOption'() -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"eval"/utf8>>)), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--parseMode'()), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.EvalMode', V1}} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"editor"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Editor', V3}} end end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"cg"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.CG', V5}} end end} end end} end} end}.
'un--setOption'(V0) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showimplicits"/utf8>>)), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ShowImplicits', V0}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"shownamespace"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ShowNamespace', V0}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showtypes"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ShowTypes', V0}} end end}, case V0 of 0 -> fun () -> ('un--setVarOption'()) end; 1 -> fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Unrecognised option"/utf8>>} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end} end}.
'un--runParseCmd'(V0) -> case V0 of {'Idris.Idris.Parser.ParseREPLCmd', E0} -> (fun (V1) -> ('un--replCmd'(V1)) end(E0)); {'Idris.Idris.Parser.ParseKeywordCmd', E1} -> (fun (V2) -> ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(V2)) end(E1)); {'Idris.Idris.Parser.ParseIdentCmd', E2} -> (fun (V3) -> ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--runElabDecl'(V0, V1) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, ('un--expr'(('un--pnowith'()), V0, V1)))) end}}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRunElabDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V5)), case V5 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V12) -> fun (V13) -> V13 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)))), fun (V14) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V14, ('un--expr'(('un--pnowith'()), V0, V1)))) end}}, fun () -> fun (V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRunElabDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V15)), case V15 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V16, V17, V18, V19, V20, V21) -> V16 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rewrite_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"rewrite"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--commitKeyword'(V1, <<"in"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, V5}} end end} end end} end end} end end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6)), V14, V15}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--replCmd'(V0) -> case V0 of [] -> {'Idris.Text.Parser.Core.Fail', 1, <<"Unrecognised command"/utf8>>}; [E0 | E1] -> (fun (V1, V2) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)), fun () -> ('un--replCmd'(V2)) end} end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--record_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"record"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V4, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--field'(V5, V0, V1)))), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', V8} end end} end end} end} end end} end}}, fun () -> fun (V10) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUpdate', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V10)), case V10 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V11, V12, V13, V14, V15, V16) -> V11 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}.
'un--recordParam'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--pibindListName'(V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', case V8 of {'Idris.Text.Bounded.MkBounded', E4, E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', {'Idris.Core.TT.Explicit'}, V9}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3))} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V16) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V17) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Alt', 0, 1, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V18) -> fun (V19) -> V18 end end, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.AutoImplicit'}})), fun (V20) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V20, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)))) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 1, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"default"/utf8>>)), fun () -> fun (V21) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--simpleExpr'(V0, V1)), fun () -> fun (V22) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.DefImplicit', V22}} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Implicit'}} end} end}, fun (V23) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--pibindListName'(V0, V1)), fun () -> fun (V24) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V29, V30) -> {'Idris.Builtin.MkPair', case V29 of {'Idris.Text.Bounded.MkBounded', E14, E15, E16, E17, E18, E19} -> (fun (V31, V32, V33, V34, V35, V36) -> V31 end(E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V23, V30}}} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V24))} end end} end end} end} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V37) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', case V37 of {'Idris.Text.Bounded.MkBounded', E20, E21, E22, E23, E24, E25} -> (fun (V38, V39, V40, V41, V42, V43) -> V38 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V37))}}}} | []]} end end} end} end}.
'un--recordDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--visibility'()), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--column'({'Idris.Parser.Lexer.Source.Token'})), fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"record"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--recordParam'(V0, V1)))), fun (V7) -> begin (V20 = (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V15, V16, V17)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V18, V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V7))), {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> fun (V21) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--blockWithOptHeaderAfter'('erased', 'erased', V4, fun (V22) -> ('nested--21591-11498--in--un--ctor'(V1, V0, V22)) end, fun (V23) -> ('un--fieldDecl'(V0, V23)) end)), fun (V24) -> {'Idris.Text.Parser.Core.Empty', fun (V25) -> {'Idris.Idris.Syntax.PRecord', V25, V2, V3, V6, V20, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V24)), (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V33, V34, V35)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V36, V37)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24))))} end} end} end end} end end} end end} end end} end} end} end}}, fun () -> fun (V38) -> {'Idris.Text.Parser.Core.Empty', case V38 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V39, V40, V41, V42, V43, V44) -> (V39(('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V38)))) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'un--progHdr'(V0) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V1) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()))), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"module"/utf8>>)), fun () -> fun (V2) -> ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'()) end end})), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V4) -> ('un--import_'(V0, V4)) end)), fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, V5}}} end} end} end}}, fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V16, V17) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6)), V16, V17, V14, []}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end}.
'un--prog'(V0) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V1) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()))), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"module"/utf8>>)), fun () -> fun (V2) -> ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'()) end end})), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V4) -> ('un--import_'(V0, V4)) end)), fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, V5}}} end} end} end}}, fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V7) -> ('un--topDecl'(V0, V7)) end)), fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V18, V19) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6)), V18, V19, V16, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V27, V28, V29)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V30, V31)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V8))))}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end}.
'un--pnowith'() -> {'Idris.Idris.Parser.MkParseOpts', 0, 1}.
'un--pnoeq'(V0) -> case V0 of {'Idris.Idris.Parser.MkParseOpts', E0, E1} -> (fun (V1, V2) -> {'Idris.Idris.Parser.MkParseOpts', 1, V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--plhs'() -> {'Idris.Idris.Parser.MkParseOpts', 1, 1}.
'un--pibindListName'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--multiplicity'()), fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.Bounds', ('nested--11482-4165--in--un--binderName'(V1, V0))})), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V2)), fun (V7) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', fun (V9) -> {'Idris.Core.Name.UN', V9} end, V8)), V5}} end, V3))} end} end} end end} end end} end end} end}, fun () -> ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--multiplicity'()), fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('nested--11482-4165--in--un--binderName'(V1, V0))}, fun () -> fun (V11) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V13) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V10)), fun (V14) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', fun (V15) -> {'Idris.Core.Name.UN', V15} end, V11)), V13}}} end} end end} end end} end end} end})) end}.
'un--pibindList'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V0, V1)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', fun (V8) -> {'Idris.Prelude.Types.Just', V8} end, V6)), V7}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2))} end end}.
'un--pibindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.Idris.Syntax.PPi', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V8)), V6, V1, case V8 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, ('un--pibindAll'(V0, V1, V5, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pdef'() -> {'Idris.Idris.Parser.MkParseOpts', 0, 0}.
'un--patAlt'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), fun () -> fun (V2) -> ('un--caseAlt'(V0, V1)) end end}.
'un--parserCommandsForHelp'() -> [('un--exprArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"t"/utf8>> | [<<"type"/utf8>> | []]]}, fun (V0) -> {'Idris.Idris.Syntax.Check', V0} end, <<"Check the type of an expression"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"printdef"/utf8>> | []]}, fun (V1) -> {'Idris.Idris.Syntax.PrintDef', V1} end, <<"Show the definition of a function"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"s"/utf8>> | [<<"search"/utf8>> | []]]}, fun (V2) -> {'Idris.Idris.Syntax.ProofSearch', V2} end, <<"Search for values by type"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"di"/utf8>>}, fun (V3) -> {'Idris.Idris.Syntax.DebugInfo', V3} end, <<"Show debugging information for a name"/utf8>>)) | [('un--moduleArgCmd'({'Idris.Idris.Parser.ParseKeywordCmd', <<"module"/utf8>>}, fun (V4) -> {'Idris.Idris.Syntax.ImportMod', V4} end, <<"Import an extra module"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"q"/utf8>> | [<<"quit"/utf8>> | [<<"exit"/utf8>> | []]]]}, {'Idris.Idris.Syntax.Quit'}, <<"Exit the Idris system"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"cwd"/utf8>> | []]}, {'Idris.Idris.Syntax.CWD'}, <<"Displays the current working directory"/utf8>>)) | [('un--optArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"set"/utf8>>}, fun (V5) -> {'Idris.Idris.Syntax.SetOpt', V5} end, 0, <<"Set an option"/utf8>>)) | [('un--optArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"unset"/utf8>>}, fun (V6) -> {'Idris.Idris.Syntax.SetOpt', V6} end, 1, <<"Unset an option"/utf8>>)) | [('un--compileArgsCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"c"/utf8>> | [<<"compile"/utf8>> | []]]}, fun (V7) -> fun (V8) -> {'Idris.Idris.Syntax.Compile', V7, V8} end end, <<"Compile to an executable"/utf8>>)) | [('un--exprArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"exec"/utf8>>}, fun (V9) -> {'Idris.Idris.Syntax.Exec', V9} end, <<"Compile to an executable and run"/utf8>>)) | [('un--stringArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"directive"/utf8>>}, fun (V10) -> {'Idris.Idris.Syntax.CGDirective', V10} end, <<"Set a codegen-specific directive"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"r"/utf8>> | [<<"reload"/utf8>> | []]]}, {'Idris.Idris.Syntax.Reload'}, <<"Reload current file"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"e"/utf8>> | [<<"edit"/utf8>> | []]]}, {'Idris.Idris.Syntax.Edit'}, <<"Edit current file using $EDITOR or $VISUAL"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"miss"/utf8>> | [<<"missing"/utf8>> | []]]}, fun (V11) -> {'Idris.Idris.Syntax.Missing', V11} end, <<"Show missing clauses"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseKeywordCmd', <<"total"/utf8>>}, fun (V12) -> {'Idris.Idris.Syntax.Total', V12} end, <<"Check the totality of a name"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"doc"/utf8>>}, fun (V13) -> {'Idris.Idris.Syntax.Doc', V13} end, <<"Show documentation for a name"/utf8>>)) | [('un--moduleArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"browse"/utf8>>}, fun (V14) -> {'Idris.Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V14))} end, <<"Browse contents of a namespace"/utf8>>)) | [('un--loggingArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"log"/utf8>> | [<<"logging"/utf8>> | []]]}, fun (V15) -> {'Idris.Idris.Syntax.SetLog', V15} end, <<"Set logging level"/utf8>>)) | [('un--autoNumberArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"consolewidth"/utf8>> | []]}, fun (V16) -> {'Idris.Idris.Syntax.SetConsoleWidth', V16} end, <<"Set the width of the console output (0 for unbounded) (auto by default)"/utf8>>)) | [('un--onOffArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"color"/utf8>> | [<<"colour"/utf8>> | []]]}, fun (V17) -> {'Idris.Idris.Syntax.SetColor', V17} end, <<"Whether to use color for the console output (enabled by default)"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"m"/utf8>> | [<<"metavars"/utf8>> | []]]}, {'Idris.Idris.Syntax.Metavars'}, <<"Show remaining proof obligations (metavariables or holes)"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"version"/utf8>> | []]}, {'Idris.Idris.Syntax.ShowVersion'}, <<"Display the Idris version"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"?"/utf8>> | [<<"h"/utf8>> | [<<"help"/utf8>> | []]]]}, {'Idris.Idris.Syntax.Help'}, <<"Display this help text"/utf8>>)) | [('un--declsArgCmd'({'Idris.Idris.Parser.ParseKeywordCmd', <<"let"/utf8>>}, fun (V18) -> {'Idris.Idris.Syntax.NewDefn', V18} end, <<"Define a new value"/utf8>>)) | []]]]]]]]]]]]]]]]]]]]]]]]]].
'un--parseRHS'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V7) -> fun (V8) -> V8 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)))), fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V9, {'Idris.Text.Parser.Core.MustWork', {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V2, V5)), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, [], ('un--whereBlock'(V2, V4)))), fun (V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V10, V11}} end} end end}})) end}}, fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V5)), fun (V13) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V12 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V14, V15, V16, V17, V18, V19) -> V14 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V21, V22) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V2, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V12)))), V6, V21, V22}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V23) -> fun (V24) -> V24 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)))), fun (V25) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V25, {'Idris.Text.Parser.Core.MustWork', {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V2, V5)), fun () -> fun (V26) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, [], ('un--whereBlock'(V2, V4)))), fun (V27) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V26, V27}} end} end end}})) end}}, fun () -> fun (V28) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V5)), fun (V29) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V28 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V30, V31, V32, V33, V34, V35) -> V30 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V36) -> case V36 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V37, V38) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V2, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V28)))), V6, V37, V38}} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"with"/utf8>>)), fun () -> fun (V39) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Bounds', ('un--withFlags'())}, fun (V40) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V41) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--bracketedExpr'('erased', V2, V40, V5)), fun () -> fun (V42) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V43) -> ('un--clause'((1 + V1), V2, V43)) end)), fun () -> fun (V44) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V40, {'Idris.Builtin.MkPair', V42, ('Idris.Idris2.Data.List1':'un--forget'('erased', V44))}}} end end} end end} end end} end} end end}}, fun () -> fun (V45) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V45 of {'Idris.Text.Bounded.MkBounded', E16, E17, E18, E19, E20, E21} -> (fun (V46, V47, V48, V49, V50, V51) -> V46 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V52) -> case V52 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V55, V56) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkWithClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V2, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V45)))), V6, V55, case V53 of {'Idris.Text.Bounded.MkBounded', E26, E27, E28, E29, E30, E31} -> (fun (V57, V58, V59, V60, V61, V62) -> V57 end(E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56}} end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"impossible"/utf8>>))}, fun () -> fun (V63) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V5)), fun (V64) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkImpossible', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V2, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V63)))), V6}} end} end end} end} end}.
'un--parseMode'() -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"typecheck"/utf8>>)), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.EvalTC'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"tc"/utf8>>)), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.EvalTC'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normalise"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.NormaliseAll'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normalize"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.NormaliseAll'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"execute"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Execute'}} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"exec"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Execute'}} end end} end} end} end} end} end}.
'un--paramDecls'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"parameters"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', V5}, V7}} end end} end end} end end})), fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V10) -> ('un--topDecl'(V0, V10)) end)), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V8, V11}} end end} end end} end} end end} end} end end}}, fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V12 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V13, V14, V15, V16, V17, V18) -> V13 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V20, V21) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PParameters', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V12)), V20, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V29, V30, V31)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V21))))}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--optArgCmd'(V0, V1, V2, V3) -> {'Idris.Builtin.MkPair', ('nested--24147-14167--in--un--names'(V3, V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.OptionArg'}, {'Idris.Builtin.MkPair', V3, ('nested--24147-14168--in--un--parse'(V3, V2, V1, V0))}}}.
'un--opExpr'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--appExpr'(V0, V1, V2))}, fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Alt', 0, 1, ('case--opExpr-2135'(V2, V1, V0, V3, case V0 of {'Idris.Idris.Parser.MkParseOpts', E0, E1} -> (fun (V4, V5) -> V4 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 1, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V8, V9)) end end end end, fun (V10) -> fun (V11) -> {'Idris.Builtin.MkPair', V10, V11} end end, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V12) -> fun (V13) -> V13 end end, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)))), fun (V14) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V14, ('un--iOperator'()))) end})), fun (V15) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V15, ('un--opExpr'(V0, V1, V2)))) end}}, fun () -> fun (V16) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V16 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V17, V18, V19, V20, V21, V22) -> V17 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V24, V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.POp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V16)))), V24, case V3 of {'Idris.Text.Bounded.MkBounded', E10, E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30, V31) -> V26 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V25}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V34, V35)) end end end end, fun (V36) -> fun (V37) -> {'Idris.Builtin.MkPair', V36, V37} end end, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V38) -> fun (V39) -> V39 end end, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)))), fun (V40) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V40, ('un--iOperator'()))) end})), fun (V41) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V41, ('un--opExpr'(V0, V1, V2)))) end}}, fun () -> fun (V42) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V42 of {'Idris.Text.Bounded.MkBounded', E16, E17, E18, E19, E20, E21} -> (fun (V43, V44, V45, V46, V47, V48) -> V43 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V49) -> case V49 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V50, V51) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.POp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V42)))), V50, case V3 of {'Idris.Text.Bounded.MkBounded', E24, E25, E26, E27, E28, E29} -> (fun (V52, V53, V54, V55, V56, V57) -> V52 end(E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V51}} end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Empty', case V3 of {'Idris.Text.Bounded.MkBounded', E30, E31, E32, E33, E34, E35} -> (fun (V58, V59, V60, V61, V62, V63) -> V58 end(E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end} end} end end}.
'un--onoff'() -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"on"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', 0})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"off"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', 1})) end} end}.
'un--onOffArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--24318-14357--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.OnOffArg'}, {'Idris.Builtin.MkPair', V2, ('nested--24318-14358--in--un--parse'(V2, V1, V0))}}}.
'un--nonEmptyTuple'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V5) -> fun (V6) -> V5 end end, ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V7) -> fun (V8) -> V8 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)))), fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V9, ('Idris.Idris2.Text.Parser':'un--optional'('erased', 'erased', 0, {'Idris.Text.Parser.Core.Bounds', ('un--expr'(('un--pdef'()), V1, V3))})))) end}})))), fun (V10) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V10, ('un--continueWith'(V3, <<")"/utf8>>)))) end}}, fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', ('nested--11471-3004--in--un--buildOutput'('erased', V4, V3, V2, V1, 'erased', V11, ('nested--11471-3006--in--un--mergePairs'('erased', V4, V3, V2, V1, 'erased', 0, V11, case V11 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> V12 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V18) -> fun (V19) -> V18 end end, ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V20) -> fun (V21) -> V21 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)))), fun (V22) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V22, ('Idris.Idris2.Text.Parser':'un--optional'('erased', 'erased', 0, {'Idris.Text.Parser.Core.Bounds', ('un--expr'(('un--pdef'()), V1, V3))})))) end}})))), fun (V23) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V23, ('un--continueWith'(V3, <<")"/utf8>>)))) end}}, fun () -> fun (V24) -> {'Idris.Text.Parser.Core.Empty', ('nested--11471-3004--in--un--buildOutput'('erased', V4, V3, V2, V1, 'erased', V24, ('nested--11471-3006--in--un--mergePairs'('erased', V4, V3, V2, V1, 'erased', 0, V24, case V24 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V25, V26, V27, V28, V29, V30) -> V25 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nonEmptyCommand'() -> ('Idris.Idris2.Text.Parser':'un--choice'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V7, V8, V9)) end end end end end}, 0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> V16 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parserCommandsForHelp'()))))).
'un--noArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--23862-13846--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.NoArg'}, {'Idris.Builtin.MkPair', V2, ('nested--23862-13847--in--un--parse'(V2, V1, V0))}}}.
'un--nestedDpair'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--dpairType'('erased', V1, V2, V3)), fun () -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V1, V3)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nestedDpair'('erased', V1, V5, V3)), fun () -> ('un--expr'(('un--pdef'()), V1, V3)) end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V6)))), V4, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V6))))}, case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end} end end} end}.
'un--namespaceHead'() -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"namespace"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V4, {'Idris.Text.Parser.Core.Commit'})) end})), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V5, ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'()))) end}.
'un--namespaceDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--column'({'Idris.Parser.Lexer.Source.Token'})), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--namespaceHead'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'('erased', V3, fun (V5) -> ('un--topDecl'(V0, V5)) end)), fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, V6}}} end} end end} end} end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V17, V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PNamespace', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V7)), V17, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V26, V27, V28)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V29, V30)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V18))}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--nameArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--23902-13891--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.NameArg'}, {'Idris.Builtin.MkPair', V2, ('nested--23902-13892--in--un--parse'(V2, V1, V0))}}}.
'un--mutualDecls'(V0, V1) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V4) -> fun (V5) -> V5 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"mutual"/utf8>>)))), fun (V6) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V6, {'Idris.Text.Parser.Core.Commit'})) end})), fun (V7) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V7, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V8) -> ('un--topDecl'(V0, V8)) end)))) end}}, fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PMutual', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V9)), (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V23, V24, V25)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V26, V27)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(case V9 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V28) -> fun (V29) -> V29 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V30) -> fun (V31) -> V31 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"mutual"/utf8>>)))), fun (V32) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V32, {'Idris.Text.Parser.Core.Commit'})) end})), fun (V33) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V33, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V34) -> ('un--topDecl'(V0, V34)) end)))) end}}, fun () -> fun (V35) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PMutual', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V35)), (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V49, V50, V51)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V52, V53)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(case V35 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V36, V37, V38, V39, V40, V41) -> V36 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--multiplicity'() -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', V0}} end end}, fun () -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Nothing'}} end}.
'un--moduleArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--23998-13999--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.ModuleArg'}, {'Idris.Builtin.MkPair', V2, ('nested--23998-14000--in--un--parse'(V2, V1, V0))}}}.
'un--mkTyConType'(V0, V1) -> case V1 of [] -> {'Idris.Idris.Syntax.PType', V0}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Idris.Syntax.PType', V0}, ('un--mkTyConType'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkDataConType'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Just', V1}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Idris.Parser.UnnamedExpArg', E2} -> (fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V8, V9)) end end end end, fun (V10) -> {'Idris.Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Nothing'}, V5, V10} end, ('un--mkDataConType'(V0, V1, V4)))) end(E2)); {'Idris.Idris.Parser.UnnamedAutoArg', E3} -> (fun (V15) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V18, V19)) end end end end, fun (V20) -> {'Idris.Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), {'Idris.Core.TT.AutoImplicit'}, {'Idris.Prelude.Types.Nothing'}, V15, V20} end, ('un--mkDataConType'(V0, V1, V4)))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--loggingArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--24431-14484--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.Args', [{'Idris.Idris.Parser.StringArg'} | [{'Idris.Idris.Parser.NumberArg'} | []]]}, {'Idris.Builtin.MkPair', V2, ('nested--24431-14485--in--un--parse'(V2, V1, V0))}}}.
'un--listRange'(V0, V1, V2, V3, V4) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>))}, fun () -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V5))))), {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getInitRange'(V4)), fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRangeStream', V6, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V7)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V7))}} end} end end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V8) -> fun (V9) -> V8 end end, ('un--expr'(('un--pdef'()), V1, V3)))), fun (V10) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V10, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)))) end}}, fun () -> fun (V11) -> begin (V12 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V11))))), {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getInitRange'(V4)), fun (V13) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRange', V12, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V13)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V13)), case V11 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V14, V15, V16, V17, V18, V19) -> V14 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end} end end end} end}.
'un--listExpr'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pnowith'()), V1, V3)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--doAct'(V1, V3)))), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, V6}} end end} end end} end end} end end}}, fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V8 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PComprehension', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V8)))), V16, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V28, V29)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V17))}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--expr'(('un--pdef'()), V1, V3)))), fun (V30) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<".."/utf8>>)), fun () -> fun (V31) -> ('un--listRange'('erased', V1, V2, V3, V30)) end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>))}, fun () -> fun (V32) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PList', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V32)))), V30}} end end} end} end} end}.
'un--let_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"let"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V4) -> ('un--letBlock'(V0, V4)) end)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--commitKeyword'(V1, <<"in"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Idris.Parser.Let':'un--mkLets'(V0, V5, V7))} end end} end end} end end} end} end end}.
'un--letBlock'(V0, V1) -> {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Text.Parser.Core':'un--<||>'('erased', 'erased', 'erased', 0, 0, ('nested--11491-4901--in--un--letBinder'(V1, V0)), fun () -> ('nested--11491-4902--in--un--letDecl'(V1, V0)) end))}.
'un--lazy'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Lazy"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDelayed', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V5)), {'Idris.Core.TT.LLazy'}, case V5 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V12) -> fun (V13) -> V13 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Inf"/utf8>>)))), fun (V14) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V14, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDelayed', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V15)), {'Idris.Core.TT.LInf'}, case V15 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V16, V17, V18, V19, V20, V21) -> V16 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V22) -> fun (V23) -> V23 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Delay"/utf8>>)))), fun (V24) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V24, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDelay', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V25)), case V25 of {'Idris.Text.Bounded.MkBounded', E12, E13, E14, E15, E16, E17} -> (fun (V26, V27, V28, V29, V30, V31) -> V26 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V32) -> fun (V33) -> V33 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Force"/utf8>>)))), fun (V34) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V34, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V35) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PForce', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V35)), case V35 of {'Idris.Text.Bounded.MkBounded', E18, E19, E20, E21, E22, E23} -> (fun (V36, V37, V38, V39, V40, V41) -> V36 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end} end} end}.
'un--lambdaCase'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"\x{5c}"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"case"/utf8>>)))) end}}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Commit'}, fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V7) -> ('un--caseAlt'(V0, V7)) end)), fun (V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V5, V8}} end} end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V9) -> fun (V10) -> V10 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"\x{5c}"/utf8>>)))), fun (V11) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V11, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"case"/utf8>>)))) end}}, fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Commit'}, fun (V13) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V14) -> ('un--caseAlt'(V0, V14)) end)), fun (V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V12, V15}} end} end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun () -> fun (V16) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V16 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V17, V18, V19, V20, V21, V22) -> V17 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V24, V25) -> {'Idris.Text.Parser.Core.Empty', begin (V26 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V16))), begin (V27 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V24))), begin (V28 = {'Idris.Core.Name.MN', <<"lcase"/utf8>>, 0}), {'Idris.Idris.Syntax.PLam', V27, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V27, V28}, {'Idris.Idris.Syntax.PInfer', V27}, {'Idris.Idris.Syntax.PCase', V26, {'Idris.Idris.Syntax.PRef', V27, V28}, V25}} end end end} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--lam'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"\x{5c}"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--bindList'(V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Idris.Prelude.Types.Nothing'})), fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', ('nested--11490-4826--in--un--bindAll'(V1, V0, V3, V6))} end end} end} end end} end end} end end}.
'un--import_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"import"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, 1, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"public"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', 0} end end})), fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V5)), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"as"/utf8>>)), fun () -> fun (V6) -> ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'()) end end})), fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V7}}} end} end end} end} end end}}, fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V9) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V8 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V19, V20) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V8)), V17, V19, V20}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}.
'un--implicitPi'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--pibindList'(V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.Implicit'}, V3, V6))} end end} end end} end end} end end} end end}.
'un--implDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--visOpt'(V0)))), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--getVisibility'({'Idris.Prelude.Types.Nothing'}, V3)), fun (V4) -> begin (V6 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Data.Either':'un--getRight'('erased', 'erased', V5)) end, V3))), {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--column'({'Idris.Parser.Lexer.Source.Token'})), fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, {'Idris.Builtin.MkUnit'}, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"implementation"/utf8>>)))), fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Prelude.Types.Nothing'}, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', V10}} end end} end end} end end})), fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--implBinds'(V0, V1)), fun (V13) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--constraints'(V0, V1)), fun (V14) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V15) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--simpleExpr'(V0, V1)))), fun (V16) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, [], {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"using"/utf8>>)), fun () -> fun (V17) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V18) -> {'Idris.Text.Parser.Core.Empty', V18} end end} end end})), fun (V19) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--optional'('erased', 'erased', 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> fun (V20) -> ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'('erased', V7, fun (V21) -> ('un--topDecl'(V0, V21)) end)) end end})), fun (V22) -> {'Idris.Text.Parser.Core.Empty', fun (V23) -> {'Idris.Idris.Syntax.PImplementation', V23, V4, V6, {'Idris.Idris.Syntax.Single'}, V13, V14, V15, V16, V12, V19, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', fun (V24) -> ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V32, V33, V34)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V35, V36)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V24)))) end, V22))} end} end} end} end} end end} end} end} end} end} end} end end} end} end}}, fun () -> fun (V37) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V38) -> {'Idris.Text.Parser.Core.Empty', case V37 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V39, V40, V41, V42, V43, V44) -> (V39(('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V37)))) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end} end end}.
'un--implBinds'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 1, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--multiplicity'()), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--getMult'(V3)), fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--implBinds'(V0, V1)), fun (V10) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V4, V7}} | V10]} end} end end} end end} end end} end end} end end} end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Empty', []} end}.
'un--ifaceParam'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, V5}} end end} end end} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', [case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | []], {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V7))}}} end end} end}.
'un--ifaceDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--visibility'()), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--column'({'Idris.Parser.Lexer.Source.Token'})), fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"interface"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--constraints'(V0, V1)), fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--ifaceParam'(V0, V1)))), fun (V9) -> begin (V26 = (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V17, V18, V19)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V20, V21)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> {'Idris.Builtin.MkPair', V25, V24} end, V23)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))(V9))), {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), [], {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), fun () -> fun (V27) -> ('Idris.Idris2.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end end})), fun (V28) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> fun (V29) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, {'Idris.Prelude.Types.Nothing'}, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"constructor"/utf8>>)), fun () -> fun (V30) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V31) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', V31}} end end} end end})), fun (V32) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'('erased', V4, fun (V33) -> ('un--topDecl'(V0, V33)) end)), fun (V34) -> {'Idris.Text.Parser.Core.Empty', fun (V35) -> {'Idris.Idris.Syntax.PInterface', V35, V3, V7, V8, V2, V26, V28, V32, ('un--collectDefs'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V43, V44, V45)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V46, V47)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V34))))} end} end} end} end end} end} end end} end end} end} end} end end} end} end} end}}, fun () -> fun (V48) -> {'Idris.Text.Parser.Core.Empty', case V48 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V49, V50, V51, V52, V53, V54) -> (V49(('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V48)))) end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'un--if_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"if"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--commitKeyword'(V1, <<"then"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--commitKeyword'(V1, <<"else"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, V7}}} end end} end end} end end} end end} end end} end end}}, fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V9) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V8 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V19, V20) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PIfThenElse', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V8)), V17, V19, V20}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}.
'un--iOperator'() -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--operator'()), fun () -> {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun (V0) -> fun (V1) -> V0 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end})), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V5, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`"/utf8>>)))) end} end}.
'un--help'() -> [{'Idris.Builtin.MkPair', [<<"<expr>"/utf8>> | []], {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.NoArg'}, <<"Evaluate an expression"/utf8>>}} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":"/utf8>>, V7)) end, V1)), {'Idris.Builtin.MkPair', V3, V5}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parserCommandsForHelp'())))].
'un--getVisibility'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V1 of [] -> {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Private'}}; [E4 | E5] -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Types.Left', E8} -> (fun (V4) -> ('un--getVisibility'({'Idris.Prelude.Types.Just', V4}, V3)) end(E8)); _ -> case V1 of [E6 | E7] -> (fun (V5, V6) -> ('un--getVisibility'(V0, V6)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> case V1 of [E2 | E3] -> (fun (V7, V8) -> ('un--getVisibility'(V0, V8)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V9) -> case V1 of [] -> {'Idris.Text.Parser.Core.Empty', V9}; [E12 | E13] -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Types.Left', E16} -> (fun (V12) -> {'Idris.Text.Parser.Core.Fail', 0, <<"Multiple visibility modifiers"/utf8>>} end(E16)); _ -> case V1 of [E14 | E15] -> (fun (V13, V14) -> ('un--getVisibility'(V0, V14)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> case V1 of [E10 | E11] -> (fun (V15, V16) -> ('un--getVisibility'(V0, V16)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> case V1 of [E0 | E1] -> (fun (V17, V18) -> ('un--getVisibility'(V0, V18)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getMult'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> case V1 of 0 -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V2, V3)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}; 1 -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}; _ -> {'Idris.Text.Parser.Core.Fail', 0, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'())} end()); _ -> {'Idris.Text.Parser.Core.Fail', 0, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end.
'un--getInitRange'(V0) -> case V0 of [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Nothing'}}}; [E2 | E3] -> (fun (V3, V4) -> case V4 of [] -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Just', V3}}}; _ -> {'Idris.Text.Parser.Core.Fail', 0, <<"Invalid list range syntax"/utf8>>} end end(E2, E3)); _ -> {'Idris.Text.Parser.Core.Fail', 0, <<"Invalid list range syntax"/utf8>>} end end(E0, E1)); _ -> {'Idris.Text.Parser.Core.Fail', 0, <<"Invalid list range syntax"/utf8>>} end.
'un--gadtData'(V0, V1, V2, V3, V4, V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V1, V5)), fun () -> fun (V8) -> ('un--dataBody'('erased', V1, V2, V3, V4, V5, V8)) end end} end} end end}.
'un--forall_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"forall"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'())})), fun () -> fun (V4) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V5) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), {'Idris.Builtin.MkPair', ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', fun (V10) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V10}} end, V5)), {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V5))}}} end, V4))), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"."/utf8>>)), fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V13) -> {'Idris.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.Implicit'}, V11, V13))} end end} end end} end end end} end} end end}.
'un--fnOpt'() -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--totalityOpt'()), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Totality', V0}}} end end}.
'un--fnDirectOpt'(V0) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"hint"/utf8>>)), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Hint', 0}}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"globalhint"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.GlobalHint', 1}}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"defaulthint"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.GlobalHint', 0}}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"inline"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Commit'}, fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Inline'}}} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"tcinline"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Commit'}, fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.TCInline'}}} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"extern"/utf8>>)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.ExternFn'}}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"macro"/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Macro'}}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"spec"/utf8>>)), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun (V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.SpecArgs', V11}}} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"foreign"/utf8>>)), fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V13) -> ('un--expr'(('un--pdef'()), V0, V13)) end)), fun (V14) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PForeign', V14}} end} end end} end} end} end} end} end} end} end} end}.
'un--fixDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('un--fix'()), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--iOperator'()))), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, V5}}} end end} end end} end} end end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V16, V17) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> {'Idris.Idris.Syntax.PFixity', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6)), V14, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V16)), V18} end, V17))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--fix'() -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infixl"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.InfixL'}})) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infixr"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.InfixR'}})) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V6) -> fun (V7) -> V7 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infix"/utf8>>)))), fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V8, {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Infix'}})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V9) -> fun (V10) -> V10 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"prefix"/utf8>>)))), fun (V11) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V11, {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Prefix'}})) end} end} end} end}.
'un--fieldDecl'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, {'Idris.Core.TT.Implicit'}, ('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V7, V8)) end end end end, {'Idris.Core.TT.AutoImplicit'}, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)))))), fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('nested--21057-10951--in--un--fieldBody'(V1, V0, V2, V9)), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V12) -> {'Idris.Text.Parser.Core.Empty', V10} end} end end} end end} end} end} end end} end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V13) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('nested--21057-10951--in--un--fieldBody'(V1, V0, V13, {'Idris.Core.TT.Explicit'})), fun () -> fun (V14) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V15) -> {'Idris.Text.Parser.Core.Empty', V14} end} end end} end} end}.
'un--field'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), V5, V6)) end end end end, fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('nested--11500-5647--in--un--fieldName'(V2, V1, V0, V8)) end, V7)) end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Empty', fun (V9) -> fun (V10) -> [V9 | V10] end end}, fun (V11) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V11, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end}, fun (V12) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V12, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('nested--11500-5648--in--un--recFieldCompat'(V2, V1, V0)))))) end})), fun () -> fun (V13) -> case ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V14) -> fun (V15) -> V15 end end, ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V0, fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)) end, fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end)))), fun (V16) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V16, {'Idris.Text.Parser.Core.Empty', fun (V17) -> fun (V18) -> {'Idris.Idris.Syntax.PSetField', V17, V18} end end})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V19) -> fun (V20) -> V20 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"$="/utf8>>)))), fun (V21) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V21, {'Idris.Text.Parser.Core.Empty', fun (V22) -> fun (V23) -> {'Idris.Idris.Syntax.PSetFieldApp', V22, V23} end end})) end} end}, fun () -> fun (V24) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--opExpr'(('un--plhs'()), V1, V2)), fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', ((V24(V13))(V25))} end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V26) -> fun (V27) -> V27 end end, ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V0, fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)) end, fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":="/utf8>>)) end)))), fun (V28) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V28, {'Idris.Text.Parser.Core.Empty', fun (V29) -> fun (V30) -> {'Idris.Idris.Syntax.PSetField', V29, V30} end end})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V31) -> fun (V32) -> V32 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"$="/utf8>>)))), fun (V33) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V33, {'Idris.Text.Parser.Core.Empty', fun (V34) -> fun (V35) -> {'Idris.Idris.Syntax.PSetFieldApp', V34, V35} end end})) end} end}, fun () -> fun (V36) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--opExpr'(('un--plhs'()), V1, V2)), fun () -> fun (V37) -> {'Idris.Text.Parser.Core.Empty', ((V36(V13))(V37))} end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end}.
'un--extractNames'(V0) -> case V0 of {'Idris.Idris.Parser.ParseREPLCmd', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Idris.Parser.ParseKeywordCmd', E1} -> (fun (V2) -> [V2 | []] end(E1)); {'Idris.Idris.Parser.ParseIdentCmd', E2} -> (fun (V3) -> [V3 | []] end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extension'() -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"ElabReflection"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.Options.ElabReflection'}})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Borrowing"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.Options.Borrowing'}})) end} end}.
'un--exprArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--24045-14052--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.ExprArg'}, {'Idris.Builtin.MkPair', V2, ('nested--24045-14053--in--un--parse'(V2, V1, V0))}}}.
'un--expr'(V0, V1, V2) -> ('un--typeExpr'(V0, V1, V2)).
'un--explicitPi'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--pibindList'(V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--bindSymbol'()), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', ('un--pibindAll'(V0, V5, V3, V6))} end end} end end} end end} end end} end end}.
'un--eval'() -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), <<"(interactive)"/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Eval', V0}} end end}.
'un--editCmd'() -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"typeat"/utf8>> | []])), fun () -> fun (V0) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.TypeAt', V1, V2, V3}} end end} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"cs"/utf8>> | []])), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V5) -> fun (V6) -> V6 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V7) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V7, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.CaseSplit', V8, V9, V10, V11}} end end} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"ac"/utf8>> | []])), fun () -> fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V13) -> fun (V14) -> V14 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V15) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V15, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V16) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V17) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.AddClause', V16, V17, V18}} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"ps"/utf8>> | [<<"proofsearch"/utf8>> | []]])), fun () -> fun (V19) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V20) -> fun (V21) -> V21 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V22) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V22, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V23) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V24) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ExprSearch', V23, V24, V25, []}} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--replCmd'([<<"psnext"/utf8>> | []])), fun () -> fun (V26) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ExprSearchNext'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"gd"/utf8>> | []])), fun () -> fun (V27) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V28) -> fun (V29) -> V29 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V30) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V30, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V31) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V32) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V33) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun (V34) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.GenerateDef', V31, V32, V33, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V34))}} end} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('un--replCmd'([<<"gdnext"/utf8>> | []])), fun () -> fun (V35) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.GenerateDefNext'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"ml"/utf8>> | [<<"makelemma"/utf8>> | []]])), fun () -> fun (V36) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V37) -> fun (V38) -> V38 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V39) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V39, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V40) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V41) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V42) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MakeLemma', V40, V41, V42}} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"mc"/utf8>> | [<<"makecase"/utf8>> | []]])), fun () -> fun (V43) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V44) -> fun (V45) -> V45 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V46) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V46, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V47) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V48) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V49) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MakeCase', V47, V48, V49}} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--replCmd'([<<"mw"/utf8>> | [<<"makewith"/utf8>> | []]])), fun () -> fun (V50) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 1, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V51) -> fun (V52) -> V52 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))), fun (V53) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V53, {'Idris.Text.Parser.Core.Empty', 0})) end})), fun (V54) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V55) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V56) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MakeWith', V54, V55, V56}} end end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Unrecognised command"/utf8>>} end} end} end} end} end} end} end} end} end} end}.
'un--dpairType'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V1, V3)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, V6}} end end} end end} end end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>)), fun () -> fun (V17) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nestedDpair'('erased', V1, V7, V3)), fun () -> ('un--expr'(('un--pdef'()), V1, V3)) end}}, fun () -> fun (V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V18)))), {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V7)), {'Idris.Core.Name.UN', V15}}, V16, case V18 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V19, V20, V21, V22, V23, V24) -> V19 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--doBlock'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"do"/utf8>>)), fun () -> fun (V2) -> ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V3) -> ('un--doAct'(V0, V3)) end)) end end}}, fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Commit'}, fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDoBlock', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V4)), {'Idris.Prelude.Types.Nothing'}, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V19, V20, V21)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V22, V23)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(case V4 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--namespacedIdent'())}, fun () -> fun (V24) -> ('case--doBlock-5940'(V1, V0, V24, case V24 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V25, V26, V27, V28, V29, V30) -> V25 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end} end}.
'un--doAct'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--validPatternVar'(V2)), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"<-"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V5}} end end} end end} end} end end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoBind', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V6)), V15, V16} | []]} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"let"/utf8>>)), fun () -> fun (V17) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V18) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'('erased', fun (V19) -> ('un--letBlock'(V0, V19)) end)), fun () -> fun (V20) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V21) -> {'Idris.Text.Parser.Core.Empty', ('Idris.Idris2.Idris.Parser.Let':'un--mkDoLets'(V0, V20))} end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V22) -> fun (V23) -> V23 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"rewrite"/utf8>>)))), fun (V24) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V24, ('un--expr'(('un--pdef'()), V0, V1)))) end}}, fun () -> fun (V25) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V26) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V25)), case V25 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32) -> V27 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | []]} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--expr'(('un--plhs'()), V0, V1))}, fun () -> fun (V33) -> {'Idris.Text.Parser.Core.Alt', 1, 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V34) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoExp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V33)), case V33 of {'Idris.Text.Bounded.MkBounded', E14, E15, E16, E17, E18, E19} -> (fun (V35, V36, V37, V38, V39, V40) -> V35 end(E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | []]} end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"<-"/utf8>>)), fun () -> fun (V41) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V0, V1)), fun () -> fun (V42) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V43) -> ('un--patAlt'(V0, V43)) end)), fun (V44) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V42, V44}} end} end end} end end}}, fun () -> fun (V45) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V46) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V45 of {'Idris.Text.Bounded.MkBounded', E20, E21, E22, E23, E24, E25} -> (fun (V47, V48, V49, V50, V51, V52) -> V47 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V53) -> case V53 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V54, V55) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoBindPat', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V33, V45)))), case V33 of {'Idris.Text.Bounded.MkBounded', E28, E29, E30, E31, E32, E33} -> (fun (V56, V57, V58, V59, V60, V61) -> V56 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V54, V55} | []]} end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end end} end} end end} end} end} end}.
'un--directiveDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEat', 1, ('un--directive'(V0, V1)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', fun (V3) -> {'Idris.Idris.Syntax.PDirective', V3, V2} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V6) -> {'Idris.Text.Parser.Core.Empty', fun (V7) -> {'Idris.Idris.Syntax.PReflect', V7, V5} end} end} end end} end end} end}}, fun () -> fun (V8) -> {'Idris.Text.Parser.Core.Empty', case V8 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13, V14) -> (V9(('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V8)))) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'un--directive'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"hide"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V4) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Hide', V3}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"logging"/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--optional'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V8, V9)) end end end end, fun (V10) -> fun (V11) -> {'Idris.Data.List1.:::', V10, V11} end end, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun (V12) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V12, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--aDotIdent'()))))) end})), fun (V13) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V14) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V15) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Logging', ('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V13, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V14))))}} end} end end} end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"auto_lazy"/utf8>>)), fun () -> fun (V16) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--onoff'()), fun () -> fun (V17) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.LazyOn', V17}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"unbound_implicits"/utf8>>)), fun () -> fun (V19) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--onoff'()), fun () -> fun (V20) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V21) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.UnboundImplicits', V20}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"prefix_record_projections"/utf8>>)), fun () -> fun (V22) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--onoff'()), fun () -> fun (V23) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V24) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrefixRecordProjections', V23}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"ambiguity_depth"/utf8>>)), fun () -> fun (V25) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V26) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V27) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.AmbigDepth', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V26))}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"auto_implicit_depth"/utf8>>)), fun () -> fun (V28) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V29) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V30) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.AutoImplicitDepth', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V29))}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"pair"/utf8>>)), fun () -> fun (V31) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V32) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V33) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V34) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V35) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PairNames', V32, V33, V34}} end} end end} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"rewrite"/utf8>>)), fun () -> fun (V36) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V37) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V38) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V39) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.RewriteName', V37, V38}} end} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"integerLit"/utf8>>)), fun () -> fun (V40) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V41) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V42) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimInteger', V41}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"stringLit"/utf8>>)), fun () -> fun (V43) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V44) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V45) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimString', V44}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"charLit"/utf8>>)), fun () -> fun (V46) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V47) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V48) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimChar', V47}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"name"/utf8>>)), fun () -> fun (V49) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V50) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V51) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V52) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Names', V50, V51}} end} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"start"/utf8>>)), fun () -> fun (V53) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V54) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V55) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.StartExpr', V54}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"allow_overloads"/utf8>>)), fun () -> fun (V56) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V57) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V58) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Overloadable', V57}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"language"/utf8>>)), fun () -> fun (V59) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--extension'()), fun () -> fun (V60) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V61) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Extension', V60}} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"default"/utf8>>)), fun () -> fun (V62) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--totalityOpt'()), fun () -> fun (V63) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), fun (V64) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.DefaultTotality', V63}} end} end end} end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--definition'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--clause'(0, V0, V1))}, fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDef', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V2)), [case V2 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | []]}} end end}.
'un--defaultImplicitPi'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"default"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--pibindList'(V0, V1)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.DefImplicit', V5}, V6, V9))} end end} end end} end end} end end} end end} end} end end} end end}.
'un--declsArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--24096-14109--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.DeclsArg'}, {'Idris.Builtin.MkPair', V2, ('nested--24096-14110--in--un--parse'(V2, V1, V0))}}}.
'un--dataOpt'() -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noHints"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', {'Idris.TTImp.TTImp.NoHints'}})) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"uniqueSearch"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', {'Idris.TTImp.TTImp.UniqueSearch'}})) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"search"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.TTImp.TTImp.SearchBy', V7}} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V8) -> fun (V9) -> V9 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"external"/utf8>>)))), fun (V10) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V10, {'Idris.Text.Parser.Core.Empty', {'Idris.TTImp.TTImp.External'}})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V11) -> fun (V12) -> V12 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noNewtype"/utf8>>)))), fun (V13) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V13, {'Idris.Text.Parser.Core.Empty', {'Idris.TTImp.TTImp.NoNewtype'}})) end} end} end} end} end}.
'un--dataDeclBody'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--column'({'Idris.Parser.Lexer.Source.Token'})), fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"data"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V4}} end end} end end} end}}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Empty', case V5 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--simpleData'('erased', V0, V5, V14, V1)), fun () -> ('un--gadtData'('erased', V0, V13, V5, V14, V1)) end} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--dataDecl'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--visibility'()), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--dataDeclBody'(V0, V1)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end end} end} end}}, fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V5 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PData', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V5)), V13, V15, V16}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--dataBody'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.Alt', 1, 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEndIndent'(V5)), fun (V7) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPLater', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V3)), V4, V6}} end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), [], {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--dataOpt'()))), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)), fun () -> fun (V11) -> {'Idris.Text.Parser.Core.Empty', V10} end end} end end} end end})), fun (V12) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'('erased', V2, fun (V13) -> ('un--tyDecl'(<<""/utf8>>, V1, V13)) end)), fun (V14) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V12, V14}} end} end} end end}}, fun () -> fun (V15) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V15 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V16, V17, V18, V19, V20, V21) -> V16 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V23, V24) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V15)))), V4, V6, V23, V24}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end} end}.
'un--continueWith'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Idris.Prelude.Types.Just', V1})))), fun (V4) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V4, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)))) end}.
'un--constraints'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 1, {'Idris.Text.Parser.Core.SeqEat', 0, ('un--appExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--constraints'(V0, V1)), fun (V4) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} | V4]} end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 1, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)), fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--constraints'(V0, V1)), fun (V11) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V6}, V8} | V11]} end} end end} end end} end end} end end} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Empty', []} end} end}.
'un--compileArgsCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--24365-14411--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.Args', [{'Idris.Idris.Parser.FileArg'} | [{'Idris.Idris.Parser.ExprArg'} | []]]}, {'Idris.Builtin.MkPair', V2, ('nested--24365-14412--in--un--parse'(V2, V1, V0))}}}.
'un--commitKeyword'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Idris.Prelude.Types.Just', V1})), fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(V1)), fun () -> fun (V3) -> ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Idris.Prelude.Types.Nothing'})) end end} end}.
'un--command'() -> {'Idris.Text.Parser.Core.Alt', 1, 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), fun (V0) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.NOP'}} end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nonEmptyCommand'()), fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":?"/utf8>>)), fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Help'}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), 0, {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--editCmd'()), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Editing', V3}} end end} end end}, fun () -> ('un--eval'()) end} end} end} end}.
'un--collectDefs'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.Syntax.PDef', E2, E3} -> (fun (V3, V4) -> ('case--collectDefs-12391'(V4, V3, V2, ('Idris.Idris2.Data.List':'un--spanBy'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Idris.Syntax':'un--isPDef'(V5)) end, V2)))) end(E2, E3)); {'Idris.Idris.Syntax.PNamespace', E4, E5, E6} -> (fun (V6, V7, V8) -> [{'Idris.Idris.Syntax.PNamespace', V6, V7, ('un--collectDefs'(V8))} | ('un--collectDefs'(V2))] end(E4, E5, E6)); {'Idris.Idris.Syntax.PMutual', E7, E8} -> (fun (V9, V10) -> [{'Idris.Idris.Syntax.PMutual', V9, ('un--collectDefs'(V10))} | ('un--collectDefs'(V2))] end(E7, E8)); _ -> [V1 | ('un--collectDefs'(V2))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--clause'(V0, V1, V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--column'({'Idris.Parser.Lexer.Source.Token'})), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--plhs'()), V1, V2)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('nested--17117-7124--in--un--parseWithArg'(V2, V1, V0)))), fun (V5) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}} end} end end} end}}, fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Empty', case V6 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V0, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V17)))), fun () -> {'Idris.Text.Parser.Core.Fail', 0, <<"Wrong number of \x{27}with\x{27} arguments"/utf8>>} end, fun () -> ('un--parseRHS'('erased', V0, V1, V6, V14, V2, ('nested--17117-7123--in--un--applyArgs'(V2, V1, V0, V16, V17)))) end)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--claim'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', 0, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--visOpt'(V0)))), fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--getVisibility'({'Idris.Prelude.Types.Nothing'}, V3)), fun (V4) -> begin (V6 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Data.Either':'un--getRight'('erased', 'erased', V5)) end, V3))), {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--multiplicity'()), fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--getMult'(V7)), fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--tyDecl'(V2, V0, V1)), fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V8, V9}}}}} end end} end} end} end end} end} end}}, fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V10 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V11, V12, V13, V14, V15, V16) -> V11 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V24, V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PClaim', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V10)), V24, V20, V22, V25}} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--case_'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"case"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--commitKeyword'(V1, <<"of"/utf8>>)), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'('erased', fun (V5) -> ('un--caseAlt'(V0, V5)) end)), fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, V6}} end} end end} end end} end end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PCase', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V7)), V15, V16}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--caseRHS'(V0, V1, V2, V3, V4) -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun (V5) -> fun (V6) -> V6 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V7) -> fun (V8) -> V8 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)))), fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V9, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V3, {'Idris.Prelude.Types.Nothing'})))) end})), fun (V10) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V10, ('un--expr'(('un--pdef'()), V1, V3)))) end}}, fun () -> fun (V11) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V3)), fun (V12) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V11)))), V4, case V11 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V13, V14, V15, V16, V17, V18) -> V13 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []}} end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun (V19) -> fun (V20) -> V20 end end, {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V21) -> fun (V22) -> V22 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)))), fun (V23) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V23, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V3, {'Idris.Prelude.Types.Nothing'})))) end})), fun (V24) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V24, ('un--expr'(('un--pdef'()), V1, V3)))) end}}, fun () -> fun (V25) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V3)), fun (V26) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V25)))), V4, case V25 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V27, V28, V29, V30, V31, V32) -> V27 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []}} end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"impossible"/utf8>>))}, fun () -> fun (V33) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V3)), fun (V34) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkImpossible', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V33)))), V4}} end} end end} end}.
'un--caseAlt'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('un--opExpr'(('un--plhs'()), V0, V1))}, fun () -> fun (V2) -> ('un--caseRHS'('erased', V0, V2, V1, case V2 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end}.
'un--bracketedExpr'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEat', 0, ('un--iOperator'()), fun () -> fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V1, V3)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--continueWith'(V3, <<")"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, V5}} end end} end end} end end}}, fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V7 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSectionL', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V7)))), V15, V16}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Text.Parser':'un--some'('erased', 'erased', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())))}, fun () -> fun (V17) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> fun (V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPostfixAppPartial', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V17)), case V17 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V19, V20, V21, V22, V23, V24) -> V19 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--continueWith'(V3, <<")"/utf8>>))}, fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V25))))}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V26) -> fun (V27) -> V26 end end, ('un--dpairType'('erased', V1, V2, V3)))), fun (V28) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V28, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('un--expr'(('un--pdef'()), V1, V3))}, fun () -> fun (V29) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 0, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V30) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V31) -> fun (V32) -> V31 end end, {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nestedDpair'('erased', V1, V30, V3)), fun () -> ('un--expr'(('un--pdef'()), V1, V3)) end})), fun (V33) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V33, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V34) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V34)))), case V29 of {'Idris.Text.Bounded.MkBounded', E14, E15, E16, E17, E18, E19} -> (fun (V35, V36, V37, V38, V39, V40) -> V35 end(E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V34))))}, case V34 of {'Idris.Text.Bounded.MkBounded', E20, E21, E22, E23, E24, E25} -> (fun (V41, V42, V43, V44, V45, V46) -> V41 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V47) -> fun (V48) -> V47 end end, {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--nestedDpair'('erased', V1, V30, V3)), fun () -> ('un--expr'(('un--pdef'()), V1, V3)) end})), fun (V49) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V49, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V50) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V50)))), case V29 of {'Idris.Text.Bounded.MkBounded', E26, E27, E28, E29, E30, E31} -> (fun (V51, V52, V53, V54, V55, V56) -> V51 end(E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V50))))}, case V50 of {'Idris.Text.Bounded.MkBounded', E32, E33, E34, E35, E36, E37} -> (fun (V57, V58, V59, V60, V61, V62) -> V57 end(E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V63) -> fun (V64) -> V63 end end, ('un--iOperator'()))), fun (V65) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V65, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V66) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSectionR', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V2, V66)))), case V29 of {'Idris.Text.Bounded.MkBounded', E38, E39, E40, E41, E42, E43} -> (fun (V67, V68, V69, V70, V71, V72) -> V67 end(E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V66 of {'Idris.Text.Bounded.MkBounded', E44, E45, E46, E47, E48, E49} -> (fun (V73, V74, V75, V76, V77, V78) -> V73 end(E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> ('un--tuple'('erased', V1, V2, V3, case V29 of {'Idris.Text.Bounded.MkBounded', E50, E51, E52, E53, E54, E55} -> (fun (V79, V80, V81, V82, V83, V84) -> V79 end(E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end} end} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Source.Token'})), fun (V85) -> begin (V86 = {'Idris.Core.FC.MkFC', V1, V85, V85}), begin (V87 = {'Idris.Idris.Syntax.PRef', V86, {'Idris.Core.Name.MN', <<"__leftTupleSection"/utf8>>, 0}}), {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--nonEmptyTuple'('erased', V1, V2, V3, V87))}, fun () -> fun (V88) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PLam', V86, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V87, {'Idris.Idris.Syntax.PInfer', V86}, case V88 of {'Idris.Text.Bounded.MkBounded', E56, E57, E58, E59, E60, E61} -> (fun (V89, V90, V91, V92, V93, V94) -> V89 end(E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end end} end} end} end} end} end}.
'un--binder'(V0, V1) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--let_'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--autoImplicitPi'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--defaultImplicitPi'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--forall_'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--implicitPi'(V0, V1)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--explicitPi'(V0, V1)), fun () -> ('un--lam'(V0, V1)) end} end} end} end} end} end}.
'un--bindSymbol'() -> {'Idris.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.Explicit'}})) end}, fun () -> {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V5, {'Idris.Text.Parser.Core.Empty', {'Idris.Core.TT.AutoImplicit'}})) end} end}.
'un--bindList'(V0, V1) -> ('Idris.Idris2.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('un--multiplicity'()), fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('un--simpleExpr'(V0, V1))}, fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser':'un--option'('erased', 'erased', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V3))}, {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, fun (V4) -> fun (V5) -> V5 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)))), fun (V6) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V6, ('un--opExpr'(('un--pdef'()), V0, V1)))) end})), fun (V7) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('un--getMult'(V2)), fun (V8) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V3, V7}}} end} end} end end} end})).
'un--autoNumberArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--24246-14277--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.AutoNumberArg'}, {'Idris.Builtin.MkPair', V2, ('nested--24246-14278--in--un--parse'(V2, V1, V0))}}}.
'un--autoImplicitPi'(V0, V1) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> fun (V2) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)), fun () -> fun (V3) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Text.Parser.Core.Commit'}, fun (V4) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('un--pibindList'(V0, V1)), fun () -> fun (V5) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> fun (V7) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V8) -> {'Idris.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.AutoImplicit'}, V5, V8))} end end} end end} end end} end end} end} end end} end end}.
'un--atom'(V0) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Type"/utf8>>))}, fun () -> fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V1))}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V2) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V2)), case V2 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--constant'())}, fun () -> fun (V9) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V9)), case V9 of {'Idris.Text.Bounded.MkBounded', E6, E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14, V15) -> V10 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>))}, fun () -> fun (V16) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V16))}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"?"/utf8>>))}, fun () -> fun (V17) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V17))}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--holeName'())}, fun () -> fun (V18) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PHole', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V18)), 1, case V18 of {'Idris.Text.Bounded.MkBounded', E12, E13, E14, E15, E16, E17} -> (fun (V19, V20, V21, V22, V23, V24) -> V19 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"MkWorld"/utf8>>))}, fun () -> fun (V25) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V25)), {'Idris.Core.TT.WorldVal'}}} end end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"World"/utf8>>))}, fun () -> fun (V26) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V26)), {'Idris.Core.TT.WorldType'}}} end end}, fun () -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"search"/utf8>>))}, fun () -> fun (V27) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSearch', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V27)), (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))}} end end} end} end} end} end} end} end} end} end}.
'un--argExpr'(V0, V1, V2) -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), fun (V3) -> {'Idris.Text.Parser.Core.SeqEat', 1, ('un--simpleExpr'(V1, V2)), fun () -> fun (V4) -> case V4 of {'Idris.Idris.Syntax.PHole', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedExpArg', {'Idris.Idris.Syntax.PHole', V5, 0, V7}} | []]} end(E0, E1, E2)); _ -> {'Idris.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedExpArg', V4} | []]} end end end} end}, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, {'Idris.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), fun (V8) -> ('nested--11457-1393--in--un--braceArgs'(V2, V1, V0, V1, V2)) end}, ('case--argExpr-1741'(V2, V1, V0, case V0 of {'Idris.Idris.Parser.MkParseOpts', E3, E4} -> (fun (V9, V10) -> V10 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end}.
'un--appExpr'(V0, V1, V2) -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--case_'(V1, V2)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--doBlock'(V1, V2)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--lambdaCase'(V1, V2)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--lazy'(V1, V2)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--if_'(V1, V2)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, ('un--with_'(V1, V2)), fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V5, V6)) end end end end, fun (V7) -> fun (V8) -> {'Idris.Builtin.MkPair', V7, V8} end end, ('un--simpleExpr'(V1, V2)))), fun (V9) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V9, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--argExpr'(V0, V1, V2)))))) end}}, fun () -> fun (V10) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V10 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V11, V12, V13, V14, V15, V16) -> V11 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> {'Idris.Text.Parser.Core.Empty', ('nested--11456-1193--in--un--applyExpImp'(V2, V1, V0, ('Idris.Idris2.Text.Bounded':'un--start'('erased', V10)), ('Idris.Idris2.Text.Bounded':'un--end'('erased', V10)), V18, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V27, V28, V29)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V30, V31)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V19))))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V34, V35)) end end end end, fun (V36) -> fun (V37) -> {'Idris.Builtin.MkPair', V36, V37} end end, ('un--simpleExpr'(V1, V2)))), fun (V38) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V38, ('Idris.Idris2.Text.Parser':'un--many'('erased', 'erased', ('un--argExpr'(V0, V1, V2)))))) end}}, fun () -> fun (V39) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V39 of {'Idris.Text.Bounded.MkBounded', E8, E9, E10, E11, E12, E13} -> (fun (V40, V41, V42, V43, V44, V45) -> V40 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V46) -> case V46 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V47, V48) -> {'Idris.Text.Parser.Core.Empty', ('nested--11456-1193--in--un--applyExpImp'(V2, V1, V0, ('Idris.Idris2.Text.Bounded':'un--start'('erased', V39)), ('Idris.Idris2.Text.Bounded':'un--end'('erased', V39)), V47, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V56, V57, V58)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V59, V60)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V48))))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Alt', 0, 0, case ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V63, V64)) end end end end, fun (V65) -> fun (V66) -> {'Idris.Builtin.MkPair', V65, V66} end end, ('un--iOperator'()))), fun (V67) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V67, ('un--expr'(('un--pdef'()), V1, V2)))) end}}, fun () -> fun (V68) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V68 of {'Idris.Text.Bounded.MkBounded', E16, E17, E18, E19, E20, E21} -> (fun (V69, V70, V71, V72, V73, V74) -> V69 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V75) -> case V75 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V76, V77) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrefixOp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V68)), V76, V77}} end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', 1, {'Idris.Text.Parser.Core.Bounds', {'Idris.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V80, V81)) end end end end, fun (V82) -> fun (V83) -> {'Idris.Builtin.MkPair', V82, V83} end end, ('un--iOperator'()))), fun (V84) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V84, ('un--expr'(('un--pdef'()), V1, V2)))) end}}, fun () -> fun (V85) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.Empty', case V85 of {'Idris.Text.Bounded.MkBounded', E24, E25, E26, E27, E28, E29} -> (fun (V86, V87, V88, V89, V90, V91) -> V86 end(E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V92) -> case V92 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V93, V94) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrefixOp', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V85)), V93, V94}} end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Text.Parser.Core.Fail', 1, <<"Expected \x{27}case\x{27}, \x{27}if\x{27}, \x{27}do\x{27}, application or operator expression"/utf8>>} end} end} end} end} end} end} end} end}.
