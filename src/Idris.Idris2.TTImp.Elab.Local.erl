-module('Idris.Idris2.TTImp.Elab.Local').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in checkCaseLocal-4865'/24,
  'case--case block in checkCaseLocal-4764'/20,
  'case--case block in checkCaseLocal-4572'/19,
  'case--checkCaseLocal-4534'/17,
  'case--case block in getLocalTerm-4444'/11,
  'case--getLocalTerm-4406'/8,
  'case--checkLocal-4332'/21,
  'case--checkLocal-4275'/25,
  'case--checkLocal-4207'/28,
  'case--checkLocal-4020'/19,
  'case--checkLocal-3943'/17,
  'case--checkLocal,newName-3799'/16,
  'case--checkLocal,applyEnv-3748'/16,
  'case--checkLocal,dropLinear-3584'/18,
  'nested--10046-3556--in--un--updateTyName'/15,
  'nested--10046-3558--in--un--updateName'/15,
  'nested--10046-3557--in--un--updateDataName'/15,
  'nested--10046-3559--in--un--setPublic'/14,
  'nested--10046-3555--in--un--newName'/15,
  'nested--10046-3553--in--un--dropLinear'/15,
  'nested--10046-3554--in--un--applyEnv'/16,
  'un--getLocalTerm'/6,
  'un--checkLocal'/14,
  'un--checkCaseLocal'/16
]).
'case--case block in case block in checkCaseLocal-4865'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, {'Idris.Builtin.MkPair', V20, fun (V24) -> fun (V25) -> V19 end end}}} | V8].
'case--case block in checkCaseLocal-4764'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V26 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V24, V25)) end end}, V21)))))))) end))(V22))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V7, V20))(V22))), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> begin (V34 = [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, {'Idris.Builtin.MkPair', V21, fun (V32) -> fun (V33) -> V20 end end}}} | V8]), (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V34, V7, V2, V1))(V22)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkCaseLocal-4572'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V19, V20, V21, V22, V23) -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Func'}, V4} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V24, V25, V26) -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.DataCon', V24, V25}, V4} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.TyCon', V27, V28}, V4} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Func'}, V4} end.
'case--checkCaseLocal-4534'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> begin (V40 = begin (V18 = {'Idris.Prelude.Types.Just', V17}), ('case--case block in checkCaseLocal-4572'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18, case V17 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V36 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), fun (V41) -> begin (V42 = (('un--getLocalTerm'(V0, V14, V6, V7, V40, V3))(V41))), case V42 of {'Idris.Prelude.Types.Left', E22} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V45, V46) -> begin (V50 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V48, V49)) end end}, V46)))))))) end))(V41))), case V50 of {'Idris.Prelude.Types.Left', E26} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V52) -> begin (V53 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V7, V45))(V41))), case V53 of {'Idris.Prelude.Types.Left', E28} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V55) -> begin (V58 = [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, {'Idris.Builtin.MkPair', V46, fun (V56) -> fun (V57) -> V45 end end}}} | V8]), (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V58, V7, V2, V1))(V41)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V2, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getLocalTerm-4444'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, [V7 | V12]}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getLocalTerm-4406'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--getLocalTerm'(V0, V6, V5, V4, {'Idris.Core.TT.App', V5, V3, {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Nothing'}, V9}}, V2))(V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, [V9 | V16]}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Case Local failed"/utf8>>}, V17)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLocal-4332'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V20, V6)).
'case--checkLocal-4275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.UnifyState.MkUState', V25, V26, V27, V28, V29, V30, V31, V32, [], V34} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLocal-4207'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.UnifyState.MkUState', V28, V29, V30, V31, V32, V33, V34, V35, V24, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLocal-4020'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> ('nested--10046-3559--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V19)) end, V3)); 1 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLocal-3943'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> case V17 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V27 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLocal,newName-3799'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Types.Just', E3} -> (fun (V19) -> V19 end(E3)); _ -> V13 end end(E1, E2)); _ -> V13 end end(E0)); _ -> V13 end.
'case--checkLocal,applyEnv-3748'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> {'Idris.Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, ((V22 + 1) rem 9223372036854775808), V23, V24, V25} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLocal,dropLinear-3584'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V16, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})))), ('nested--10046-3553--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, 'erased', V15))}; 1 -> {'Idris.Core.Env.::', V16, ('nested--10046-3553--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, 'erased', V15))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10046-3556--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2} -> (fun (V15, V16, V17) -> {'Idris.TTImp.TTImp.MkImpTy', V15, ('nested--10046-3555--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)), V17} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10046-3558--in--un--updateName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> {'Idris.TTImp.TTImp.IClaim', V15, V16, V17, V18, ('nested--10046-3556--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V19))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V20, V21, V22) -> {'Idris.TTImp.TTImp.IDef', V20, ('nested--10046-3555--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21)), V22} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V23, V24, V25) -> {'Idris.TTImp.TTImp.IData', V23, V24, ('nested--10046-3557--in--un--updateDataName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25))} end(E8, E9, E10)); _ -> V14 end.
'nested--10046-3557--in--un--updateDataName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> {'Idris.TTImp.TTImp.MkImpData', V15, ('nested--10046-3555--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)), V17, V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> ('nested--10046-3556--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V20)) end, V19))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V21, V22, V23) -> {'Idris.TTImp.TTImp.MkImpLater', V21, ('nested--10046-3555--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V22)), V23} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10046-3559--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V14, V15, V16, V17, V18) -> {'Idris.TTImp.TTImp.IClaim', V14, V15, {'Idris.Core.TT.Public'}, V17, V18} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V19, V20, V21) -> {'Idris.TTImp.TTImp.IData', V19, {'Idris.Core.TT.Public'}, V21} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IRecord', E8, E9, E10, E11} -> (fun (V22, V23, V24, V25) -> {'Idris.TTImp.TTImp.IRecord', V22, V23, {'Idris.Core.TT.Public'}, V25} end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IParameters', E12, E13, E14} -> (fun (V26, V27, V28) -> {'Idris.TTImp.TTImp.IParameters', V26, V27, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V29) -> ('nested--10046-3559--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V29)) end, V28))} end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamespace', E15, E16, E17} -> (fun (V30, V31, V32) -> {'Idris.TTImp.TTImp.INamespace', V30, V31, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V33) -> ('nested--10046-3559--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V33)) end, V32))} end(E15, E16, E17)); _ -> V13 end.
'nested--10046-3555--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('case--checkLocal,newName-3799'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, V13, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V17, V18)) end end}, V14, V13)))).
'nested--10046-3553--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V15, V16) -> ('case--checkLocal,dropLinear-3584'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, 'erased', 'erased', V16, V15, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V23, V24)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V15)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10046-3554--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V31 = begin (V30 = ('erlang':'put'(V10, case V19 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.UnifyState.MkUState', V20, V21, V22, V23, V24, V25, ((V26 + 1) rem 9223372036854775808), V27, V28, V29} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V44 = {'Idris.Core.Name.Nested', {'Idris.Builtin.MkPair', V13, case V19 of {'Idris.Core.UnifyState.MkUState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V40 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V14}), begin (V45 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V12, V44))(V15))), case V45 of {'Idris.Prelude.Types.Left', E24} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V47) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--addName'(V12, V47))(V15))), case V48 of {'Idris.Prelude.Types.Left', E26} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V47}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Core.Env':'un--allVars'(V0, V5)))), fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V51, {'Idris.Core.TT.Ref', V51, V52, {'Idris.Core.Name.Resolved', V50}}, V5)) end end}}}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getLocalTerm'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, []}} end; [E0 | E1] -> (fun (V7, V8) -> ('case--getLocalTerm-4406'(V0, V7, V8, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V3)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V31 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V19 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V75 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', case V17 of {'Idris.TTImp.Elab.Check.MkEState', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V37 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, case V35 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V49 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V75 of {'Idris.Prelude.Types.Left', E56} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V77) -> begin (V100 = case V77 of {'Idris.Prelude.Types.Just', E58} -> (fun (V78) -> case V78 of {'Idris.Core.Context.MkGlobalDef', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V88 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V101 = ('case--checkLocal-4020'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V17, V31, V35, V77, V100, ('Idris.Idris2.Core.TT':'dn--un--==_Eq__Visibility'(V100, {'Idris.Core.TT.Public'}))))), begin (V102 = ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V101))), begin (V109 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V103) -> fun (V104) -> ('nested--10046-3554--in--un--applyEnv'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V31, V103, V104)) end end, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V107, V108)) end end}, V102)), []))(V13))), case V109 of {'Idris.Prelude.Types.Left', E80} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V111) -> begin (V112 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V111, V7))), begin (V113 = ('nested--10046-3553--in--un--dropLinear'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', V8))), begin (V115 = begin (V114 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V114} end), case V115 of {'Idris.Prelude.Types.Left', E82} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V117) -> begin (V128 = case V117 of {'Idris.Core.UnifyState.MkUState', E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V126 end(E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V140 = begin (V139 = ('erlang':'put'(V3, case V117 of {'Idris.Core.UnifyState.MkUState', E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137, V138) -> {'Idris.Core.UnifyState.MkUState', V129, V130, V131, V132, V133, V134, V135, V136, [], V138} end(E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V139} end), case V140 of {'Idris.Prelude.Types.Left', E104} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V142) -> begin (V145 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V143) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, [], V112, V113, V143)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V144) -> ('nested--10046-3558--in--un--updateName'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V112, V144)) end, V101)), []))(V13))), case V145 of {'Idris.Prelude.Types.Left', E106} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V147) -> begin (V149 = begin (V148 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V148} end), case V149 of {'Idris.Prelude.Types.Left', E108} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V151) -> begin (V163 = begin (V162 = ('erlang':'put'(V3, case V151 of {'Idris.Core.UnifyState.MkUState', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161) -> {'Idris.Core.UnifyState.MkUState', V152, V153, V154, V155, V156, V157, V158, V159, V128, V161} end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V162} end), case V163 of {'Idris.Prelude.Types.Left', E120} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V165) -> (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V112, V8, V11, V12))(V13)) end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkCaseLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V11, case V19 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15))), case V46 of {'Idris.Prelude.Types.Left', E28} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E30} -> (fun (V49) -> begin (V72 = begin (V50 = {'Idris.Prelude.Types.Just', V49}), ('case--case block in checkCaseLocal-4572'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V19, V49, V50, case V49 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V68 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V73 = (('un--getLocalTerm'(V0, V1, V9, V8, V72, V12))(V15))), case V73 of {'Idris.Prelude.Types.Left', E52} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V75) -> case V75 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V76, V77) -> begin (V81 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V78) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Var $ns)'('erased', V78)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Var $ns)'('erased', V79, V80)) end end}, V77)))))))) end))(V15))), case V81 of {'Idris.Prelude.Types.Left', E56} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V83) -> begin (V84 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V8, V76))(V15))), case V84 of {'Idris.Prelude.Types.Left', E58} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V86) -> begin (V89 = [{'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V11}, {'Idris.Builtin.MkPair', V77, fun (V87) -> fun (V88) -> V76 end end}}} | V7]), (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V89, V8, V13, V14))(V15)) end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V14))(V15)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
