-module('Idris.Idris2.Utils.Shunting').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--shunt-8246'/7,
  'case--processStack-7991'/11,
  'case--higher-7867'/8,
  'case--higher-7794'/8,
  'nested--2819-8147--in--un--sprec'/9,
  'nested--2819-8146--in--un--sop'/9,
  'nested--2819-8145--in--un--sloc'/9,
  'dn--un--show_Show__OpPrec'/1,
  'dn--un--show_Show__((Tree $op) $a)'/4,
  'dn--un--show_Show__((Tok $op) $a)'/4,
  'dn--un--showPrec_Show__((Tree $op) $a)'/5,
  'dn--un--showPrec_Show__((Tok $op) $a)'/5,
  'dn--un--__Impl_Show_((Tree $op) $a)'/3,
  'dn--un--__Impl_Show_((Tok $op) $a)'/3,
  'un--shunt'/6,
  'un--processStack'/7,
  'un--parseOps'/5,
  'un--output'/4,
  'un--isLAssoc'/1,
  'un--higher'/7,
  'un--getPrec'/1,
  'un--emit'/5
]).
'case--shunt-8246'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', V7} end; _ -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V10)) end end end(E0, E1)); _ -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V11)) end end.
'case--processStack-7991'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> begin (V12 = ('un--emit'('erased', 'erased', V9, {'Idris.Utils.Shunting.Op', V3, V4, V5}, V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> (('un--processStack'('erased', 'erased', V2, V9, V6, V7, V8))(V11)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}} | V6]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--higher-7867'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Operator \x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V1 of {'Idris.Prelude.Show.dn--un--__mkShow', E0, E1} -> (fun (V9, V10) -> (V9(V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"\x{27} is non-associative"/utf8>>))))}, V8)) end; 1 -> fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord__Nat'(('un--getPrec'(V5)), V4))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--higher-7794'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Operator \x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V1 of {'Idris.Prelude.Show.dn--un--__mkShow', E0, E1} -> (fun (V9, V10) -> (V9(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"\x{27} is non-associative"/utf8>>))))}, V8)) end; 1 -> fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord__Nat'(V3, ('un--getPrec'(V5))))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2819-8147--in--un--sprec'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> V12 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2819-8146--in--un--sop'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> V11 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2819-8145--in--un--sloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__OpPrec'(V0) -> case V0 of {'Idris.Utils.Shunting.AssocL', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"infixl "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V1)))) end(E0)); {'Idris.Utils.Shunting.AssocR', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"infixr "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V2)))) end(E1)); {'Idris.Utils.Shunting.NonAssoc', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"infix "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V3)))) end(E2)); {'Idris.Utils.Shunting.Prefix', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"prefix "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V4)))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__((Tree $op) $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Utils.Shunting.Infix', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Show.dn--un--__mkShow', E4, E5} -> (fun (V8, V9) -> (V8(V5)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__((Tree $op) $a)'('erased', 'erased', V2, V6)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__((Tree $op) $a)'('erased', 'erased', V2, V7)), <<")"/utf8>>)))))))))))) end(E0, E1, E2, E3)); {'Idris.Utils.Shunting.Pre', E6, E7, E8} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Show.dn--un--__mkShow', E9, E10} -> (fun (V13, V14) -> (V13(V11)) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('dn--un--show_Show__((Tree $op) $a)'('erased', 'erased', V2, V12)), <<")"/utf8>>)))))))) end(E6, E7, E8)); {'Idris.Utils.Shunting.Leaf', E11} -> (fun (V15) -> case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Show.dn--un--__mkShow', E12, E13} -> (fun (V16, V17) -> (V16(V15)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__((Tok $op) $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Utils.Shunting.Op', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Show.dn--un--__mkShow', E3, E4} -> (fun (V7, V8) -> (V7(V5)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('dn--un--show_Show__OpPrec'(V6)))))) end(E0, E1, E2)); {'Idris.Utils.Shunting.Expr', E5} -> (fun (V9) -> case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Show.dn--un--__mkShow', E6, E7} -> (fun (V10, V11) -> (V10(V9)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__((Tree $op) $a)'(V0, V1, V2, V3, V4) -> ('dn--un--show_Show__((Tree $op) $a)'('erased', 'erased', V2, V4)).
'dn--un--showPrec_Show__((Tok $op) $a)'(V0, V1, V2, V3, V4) -> ('dn--un--show_Show__((Tok $op) $a)'('erased', 'erased', V2, V4)).
'dn--un--__Impl_Show_((Tree $op) $a)'(V0, V1, V2) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('dn--un--show_Show__((Tree $op) $a)'('erased', 'erased', V2, V3)) end, fun (V4) -> fun (V5) -> ('dn--un--showPrec_Show__((Tree $op) $a)'('erased', 'erased', V2, V4, V5)) end end}.
'dn--un--__Impl_Show_((Tok $op) $a)'(V0, V1, V2) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('dn--un--show_Show__((Tok $op) $a)'('erased', 'erased', V2, V3)) end, fun (V4) -> fun (V5) -> ('dn--un--showPrec_Show__((Tok $op) $a)'('erased', 'erased', V2, V4, V5)) end end}.
'un--shunt'(V0, V1, V2, V3, V4, V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Utils.Shunting.Expr', E2} -> (fun (V8) -> fun (V9) -> begin (V10 = ('un--emit'('erased', 'erased', V3, {'Idris.Utils.Shunting.Expr', V8}, V9))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> (('un--shunt'('erased', 'erased', V2, V3, V4, V7))(V9)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); {'Idris.Utils.Shunting.Op', E5, E6, E7} -> (fun (V13, V14, V15) -> fun (V16) -> begin (V17 = (('un--processStack'('erased', 'erased', V2, V3, V4, V14, V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('un--shunt'('erased', 'erased', V2, V3, [{'Idris.Builtin.MkPair', V13, {'Idris.Builtin.MkPair', V14, V15}} | V19], V7))(V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); [] -> fun (V20) -> begin (V23 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> fun (V22) -> ('un--emit'('erased', 'erased', V3, {'Idris.Utils.Shunting.Op', ('nested--2819-8145--in--un--sloc'('erased', 'erased', V2, V4, V3, 'erased', 'erased', 'erased', V21)), ('nested--2819-8146--in--un--sop'('erased', 'erased', V2, V4, V3, 'erased', 'erased', 'erased', V21)), ('nested--2819-8147--in--un--sprec'('erased', 'erased', V2, V4, V3, 'erased', 'erased', 'erased', V21))}, V22)) end end, V4, []))(V20))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E12} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V29) -> case V29 of [E14 | E15] -> (fun (V30, V31) -> case V31 of [] -> {'Idris.Prelude.Types.Right', V30}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V20)) end end(E14, E15)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V20)) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processStack'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = (('un--higher'('erased', V2, V10, V12, V13, V5, V6))(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> case V17 of 0 -> begin (V18 = ('un--emit'('erased', 'erased', V3, {'Idris.Utils.Shunting.Op', V10, V12, V13}, V14))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> (('un--processStack'('erased', 'erased', V2, V3, V9, V5, V6))(V14)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V12, V13}} | V9]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseOps'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Shunting.Out'}, [], V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('un--shunt'('erased', 'erased', V2, V7, [], V3))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--output'(V0, V1, V2, V3) -> case V2 of [] -> case V3 of {'Idris.Utils.Shunting.Op', E2, E3, E4} -> (fun (V4, V5, V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V7)) end end(E2, E3, E4)); _ -> case V3 of {'Idris.Utils.Shunting.Expr', E1} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Leaf', V8} | V2]} end end(E1)); _ -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V10)) end end end; [E5 | E6] -> (fun (V11, V12) -> case V3 of {'Idris.Utils.Shunting.Op', E14, E15, E16} -> (fun (V13, V14, V15) -> case V15 of {'Idris.Utils.Shunting.Prefix', E24} -> (fun (V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Pre', V13, V14, V11} | V12]} end end(E24)); _ -> case V12 of [E18 | E19] -> (fun (V18, V19) -> case V3 of {'Idris.Utils.Shunting.Op', E21, E22, E23} -> (fun (V20, V21, V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Infix', V20, V21, V18, V11} | V19]} end end(E21, E22, E23)); _ -> case V3 of {'Idris.Utils.Shunting.Expr', E20} -> (fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Leaf', V24} | V2]} end end(E20)); _ -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V26)) end end end end(E18, E19)); _ -> case V3 of {'Idris.Utils.Shunting.Expr', E17} -> (fun (V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Leaf', V27} | V2]} end end(E17)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V29)) end end end end end(E14, E15, E16)); _ -> case V12 of [E8 | E9] -> (fun (V30, V31) -> case V3 of {'Idris.Utils.Shunting.Op', E11, E12, E13} -> (fun (V32, V33, V34) -> fun (V35) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Infix', V32, V33, V30, V11} | V31]} end end(E11, E12, E13)); _ -> case V3 of {'Idris.Utils.Shunting.Expr', E10} -> (fun (V36) -> fun (V37) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Leaf', V36} | V2]} end end(E10)); _ -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V38)) end end end end(E8, E9)); _ -> case V3 of {'Idris.Utils.Shunting.Expr', E7} -> (fun (V39) -> fun (V40) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Leaf', V39} | V2]} end end(E7)); _ -> fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V41)) end end end end end(E5, E6)); _ -> case V3 of {'Idris.Utils.Shunting.Expr', E0} -> (fun (V42) -> fun (V43) -> {'Idris.Prelude.Types.Right', [{'Idris.Utils.Shunting.Leaf', V42} | V2]} end end(E0)); _ -> fun (V44) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V44)) end end end.
'un--isLAssoc'(V0) -> case V0 of {'Idris.Utils.Shunting.AssocL', E0} -> (fun (V1) -> 0 end(E0)); _ -> 1 end.
'un--higher'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Utils.Shunting.Prefix', E2} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', 1} end end(E2)); _ -> case V4 of {'Idris.Utils.Shunting.NonAssoc', E1} -> (fun (V9) -> ('case--higher-7794'('erased', V1, V3, V9, V5, V6, V2, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V9, ('un--getPrec'(V6)))))) end(E1)); _ -> case V6 of {'Idris.Utils.Shunting.NonAssoc', E0} -> (fun (V10) -> ('case--higher-7867'('erased', V1, V3, V5, V10, V4, V2, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('un--getPrec'(V4)), V10)))) end(E0)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'dn--un-->_Ord__Nat'(('un--getPrec'(V4)), ('un--getPrec'(V6)))), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('un--getPrec'(V4)), ('un--getPrec'(V6)))), fun () -> ('un--isLAssoc'(V4)) end)) end))} end end end end.
'un--getPrec'(V0) -> case V0 of {'Idris.Utils.Shunting.AssocL', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Utils.Shunting.AssocR', E1} -> (fun (V2) -> V2 end(E1)); {'Idris.Utils.Shunting.NonAssoc', E2} -> (fun (V3) -> V3 end(E2)); {'Idris.Utils.Shunting.Prefix', E3} -> (fun (V4) -> V4 end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emit'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = (('un--output'('erased', 'erased', V8, V3))(V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('erlang':'put'(V2, V11))), {'Idris.Prelude.Types.Right', V12} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
