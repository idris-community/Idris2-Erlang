-module('Idris.Idris2.Utils.Binary').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--fromBuf-2719'/2,
  'case--toBuf-2672'/3,
  'case--case block in toLimbs-2612'/2,
  'case--toLimbs-2594'/2,
  'case--fromBuf-2229'/5,
  'case--fromBuf-2104'/4,
  'case--fromBuf-1814'/3,
  'case--toBuf-1741'/4,
  'case--fromBuf-1652'/2,
  'case--case block in fromBuf-1557'/4,
  'case--fromBuf-1537'/4,
  'case--toBuf-1460'/6,
  'case--fromBuf-1368'/4,
  'case--toBuf-1294'/6,
  'case--fromBuf-1199'/3,
  'case--toBuf-1126'/4,
  'case--getTag-1056'/3,
  'case--tag-982'/4,
  'case--extendBinary-916'/8,
  'case--extendBinary-875'/7,
  'case--initBinaryS-838'/2,
  'case--initBinary-809'/1,
  'case--readFromFile-730'/2,
  'case--incLoc-632'/2,
  'nested--6648-2474--in--un--writeAll'/7,
  'nested--6650-2502--in--un--readElems'/7,
  'nested--6498-2351--in--un--readElems'/5,
  'nested--6496-2314--in--un--length_aux'/6,
  'nested--6496-2315--in--un--TailRec_length'/5,
  'dn--un--toBuf_TTC__String'/2,
  'dn--un--toBuf_TTC__Nat'/2,
  'dn--un--toBuf_TTC__Integer'/2,
  'dn--un--toBuf_TTC__Int'/3,
  'dn--un--toBuf_TTC__Double'/3,
  'dn--un--toBuf_TTC__Char'/3,
  'dn--un--toBuf_TTC__Bool'/2,
  'dn--un--toBuf_TTC__Binary'/2,
  'dn--un--toBuf_TTC__(|Unit,MkUnit|)'/2,
  'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/5,
  'dn--un--toBuf_TTC__(Maybe $a)'/4,
  'dn--un--toBuf_TTC__(List1 $a)'/4,
  'dn--un--toBuf_TTC__(List $a)'/5,
  'dn--un--toBuf_TTC__((Vect $n) $a)'/5,
  'dn--un--toBuf_TTC__((Either $a) $b)'/5,
  'dn--un--toBuf_TTC__((DPair $a) $p)'/5,
  'dn--un--fromBuf_TTC__String'/2,
  'dn--un--fromBuf_TTC__Nat'/2,
  'dn--un--fromBuf_TTC__Integer'/2,
  'dn--un--fromBuf_TTC__Int'/2,
  'dn--un--fromBuf_TTC__Double'/2,
  'dn--un--fromBuf_TTC__Char'/2,
  'dn--un--fromBuf_TTC__Bool'/2,
  'dn--un--fromBuf_TTC__Binary'/2,
  'dn--un--fromBuf_TTC__(|Unit,MkUnit|)'/2,
  'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/5,
  'dn--un--fromBuf_TTC__(Maybe $a)'/4,
  'dn--un--fromBuf_TTC__(List1 $a)'/4,
  'dn--un--fromBuf_TTC__(List $a)'/4,
  'dn--un--fromBuf_TTC__((Vect $n) $a)'/4,
  'dn--un--fromBuf_TTC__((Either $a) $b)'/5,
  'dn--un--fromBuf_TTC__((DPair $a) $p)'/5,
  'dn--un--__Impl_TTC_String'/0,
  'dn--un--__Impl_TTC_Nat'/0,
  'dn--un--__Impl_TTC_Integer'/0,
  'dn--un--__Impl_TTC_Int'/0,
  'dn--un--__Impl_TTC_Double'/0,
  'dn--un--__Impl_TTC_Char'/0,
  'dn--un--__Impl_TTC_Bool'/0,
  'dn--un--__Impl_TTC_Binary'/0,
  'dn--un--__Impl_TTC_(|Unit,MkUnit|)'/0,
  'dn--un--__Impl_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/3,
  'dn--un--__Impl_TTC_(Maybe $a)'/2,
  'dn--un--__Impl_TTC_(List1 $a)'/2,
  'dn--un--__Impl_TTC_(List $a)'/2,
  'dn--un--__Impl_TTC_((Vect $n) $a)'/3,
  'dn--un--__Impl_TTC_((Either $a) $b)'/3,
  'dn--un--__Impl_TTC_((DPair $a) $p)'/3,
  'un--writeToFile'/2,
  'un--toRead'/1,
  'un--toLimbs'/1,
  'un--toBuf'/2,
  'un--tag'/3,
  'un--readFromFile'/2,
  'un--newBinary'/2,
  'un--initBinaryS'/2,
  'un--initBinary'/1,
  'un--incLoc'/2,
  'un--getTag'/2,
  'un--fromLimbs'/1,
  'un--fromBuf'/2,
  'un--extendBinary'/2,
  'un--corrupt'/3,
  'un--blockSize'/0,
  'un--avail'/1,
  'un--appended'/2
]).
'case--fromBuf-2719'(V0, V1) -> case V1 of 0 -> fun (V2) -> begin (V8 = ('dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--toBuf_TTC__Int'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> ('dn--un--fromBuf_TTC__Int'(V6, V7)) end end}, V0, V2))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Integer'(('un--fromLimbs'(V10))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V11) -> begin (V17 = ('dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--toBuf_TTC__Int'(V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('dn--un--fromBuf_TTC__Int'(V15, V16)) end end}, V0, V11))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('un--fromLimbs'(V19))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V20) -> ('un--corrupt'('erased', <<"Integer"/utf8>>, V20)) end end.
'case--toBuf-2672'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> begin (V4 = ('un--tag'(V1, 0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> ('dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--toBuf_TTC__Int'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> ('dn--un--fromBuf_TTC__Int'(V10, V11)) end end}, V1, ('un--toLimbs'(('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Integer'(V0)))), V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V12) -> begin (V13 = ('un--tag'(V1, 1, V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> ('dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--toBuf_TTC__Int'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> ('dn--un--fromBuf_TTC__Int'(V19, V20)) end end}, V1, ('un--toLimbs'(V0)), V12)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toLimbs-2612'(V0, V1) -> case V1 of 0 -> [('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Int'(1)) | []]; 1 -> [(V0 band 4294967295) | ('un--toLimbs'((V0 bsr 32)))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toLimbs-2594'(V0, V1) -> case V1 of 0 -> []; 1 -> ('case--case block in toLimbs-2612'(V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Integer'(V0, ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Integer'(1)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromBuf-2229'(V0, V1, V2, V3, V4) -> case V4 of 0 -> fun (V5) -> begin (V8 = case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V6, V7) -> ((V7(V3))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V10}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V11) -> begin (V14 = case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E4, E5} -> (fun (V12, V13) -> ((V13(V3))(V11)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V16}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V17) -> ('un--corrupt'('erased', <<"Either"/utf8>>, V17)) end end.
'case--fromBuf-2104'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; 1 -> fun (V5) -> begin (V8 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V6, V7) -> ((V7(V2))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V10}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V11) -> ('un--corrupt'('erased', <<"Maybe"/utf8>>, V11)) end end.
'case--fromBuf-1814'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getDouble'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V31, V32, V33, V34) -> V31 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V35, V36, V37, V38) -> V36 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V0, ('un--incLoc'(8, V1))))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Right', V42} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', <<"Double"/utf8>>}}, V47)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toBuf-1741'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V41 = begin (V40 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setDouble'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, case V2 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V32, V33, V34, V35) -> V32 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V36, V37, V38, V39) -> V37 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V4))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> begin (V44 = ('erlang':'put'(V1, ('un--appended'(8, V2))))), {'Idris.Prelude.Types.Right', V44} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> begin (V46 = (('un--extendBinary'(8, V2))(V45))), case V46 of {'Idris.Prelude.Types.Left', E10} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V48) -> begin (V85 = begin (V84 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setDouble'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, case V48 of {'Idris.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V76, V77, V78, V79) -> V76 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V48 of {'Idris.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V80, V81, V82, V83) -> V81 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V45))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E20} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V87) -> begin (V88 = ('erlang':'put'(V1, ('un--appended'(8, V48))))), {'Idris.Prelude.Types.Right', V88} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromBuf-1652'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', 1} end; 1 -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end; _ -> fun (V4) -> ('un--corrupt'('erased', <<"Bool"/utf8>>, V4)) end end.
'case--case block in fromBuf-1557'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V42 = begin (V41 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, case V2 of {'Idris.Utils.Binary.MkBin', E1, E2, E3, E4} -> (fun (V33, V34, V35, V36) -> V33 end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Utils.Binary.MkBin', E5, E6, E7, E8} -> (fun (V37, V38, V39, V40) -> V38 end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V4, 0))(V5))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E9} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'put'(V0, ('un--incLoc'(V1, V2))))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E11} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V4, 0, V1, V1}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V49) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t create buffer"/utf8>>}, V49)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromBuf-1537'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V1))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E2} -> (fun (V36) -> begin (V73 = begin (V72 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, case V2 of {'Idris.Utils.Binary.MkBin', E3, E4, E5, E6} -> (fun (V64, V65, V66, V67) -> V64 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Utils.Binary.MkBin', E7, E8, E9, E10} -> (fun (V68, V69, V70, V71) -> V69 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V36, 0))(V4))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E11} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V75) -> begin (V77 = begin (V76 = ('erlang':'put'(V0, ('un--incLoc'(V1, V2))))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E13} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V36, 0, V1, V1}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t create buffer"/utf8>>}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V80) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', <<"Binary"/utf8>>}}, V80)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toBuf-1460'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> begin (V47 = begin (V46 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, case V0 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V34, V35, V36, V37) -> V34 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, V2, case V4 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V38, V39, V40, V41) -> V38 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Utils.Binary.MkBin', E8, E9, E10, E11} -> (fun (V42, V43, V44, V45) -> V43 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V50 = ('erlang':'put'(V1, ('un--appended'(V2, V4))))), {'Idris.Prelude.Types.Right', V50} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V51) -> begin (V52 = (('un--extendBinary'(V2, V4))(V51))), case V52 of {'Idris.Prelude.Types.Left', E14} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V54) -> begin (V95 = begin (V94 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, case V0 of {'Idris.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V82, V83, V84, V85) -> V82 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, V2, case V54 of {'Idris.Utils.Binary.MkBin', E20, E21, E22, E23} -> (fun (V86, V87, V88, V89) -> V86 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V54 of {'Idris.Utils.Binary.MkBin', E24, E25, E26, E27} -> (fun (V90, V91, V92, V93) -> V91 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V51))), {'Idris.Prelude.Types.Right', V94} end), case V95 of {'Idris.Prelude.Types.Left', E28} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V97) -> begin (V98 = ('erlang':'put'(V1, ('un--appended'(V2, V54))))), {'Idris.Prelude.Types.Right', V98} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromBuf-1368'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V41 = begin (V40 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getString'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, case V2 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V32, V33, V34, V35) -> V32 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V36, V37, V38, V39) -> V37 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V4))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'put'(V0, ('un--incLoc'(V1, V2))))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E10} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V47) -> {'Idris.Prelude.Types.Right', V43} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"String length "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(case V2 of {'Idris.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V49, V50, V51, V52) -> V50 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))}}, V48)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toBuf-1294'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> begin (V43 = begin (V42 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, case V4 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V34, V35, V36, V37) -> V34 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V38, V39, V40, V41) -> V39 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V6))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E8} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V45) -> begin (V46 = ('erlang':'put'(V1, ('un--appended'(V2, V4))))), {'Idris.Prelude.Types.Right', V46} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V47) -> begin (V48 = (('un--extendBinary'(V2, V4))(V47))), case V48 of {'Idris.Prelude.Types.Left', E10} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V50) -> begin (V87 = begin (V86 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> V57 end end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V61(V63))), begin (V65 = (V62(V63))), (V64(V65)) end end end end end end end}, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), ((V69(V71))(V70)) end end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V73(V74))), (V75(V74)) end end end end}, fun (V76) -> fun (V77) -> V77 end end}, case V50 of {'Idris.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V78, V79, V80, V81) -> V78 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V50 of {'Idris.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V82, V83, V84, V85) -> V83 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V47))), {'Idris.Prelude.Types.Right', V86} end), case V87 of {'Idris.Prelude.Types.Left', E20} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V89) -> begin (V90 = ('erlang':'put'(V1, ('un--appended'(V2, V50))))), {'Idris.Prelude.Types.Right', V90} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fromBuf-1199'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getInt'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V31, V32, V33, V34) -> V31 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V35, V36, V37, V38) -> V36 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V0, ('un--incLoc'(8, V1))))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Right', V42} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Int "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V49, V50)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V52, V53)) end end}}, {'Idris.Builtin.MkPair', case V1 of {'Idris.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V54, V55, V56, V57) -> V55 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V58, V59, V60, V61) -> V60 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}))))}}, V47)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toBuf-1126'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V41 = begin (V40 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, case V2 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V32, V33, V34, V35) -> V32 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V36, V37, V38, V39) -> V37 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V4))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> begin (V44 = ('erlang':'put'(V1, ('un--appended'(8, V2))))), {'Idris.Prelude.Types.Right', V44} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> begin (V46 = (('un--extendBinary'(8, V2))(V45))), case V46 of {'Idris.Prelude.Types.Left', E10} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V48) -> begin (V85 = begin (V84 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, case V48 of {'Idris.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V76, V77, V78, V79) -> V76 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V48 of {'Idris.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V80, V81, V82, V83) -> V81 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V45))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E20} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V87) -> begin (V88 = ('erlang':'put'(V1, ('un--appended'(8, V48))))), {'Idris.Prelude.Types.Right', V88} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getTag-1056'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getByte'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V31, V32, V33, V34) -> V31 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V35, V36, V37, V38) -> V36 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V0, ('un--incLoc'(1, V1))))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Right', V42} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', <<"Byte"/utf8>>}}, V47)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tag-982'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V41 = begin (V40 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setByte'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, case V2 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V32, V33, V34, V35) -> V32 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V36, V37, V38, V39) -> V37 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V4))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> begin (V44 = ('erlang':'put'(V1, ('un--appended'(1, V2))))), {'Idris.Prelude.Types.Right', V44} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> begin (V46 = (('un--extendBinary'(1, V2))(V45))), case V46 of {'Idris.Prelude.Types.Left', E10} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V48) -> begin (V85 = begin (V84 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setByte'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, case V48 of {'Idris.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V76, V77, V78, V79) -> V76 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V48 of {'Idris.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V80, V81, V82, V83) -> V81 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))(V45))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E20} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V87) -> begin (V88 = ('erlang':'put'(V1, ('un--appended'(1, V48))))), {'Idris.Prelude.Types.Right', V88} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extendBinary-916'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V8, V2, V6, V0}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Buffer expansion failed"/utf8>>}, V10)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extendBinary-875'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ((V5 + V4) rem 9223372036854775808); 1 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--initBinaryS-838'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, ('un--newBinary'(V2, V0)), V3)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Buffer creation failed"/utf8>>}, V4)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--initBinary-809'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, ('un--newBinary'(V1, ('un--blockSize'()))), V2)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Buffer creation failed"/utf8>>}, V3)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--readFromFile-730'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> begin (V31 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V2))(V3))), {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V2, 0, V31, V31}} end end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V32) -> fun (V33) -> {'Idris.Prelude.Types.Left', V32} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--incLoc-632'(V0, V1) -> case V0 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Utils.Binary.MkBin', V2, ((V3 + V1) rem 9223372036854775808), V4, V5} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6648-2474--in--un--writeAll'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V8, V9) -> fun (V10) -> begin (V13 = case V2 of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V11, V12) -> (((V11(V4))(V8))(V10)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> (('nested--6648-2474--in--un--writeAll'('erased', V1, V2, V3, V4, 'erased', V9))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6650-2502--in--un--readElems'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.Vect':'un--reverse'('erased', 'erased', V5))} end; _ -> begin (V8 = (V6 - 1)), fun (V9) -> begin (V12 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V10, V11) -> ((V11(V2))(V9)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('nested--6650-2502--in--un--readElems'('erased', V1, V2, V3, 'erased', {'Idris.Data.Vect.::', V14, V5}, V8))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'nested--6498-2351--in--un--readElems'(V0, V1, V2, V3, V4) -> case V4 of 0 -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V3))} end; _ -> begin (V6 = (V4 - 1)), fun (V7) -> begin (V10 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V8, V9) -> ((V9(V2))(V7)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('nested--6498-2351--in--un--readElems'('erased', V1, V2, [V12 | V3], V6))(V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'nested--6496-2314--in--un--length_aux'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> V5; [E0 | E1] -> (fun (V6, V7) -> ('nested--6496-2314--in--un--length_aux'('erased', V1, V2, V3, V7, ((1 + V5) rem 9223372036854775808))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6496-2315--in--un--TailRec_length'(V0, V1, V2, V3, V4) -> ('nested--6496-2314--in--un--length_aux'('erased', V1, V2, V3, V4, 0)).
'dn--un--toBuf_TTC__String'(V0, V1) -> begin (V2 = ('Idris.Idris2.Erlang.Data.Buffer':'un--stringByteLength'(V1))), fun (V3) -> begin (V4 = ('dn--un--toBuf_TTC__Int'(V0, V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> (('case--toBuf-1294'(V1, V0, V2, V6, V10, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--avail'(V10)), V2))))(V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'dn--un--toBuf_TTC__Nat'(V0, V1) -> ('dn--un--toBuf_TTC__Integer'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Nat_Integer'(V1)))).
'dn--un--toBuf_TTC__Integer'(V0, V1) -> ('case--toBuf-2672'(V1, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Integer'(V1, 0)))).
'dn--un--toBuf_TTC__Int'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--toBuf-1126'(V1, V0, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--avail'(V6)), 8))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC__Double'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--toBuf-1741'(V1, V0, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--avail'(V6)), 8))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC__Char'(V0, V1, V2) -> ('dn--un--toBuf_TTC__Int'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_Int'(V1)), V2)).
'dn--un--toBuf_TTC__Bool'(V0, V1) -> case V1 of 1 -> fun (V2) -> ('un--tag'(V0, 0, V2)) end; 0 -> fun (V3) -> ('un--tag'(V0, 1, V3)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__Binary'(V0, V1) -> begin (V6 = case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V7) -> begin (V8 = ('dn--un--toBuf_TTC__Int'(V0, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> (('case--toBuf-1460'(V1, V0, V6, V10, V14, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--avail'(V14)), V6))))(V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'dn--un--toBuf_TTC__(|Unit,MkUnit|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V10 = case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V8, V9) -> (((V8(V3))(V5))(V7)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E6, E7} -> (fun (V13, V14) -> (((V13(V3))(V6))(V7)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__(Maybe $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> ('un--tag'(V2, 0, V4)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = ('un--tag'(V2, 1, V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E3, E4} -> (fun (V10, V11) -> (((V10(V2))(V5))(V6)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__(List1 $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V9 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V7, V8) -> (((V7(V2))(V4))(V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('dn--un--toBuf_TTC__(List $a)'('erased', V1, V2, V5, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__(List $a)'(V0, V1, V2, V3, V4) -> begin (V5 = ('dn--un--toBuf_TTC__Int'(V2, ('nested--6496-2315--in--un--TailRec_length'('erased', V1, V3, V2, V3)), V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V8, V9) -> fun (V10) -> ((V8(V2))(V10)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC__((Vect $n) $a)'(V0, V1, V2, V3, V4) -> ('nested--6648-2474--in--un--writeAll'('erased', V1, V2, V4, V3, 'erased', V4)).
'dn--un--toBuf_TTC__((Either $a) $b)'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = ('un--tag'(V3, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E3, E4} -> (fun (V10, V11) -> (((V10(V3))(V5))(V6)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> fun (V13) -> begin (V14 = ('un--tag'(V3, 1, V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E8, E9} -> (fun (V17, V18) -> (((V17(V3))(V12))(V13)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC__((DPair $a) $p)'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V10 = case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V8, V9) -> (((V8(V3))(V5))(V7)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> case (('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2))(V5)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E6, E7} -> (fun (V13, V14) -> (((V13(V3))(V6))(V7)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--fromBuf_TTC__String'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC__Int'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> (('case--fromBuf-1368'(V0, V4, V8, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--toRead'(V8)), V4))))(V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Nat'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC__Integer'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Integer'(V0, V1) -> begin (V2 = ('un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V10 = ('dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--toBuf_TTC__Int'(V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> ('dn--un--fromBuf_TTC__Int'(V8, V9)) end end}, V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg__Integer'(('un--fromLimbs'(V12))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V18 = ('dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--toBuf_TTC__Int'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('dn--un--fromBuf_TTC__Int'(V16, V17)) end end}, V0, V1))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Right', ('un--fromLimbs'(V20))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--corrupt'('erased', <<"Integer"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Int'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('case--fromBuf-1199'(V0, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--toRead'(V5)), 8))))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Double'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('case--fromBuf-1814'(V0, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--toRead'(V5)), 8))))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Char'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC__Int'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Char'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Bool'(V0, V1) -> begin (V2 = ('un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 1}; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('un--corrupt'('erased', <<"Bool"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__Binary'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC__Int'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> (('case--fromBuf-1537'(V0, V4, V8, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--toRead'(V8)), V4))))(V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__(|Unit,MkUnit|)'(V0, V1) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}.
'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4) -> begin (V7 = case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V5, V6) -> ((V6(V3))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V12 = case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E4, E5} -> (fun (V10, V11) -> ((V11(V3))(V4)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__(Maybe $a)'(V0, V1, V2, V3) -> begin (V4 = ('un--getTag'(V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; 1 -> begin (V9 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V7, V8) -> ((V8(V2))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--corrupt'('erased', <<"Maybe"/utf8>>, V3)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__(List1 $a)'(V0, V1, V2, V3) -> begin (V6 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V4, V5) -> ((V5(V2))(V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('dn--un--fromBuf_TTC__(List $a)'('erased', V1, V2, V3))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Data.List1.:::', V8, V11}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__(List $a)'(V0, V1, V2, V3) -> begin (V4 = ('dn--un--fromBuf_TTC__Int'(V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('nested--6498-2351--in--un--readElems'('erased', V1, V2, [], ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V6))))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__((Vect $n) $a)'(V0, V1, V2, V3) -> ('nested--6650-2502--in--un--readElems'('erased', V2, V3, V1, 'erased', {'Idris.Data.Vect.Nil'}, V1)).
'dn--un--fromBuf_TTC__((Either $a) $b)'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--getTag'(V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of 0 -> begin (V10 = case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E2, E3} -> (fun (V8, V9) -> ((V9(V3))(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V15 = case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E6, E7} -> (fun (V13, V14) -> ((V14(V3))(V4)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V17}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--corrupt'('erased', <<"Either"/utf8>>, V4)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC__((DPair $a) $p)'(V0, V1, V2, V3, V4) -> begin (V7 = case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V5, V6) -> ((V6(V3))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V12 = case (('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2))(V9)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E4, E5} -> (fun (V10, V11) -> ((V11(V3))(V4)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_TTC_String'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__String'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__String'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Nat'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__Nat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__Nat'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Integer'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__Integer'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__Integer'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Int'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC__Int'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC__Int'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Double'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC__Double'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC__Double'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Char'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC__Char'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC__Char'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Bool'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__Bool'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__Bool'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Binary'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__Binary'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__Binary'(V2, V3)) end end}.
'dn--un--__Impl_TTC_(|Unit,MkUnit|)'() -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC__(|Unit,MkUnit|)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC__(|Unit,MkUnit|)'(V2, V3)) end end}.
'dn--un--__Impl_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', V2, V3, V4)) end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', V2, V5, V6)) end end}.
'dn--un--__Impl_TTC_(Maybe $a)'(V0, V1) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC__(Maybe $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC__(Maybe $a)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_TTC_(List1 $a)'(V0, V1) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC__(List1 $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC__(List1 $a)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_TTC_(List $a)'(V0, V1) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC__(List $a)'('erased', V1, V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC__(List $a)'('erased', V1, V5, V6)) end end}.
'dn--un--__Impl_TTC_((Vect $n) $a)'(V0, V1, V2) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC__((Vect $n) $a)'('erased', V1, V2, V3, V4)) end end, fun (V5) -> ('dn--un--fromBuf_TTC__((Vect $n) $a)'('erased', V1, V2, V5)) end}.
'dn--un--__Impl_TTC_((Either $a) $b)'(V0, V1, V2) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC__((Either $a) $b)'('erased', 'erased', V2, V3, V4)) end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC__((Either $a) $b)'('erased', 'erased', V2, V5, V6)) end end}.
'dn--un--__Impl_TTC_((DPair $a) $p)'(V0, V1, V2) -> {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC__((DPair $a) $p)'('erased', 'erased', V2, V3, V4)) end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC__((DPair $a) $p)'('erased', 'erased', V2, V5, V6)) end end}.
'un--writeToFile'(V0, V1) -> ('Idris.Idris2.Erlang.Data.Buffer':'un--writeBufferToFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V29, V30, V31, V32) -> V29 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V33, V34, V35, V36) -> V36 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--toRead'(V0) -> ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(case V0 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V4 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--toLimbs'(V0) -> ('case--toLimbs-2594'(V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Integer'(V0, 0)))).
'un--toBuf'(V0, V1) -> case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V2, V3) -> fun (V4) -> fun (V5) -> ((V2(V4))(V5)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tag'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--tag-982'(V1, V0, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--avail'(V6)), 1))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readFromFile'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--createBufferFromFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> begin (V58 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V30))(V1))), {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V30, 0, V58, V58}} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--newBinary'(V0, V1) -> {'Idris.Utils.Binary.MkBin', V0, 0, V1, 0}.
'un--initBinaryS'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Just', E2} -> (fun (V33) -> ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, ('un--newBinary'(V33, V0)), V1)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Buffer creation failed"/utf8>>}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initBinary'(V0) -> begin (V29 = begin (V28 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, ('un--blockSize'())))(V0))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case V31 of {'Idris.Prelude.Types.Just', E2} -> (fun (V32) -> ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, ('un--newBinary'(V32, ('un--blockSize'()))), V0)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Buffer creation failed"/utf8>>}, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--incLoc'(V0, V1) -> case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Utils.Binary.MkBin', V2, ((V3 + V0) rem 9223372036854775808), V4, V5} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getTag'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('case--getTag-1056'(V0, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(('un--toRead'(V5)), 1))))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromLimbs'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> (('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V1)) + (('un--fromLimbs'(V2)) bsl 32)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromBuf'(V0, V1) -> case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E0, E1} -> (fun (V2, V3) -> fun (V4) -> (V3(V4)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extendBinary'(V0, V1) -> case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> begin (V6 = ((V4 * 2) rem 9223372036854775808)), begin (V7 = ('case--extendBinary-875'(V5, V4, V3, V2, V0, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V6, V3)), V0))))), fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.Buffer':'un--resizeBuffer'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, V7))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E6} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V40, V3, V7, V5}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Buffer expansion failed"/utf8>>}, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--corrupt'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.Corrupt', V1}}, V2)).
'un--blockSize'() -> 655360.
'un--avail'(V0) -> ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(case V0 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), 1)).
'un--appended'(V0, V1) -> case V1 of {'Idris.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Utils.Binary.MkBin', V2, ((V3 + V0) rem 9223372036854775808), V4, ((V5 + V0) rem 9223372036854775808)} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
