-module('Idris.Idris2.Erlang.Data.Buffer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--writeBufferToFile-4167'/7,
  'case--createBufferFromFile-3977'/5,
  'case--rawSize-3458'/4,
  'nested--3909-3861--in--un--unpackTo'/5,
  'un--writeBufferToFile'/5,
  'un--updateBufferPayload'/4,
  'un--stringByteLength'/1,
  'un--setString'/5,
  'un--setInt32'/5,
  'un--setInt'/5,
  'un--setDouble'/5,
  'un--setByte'/5,
  'un--setBufferPayload'/4,
  'un--setBits8'/5,
  'un--setBits64'/5,
  'un--setBits32'/5,
  'un--setBits16'/5,
  'un--resizeBuffer'/4,
  'un--rawSize'/3,
  'un--prim__erlBufferSetString'/3,
  'un--prim__erlBufferSetInt64'/3,
  'un--prim__erlBufferSetInt32'/3,
  'un--prim__erlBufferSetDouble'/3,
  'un--prim__erlBufferSetByte'/3,
  'un--prim__erlBufferSetBits8'/3,
  'un--prim__erlBufferSetBits64'/3,
  'un--prim__erlBufferSetBits32'/3,
  'un--prim__erlBufferSetBits16'/3,
  'un--prim__erlBufferResize'/2,
  'un--prim__erlBufferNew'/1,
  'un--prim__erlBufferGetString'/3,
  'un--prim__erlBufferGetInt64'/2,
  'un--prim__erlBufferGetInt32'/2,
  'un--prim__erlBufferGetDouble'/2,
  'un--prim__erlBufferGetByte'/2,
  'un--prim__erlBufferGetBits8'/2,
  'un--prim__erlBufferGetBits64'/2,
  'un--prim__erlBufferGetBits32'/2,
  'un--prim__erlBufferGetBits16'/2,
  'un--prim__erlBufferFlatten'/2,
  'un--newBuffer'/3,
  'un--getString'/5,
  'un--getInt32'/4,
  'un--getInt'/4,
  'un--getDouble'/4,
  'un--getByte'/4,
  'un--getBufferPayload'/3,
  'un--getBits8'/4,
  'un--getBits64'/4,
  'un--getBits32'/4,
  'un--getBits16'/4,
  'un--freeBuffer'/3,
  'un--flatten'/4,
  'un--createBufferFromFile'/3,
  'un--copyData'/7,
  'un--bufferData'/3
]).
'case--writeBufferToFile-4167'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {E0, E1} -> (fun (V7, V8) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E21, E22} -> (fun (V9, V10) -> V9 end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E2, E3, E4} -> (fun (V11, V12, V13) -> ((((V12('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V38, V39) -> V38 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E8, E9, E10} -> (fun (V40, V41, V42) -> V40 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E5, E6, E7} -> (fun (V43, V44, V45) -> ((V44('erased'))(('erlang':'apply'('file', 'write_file', [V4 | [V7 | []]])))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V14) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V15, V16) -> V15 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E16, E17, E18} -> (fun (V17, V18, V19) -> V17 end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E13, E14, E15} -> (fun (V20, V21, V22) -> ((V21('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'('erased', 'erased', {'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileWriteError'}} end, ('Idris.Idris2.Prelude.Interfaces':'un--*>'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor__ErlDecoder'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative__ErlDecoder'('erased', V29, V30)) end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative__ErlDecoder'('erased', 'erased', V33, V34, V35)) end end end end end}, fun (V36) -> ('Idris.Idris2.Erlang.Decode':'un--exact'('erased', {'Idris.Erlang.Types.ETErlAtom'}, 'ok', V36)) end, fun (V37) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative__ErlDecoder'('erased', {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}, V37)) end)), V14)))) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--createBufferFromFile-3977'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E8} -> (fun (V5) -> begin (V6 = ('erlang':'apply'('erlang', 'byte_size', [V5 | []]))), case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E41, E42} -> (fun (V7, V8) -> V7 end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V9, V10, V11) -> ((((V10('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E18, E19} -> (fun (V35, V36) -> V35 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E15, E16, E17} -> (fun (V37, V38, V39) -> V37 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E12, E13, E14} -> (fun (V40, V41, V42) -> ((V41('erased'))(('erlang':'apply'('erlang', 'make_ref', [])))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V12) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E39, E40} -> (fun (V13, V14) -> V13 end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E20, E21, E22} -> (fun (V15, V16, V17) -> ((((V16('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E29, E30} -> (fun (V27, V28) -> V27 end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E26, E27, E28} -> (fun (V29, V30, V31) -> V29 end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E23, E24, E25} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'put', [V12 | [{V5, V6} | []]])))) end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V18) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E37, E38} -> (fun (V19, V20) -> V19 end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E34, E35, E36} -> (fun (V21, V22, V23) -> V21 end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E31, E32, E33} -> (fun (V24, V25, V26) -> ((V25('erased'))({'Idris.Prelude.Types.Right', V12})) end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V43, V44) -> V43 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V45, V46, V47) -> V45 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V48, V49, V50) -> ((V49('erased'))({'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileReadError'}})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--rawSize-3458'(V0, V1, V2, V3) -> case V3 of {E0, E1} -> (fun (V4, V5) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E8, E9} -> (fun (V6, V7) -> V6 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E5, E6, E7} -> (fun (V8, V9, V10) -> V8 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E2, E3, E4} -> (fun (V11, V12, V13) -> ((V12('erased'))(V5)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3909-3861--in--un--unpackTo'(V0, V1, V2, V3, V4) -> case V4 of 0 -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V5, V6) -> V5 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E8, E9, E10} -> (fun (V7, V8, V9) -> V7 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))(V3)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E3, E4} -> (fun (V13, V14) -> V13 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V15, V16, V17) -> ((((V16('erased'))('erased'))(('un--getByte'('erased', V1, V2, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V4, 1))))))(fun (V18) -> ('nested--3909-3861--in--un--unpackTo'('erased', V1, V2, [V18 | V3], ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V4, 1)))) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--writeBufferToFile'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E39, E40} -> (fun (V5, V6) -> V5 end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(('un--flatten'('erased', V1, V3, V4))))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E37, E38} -> (fun (V11, V12) -> V11 end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E12, E13} -> (fun (V56, V57) -> V56 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V58, V59, V60) -> V58 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V61, V62, V63) -> ((V62('erased'))(('erlang':'apply'('erlang', 'get', [V3 | []])))) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case V16 of {E14, E15} -> (fun (V17, V18) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E35, E36} -> (fun (V19, V20) -> V19 end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E16, E17, E18} -> (fun (V21, V22, V23) -> ((((V22('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E25, E26} -> (fun (V48, V49) -> V48 end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E22, E23, E24} -> (fun (V50, V51, V52) -> V50 end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E19, E20, E21} -> (fun (V53, V54, V55) -> ((V54('erased'))(('erlang':'apply'('file', 'write_file', [V2 | [V17 | []]])))) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V24) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E33, E34} -> (fun (V25, V26) -> V25 end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E30, E31, E32} -> (fun (V27, V28, V29) -> V27 end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E27, E28, E29} -> (fun (V30, V31, V32) -> ((V31('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'('erased', 'erased', {'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileWriteError'}} end, ('Idris.Idris2.Prelude.Interfaces':'un--*>'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor__ErlDecoder'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative__ErlDecoder'('erased', V39, V40)) end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative__ErlDecoder'('erased', 'erased', V43, V44, V45)) end end end end end}, fun (V46) -> ('Idris.Idris2.Erlang.Decode':'un--exact'('erased', {'Idris.Erlang.Types.ETErlAtom'}, 'ok', V46)) end, fun (V47) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative__ErlDecoder'('erased', {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}, V47)) end)), V24)))) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateBufferPayload'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V4, V5) -> V4 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V32, V33) -> V32 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V34, V35, V36) -> V34 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V37, V38, V39) -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V10, V11) -> V10 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V12, V13, V14) -> ((((V13('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V24, V25) -> V24 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V26, V27, V28) -> V26 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V29, V30, V31) -> ((V30('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(V3(V9)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V15) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V16, V17) -> V16 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V18, V19, V20) -> V18 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V21, V22, V23) -> ((V22('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stringByteLength'(V0) -> ('erlang':'apply'('erlang', 'byte_size', [V0 | []])).
'un--setString'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value/binary>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Size = ('erlang':'byte_size'(Value))), (Padding = ('binary':'copy'(<<0>>, Size))), (<<Start:Loc/binary, _:Size/binary, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value/binary, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setInt32'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/signed-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (32 div 8)))), (<<Start:Loc/binary, _:32/signed-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/signed-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setInt'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/signed-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/signed-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/signed-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setDouble'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/native-float>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/native-float, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/native-float, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setByte'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (8 div 8)))), (<<Start:Loc/binary, _:8/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/unsigned-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBufferPayload'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [V3 | []]])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))({'Idris.Builtin.MkUnit'})) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits8'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (8 div 8)))), (<<Start:Loc/binary, _:8/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/unsigned-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits64'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/unsigned-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits32'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (32 div 8)))), (<<Start:Loc/binary, _:32/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/unsigned-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits16'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V5, V6) -> V5 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V33, V34) -> V33 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V35, V36, V37) -> V35 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V38, V39, V40) -> ((V39('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V11, V12) -> V11 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V25, V26) -> V25 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V27, V28, V29) -> V27 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V30, V31, V32) -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:16/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (16 div 8)))), (<<Start:Loc/binary, _:16/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:16/unsigned-native-integer, End/binary>>, BufSize} end(V10, V3, V4)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V17, V18) -> V17 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V19, V20, V21) -> V19 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resizeBuffer'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E45, E46} -> (fun (V4, V5) -> V4 end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E35, E36} -> (fun (V18, V19) -> V18 end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V20, V21, V22) -> ((((V21('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E12, E13} -> (fun (V46, V47) -> V46 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V48, V49, V50) -> V48 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V51, V52, V53) -> ((V52('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V23) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E33, E34} -> (fun (V24, V25) -> V24 end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V26, V27, V28) -> ((((V27('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E23, E24} -> (fun (V38, V39) -> V38 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E20, E21, E22} -> (fun (V40, V41, V42) -> V40 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E17, E18, E19} -> (fun (V43, V44, V45) -> ((V44('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, NewSize) when ((erlang:'byte_size'(Bin)) =< NewSize) -> {Bin, NewSize}; ({Bin, BufSize}, NewSize) -> {('binary':'part'(Bin, 0, NewSize)), NewSize} end(V23, V3)) | []]])))) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V29) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E31, E32} -> (fun (V30, V31) -> V30 end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E28, E29, E30} -> (fun (V32, V33, V34) -> V32 end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E25, E26, E27} -> (fun (V35, V36, V37) -> ((V36('erased'))({'Idris.Builtin.MkUnit'})) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E43, E44} -> (fun (V10, V11) -> V10 end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E40, E41, E42} -> (fun (V12, V13, V14) -> V12 end(E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E37, E38, E39} -> (fun (V15, V16, V17) -> ((V16('erased'))({'Idris.Prelude.Types.Just', V2})) end(E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rawSize'(V0, V1, V2) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E21, E22} -> (fun (V3, V4) -> V3 end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V19, V20) -> V19 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V21, V22, V23) -> V21 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V24, V25, V26) -> ((V25('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V8 of {E11, E12} -> (fun (V9, V10) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V11, V12) -> V11 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E16, E17, E18} -> (fun (V13, V14, V15) -> V13 end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E13, E14, E15} -> (fun (V16, V17, V18) -> ((V17('erased'))(V10)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__erlBufferSetString'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value/binary>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Size = ('erlang':'byte_size'(Value))), (Padding = ('binary':'copy'(<<0>>, Size))), (<<Start:Loc/binary, _:Size/binary, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value/binary, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetInt64'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/signed-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/signed-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/signed-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetInt32'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/signed-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (32 div 8)))), (<<Start:Loc/binary, _:32/signed-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/signed-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetDouble'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/native-float>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/native-float, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/native-float, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetByte'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (8 div 8)))), (<<Start:Loc/binary, _:8/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/unsigned-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetBits8'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (8 div 8)))), (<<Start:Loc/binary, _:8/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/unsigned-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetBits64'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/unsigned-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetBits32'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (32 div 8)))), (<<Start:Loc/binary, _:32/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/unsigned-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferSetBits16'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:16/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (16 div 8)))), (<<Start:Loc/binary, _:16/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:16/unsigned-native-integer, End/binary>>, BufSize} end(V0, V1, V2)).
'un--prim__erlBufferResize'(V0, V1) -> (fun ({Bin, BufSize}, NewSize) when ((erlang:'byte_size'(Bin)) =< NewSize) -> {Bin, NewSize}; ({Bin, BufSize}, NewSize) -> {('binary':'part'(Bin, 0, NewSize)), NewSize} end(V0, V1)).
'un--prim__erlBufferNew'(V0) -> {<<>>, V0}.
'un--prim__erlBufferGetString'(V0, V1, V2) -> (fun ({Bin, BufSize}, Loc, Len) when ((Loc + Len) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:Len/binary, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc, Len) -> ('binary':'copy'(<<0>>, Len)) end(V0, V1, V2)).
'un--prim__erlBufferGetInt64'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/signed-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferGetInt32'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:32/signed-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferGetDouble'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/native-float, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0.0 end(V0, V1)).
'un--prim__erlBufferGetByte'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:8/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferGetBits8'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:8/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferGetBits64'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferGetBits32'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:32/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferGetBits16'(V0, V1) -> (fun ({Bin, BufSize}, Loc) when ((Loc + (16 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:16/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V0, V1)).
'un--prim__erlBufferFlatten'(V0, V1) -> (fun ({Bin, BufSize}, MaxBytes) when ((erlang:'byte_size'(Bin)) =< MaxBytes) -> (Padding = ('binary':'copy'(<<0>>, (MaxBytes - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary>>, BufSize}; ({Bin, BufSize}, MaxBytes) -> {('binary':'part'(Bin, 0, BufSize)), BufSize} end(V0, V1)).
'un--newBuffer'(V0, V1, V2) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E45, E46} -> (fun (V3, V4) -> V3 end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V47, V48) -> V47 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V49, V50, V51) -> V49 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V52, V53, V54) -> ((V53('erased'))(('erlang':'apply'('erlang', 'make_ref', [])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> begin (V9 = {<<>>, V2}), begin (V10 = V8), case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E43, E44} -> (fun (V11, V12) -> V11 end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E33, E34} -> (fun (V25, V26) -> V25 end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V27, V28, V29) -> ((((V28('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E23, E24} -> (fun (V39, V40) -> V39 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E20, E21, E22} -> (fun (V41, V42, V43) -> V41 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E17, E18, E19} -> (fun (V44, V45, V46) -> ((V45('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [V9 | []]])))) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V30) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E31, E32} -> (fun (V31, V32) -> V31 end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E28, E29, E30} -> (fun (V33, V34, V35) -> V33 end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E25, E26, E27} -> (fun (V36, V37, V38) -> ((V37('erased'))({'Idris.Builtin.MkUnit'})) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V16) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E41, E42} -> (fun (V17, V18) -> V17 end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E38, E39, E40} -> (fun (V19, V20, V21) -> V19 end(E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E35, E36, E37} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Prelude.Types.Just', V10})) end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getString'(V0, V1, V2, V3, V4) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V5, V6) -> V5 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V19, V20) -> V19 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V21, V22, V23) -> V21 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V24, V25, V26) -> ((V25('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V11, V12) -> V11 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V13, V14, V15) -> V13 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V16, V17, V18) -> ((V17('erased'))((fun ({Bin, BufSize}, Loc, Len) when ((Loc + Len) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:Len/binary, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc, Len) -> ('binary':'copy'(<<0>>, Len)) end(V10, V3, V4)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getInt32'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:32/signed-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getInt'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/signed-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDouble'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/native-float, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0.0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getByte'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:8/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBufferPayload'(V0, V1, V2) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V3, V4) -> V3 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V5, V6, V7) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V8, V9, V10) -> ((V9('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits8'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:8/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits64'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits32'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:32/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits16'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E19, E20} -> (fun (V4, V5) -> V4 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V18, V19) -> V18 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V10, V11) -> V10 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E14, E15, E16} -> (fun (V12, V13, V14) -> V12 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (16 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:16/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V9, V3)))) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--freeBuffer'(V0, V1, V2) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V3, V4) -> V3 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V5, V6, V7) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V8, V9, V10) -> ((V9('erased'))({'Idris.Builtin.MkUnit'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--flatten'(V0, V1, V2, V3) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E32, E33} -> (fun (V4, V5) -> V4 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V32, V33) -> V32 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V34, V35, V36) -> V34 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V37, V38, V39) -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E30, E31} -> (fun (V10, V11) -> V10 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E11, E12, E13} -> (fun (V12, V13, V14) -> ((((V13('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V24, V25) -> V24 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V26, V27, V28) -> V26 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V29, V30, V31) -> ((V30('erased'))(('erlang':'apply'('erlang', 'put', [V2 | [(fun ({Bin, BufSize}, MaxBytes) when ((erlang:'byte_size'(Bin)) =< MaxBytes) -> (Padding = ('binary':'copy'(<<0>>, (MaxBytes - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary>>, BufSize}; ({Bin, BufSize}, MaxBytes) -> {('binary':'part'(Bin, 0, BufSize)), BufSize} end(V9, V3)) | []]])))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V15) -> case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E28, E29} -> (fun (V16, V17) -> V16 end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V18, V19, V20) -> V18 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E22, E23, E24} -> (fun (V21, V22, V23) -> ((V22('erased'))({'Idris.Builtin.MkUnit'})) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--createBufferFromFile'(V0, V1, V2) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V3, V4) -> V3 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V11, V12) -> V11 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V13, V14, V15) -> V13 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V16, V17, V18) -> ((V17('erased'))(('erlang':'apply'('file', 'read_file', [V2 | []])))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> ('case--createBufferFromFile-3977'('erased', V1, V2, V8, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'('erased', 'erased', {'Idris.Erlang.Types.ETErlTerm'}, fun (V9) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'('erased', fun (V10) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V10)) end, V9)) end, V8)))) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--copyData'(V0, V1, V2, V3, V4, V5, V6) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E3, E4} -> (fun (V7, V8) -> V7 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V9, V10, V11) -> ((((V10('erased'))('erased'))(('un--getString'('erased', V1, V2, V3, V4))))(fun (V12) -> ('un--setString'('erased', V1, V5, V6, V12)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bufferData'(V0, V1, V2) -> case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E3, E4} -> (fun (V3, V4) -> V3 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(('un--rawSize'('erased', V1, V2))))(fun (V8) -> ('nested--3909-3861--in--un--unpackTo'('erased', V1, V2, [], V8)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
