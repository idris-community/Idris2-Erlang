-module('Idris.Idris2.Parser.Support').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in getCharLit-4648'/3,
  'case--getCharLit-4626'/3,
  'case--case block in escape\x{27}-4527'/4,
  'case--case block in case block in escape\x{27}-4459'/6,
  'case--case block in escape\x{27}-4409'/6,
  'case--escape\x{27}-4377'/2,
  'case--escape\x{27}-4325'/2,
  'case--escape\x{27}-4232'/2,
  'nested--6020-4282--in--un--toOct'/3,
  'nested--6020-4189--in--un--toHex'/3,
  'nested--5368-3374--in--un--prettyLine'/7,
  'dn--un--show_Show__(ParseError $tok)'/3,
  'dn--un--showPrec_Show__(ParseError $tok)'/4,
  'dn--un--pretty_Pretty__(ParseError $tok)'/4,
  'dn--un--prettyPrec_Pretty__(ParseError $tok)'/5,
  'dn--un--__Impl_Show_(ParseError $tok)'/2,
  'dn--un--__Impl_Pretty_(ParseError $tok)'/2,
  'un--toGenericParsingError'/2,
  'un--oct'/1,
  'un--hex'/1,
  'un--getEsc'/1,
  'un--getCharLit'/1,
  'un--escape\x{27}'/1,
  'un--escape'/1,
  'un--dec'/1
]).
'case--case block in getCharLit-4648'(V0, V1, V2) -> case V2 of 0 -> {'Idris.Prelude.Types.Just', $\x{0}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getCharLit-4626'(V0, V1, V2) -> case V2 of 0 -> {'Idris.Prelude.Types.Just', ('erlang':'hd'(('string':'next_grapheme'(V1))))}; 1 -> ('case--case block in getCharLit-4648'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V1)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in escape\x{27}-4527'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Just', [V4 | []]} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--escape\x{27}'(V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in escape\x{27}-4459'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'([V3 | V4])), fun (V7) -> {'Idris.Prelude.Types.Just', [V6 | V7]} end)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--escape\x{27}'(V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in escape\x{27}-4409'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V7) -> {'Idris.Prelude.Types.Just', [V6 | V7]} end)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--case block in case block in escape\x{27}-4459'(V0, V1, V2, V3, V4, ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V1 | [V2 | []]])))))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--escape\x{27}-4377'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of [] -> case V3 of [E2 | E3] -> (fun (V4, V5) -> case V5 of [E4 | E5] -> (fun (V6, V7) -> case V7 of [E6 | E7] -> (fun (V8, V9) -> ('case--case block in escape\x{27}-4409'(V0, V4, V6, V8, V9, ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V4 | [V6 | [V8 | []]]])))))) end(E6, E7)); [] -> ('case--case block in escape\x{27}-4527'(V0, V4, V6, ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V4 | [V6 | []]])))))); _ -> ('un--escape\x{27}'(V3)) end end(E4, E5)); _ -> ('un--escape\x{27}'(V3)) end end(E2, E3)); _ -> ('un--escape\x{27}'(V3)) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V3)), fun (V10) -> {'Idris.Prelude.Types.Just', [('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Char'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__String_Int'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)))))) | V10]} end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--escape\x{27}-4325'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of [] -> ('un--escape\x{27}'(V3)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--6020-4282--in--un--toOct'(V0, 1, ('Idris.Idris2.Data.List':'un--reverse'('erased', V2)))), fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V3)), fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Char'(V4)) | V5])) end)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--escape\x{27}-4232'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of [] -> ('un--escape\x{27}'(V3)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--6020-4189--in--un--toHex'(V0, 1, ('Idris.Idris2.Data.List':'un--reverse'('erased', V2)))), fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V3)), fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Char'(V4)) | V5])) end)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6020-4282--in--un--toOct'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Just', 0}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--oct'(('Idris.Idris2.Prelude.Types':'un--toLower'(V3)))), fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--6020-4282--in--un--toOct'(V0, ((V1 * 8) rem 9223372036854775808), V4)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', ((((V5 * V1) rem 9223372036854775808) + V6) rem 9223372036854775808))) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6020-4189--in--un--toHex'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Just', 0}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--hex'(('Idris.Idris2.Prelude.Types':'un--toLower'(V3)))), fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('nested--6020-4189--in--un--toHex'(V0, ((V1 * 16) rem 9223372036854775808), V4)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', ((((V5 * V1) rem 9223372036854775808) + V6) rem 9223372036854775808))) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5368-3374--in--un--prettyLine'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased')) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V8, V9) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"at"/utf8>>)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"line"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', ((V8 + 1) rem 9223372036854775808))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<":"/utf8>>)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', ((V9 + 1) rem 9223372036854775808))))))))) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__(ParseError $tok)'(V0, V1, V2) -> case V2 of {'Idris.Parser.Support.ParseFail', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Parse error: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" (next tokens: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', V1, ('Idris.Idris2.Data.List':'un--take'('erased', (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), V5)))), <<")"/utf8>>)))))))) end(E0, E1, E2)); {'Idris.Parser.Support.LexFail', E3} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Lex error at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V11)) end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V12, V13)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V14)) end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V15, V16)) end end}}, {'Idris.Builtin.MkPair', V7, V9})), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" input: "/utf8>>, V10)))))) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Parser.Support.FileFail', E8} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"File error: "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V17)))) end(E8)); {'Idris.Parser.Support.LitFail', E9} -> (fun (V18) -> case V18 of {'Idris.Text.Literate.MkLitErr', E10, E11, E12} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Lit error(s) at "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V23, V24)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Int'(V26, V27)) end end}}, {'Idris.Builtin.MkPair', V20, V19})), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" input: "/utf8>>, V21)))))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show__(ParseError $tok)'(V0, V1, V2, V3) -> ('dn--un--show_Show__(ParseError $tok)'('erased', V1, V3)).
'dn--un--pretty_Pretty__(ParseError $tok)'(V0, V1, V2, V3) -> case V3 of {'Idris.Parser.Support.ParseFail', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Parse error"/utf8>>)), ('nested--5368-3374--in--un--prettyLine'('erased', 'erased', V2, V6, V5, V4, V5)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V7)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<":"/utf8>>)))))))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--line'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V4)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"next tokens:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--brackets'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--align'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V8) -> fun (V9) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V8, V9)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V12, V13)) end end end end, case V2 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', E3, E4} -> (fun (V14, V15) -> fun (V16) -> ((V14('erased'))(V16)) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Data.List':'un--take'('erased', (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), V6)))))))))))))))) end(E0, E1, E2)); {'Idris.Parser.Support.LexFail', E5} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Lex error at"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V22) -> fun (V23) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty__Int'('erased', V25, V26)) end end end}, {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V27) -> fun (V28) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty__Int'('erased', V30, V31)) end end end}}, {'Idris.Builtin.MkPair', V18, V20})), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"input:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V21)))))))) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Parser.Support.FileFail', E10} -> (fun (V32) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"File error:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V32)))))) end(E10)); {'Idris.Parser.Support.LitFail', E11} -> (fun (V33) -> case V33 of {'Idris.Text.Literate.MkLitErr', E12, E13, E14} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Lit error(s) at"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V37) -> fun (V38) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', V38)) end end, fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty__Int'('erased', V40, V41)) end end end}, {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V42) -> fun (V43) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', V43)) end end, fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty__Int'('erased', V45, V46)) end end end}}, {'Idris.Builtin.MkPair', V35, V34})), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"input:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V36)))))))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty__(ParseError $tok)'(V0, V1, V2, V3, V4) -> ('dn--un--pretty_Pretty__(ParseError $tok)'('erased', 'erased', V2, V4)).
'dn--un--__Impl_Show_(ParseError $tok)'(V0, V1) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V2) -> ('dn--un--show_Show__(ParseError $tok)'('erased', V1, V2)) end, fun (V3) -> fun (V4) -> ('dn--un--showPrec_Show__(ParseError $tok)'('erased', V1, V3, V4)) end end}.
'dn--un--__Impl_Pretty_(ParseError $tok)'(V0, V1) -> {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V2) -> fun (V3) -> ('dn--un--pretty_Pretty__(ParseError $tok)'('erased', 'erased', V1, V3)) end end, fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--prettyPrec_Pretty__(ParseError $tok)'('erased', 'erased', V1, V5, V6)) end end end}.
'un--toGenericParsingError'(V0, V1) -> case V1 of {'Idris.Text.Parser.Core.Error', E0, E1} -> (fun (V2, V3) -> case V3 of [] -> {'Idris.Parser.Support.ParseFail', V2, {'Idris.Prelude.Types.Nothing'}, []}; [E2 | E3] -> (fun (V4, V5) -> {'Idris.Parser.Support.ParseFail', V2, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', case V4 of {'Idris.Text.Bounded.MkBounded', E4, E5, E6, E7, E8, E9} -> (fun (V6, V7, V8, V9, V10, V11) -> V8 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Text.Bounded.MkBounded', E10, E11, E12, E13, E14, E15} -> (fun (V12, V13, V14, V15, V16, V17) -> V15 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> case V18 of {'Idris.Text.Bounded.MkBounded', E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24) -> V19 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, [V4 | V5]))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--oct'(V0) -> case V0 of $0 -> {'Idris.Prelude.Types.Just', 0}; $1 -> {'Idris.Prelude.Types.Just', 1}; $2 -> {'Idris.Prelude.Types.Just', 2}; $3 -> {'Idris.Prelude.Types.Just', 3}; $4 -> {'Idris.Prelude.Types.Just', 4}; $5 -> {'Idris.Prelude.Types.Just', 5}; $6 -> {'Idris.Prelude.Types.Just', 6}; $7 -> {'Idris.Prelude.Types.Just', 7}; _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--hex'(V0) -> case V0 of $0 -> {'Idris.Prelude.Types.Just', 0}; $1 -> {'Idris.Prelude.Types.Just', 1}; $2 -> {'Idris.Prelude.Types.Just', 2}; $3 -> {'Idris.Prelude.Types.Just', 3}; $4 -> {'Idris.Prelude.Types.Just', 4}; $5 -> {'Idris.Prelude.Types.Just', 5}; $6 -> {'Idris.Prelude.Types.Just', 6}; $7 -> {'Idris.Prelude.Types.Just', 7}; $8 -> {'Idris.Prelude.Types.Just', 8}; $9 -> {'Idris.Prelude.Types.Just', 9}; $a -> {'Idris.Prelude.Types.Just', 10}; $b -> {'Idris.Prelude.Types.Just', 11}; $c -> {'Idris.Prelude.Types.Just', 12}; $d -> {'Idris.Prelude.Types.Just', 13}; $e -> {'Idris.Prelude.Types.Just', 14}; $f -> {'Idris.Prelude.Types.Just', 15}; _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getEsc'(V0) -> case V0 of <<"NUL"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{0}}; <<"SOH"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1}}; <<"STX"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{2}}; <<"ETX"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{3}}; <<"EOT"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{4}}; <<"ENQ"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{5}}; <<"ACK"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{6}}; <<"BEL"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{7}}; <<"BS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{8}}; <<"HT"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{9}}; <<"LF"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{a}}; <<"VT"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{b}}; <<"FF"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{c}}; <<"CR"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{d}}; <<"SO"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{e}}; <<"SI"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{f}}; <<"DLE"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{10}}; <<"DC1"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{11}}; <<"DC2"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{12}}; <<"DC3"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{13}}; <<"DC4"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{14}}; <<"NAK"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{15}}; <<"SYN"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{16}}; <<"ETB"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{17}}; <<"CAN"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{18}}; <<"EM"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{19}}; <<"SUB"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1a}}; <<"ESC"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1b}}; <<"FS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1c}}; <<"GS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1d}}; <<"RS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1e}}; <<"US"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1f}}; <<"SP"/utf8>> -> {'Idris.Prelude.Types.Just', $ }; <<"DEL"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{7f}}; _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getCharLit'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape'(V0)), fun (V1) -> ('case--getCharLit-4626'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Prelude.Types.Strings':'un--length'(V1)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)))))) end)).
'un--escape\x{27}'(V0) -> case V0 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [])); [E0 | E1] -> (fun (V1, V2) -> case V1 of $\x{5c} -> case V2 of [E2 | E3] -> (fun (V3, V4) -> case V3 of $\x{5c} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{5c} | V5])) end)); $& -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', V6)) end)); $a -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{7} | V7])) end)); $b -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{8} | V8])) end)); $f -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{c} | V9])) end)); $n -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{a} | V10])) end)); $r -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{d} | V11])) end)); $t -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{9} | V12])) end)); $v -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{b} | V13])) end)); $\x{27} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{27} | V14])) end)); $\x{22} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V4)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', [$\x{22} | V15])) end)); $x -> ('case--escape\x{27}-4232'(V4, ('Idris.Idris2.Data.List':'un--span'('erased', fun (V16) -> ('Idris.Idris2.Prelude.Types':'un--isHexDigit'(V16)) end, V4)))); $o -> ('case--escape\x{27}-4325'(V4, ('Idris.Idris2.Data.List':'un--span'('erased', fun (V17) -> ('Idris.Idris2.Prelude.Types':'un--isOctDigit'(V17)) end, V4)))); _ -> ('case--escape\x{27}-4377'(V2, ('Idris.Idris2.Data.List':'un--span'('erased', fun (V18) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V18)) end, V2)))) end end(E2, E3)); _ -> ('case--escape\x{27}-4377'(V2, ('Idris.Idris2.Data.List':'un--span'('erased', fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V19)) end, V2)))) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(V2)), fun (V20) -> {'Idris.Prelude.Types.Just', [V1 | V20]} end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--escape'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('un--escape\x{27}'(('Idris.Idris2.Prelude.Types':'un--unpack'(V0)))), fun (V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)))) end)).
'un--dec'(V0) -> case V0 of $0 -> {'Idris.Prelude.Types.Just', 0}; $1 -> {'Idris.Prelude.Types.Just', 1}; $2 -> {'Idris.Prelude.Types.Just', 2}; $3 -> {'Idris.Prelude.Types.Just', 3}; $4 -> {'Idris.Prelude.Types.Just', 4}; $5 -> {'Idris.Prelude.Types.Just', 5}; $6 -> {'Idris.Prelude.Types.Just', 6}; $7 -> {'Idris.Prelude.Types.Just', 7}; $8 -> {'Idris.Prelude.Types.Just', 8}; $9 -> {'Idris.Prelude.Types.Just', 9}; _ -> {'Idris.Prelude.Types.Nothing'} end.
