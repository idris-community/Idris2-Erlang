-module('Idris.Idris2.TTImp.ProcessType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in processType-12723'/31,
  'case--case block in processType-12459'/25,
  'case--processType-12361'/20,
  'case--case block in findInferrable,findInf-12104'/9,
  'case--findInferrable,findInf-12063'/8,
  'case--getFnString-11898'/10,
  'case--case block in processFnOpt-11803'/11,
  'case--processFnOpt-11728'/6,
  'case--processFnOpt,collectSpec-11535'/18,
  'case--processFnOpt,getDeps-11421'/14,
  'case--processFnOpt,getDeps-11345'/13,
  'case--case block in processFnOpt,getDeps,splitPs-11239'/18,
  'case--processFnOpt,getDeps,splitPs-11198'/16,
  'case--processFnOpt,collectDDeps-10928'/15,
  'case--case block in processFnOpt,insertDeps-10843'/10,
  'case--processFnOpt,insertDeps-10800'/9,
  'case--processFnOpt-10717'/6,
  'nested--9830-11172--in--un--splitPs'/14,
  'nested--9729-10779--in--un--insertDeps'/7,
  'nested--9729-10784--in--un--getNamePos'/6,
  'nested--9729-10781--in--un--getDepsArgs'/7,
  'nested--9729-10782--in--un--getDeps'/7,
  'nested--11187-12037--in--un--findInfs'/6,
  'nested--11187-12036--in--un--findInf'/6,
  'nested--11187-12038--in--un--fi'/8,
  'nested--9729-10783--in--un--collectSpec'/8,
  'nested--9729-10780--in--un--collectDDeps'/5,
  'un--processType'/12,
  'un--processFnOpt'/4,
  'un--initDef'/8,
  'un--getRetTy'/2,
  'un--getFnString'/4,
  'un--findInferrable'/3
]).
'case--case block in case block in processType-12723'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkGlobalDef', V31, V32, V33, V24, V25, V36, V29, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processType-12459'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> fun (V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V31, V27))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V38 = begin (V35 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V31, {'Idris.Core.Env.Nil'}, V23))(V27))), case V35 of {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V37) -> (('un--findInferrable'(V13, V34, V37))(V27)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--addDef'(V13, {'Idris.Core.Name.Resolved', V17}, begin (V41 = {'Idris.Builtin.MkPair', V25, V26}), ('case--case block in case block in processType-12723'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V26, V41, V31, V34, V40, ('Idris.Idris2.Core.Context':'un--newDef'(V6, V14, V5, V7, V23, V4, V22)))) end, V27))), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> begin (V49 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V47, V48)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V10)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V13, V17, 0, V27)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V49 of {'Idris.Prelude.Types.Left', E12} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V51) -> begin (V55 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__FnOpt'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__FnOpt'(V53, V54)) end end}, V3)))))))) end))(V27))), case V55 of {'Idris.Prelude.Types.Left', E14} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V57) -> begin (V58 = {'Idris.Core.Name.Resolved', V17}), begin (V60 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V59) -> ('un--processFnOpt'(V13, V6, V58, V59)) end, V3, []))(V27))), case V60 of {'Idris.Prelude.Types.Left', E16} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V62) -> begin (V77 = begin (V63 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V13, V27))), case V63 of {'Idris.Prelude.Types.Left', E18} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V65) -> case ('Idris.Idris2.Prelude.Basics':'un--not'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V68, V69, V70)) end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V73, V74, V75)) end end end end end}, fun (V76) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V76)) end))(V3)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V13, V6, V58, {'Idris.Core.Context.SetTotal', V65}, V27)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V77 of {'Idris.Prelude.Types.Left', E20} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V7, V13, V12, V6, {'Idris.Core.Name.Resolved', V17}, V8, V20, V27))), case V80 of {'Idris.Prelude.Types.Left', E22} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V7, V13, V12, V6, {'Idris.Core.Name.Resolved', V17}, V8, V20, V27))), case V83 of {'Idris.Prelude.Types.Left', E24} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V85) -> begin (V88 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V86, V87)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V20))))))(V27))), case V88 of {'Idris.Prelude.Types.Left', E26} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V14, V27))), case V91 of {'Idris.Prelude.Types.Left', E28} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V93) -> begin (V97 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V95, V96)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V20)))))))))))) end))(V27))), case V97 of {'Idris.Prelude.Types.Left', E30} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V99) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Visibility'(V4, {'Idris.Core.TT.Private'})) of 0 -> begin (V107 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V100) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V101, V102)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V105, V106)) end end}, V14, V27))), case V107 of {'Idris.Prelude.Types.Left', E32} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V109) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V110) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V111, V112)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V115, V116)) end end}, V20, V27)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processType-12361'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> begin (V27 = ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V10, fun (V26) -> {'Idris.Core.Core.InType', V6, V14, V26} end))(fun (V21) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V7, V13, V12, V11, V17, {'Idris.TTImp.Elab.Check.InType'}, [{'Idris.TTImp.Elab.Check.HolesOkay'} | V10], V9, V8, {'Idris.TTImp.TTImp.IBindHere', V6, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V0}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V6)), V21)) end))(V20))), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> begin (V30 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.type"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)))) end, {'Idris.Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V7, V2, V8, V29))))(V20))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> begin (V33 = (('un--initDef'(V7, V13, V12, V11, V14, V8, V29, V3))(V20))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V7, V2, V8, V29))), begin (V37 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V13, V36, V20))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Nothing'}), case V39 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V41, V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V46, V20))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V53 = begin (V50 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V46, {'Idris.Core.Env.Nil'}, V36))(V20))), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> (('un--findInferrable'(V13, V49, V52))(V20)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V53 of {'Idris.Prelude.Types.Left', E16} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V55) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--addDef'(V13, {'Idris.Core.Name.Resolved', V17}, begin (V56 = {'Idris.Builtin.MkPair', V41, V42}), ('case--case block in case block in processType-12723'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V40, V29, V32, V35, V36, V41, V42, V56, V46, V49, V55, ('Idris.Idris2.Core.Context':'un--newDef'(V6, V14, V5, V7, V36, V4, V35)))) end, V20))), case V57 of {'Idris.Prelude.Types.Left', E18} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V59) -> begin (V64 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V62, V63)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V10)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V13, V17, 0, V20)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V64 of {'Idris.Prelude.Types.Left', E20} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V66) -> begin (V70 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__FnOpt'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__FnOpt'(V68, V69)) end end}, V3)))))))) end))(V20))), case V70 of {'Idris.Prelude.Types.Left', E22} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V72) -> begin (V73 = {'Idris.Core.Name.Resolved', V17}), begin (V75 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V74) -> ('un--processFnOpt'(V13, V6, V73, V74)) end, V3, []))(V20))), case V75 of {'Idris.Prelude.Types.Left', E24} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V77) -> begin (V92 = begin (V78 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V13, V20))), case V78 of {'Idris.Prelude.Types.Left', E26} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V80) -> case ('Idris.Idris2.Prelude.Basics':'un--not'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V88, V89, V90)) end end end end end}, fun (V91) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V91)) end))(V3)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V13, V6, V73, {'Idris.Core.Context.SetTotal', V80}, V20)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V92 of {'Idris.Prelude.Types.Left', E28} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V94) -> begin (V95 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V7, V13, V12, V6, {'Idris.Core.Name.Resolved', V17}, V8, V29, V20))), case V95 of {'Idris.Prelude.Types.Left', E30} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V97) -> begin (V98 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V7, V13, V12, V6, {'Idris.Core.Name.Resolved', V17}, V8, V29, V20))), case V98 of {'Idris.Prelude.Types.Left', E32} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V100) -> begin (V103 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V101, V102)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V29))))))(V20))), case V103 of {'Idris.Prelude.Types.Left', E34} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V105) -> begin (V106 = ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V14, V20))), case V106 of {'Idris.Prelude.Types.Left', E36} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V108) -> begin (V112 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V110, V111)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V29)))))))))))) end))(V20))), case V112 of {'Idris.Prelude.Types.Left', E38} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V114) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Visibility'(V4, {'Idris.Core.TT.Private'})) of 0 -> begin (V122 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V115) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V116, V117)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V120, V121)) end end}, V14, V20))), case V122 of {'Idris.Prelude.Types.Left', E40} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V124) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V125) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V126, V127)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V130, V131)) end end}, V29, V20)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E42} -> (fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V133)) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findInferrable,findInf-12104'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> {'Idris.Prelude.Types.Right', V6} end; 1 -> fun (V10) -> {'Idris.Prelude.Types.Right', [V7 | V6]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findInferrable,findInf-12063'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('case--case block in findInferrable,findInf-12104'(V0, V1, V2, V3, V4, V5, V6, V9, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V12, V13)) end end}, V9, V6)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFnString-11898'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V10, V11) -> case V11 of {'Idris.Core.TT.Str', E2} -> (fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', V12} end end(E2)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V5, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V14)) end end end(E0, E1)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V5, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V15)) end end.
'case--case block in processFnOpt-11803'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkGlobalDef', V11, V12, V13, V14, V15, V10, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt-11728'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V29 = (('Idris.Idris2.Core.Normalise':'un--nf'(V3, [], V4, {'Idris.Core.Env.Nil'}, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V10 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V29 of {'Idris.Prelude.Types.Left', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V31) -> begin (V32 = (('nested--9729-10784--in--un--getNamePos'(V0, V1, V2, V3, 0, V31))(V7))), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> begin (V35 = (('nested--9729-10780--in--un--collectDDeps'(V0, V1, V2, V3, V31))(V7))), case V35 of {'Idris.Prelude.Types.Left', E26} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V37) -> begin (V38 = (('nested--9729-10783--in--un--collectSpec'(V0, V1, V2, V3, [], V37, V34, V31))(V7))), case V38 of {'Idris.Prelude.Types.Left', E28} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V40) -> begin (V62 = ('Idris.Idris2.Core.Context':'un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> {'Idris.Core.Context.MkGlobalDef', V41, V42, V43, V44, V45, V40, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V62 of {'Idris.Prelude.Types.Left', E51} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V65)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,collectSpec-11535'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> begin (V19 = (('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, 0, V7, ('Idris.Idris2.Data.NameMap':'un--empty'('erased'))))(V18))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> begin (V27 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V22) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V22)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V25, V26)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V22)), V12)))) end)) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', V21))))), begin (V29 = ('nested--9729-10779--in--un--insertDeps'(V0, V1, V2, V3, V13, V11, [V9 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V28)) end, V27))]))), (('nested--9729-10783--in--un--collectSpec'(V0, V1, V2, V3, V29, V12, V11, V16))(V18)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('nested--9729-10783--in--un--collectSpec'(V0, V1, V2, V3, V13, V12, V11, V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,getDeps-11421'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> fun (V16) -> begin (V21 = begin (V18 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V3, [], V11, V17)) end, V14, []))(V16))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> (('nested--9729-10781--in--un--getDepsArgs'(V0, V1, V2, V3, 0, V20, V9))(V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V3, [], V11, V24)) end, V15, []))(V16))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> (('nested--9729-10781--in--un--getDepsArgs'(V0, V1, V2, V3, 1, V27, V23))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,getDeps-11345'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', V16} end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', []} end end end(E0)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', []} end end.
'case--case block in processFnOpt,getDeps,splitPs-11239'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> {'Idris.Builtin.MkPair', [V11 | V15], V16}; 1 -> {'Idris.Builtin.MkPair', V15, [V11 | V16]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,getDeps,splitPs-11198'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> ('case--case block in processFnOpt,getDeps,splitPs-11239'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V17, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V20, V21)) end end}, V14, V13)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,collectDDeps-10928'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> ('nested--9729-10780--in--un--collectDDeps'(V0, V1, V2, V3, V13)); 1 -> fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V3, [], V12, {'Idris.Core.Env.Nil'}, V7, V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getRefs'('erased', {'Idris.Core.Name.UN', <<"_"/utf8>>}, V18))))), begin (V20 = (('nested--9729-10780--in--un--collectDDeps'(V0, V1, V2, V3, V13))(V15))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V22, V19))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processFnOpt,insertDeps-10843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> ('nested--9729-10779--in--un--insertDeps'(V0, V1, V2, V3, V7, V6, V5)); 1 -> ('nested--9729-10779--in--un--insertDeps'(V0, V1, V2, V3, [V8 | V7], V6, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,insertDeps-10800'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--9729-10779--in--un--insertDeps'(V0, V1, V2, V3, V7, V6, V5)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('case--case block in processFnOpt,insertDeps-10843'(V0, V1, V2, V3, V4, V5, V6, V7, V9, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V12, V13)) end end}, V9, V7)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt-10717'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V11 = begin (V8 = (('Idris.Idris2.Core.Normalise':'un--nf'(V3, [], V4, {'Idris.Core.Env.Nil'}, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> (('un--getRetTy'(V4, V10))(V7)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V3, V2, V13, V1, V0, 1, V7)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V14)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9830-11172--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> {'Idris.Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V14, V15) -> ('case--processFnOpt,getDeps,splitPs-11198'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15, V12, V11, ('nested--9830-11172--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V11)), V12, V15)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9729-10779--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> V4; [E0 | E1] -> (fun (V7, V8) -> ('case--processFnOpt,insertDeps-10800'(V0, V1, V2, V3, V7, V8, V5, V4, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V11, V12)) end end}, V7, V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9729-10784--in--un--getNamePos'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V22 = begin (V19 = (((V9(V18))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V14))), case V19 of {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V21) -> (('nested--9729-10784--in--un--getNamePos'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V4)), V21))(V14)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V7, V4} | V24]} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--9729-10781--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', V6} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, V4, V8, V6))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('nested--9729-10781--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V9, V13))(V10)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E10, E11, E12, E13} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, V4, V14, V6))(V15))), case V16 of {'Idris.Prelude.Types.Left', E14} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E16} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V22) -> begin (V23 = (((V10(V22))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V2, 1}))))(V15))), case V23 of {'Idris.Prelude.Types.Left', E18} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V25) -> (('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, V4, V25, V18))(V15)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); _ -> fun (V26) -> begin (V27 = (('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, 1, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V9)), V6))(V26))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V34 = (((V10(V33))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V2, 1}))))(V26))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> (('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, 1, V36, V6))(V26)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E20, E21, E22} -> (fun (V37, V38, V39) -> case V38 of {'Idris.Core.Value.NRef', E23, E24} -> (fun (V40, V41) -> case V40 of {'Idris.Core.TT.Bound'} -> (fun () -> fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E25} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V46) -> begin (V51 = begin (V48 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V47) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V3, [], V46, V47)) end, V39, []))(V42))), case V48 of {'Idris.Prelude.Types.Left', E27} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V50) -> (('nested--9729-10781--in--un--getDepsArgs'(V0, V1, V2, V3, 1, V50, V6))(V42)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V51 of {'Idris.Prelude.Types.Left', E29} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V41, V4, V53))} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V54) -> {'Idris.Prelude.Types.Right', V6} end end end(E23, E24)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', V6} end end end(E20, E21, E22)); {'Idris.Core.Value.NDCon', E31, E32, E33, E34, E35} -> (fun (V56, V57, V58, V59, V60) -> fun (V61) -> begin (V63 = begin (V62 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> begin (V67 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V3, [], V65, V66)) end, V60, []))(V61))), case V67 of {'Idris.Prelude.Types.Left', E38} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V69) -> (('nested--9729-10781--in--un--getDepsArgs'(V0, V1, V2, V3, 1, V69, V6))(V61)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31, E32, E33, E34, E35)); {'Idris.Core.Value.NTCon', E40, E41, E42, E43, E44} -> (fun (V70, V71, V72, V73, V74) -> fun (V75) -> begin (V77 = begin (V76 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E45} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V79) -> begin (V118 = begin (V106 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V71, case V79 of {'Idris.Core.Context.MkDefs', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V80 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V75))), case V106 of {'Idris.Prelude.Types.Left', E73} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V108) -> case V108 of {'Idris.Prelude.Types.Just', E75} -> (fun (V109) -> case V109 of {'Idris.Core.Context.TCon', E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117) -> {'Idris.Prelude.Types.Right', V112} end(E76, E77, E78, E79, E80, E81, E82, E83)); _ -> {'Idris.Prelude.Types.Right', []} end end(E75)); _ -> {'Idris.Prelude.Types.Right', []} end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V118 of {'Idris.Prelude.Types.Left', E84} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V120) -> (('case--processFnOpt,getDeps-11421'(V0, V1, V2, V3, V70, V74, V73, V72, V71, V6, V4, V79, V120, ('nested--9830-11172--in--un--splitPs'(V0, V1, V2, V3, V70, V74, V73, V72, V71, V6, V4, 0, V120, V74))))(V75)) end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42, E43, E44)); {'Idris.Core.Value.NDelayed', E86, E87, E88} -> (fun (V121, V122, V123) -> ('nested--9729-10782--in--un--getDeps'(V0, V1, V2, V3, V4, V123, V6)) end(E86, E87, E88)); _ -> fun (V124) -> {'Idris.Prelude.Types.Right', V6} end end.
'nested--11187-12037--in--un--findInfs'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> begin (V10 = (('nested--11187-12037--in--un--findInfs'(V0, V1, V2, V3, V4, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('nested--11187-12036--in--un--findInf'(V0, V1, V2, V12, V4, V7))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11187-12036--in--un--findInf'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V9, V10) -> case V9 of {'Idris.Core.TT.Bound'} -> (fun () -> case V8 of [] -> ('case--findInferrable,findInf-12063'(V0, V1, V2, V6, V10, V4, V3, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V13, V14)) end end}, V10, V4)))); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', V3} end end end()); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end end(E3, E4)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V3} end end end(E0, E1, E2)); {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V18, V19, V20, V21, V22) -> fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V1, V24)) end, V22, []))(V23))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> (('nested--11187-12037--in--un--findInfs'(V0, V1, V2, V3, V4, V27))(V23)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NTCon', E12, E13, E14, E15, E16} -> (fun (V28, V29, V30, V31, V32) -> fun (V33) -> begin (V35 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V34) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V1, V34)) end, V32, []))(V33))), case V35 of {'Idris.Prelude.Types.Left', E17} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V37) -> (('nested--11187-12037--in--un--findInfs'(V0, V1, V2, V3, V4, V37))(V33)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16)); {'Idris.Core.Value.NDelayed', E19, E20, E21} -> (fun (V38, V39, V40) -> ('nested--11187-12036--in--un--findInf'(V0, V1, V2, V3, V4, V40)) end(E19, E20, E21)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', V3} end end.
'nested--11187-12038--in--un--fi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V16 = {'Idris.Core.Name.MN', <<"inf"/utf8>>, V4}), fun (V17) -> begin (V18 = (((V11(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Bound'}, V16}))))(V17))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = (('nested--11187-12036--in--un--findInf'(V0, V1, V2, V6, V5, V15))(V17))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = (('nested--11187-12038--in--un--fi'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V3)), ((1 + V4) rem 9223372036854775808), [{'Idris.Builtin.MkPair', V16, V3} | V5], V23, V20))(V17))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', V26} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> ('nested--11187-12036--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end end(E0, E1, E2, E3)); _ -> ('nested--11187-12036--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end.
'nested--9729-10783--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V20, V16))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = (((V11(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Bound'}, V9}))))(V16))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> (('case--processFnOpt,collectSpec-11535'(V0, V1, V2, V3, V12, V13, V14, V15, V11, V9, V8, V6, V5, V4, V20, V23, V26, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V29, V30)) end end}, V9, V0))))(V16)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', V4} end end end(E0, E1, E2, E3)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V4} end end.
'nested--9729-10780--in--un--collectDDeps'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V13))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = (((V8(V17))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V5, {'Idris.Core.TT.Bound'}, V6}))))(V13))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> (('case--processFnOpt,collectDDeps-10928'(V0, V1, V2, V3, V9, V10, V11, V12, V8, V6, V5, V17, V20, V23, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V26, V27)) end end}, V6, V0))))(V13)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V28) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', []} end end.
'un--processType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2} -> (fun (V12, V13, V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V13))(V15))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V18)))) end))(V15))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking type decl "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V18)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V14)))))))) end))(V15))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V18))(V15))), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E11} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V31) -> begin (V58 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V27}, case V31 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V32 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15))), case V58 of {'Idris.Prelude.Types.Left', E39} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V60) -> case V60 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V67 = ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V66) -> {'Idris.Core.Core.InType', V7, V18, V66} end))(fun (V61) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V27, {'Idris.TTImp.Elab.Check.InType'}, [{'Idris.TTImp.Elab.Check.HolesOkay'} | V4], V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V62, V63)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V64, V65)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}, V14}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7)), V61)) end))(V15))), case V67 of {'Idris.Prelude.Types.Left', E41} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V69) -> begin (V70 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V18)))) end, {'Idris.Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V12, V6, V69))))(V15))), case V70 of {'Idris.Prelude.Types.Left', E43} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V72) -> begin (V73 = (('un--initDef'(V0, V1, V2, V3, V18, V6, V69, V10))(V15))), case V73 of {'Idris.Prelude.Types.Left', E45} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V12, V6, V69))), begin (V77 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V76, V15))), case V77 of {'Idris.Prelude.Types.Left', E47} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V79) -> begin (V80 = {'Idris.Prelude.Types.Nothing'}), case V79 of {'Idris.Builtin.MkPair', E49, E50} -> (fun (V81, V82) -> begin (V84 = begin (V83 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V83} end), case V84 of {'Idris.Prelude.Types.Left', E51} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V86, V15))), case V87 of {'Idris.Prelude.Types.Left', E53} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V89) -> begin (V93 = begin (V90 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, [], V86, {'Idris.Core.Env.Nil'}, V76))(V15))), case V90 of {'Idris.Prelude.Types.Left', E55} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V92) -> (('un--findInferrable'(V1, V89, V92))(V15)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V93 of {'Idris.Prelude.Types.Left', E57} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V95) -> begin (V97 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V27}, begin (V96 = {'Idris.Builtin.MkPair', V81, V82}), ('case--case block in case block in processType-12723'(V14, V13, V12, V10, V9, V8, V7, V0, V6, V5, V4, V3, V2, V1, V18, V21, V24, V27, V31, V80, V69, V72, V75, V76, V81, V82, V96, V86, V89, V95, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V18, V8, V0, V76, V9, V75)))) end, V15))), case V97 of {'Idris.Prelude.Types.Left', E59} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V99) -> begin (V104 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V100) -> fun (V101) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V100, V101)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V102, V103)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V4)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V1, V27, 0, V15)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V104 of {'Idris.Prelude.Types.Left', E61} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V106) -> begin (V110 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V18)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V107) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__FnOpt'(V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__FnOpt'(V108, V109)) end end}, V10)))))))) end))(V15))), case V110 of {'Idris.Prelude.Types.Left', E63} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V112) -> begin (V113 = {'Idris.Core.Name.Resolved', V27}), begin (V115 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V114) -> ('un--processFnOpt'(V1, V7, V113, V114)) end, V10, []))(V15))), case V115 of {'Idris.Prelude.Types.Left', E65} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V117) -> begin (V132 = begin (V118 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V15))), case V118 of {'Idris.Prelude.Types.Left', E67} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V120) -> case ('Idris.Idris2.Prelude.Basics':'un--not'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V123, V124, V125)) end end end end end, fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V128, V129, V130)) end end end end end}, fun (V131) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V131)) end))(V10)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V113, {'Idris.Core.Context.SetTotal', V120}, V15)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V132 of {'Idris.Prelude.Types.Left', E69} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V134) -> begin (V135 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V0, V1, V2, V7, {'Idris.Core.Name.Resolved', V27}, V6, V69, V15))), case V135 of {'Idris.Prelude.Types.Left', E71} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V137) -> begin (V138 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V7, {'Idris.Core.Name.Resolved', V27}, V6, V69, V15))), case V138 of {'Idris.Prelude.Types.Left', E73} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V140) -> begin (V143 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V141, V142)) end end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V69))))))(V15))), case V143 of {'Idris.Prelude.Types.Left', E75} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V145) -> begin (V146 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V18, V15))), case V146 of {'Idris.Prelude.Types.Left', E77} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V148) -> begin (V152 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V18)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V149)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V150, V151)) end end}, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V69)))))))))))) end))(V15))), case V152 of {'Idris.Prelude.Types.Left', E79} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V154) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Visibility'(V9, {'Idris.Core.TT.Private'})) of 0 -> begin (V162 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V155) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__Name'(V155)) end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__Name'(V156, V157)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V158, V159)) end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V160, V161)) end end}, V18, V15))), case V162 of {'Idris.Prelude.Types.Left', E81} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V164) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V165) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable__(Term $vars)'('erased', V165)) end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable__(Term $vars)'('erased', V166, V167)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V170, V171)) end end}, V69, V15)) end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E83} -> (fun (V172) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V7, V18}, V15)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processFnOpt'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> fun (V4) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.Inline'}, V4)) end end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.TCInline'}, V5)) end end()); {'Idris.TTImp.TTImp.Hint', E0} -> (fun (V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V2, case V11 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V12 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E31} -> (fun (V41) -> begin (V45 = begin (V42 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V11, {'Idris.Core.Env.Nil'}, V41))(V7))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> (('un--getRetTy'(V11, V44))(V7)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V45 of {'Idris.Prelude.Types.Left', E34} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V47) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V47, V2, V6, 1, V7)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.TTImp.TTImp.GlobalHint', E36} -> (fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V2, V48, V49)) end end(E36)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V50) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.Inline'}, V50)) end end()); {'Idris.TTImp.TTImp.ForeignFn', E37} -> (fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.Inline'}, V52)) end end(E37)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> fun (V53) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.Invertible'}, V53)) end end()); {'Idris.TTImp.TTImp.Totality', E38} -> (fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.SetTotal', V54}, V55)) end end(E38)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> fun (V56) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.Macro'}, V56)) end end()); {'Idris.TTImp.TTImp.SpecArgs', E39} -> (fun (V57) -> fun (V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E40} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V62) -> begin (V89 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V62 of {'Idris.Core.Context.MkDefs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> V63 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V58))), case V89 of {'Idris.Prelude.Types.Left', E68} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V91) -> case V91 of {'Idris.Prelude.Types.Just', E70} -> (fun (V92) -> begin (V114 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V62, {'Idris.Core.Env.Nil'}, case V92 of {'Idris.Core.Context.MkGlobalDef', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V95 end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V58))), case V114 of {'Idris.Prelude.Types.Left', E92} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V116) -> begin (V117 = (('nested--9729-10784--in--un--getNamePos'(V57, V2, V1, V0, 0, V116))(V58))), case V117 of {'Idris.Prelude.Types.Left', E94} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V119) -> begin (V120 = (('nested--9729-10780--in--un--collectDDeps'(V57, V2, V1, V0, V116))(V58))), case V120 of {'Idris.Prelude.Types.Left', E96} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V122) -> begin (V123 = (('nested--9729-10783--in--un--collectSpec'(V57, V2, V1, V0, [], V122, V119, V116))(V58))), case V123 of {'Idris.Prelude.Types.Left', E98} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V125) -> begin (V147 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V2, case V92 of {'Idris.Core.Context.MkGlobalDef', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120} -> (fun (V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> {'Idris.Core.Context.MkGlobalDef', V126, V127, V128, V129, V130, V125, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146} end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58))), case V147 of {'Idris.Prelude.Types.Left', E121} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V149) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V2}, V58)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V4, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.None'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E2 | E3] -> (fun (V12, V13) -> case V12 of {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V18, V5, V6, V14))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.ExternDef', V21}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.TTImp.TTImp.ForeignFn', E8} -> (fun (V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V27, V5, V6, V23))), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('un--getFnString'(V1, V2, V3, V31)) end, V22, []))(V23))), case V32 of {'Idris.Prelude.Types.Left', E13} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.ForeignDef', V30, V34}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--initDef'(V0, V1, V2, V3, V4, V5, V6, V13)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRetTy'(V0, V1) -> case V1 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> fun (V10) -> begin (V11 = (((V5(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V2, 1}))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> (('un--getRetTy'(V0, V13))(V10)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'('erased', V1)), <<"Can only add hints for concrete return types"/utf8>>}, V14)) end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', V16} end end(E10, E11, E12, E13, E14)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'('erased', V1)), <<"Can only add hints for concrete return types"/utf8>>}, V21)) end end.
'un--getFnString'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IPrimVal', E11, E12} -> (fun (V4, V5) -> case V5 of {'Idris.Core.TT.Str', E24} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', V6} end end(E24)); _ -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[foreign]"/utf8>>}))(V8))), case V9 of {'Idris.Prelude.Types.Left', E13} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V13 = ('Idris.Idris2.Core.Normalise':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V12, {'Idris.Core.TT.StringType'}}))), begin (V14 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V11, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V13, V8))), case V14 of {'Idris.Prelude.Types.Left', E15} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E17} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V20, {'Idris.Core.Env.Nil'}, V16))(V8))), case V21 of {'Idris.Prelude.Types.Left', E19} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V23) -> case V23 of {'Idris.Core.Value.NPrimVal', E21, E22} -> (fun (V24, V25) -> case V25 of {'Idris.Core.TT.Str', E23} -> (fun (V26) -> {'Idris.Prelude.Types.Right', V26} end(E23)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V12, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V8)) end end(E21, E22)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V12, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V8)) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E11, E12)); _ -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[foreign]"/utf8>>}))(V27))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V32 = ('Idris.Idris2.Core.Normalise':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V31, {'Idris.Core.TT.StringType'}}))), begin (V33 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V30, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V32, V27))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V39, {'Idris.Core.Env.Nil'}, V35))(V27))), case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> case V42 of {'Idris.Core.Value.NPrimVal', E8, E9} -> (fun (V43, V44) -> case V44 of {'Idris.Core.TT.Str', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Right', V45} end(E10)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V31, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V27)) end end(E8, E9)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V31, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V27)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findInferrable'(V0, V1, V2) -> ('nested--11187-12038--in--un--fi'(V2, V1, V0, 0, 0, [], [], V2)).
