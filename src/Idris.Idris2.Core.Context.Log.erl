-module('Idris.Idris2.Core.Context.Log').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in logTimeRecord-1637'/6,
  'case--logTimeRecord-1560'/6,
  'case--logTimeRecord\x{27}-1508'/13,
  'case--logTimeRecord\x{27}-1400'/13,
  'case--logTimeWhen-1257'/5,
  'case--logC-1043'/7,
  'case--log\x{27}-992'/5,
  'case--logTerm-915'/9,
  'nested--6257-1670--in--un--showTimeLog'/2,
  'nested--6257-1669--in--un--addZeros'/2,
  'nested--5762-1219--in--un--addZeros'/6,
  'nested--5636-1093--in--un--addZeros'/5,
  'un--showTimeRecord'/2,
  'un--logTimeWhen'/5,
  'un--logTimeRecord\x{27}'/5,
  'un--logTimeRecord'/5,
  'un--logTimeOver'/5,
  'un--logTime'/5,
  'un--logTerm'/7,
  'un--logC'/5,
  'un--log\x{27}'/4,
  'un--log'/4
]).
'case--case block in logTimeRecord-1637'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V2, {'Idris.Builtin.MkPair', 0, V5}, V30)), V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--logTimeRecord-1560'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> case V7 of 0 -> V1; 1 -> fun (V9) -> begin (V37 = begin (V36 = ('erlang':'put'(V3, case V4 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V2, {'Idris.Builtin.MkPair', 0, V8}, V34)), V35} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V39) -> ('un--logTimeRecord\x{27}'('erased', V3, V2, V1, V9)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V40) -> ('un--logTimeRecord\x{27}'('erased', V3, V2, V1, V40)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--logTimeRecord\x{27}-1508'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V2, {'Idris.Builtin.MkPair', 1, (V12 + V10)}, V37)), V38} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--logTimeRecord\x{27}-1400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> V15 end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--logTimeWhen-1257'(V0, V1, V2, V3, V4) -> case V3 of 0 -> fun (V5) -> begin (V7 = begin (V6 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V5))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = 1000000000), begin (V11 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V9)) * V10) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V9)))), begin (V12 = (V1(V5))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V16 = begin (V15 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V5))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V18)) * V10) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V18)))), begin (V20 = ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Integer'(V19, V11))), begin (V49 = begin (V48 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> fun (V47) -> V47 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TIMING "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((V2()), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(V20, V10)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--5762-1219--in--un--addZeros'('erased', V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'un--unpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral__Integer'(V20, V10)), 1000000)))))))), <<"s"/utf8>>))))))))))))))(V5))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E6} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> {'Idris.Prelude.Types.Right', V14} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--logC-1043'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> begin (V8 = (V0(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V38 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Options.Log':'dn--un--show_Show__LogLevel'(V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, V10))))))))(V7))), {'Idris.Prelude.Types.Right', V38} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--log\x{27}-992'(V0, V1, V2, V3, V4) -> case V4 of 0 -> fun (V5) -> begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Options.Log':'dn--un--show_Show__LogLevel'(V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, (V0())))))))))(V5))), {'Idris.Prelude.Types.Right', V33} end end; 1 -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--logTerm-915'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V12, V13)) end end}, V1, V9))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V44 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Options.Log':'dn--un--show_Show__LogLevel'(V7)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((V2()), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V16))))))))))))))(V9))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6257-1670--in--un--showTimeLog'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Prelude.IO':'un--putStr'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, <<": "/utf8>>))))(V6))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = 1000000000), begin (V66 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(V5, V38)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--6257-1669--in--un--addZeros'(V0, ('Idris.Idris2.Prelude.Types':'un--unpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral__Integer'(V5, V38)), 1000000)))))))), <<"s"/utf8>>))))))))(V6))), {'Idris.Prelude.Types.Right', V66} end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6257-1669--in--un--addZeros'(V0, V1) -> case V1 of [] -> <<"000"/utf8>>; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"00"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V2)))); [E2 | E3] -> (fun (V4, V5) -> case V5 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"0"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V2)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V4)))))); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V1)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V1)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V1)) end.
'nested--5762-1219--in--un--addZeros'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> <<"000"/utf8>>; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"00"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V6)))); [E2 | E3] -> (fun (V8, V9) -> case V9 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"0"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V6)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V8)))))); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V5)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V5)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V5)) end.
'nested--5636-1093--in--un--addZeros'(V0, V1, V2, V3, V4) -> case V4 of [] -> <<"000"/utf8>>; [E0 | E1] -> (fun (V5, V6) -> case V6 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"00"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V5)))); [E2 | E3] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"0"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V5)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_String'(V7)))))); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V4)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V4)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'un--pack'(V4)) end.
'un--showTimeRecord'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V6) -> ('nested--6257-1670--in--un--showTimeLog'(V0, V6)) end, ('Idris.Idris2.Data.StringMap':'un--toList'('erased', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V31 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTimeWhen'(V0, V1, V2, V3, V4) -> case V2 of 0 -> fun (V5) -> begin (V7 = begin (V6 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V5))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = 1000000000), begin (V11 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V9)) * V10) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V9)))), begin (V12 = (V4(V5))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V16 = begin (V15 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V5))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V18)) * V10) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V18)))), begin (V20 = ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Integer'(V19, V11))), begin (V49 = begin (V48 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> fun (V47) -> V47 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TIMING "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((V3()), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(V20, V10)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--5762-1219--in--un--addZeros'('erased', V4, V3, V2, V1, ('Idris.Idris2.Prelude.Types':'un--unpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral__Integer'(V20, V10)), 1000000)))))))), <<"s"/utf8>>))))))))))))))(V5))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E6} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> {'Idris.Prelude.Types.Right', V14} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> V4; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--logTimeRecord\x{27}'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = 1000000000), begin (V10 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V8)) * V9) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V8)))), begin (V11 = (V3(V4))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V17)) * V9) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V17)))), begin (V19 = ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Integer'(V18, V10))), begin (V21 = begin (V20 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V50 = ('case--logTimeRecord\x{27}-1400'('erased', V3, V2, V1, V8, V9, V10, V13, V17, V18, V19, V23, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V2, case V23 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V48 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V78 = begin (V77 = ('erlang':'put'(V1, case V23 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> {'Idris.Core.Context.MkDefs', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V2, {'Idris.Builtin.MkPair', 1, (V50 + V19)}, V75)), V76} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E60} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V80) -> {'Idris.Prelude.Types.Right', V13} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTimeRecord'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('case--logTimeRecord-1560'('erased', V3, V2, V1, V8, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V33 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTimeOver'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = 1000000000), begin (V10 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V8)) * V9) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V8)))), begin (V11 = (V3(V4))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = (('Idris.Idris2.System.Clock':'un--clockTime'({'Idris.System.Clock.Process'}))(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ((('Idris.Idris2.System.Clock':'un--seconds'('erased', V17)) * V9) + ('Idris.Idris2.System.Clock':'un--nanoseconds'('erased', V17)))), begin (V19 = ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Integer'(V18, V10))), begin (V51 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Integer'(V19, V1)) of 0 -> begin (V20 = (V2(V4))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V50 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> V29 end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), begin (V37 = (V34(V35))), (V36(V37)) end end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), ((V41(V43))(V42)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V45(V46))), (V47(V46)) end end end end}, fun (V48) -> fun (V49) -> V49 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TIMING "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V22, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(V19, V9)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--5636-1093--in--un--addZeros'('erased', V3, V2, V1, ('Idris.Idris2.Prelude.Types':'un--unpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral__Integer'(V19, V9)), 1000000)))))))), <<"s"/utf8>>))))))))))))))(V4))), {'Idris.Prelude.Types.Right', V50} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V51 of {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V53) -> {'Idris.Prelude.Types.Right', V13} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTime'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getSession'(V1, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('un--logTimeWhen'('erased', V1, case V7 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTerm'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--getSession'(V1, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Options.Log':'un--mkLogLevel'(V2))(V3))), (('case--logTerm-915'(V0, V5, V4, V3, V2, V1, V9, V10, ('Idris.Idris2.Core.Options.Log':'un--keepLog'(V10, case V9 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V18 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logC'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Options.Log':'un--mkLogLevel'(V1))(V2))), (('case--logC-1043'(V3, V2, V1, V0, V7, V8, ('Idris.Idris2.Core.Options.Log':'un--keepLog'(V8, case V7 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--log\x{27}'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--log\x{27}-992'(V2, V1, V0, V6, ('Idris.Idris2.Core.Options.Log':'un--keepLog'(V1, case V6 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--log'(V0, V1, V2, V3) -> begin (V4 = (('Idris.Idris2.Core.Options.Log':'un--mkLogLevel'(V1))(V2))), fun (V5) -> ('un--log\x{27}'(V0, V4, V3, V5)) end end.
