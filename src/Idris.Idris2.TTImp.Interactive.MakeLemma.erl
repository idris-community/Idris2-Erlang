-module('Idris.Idris2.TTImp.Interactive.MakeLemma').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--makeLemma-4289'/7,
  'case--case block in case block in getArgs-4050'/20,
  'case--case block in getArgs-4001'/20,
  'case--case block in getArgs-3883'/21,
  'case--getArgs-3837'/17,
  'case--bindable-3571'/4,
  'nested--8631-4237--in--un--getArg'/4,
  'un--used'/1,
  'un--mkType'/3,
  'un--mkApp'/3,
  'un--makeLemma'/7,
  'un--hiddenName'/1,
  'un--getArgs'/5,
  'un--bindableArg'/3,
  'un--bindable'/3
]).
'case--makeLemma-4289'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('un--mkType'(V3, V7, V8)), ('un--mkApp'(V3, V2, V7))}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getArgs-4050'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', V15} end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in getArgs-4001'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> ('case--case block in case block in getArgs-4050'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V7, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})))); 1 -> {'Idris.Prelude.Types.Just', V15}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getArgs-3883'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of 0 -> {'Idris.Core.TT.Explicit'}; 1 -> {'Idris.Core.TT.Implicit'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getArgs-3837'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> begin (V20 = begin (V19 = {'Idris.Builtin.MkPair', V17, V18}), ('case--case block in getArgs-4001'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18, V19, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()))))) end), begin (V22 = begin (V21 = {'Idris.Builtin.MkPair', V17, V18}), ('case--case block in getArgs-3883'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18, V21, V20, ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--used'(V9)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('un--bindableArg'('erased', 0, V7)))), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--hiddenName'(V6)))) end)) end)))) end), fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V20, {'Idris.Builtin.MkPair', V22, {'Idris.Builtin.MkPair', V9, V13}}}} | V17], V18}} end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bindable-3571'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.TT.TyCon', E5, E6} -> (fun (V9, V10) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V18, V19, V20)) end end end end end}, fun (V21) -> ('un--bindable'('erased', V2, V21)) end))(V5)) end(E5, E6)); {'Idris.Core.TT.DataCon', E7, E8} -> (fun (V22, V23) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V31, V32, V33)) end end end end end}, fun (V34) -> ('un--bindable'('erased', V2, V34)) end))(V5)) end(E7, E8)); _ -> 1 end end(E2, E3, E4)); {'Idris.Core.TT.TDelayed', E9, E10, E11} -> (fun (V35, V36, V37) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V45, V46, V47)) end end end end end}, fun (V48) -> ('un--bindable'('erased', V2, V48)) end))([V37 | V5])) end(E9, E10, E11)); {'Idris.Core.TT.TDelay', E12, E13, E14, E15} -> (fun (V49, V50, V51, V52) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V60, V61, V62)) end end end end end}, fun (V63) -> ('un--bindable'('erased', V2, V63)) end))([V52 | V5])) end(E12, E13, E14, E15)); {'Idris.Core.TT.TForce', E16, E17, E18} -> (fun (V64, V65, V66) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V74, V75, V76)) end end end end end}, fun (V77) -> ('un--bindable'('erased', V2, V77)) end))([V66 | V5])) end(E16, E17, E18)); {'Idris.Core.TT.Local', E19, E20, E21} -> (fun (V78, V79, V80) -> case V5 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V2, V80)); _ -> 1 end end(E19, E20, E21)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'nested--8631-4237--in--un--getArg'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Just', {'Idris.TTImp.TTImp.IVar', V2, V4}} end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--used'(V0) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V1, V2)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V3, V4)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V7, V8)) end end}}, V0)))).
'un--mkType'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V11, V12) -> {'Idris.TTImp.TTImp.IPi', V0, V11, V9, V7, V12, ('un--mkType'(V0, V4, V2))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkApp'(V0, V1, V2) -> ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V0, V1}, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V3) -> ('nested--8631-4237--in--un--getArg'(V2, V1, V0, V3)) end, V2)))).
'un--makeLemma'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--getArgs'([], V1, {'Idris.Core.Env.Nil'}, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('un--mkType'(V2, V10, V11)), ('un--mkApp'(V2, V3, V10))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hiddenName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> case V1 of <<"_"/utf8>> -> 0; _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--getArgs'(V0, V1, V2, V3, V4) -> case V3 of 0 -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E32} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V9) -> begin (V13 = begin (V10 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V9, V2, V4, V5))), case V10 of {'Idris.Prelude.Types.Left', E34} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V12) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V12))(V5)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V13 of {'Idris.Prelude.Types.Left', E36} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V15}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V16 = (V3 - 1)), case V4 of {'Idris.Core.TT.Bind', E6, E7, E8, E9} -> (fun (V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V21, V22, V23, V24) -> fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E20} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V29) -> begin (V33 = begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V29, V2, V24, V25))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V32))(V25)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> begin (V37 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V29, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V36) -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V36)) end, V0)), ('Idris.Idris2.Core.Name':'un--nameRoot'(V18)), V25))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V40 = {'Idris.Core.Name.UN', V39}), begin (V41 = (('un--getArgs'([V40 | V0], V1, {'Idris.Core.Env.::', V19, V2}, V16, ('Idris.Idris2.Core.TT':'un--renameTop'('erased', 'erased', V40, V20))))(V25))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> begin (V44 = {'Idris.Core.TT.Pi', V21, V22, V23, V24}), case V43 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V45, V46) -> begin (V48 = begin (V47 = {'Idris.Builtin.MkPair', V45, V46}), ('case--case block in getArgs-4001'(V1, V17, V21, V0, V23, V16, V18, V20, V24, V22, V44, V2, V29, V35, V39, V40, V45, V46, V47, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V22, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()))))) end), begin (V50 = begin (V49 = {'Idris.Builtin.MkPair', V45, V46}), ('case--case block in getArgs-3883'(V1, V17, V21, V0, V23, V16, V18, V20, V24, V22, V44, V2, V29, V35, V39, V40, V45, V46, V49, V48, ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--used'(V22)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('un--bindableArg'('erased', 0, V20)))), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--hiddenName'(V18)))) end)) end)))) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', V48, {'Idris.Builtin.MkPair', V50, {'Idris.Builtin.MkPair', V22, V35}}}} | V45], V46}} end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); _ -> fun (V51) -> begin (V53 = begin (V52 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E10} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V55) -> begin (V59 = begin (V56 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V55, V2, V4, V51))), case V56 of {'Idris.Prelude.Types.Left', E12} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V58) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V58))(V51)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V59 of {'Idris.Prelude.Types.Left', E14} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V61}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6, E7, E8, E9)); _ -> fun (V62) -> begin (V64 = begin (V63 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E0} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V66) -> begin (V70 = begin (V67 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V66, V2, V4, V62))), case V67 of {'Idris.Prelude.Types.Left', E2} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V69) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V69))(V62)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V70 of {'Idris.Prelude.Types.Left', E4} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V72}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--bindableArg'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('un--bindable'('erased', V1, V10)), fun () -> ('un--bindableArg'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1)), V6)) end)) end(E4, E5, E6, E7)); _ -> 1 end end(E0, E1, E2, E3)); _ -> 1 end.
'un--bindable'(V0, V1, V2) -> ('case--bindable-3571'('erased', V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V2)))).
