-module('Idris.Idris2.Core.Binary').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--readImportHashes-9371'/2,
  'case--case block in readFromTTC-9153'/12,
  'case--case block in case block in readFromTTC-9067'/26,
  'case--case block in readFromTTC-8769'/19,
  'case--case block in readFromTTC-8688'/16,
  'case--readFromTTC-8632'/13,
  'case--escriptReadFromFile-8492'/2,
  'case--stringToBuffer-8451'/3,
  'case--case block in case block in readEscriptFile-8374'/6,
  'case--case block in readEscriptFile-8355'/4,
  'case--readEscriptFile-8341'/2,
  'case--case block in updateTransforms,addT-8271'/8,
  'case--case block in updateTransforms,addT-8199'/7,
  'case--updateTransforms,addT-8147'/8,
  'case--updateCGDirectives-8111'/4,
  'case--updateNameDirectives-8040'/5,
  'case--updatePrims-7972'/3,
  'case--updatePrimNames-7900'/2,
  'case--updateRewrite-7880'/3,
  'case--updatePair-7815'/3,
  'case--addAutoHint-7749'/5,
  'case--addGlobalDef-7580'/9,
  'case--addGlobalDef,completeDef-7498'/7,
  'case--writeToTTC-7410'/13,
  'case--case block in getSaveDefs-7223'/7,
  'case--getSaveDefs-7210'/5,
  'nested--11827-5811--in--un--resolved_aux'/7,
  'nested--12250-6422--in--un--resolvedRW'/23,
  'nested--12250-6423--in--un--resolvedPrim'/23,
  'nested--12250-6421--in--un--resolvedPair'/23,
  'nested--11826-5782--in--un--full_aux'/7,
  'nested--12249-6228--in--un--fullRW'/23,
  'nested--12249-6229--in--un--fullPrim'/23,
  'nested--12249-6227--in--un--fullPair'/23,
  'nested--13520-7489--in--un--completeDef'/6,
  'nested--14655-8550--in--un--alreadyDone'/13,
  'nested--14192-8131--in--un--addT'/7,
  'dn--un--resolved_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/2,
  'dn--un--resolved_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/2,
  'dn--un--resolved_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/2,
  'dn--un--resolved_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/2,
  'dn--un--resolved_HasNames__(TTCFile $e)'/4,
  'dn--un--resolved_HasNames__(List $a)'/4,
  'dn--un--full_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/2,
  'dn--un--full_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/2,
  'dn--un--full_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/2,
  'dn--un--full_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/2,
  'dn--un--full_HasNames__(TTCFile $e)'/4,
  'dn--un--full_HasNames__(List $a)'/4,
  'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/0,
  'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/0,
  'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/0,
  'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/0,
  'dn--un--__Impl_HasNames_(TTCFile $e)'/2,
  'dn--un--__Impl_HasNames_(List $a)'/2,
  'un--writeToTTC'/7,
  'un--writeTTCFile'/6,
  'un--updateTransforms'/2,
  'un--updateRewrite'/3,
  'un--updatePrims'/3,
  'un--updatePrimNames'/2,
  'un--updatePair'/3,
  'un--updateNameDirectives'/2,
  'un--updateCGDirectives'/3,
  'un--ttcVersion'/0,
  'un--stringToBuffer'/1,
  'un--readTTCFile'/7,
  'un--readImportHashes'/2,
  'un--readIFaceHash'/2,
  'un--readFromTTC'/11,
  'un--readEscriptFile'/2,
  'un--getSaveDefs'/3,
  'un--getNSas'/1,
  'un--getImportHashes'/3,
  'un--getHash'/3,
  'un--escriptReadFromFile'/1,
  'un--checkTTCVersion'/3,
  'un--addTypeHint'/3,
  'un--addGlobalDef'/4,
  'un--addAutoHint'/2
]).
'case--readImportHashes-9371'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V7) -> begin (V8 = ('un--getImportHashes'(V0, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Right', V10} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end end, V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', []} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in readFromTTC-9153'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, V2}}} | V30], V31, V32, V33, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in readFromTTC-9067'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.UnifyState.MkUState', V26, V27, V28, V29, V30, V31, case V16 of {'Idris.Core.Binary.MkTTCFile', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V44 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V33, V34, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in readFromTTC-8769'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', case V16 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V16 of {'Idris.Core.Binary.MkTTCFile', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V45 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}} end; 1 -> fun (V56) -> begin (V76 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V57) -> ('un--addGlobalDef'(V9, V3, V15, V57)) end, case V16 of {'Idris.Core.Binary.MkTTCFile', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V61 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V56))), case V76 of {'Idris.Prelude.Types.Left', E54} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V78) -> begin (V99 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Context':'un--addUserHole'(V9, V79, V80)) end end, case V16 of {'Idris.Core.Binary.MkTTCFile', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V85 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V56))), case V99 of {'Idris.Prelude.Types.Left', E74} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V101) -> begin (V120 = ('Idris.Idris2.Core.Context':'un--setNS'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> V111 end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56))), case V120 of {'Idris.Prelude.Types.Left', E94} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V122) -> begin (V141 = case V7 of 0 -> ('Idris.Idris2.Core.Context':'un--setNestedNS'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140) -> V133 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V141 of {'Idris.Prelude.Types.Left', E114} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V143) -> begin (V342 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V146, V147)) end end}, V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V148) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', ('un--getNSas'(V148)))) end, case V10 of {'Idris.Core.Context.MkDefs', E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299} -> (fun (V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V167 end(E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) of 0 -> begin (V194 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V175) -> ('un--addTypeHint'(V9, V6, V175)) end, case V16 of {'Idris.Core.Binary.MkTTCFile', E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193) -> V182 end(E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V56))), case V194 of {'Idris.Prelude.Types.Left', E134} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V196) -> begin (V216 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V197) -> ('un--addAutoHint'(V9, V197)) end, case V16 of {'Idris.Core.Binary.MkTTCFile', E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153} -> (fun (V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215) -> V203 end(E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V56))), case V216 of {'Idris.Prelude.Types.Left', E154} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V218) -> begin (V237 = ('un--updatePair'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173} -> (fun (V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236) -> V230 end(E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56))), case V237 of {'Idris.Prelude.Types.Left', E174} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V239) -> begin (V258 = ('un--updateRewrite'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193} -> (fun (V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257) -> V252 end(E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56))), case V258 of {'Idris.Prelude.Types.Left', E194} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E194)); {'Idris.Prelude.Types.Right', E195} -> (fun (V260) -> begin (V279 = ('un--updatePrims'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213} -> (fun (V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278) -> V274 end(E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56))), case V279 of {'Idris.Prelude.Types.Left', E214} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V281) -> begin (V300 = (('un--updateNameDirectives'(V9, ('Idris.Idris2.Data.List':'un--reverse'('erased', case V16 of {'Idris.Core.Binary.MkTTCFile', E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233} -> (fun (V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299) -> V296 end(E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V56))), case V300 of {'Idris.Prelude.Types.Left', E234} -> (fun (V301) -> {'Idris.Prelude.Types.Left', V301} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V302) -> begin (V321 = ('un--updateCGDirectives'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253} -> (fun (V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320) -> V318 end(E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56))), case V321 of {'Idris.Prelude.Types.Left', E254} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E254)); {'Idris.Prelude.Types.Right', E255} -> (fun (V323) -> (('un--updateTransforms'(V9, case V16 of {'Idris.Core.Binary.MkTTCFile', E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273} -> (fun (V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341) -> V340 end(E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V56)) end(E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V342 of {'Idris.Prelude.Types.Left', E300} -> (fun (V343) -> {'Idris.Prelude.Types.Left', V343} end(E300)); {'Idris.Prelude.Types.Right', E301} -> (fun (V344) -> begin (V345 = case ('Idris.Idris2.Prelude.Basics':'un--not'(V5)) of 0 -> ('Idris.Idris2.Core.Context':'un--clearSavedHints'(V9, V56)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V345 of {'Idris.Prelude.Types.Left', E302} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E302)); {'Idris.Prelude.Types.Right', E303} -> (fun (V347) -> begin (V348 = ('Idris.Idris2.Core.Context':'un--resetFirstEntry'(V9, V56))), case V348 of {'Idris.Prelude.Types.Left', E304} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E304)); {'Idris.Prelude.Types.Right', E305} -> (fun (V350) -> begin (V352 = begin (V351 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V351} end), case V352 of {'Idris.Prelude.Types.Left', E306} -> (fun (V353) -> {'Idris.Prelude.Types.Left', V353} end(E306)); {'Idris.Prelude.Types.Right', E307} -> (fun (V354) -> begin (V384 = begin (V383 = ('erlang':'put'(V8, case V354 of {'Idris.Core.UnifyState.MkUState', E308, E309, E310, E311, E312, E313, E314, E315, E316, E317} -> (fun (V355, V356, V357, V358, V359, V360, V361, V362, V363, V364) -> {'Idris.Core.UnifyState.MkUState', V355, V356, V357, V358, V359, V360, case V16 of {'Idris.Core.Binary.MkTTCFile', E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335} -> (fun (V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382) -> V373 end(E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V362, V363, V364} end(E308, E309, E310, E311, E312, E313, E314, E315, E316, E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V383} end), case V384 of {'Idris.Prelude.Types.Left', E336} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E336)); {'Idris.Prelude.Types.Right', E337} -> (fun (V386) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', case V16 of {'Idris.Core.Binary.MkTTCFile', E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355} -> (fun (V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404) -> V388 end(E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V16 of {'Idris.Core.Binary.MkTTCFile', E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373} -> (fun (V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422) -> V412 end(E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}} end(E337)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in readFromTTC-8688'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> {'Idris.Prelude.Types.Nothing'}; 1 -> {'Idris.Prelude.Types.Just', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--readFromTTC-8632'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 1 -> fun (V13) -> begin (V41 = begin (V40 = ('erlang':'put'(V9, case V10 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, V2}}} | V32], V33, V34, V35, V36, V37, V38, V39} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V43) -> begin (V44 = (('un--escriptReadFromFile'(V4))(V13))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, V46, V13))), case V47 of {'Idris.Prelude.Types.Left', E30} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V49) -> begin (V50 = ('case--case block in readFromTTC-8688'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V43, V46, V49, ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V3))))))), begin (V51 = ('un--readTTCFile'('erased', V1, V9, V11, V50, V49, V13))), case V51 of {'Idris.Prelude.Types.Left', E32} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V53) -> begin (V72 = case V53 of {'Idris.Core.Binary.MkTTCFile', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V71 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('case--case block in readFromTTC-8769'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V43, V46, V49, V50, V53, V72, ('nested--14655-8550--in--un--alreadyDone'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V3, V2, case V10 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V91 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V13)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--escriptReadFromFile-8492'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V2} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V4))))))}, V5)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--stringToBuffer-8451'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V3, 0, V0))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E1} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Right', V3} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Unable to create buffer"/utf8>>}, V36)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in readEscriptFile-8374'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V9 = begin (V8 = ('Idris.Idris2.Utils.Escript':'un--closeArchive'(V3, V7))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', V6} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to read file"/utf8>>))}, V12)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in readEscriptFile-8355'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V7 = begin (V6 = ('Idris.Idris2.Utils.Escript':'un--readFile'(V4, V0, V5))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> case V9 of {'Idris.Prelude.Types.Just', E3} -> (fun (V10) -> begin (V12 = begin (V11 = ('Idris.Idris2.Utils.Escript':'un--closeArchive'(V4, V5))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', V10} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to read file"/utf8>>))}, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to open archive"/utf8>>))}, V15)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--readEscriptFile-8341'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> fun (V3) -> begin (V5 = begin (V4 = ('Idris.Idris2.Utils.Escript':'un--openArchive'(V2, V3))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Just', E3} -> (fun (V8) -> begin (V10 = begin (V9 = ('Idris.Idris2.Utils.Escript':'un--readFile'(V8, V0, V3))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E6} -> (fun (V13) -> begin (V15 = begin (V14 = ('Idris.Idris2.Utils.Escript':'un--closeArchive'(V8, V3))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Right', V13} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to read file"/utf8>>))}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to open archive"/utf8>>))}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to find Escript path"/utf8>>))}, V18)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateTransforms,addT-8271'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V4 | V7], V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateTransforms,addT-8199'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V4 | []], V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateTransforms,addT-8147'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V35 = ('erlang':'put'(V3, case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V4 | []], V21)), V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end end()); {'Idris.Prelude.Types.Just', E26} -> (fun (V36) -> fun (V37) -> begin (V64 = ('erlang':'put'(V3, case V6 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkDefs', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, [V4 | V36], V50)), V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V64} end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateCGDirectives-8111'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V3, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateNameDirectives-8040'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V0, V1, V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updatePrims-7972'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, V32, V33, V34, ('un--updatePrimNames'(V0, V35)), V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updatePrimNames-7900'(V0, V1) -> case V1 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Core.Options.MkPrimNs', ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', case V0 of {'Idris.Core.Options.MkPrimNs', E3, E4, E5} -> (fun (V5, V6, V7) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', case V0 of {'Idris.Core.Options.MkPrimNs', E6, E7, E8} -> (fun (V8, V9, V10) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', case V0 of {'Idris.Core.Options.MkPrimNs', E9, E10, E11} -> (fun (V11, V12, V13) -> V13 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateRewrite-7880'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, V32, V33, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', V0, V34)), V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updatePair-7815'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V7 of {'Idris.Core.Options.MkOptions', E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V29, V30, V31, V32, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', V0, V33)), V34, V35, V36, V37}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addAutoHint-7749'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V4, V1, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addGlobalDef-7580'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--addContextEntry'(V4, V0, V1, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addGlobalDef,completeDef-7498'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.None'} -> (fun () -> 1 end()); {'Idris.Core.Context.Hole', E0, E1} -> (fun (V7, V8) -> 1 end(E0, E1)); _ -> 0 end.
'case--writeToTTC-7410'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Right', E0} -> (fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V15))))))}, V16)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getSaveDefs-7223'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.Builtin', E55, E56} -> (fun (V7, V8) -> ('un--getSaveDefs'(V1, V3, V2)) end(E55, E56)); _ -> fun (V9) -> begin (V10 = ('Idris.Idris2.Utils.Binary':'un--initBinaryS'(16384, V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V42 = begin (V39 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__GlobalDef'(case V2 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V9))), case V39 of {'Idris.Prelude.Types.Left', E28} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V41) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__GlobalDef'(V12, V41, V9)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V48) -> (('un--getSaveDefs'(V1, [{'Idris.Builtin.MkPair', case V4 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V50 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48} | V3], V2))(V9)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--getSaveDefs-7210'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in getSaveDefs-7223'(V0, V1, V2, V3, V5, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V24 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--getSaveDefs'(V1, V3, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11827-5811--in--un--resolved_aux'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V5))} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V13 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V11, V12) -> (((V12(V4))(V8))(V10)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> (('nested--11827-5811--in--un--resolved_aux'('erased', V1, V2, V3, V4, [V15 | V5], V9))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12250-6422--in--un--resolvedRW'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Core.Options.MkRewriteNs', E1, E2} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V21, V25))(V27))), case V28 of {'Idris.Prelude.Types.Left', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V21, V26))(V27))), case V31 of {'Idris.Prelude.Types.Left', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkRewriteNs', V30, V33}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12250-6423--in--un--resolvedPrim'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2} -> (fun (V23, V24, V25) -> fun (V26) -> begin (V31 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V29, V30)) end end}, V21, V23))(V26))), case V31 of {'Idris.Prelude.Types.Left', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V33) -> begin (V38 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V36, V37)) end end}, V21, V24))(V26))), case V38 of {'Idris.Prelude.Types.Left', E5} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V40) -> begin (V45 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V43, V44)) end end}, V21, V25))(V26))), case V45 of {'Idris.Prelude.Types.Left', E7} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkPrimNs', V33, V40, V47}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12250-6421--in--un--resolvedPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Core.Options.MkPairNs', E1, E2, E3} -> (fun (V25, V26, V27) -> fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V21, V25))(V28))), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V21, V26))(V28))), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V35 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V21, V27))(V28))), case V35 of {'Idris.Prelude.Types.Left', E8} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkPairNs', V31, V34, V37}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11826-5782--in--un--full_aux'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V5))} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V13 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V11, V12) -> (((V11(V4))(V8))(V10)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> (('nested--11826-5782--in--un--full_aux'('erased', V1, V2, V3, V4, [V15 | V5], V9))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12249-6228--in--un--fullRW'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Core.Options.MkRewriteNs', E1, E2} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V21, V25))(V27))), case V28 of {'Idris.Prelude.Types.Left', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V21, V26))(V27))), case V31 of {'Idris.Prelude.Types.Left', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkRewriteNs', V30, V33}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12249-6229--in--un--fullPrim'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2} -> (fun (V23, V24, V25) -> fun (V26) -> begin (V31 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V29, V30)) end end}, V21, V23))(V26))), case V31 of {'Idris.Prelude.Types.Left', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V33) -> begin (V38 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V36, V37)) end end}, V21, V24))(V26))), case V38 of {'Idris.Prelude.Types.Left', E5} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V40) -> begin (V45 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V43, V44)) end end}, V21, V25))(V26))), case V45 of {'Idris.Prelude.Types.Left', E7} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkPrimNs', V33, V40, V47}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12249-6227--in--un--fullPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Core.Options.MkPairNs', E1, E2, E3} -> (fun (V25, V26, V27) -> fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V21, V25))(V28))), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V21, V26))(V28))), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V35 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V21, V27))(V28))), case V35 of {'Idris.Prelude.Types.Left', E8} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkPairNs', V31, V34, V37}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13520-7489--in--un--completeDef'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> ('case--addGlobalDef,completeDef-7498'(V0, V1, V2, V3, V4, V6, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V24 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14655-8550--in--un--alreadyDone'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> 1; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V10, V17)), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V11, V20)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V10, V17)), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V10)), V11)) end)), fun () -> ('nested--14655-8550--in--un--alreadyDone'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14)) end)) end)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14192-8131--in--un--addT'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('case--updateTransforms,addT-8147'(V0, V1, V2, V3, V5, V4, V10, ('Idris.Idris2.Data.NameMap':'un--lookup'('erased', V4, case V10 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V23 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Transform'(V0, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V3}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V0, V2))(V6))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V0, V4))(V6))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V12, V5}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V3}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(TTCFile $e)'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> fun (V22) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V2, V23)) end, V9, []))(V22))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V2, V27)) end, V10, []))(V22))), case V28 of {'Idris.Prelude.Types.Left', E20} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V30) -> begin (V31 = (('nested--12250-6421--in--un--resolvedPair'('erased', V1, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V2, V2, V15))(V22))), case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> begin (V34 = (('nested--12250-6422--in--un--resolvedRW'('erased', V1, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V2, V2, V16))(V22))), case V34 of {'Idris.Prelude.Types.Left', E24} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V36) -> begin (V37 = (('nested--12250-6423--in--un--resolvedPrim'('erased', V1, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V2, V2, V17))(V22))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V44 = (('dn--un--resolved_HasNames__(List $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V40) -> fun (V41) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V42, V43)) end end}, V2, V18))(V22))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> begin (V51 = (('dn--un--resolved_HasNames__(List $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V47) -> fun (V48) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V49, V50)) end end}, V2, V20))(V22))), case V51 of {'Idris.Prelude.Types.Left', E30} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V53) -> begin (V56 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E32, E33} -> (fun (V54, V55) -> (((V55(V2))(V21))(V22)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V56 of {'Idris.Prelude.Types.Left', E34} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V4, V5, V6, V7, V8, V26, V30, V11, V12, V13, V14, V33, V36, V39, V46, V19, V53, V58}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames__(List $a)'(V0, V1, V2, V3) -> ('nested--11827-5811--in--un--resolved_aux'('erased', V1, V3, V2, V2, [], V3)).
'dn--un--full_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Transform'(V0, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V3}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V0, V2))(V6))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V0, V4))(V6))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V12, V5}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V3}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(TTCFile $e)'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> fun (V22) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V2, V23)) end, V9, []))(V22))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V2, V27)) end, V10, []))(V22))), case V28 of {'Idris.Prelude.Types.Left', E20} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V30) -> begin (V31 = (('nested--12249-6227--in--un--fullPair'('erased', V1, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V2, V2, V15))(V22))), case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> begin (V34 = (('nested--12249-6228--in--un--fullRW'('erased', V1, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V2, V2, V16))(V22))), case V34 of {'Idris.Prelude.Types.Left', E24} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V36) -> begin (V37 = (('nested--12249-6229--in--un--fullPrim'('erased', V1, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V2, V2, V17))(V22))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V44 = (('dn--un--full_HasNames__(List $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V40) -> fun (V41) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V42, V43)) end end}, V2, V18))(V22))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> begin (V51 = (('dn--un--full_HasNames__(List $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V47) -> fun (V48) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V49, V50)) end end}, V2, V20))(V22))), case V51 of {'Idris.Prelude.Types.Left', E30} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V53) -> begin (V56 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E32, E33} -> (fun (V54, V55) -> (((V54(V2))(V21))(V22)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V56 of {'Idris.Prelude.Types.Left', E34} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V4, V5, V6, V7, V8, V26, V30, V11, V12, V13, V14, V33, V36, V39, V46, V19, V53, V58}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames__(List $a)'(V0, V1, V2, V3) -> ('nested--11826-5782--in--un--full_aux'('erased', V1, V3, V2, V2, [], V3)).
'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames__(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(TTCFile $e)'(V0, V1) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames__(TTCFile $e)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__(TTCFile $e)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_HasNames_(List $a)'(V0, V1) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames__(List $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames__(List $a)'('erased', V1, V4, V5)) end end}.
'un--writeToTTC'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Utils.Binary':'un--initBinary'(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V44 = (('un--getSaveDefs'(('Idris.Idris2.Data.NameMap':'un--keys'('erased', case V13 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V23 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [], V13))(V6))), case V44 of {'Idris.Prelude.Types.Left', E32} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V46) -> begin (V73 = (('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"ttc.write"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Writing "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" with hash "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(case V13 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V62 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end))(V6))), case V73 of {'Idris.Prelude.Types.Left', E60} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V75) -> begin (V477 = ('un--writeTTCFile'('erased', V1, V2, V9, {'Idris.Core.Binary.MkTTCFile', ('un--ttcVersion'()), case V13 of {'Idris.Core.Context.MkDefs', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V91 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V118 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', case V13 of {'Idris.Core.Context.MkDefs', E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V150 end(E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V13 of {'Idris.Core.Context.MkDefs', E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165} -> (fun (V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179) -> V165 end(E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191} -> (fun (V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205) -> V190 end(E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217} -> (fun (V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231) -> V223 end(E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V17 of {'Idris.Core.UnifyState.MkUState', E218, E219, E220, E221, E222, E223, E224, E225, E226, E227} -> (fun (V232, V233, V234, V235, V236, V237, V238, V239, V240, V241) -> V238 end(E218, E219, E220, E221, E222, E223, E224, E225, E226, E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253} -> (fun (V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267) -> V244 end(E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279} -> (fun (V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293) -> V271 end(E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case case V13 of {'Idris.Core.Context.MkDefs', E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314} -> (fun (V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319) -> V298 end(E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E280, E281, E282, E283, E284, E285, E286, E287, E288} -> (fun (V320, V321, V322, V323, V324, V325, V326, V327, V328) -> V324 end(E280, E281, E282, E283, E284, E285, E286, E287, E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case case V13 of {'Idris.Core.Context.MkDefs', E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349} -> (fun (V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354) -> V333 end(E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E315, E316, E317, E318, E319, E320, E321, E322, E323} -> (fun (V355, V356, V357, V358, V359, V360, V361, V362, V363) -> V360 end(E315, E316, E317, E318, E319, E320, E321, E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case case V13 of {'Idris.Core.Context.MkDefs', E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384} -> (fun (V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389) -> V368 end(E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E350, E351, E352, E353, E354, E355, E356, E357, E358} -> (fun (V390, V391, V392, V393, V394, V395, V396, V397, V398) -> V396 end(E350, E351, E352, E353, E354, E355, E356, E357, E358)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Data.NameMap':'un--toList'('erased', case V13 of {'Idris.Core.Context.MkDefs', E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410} -> (fun (V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424) -> V413 end(E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V13 of {'Idris.Core.Context.MkDefs', E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436} -> (fun (V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450) -> V444 end(E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462} -> (fun (V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476) -> V464 end(E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4}, V6))), case V477 of {'Idris.Prelude.Types.Left', E463} -> (fun (V478) -> {'Idris.Prelude.Types.Left', V478} end(E463)); {'Idris.Prelude.Types.Right', E464} -> (fun (V479) -> begin (V485 = begin (V481 = begin (V480 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V480} end), case V481 of {'Idris.Prelude.Types.Left', E465} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E465)); {'Idris.Prelude.Types.Right', E466} -> (fun (V483) -> begin (V484 = (('Idris.Idris2.Utils.Binary':'un--writeToFile'(V5, V483))(V6))), {'Idris.Prelude.Types.Right', V484} end end(E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V485 of {'Idris.Prelude.Types.Left', E467} -> (fun (V486) -> {'Idris.Prelude.Types.Left', V486} end(E467)); {'Idris.Prelude.Types.Right', E468} -> (fun (V487) -> case V487 of {'Idris.Prelude.Types.Right', E469} -> (fun (V488) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E469)); {'Idris.Prelude.Types.Left', E470} -> (fun (V489) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V489))))))}, V6)) end(E470)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E468)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E464)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--writeTTCFile'(V0, V1, V2, V3, V4, V5) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V6) -> fun (V7) -> ('dn--un--full_HasNames__(TTCFile $e)'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1)), V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un--resolved_HasNames__(TTCFile $e)'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1)), V8, V9)) end end}, V4, V5))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = (('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V3, <<"TT2"/utf8>>))(V5))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V34 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> begin (V55 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V38 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V55 of {'Idris.Prelude.Types.Left', E42} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V57) -> begin (V100 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V58) -> fun (V59) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V60, V61, V62)) end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V63, V64)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V65, V66, V67)) end end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V68, V69)) end end}}, V58, V59)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V72, V73, V74)) end end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V75, V76)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V77, V78, V79)) end end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V80, V81)) end end}}, V70, V71)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V84 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V100 of {'Idris.Prelude.Types.Left', E62} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V102) -> begin (V141 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V103) -> fun (V104) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V107, V108)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V109) -> fun (V110) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Binary'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Binary'(V111, V112)) end end}}, V103, V104)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V117, V118)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V119) -> fun (V120) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Binary'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Binary'(V121, V122)) end end}}, V113, V114)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140) -> V126 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V141 of {'Idris.Prelude.Types.Left', E82} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V143) -> begin (V166 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V146, V147)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V152 end(E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V166 of {'Idris.Prelude.Types.Left', E102} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V168) -> begin (V207 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V169) -> fun (V170) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V171, V172)) end end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V173, V174)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V175) -> fun (V176) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V175, V176)) end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V177, V178)) end end}}, V169, V170)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V183, V184)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V185) -> fun (V186) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V187, V188)) end end}}, V179, V180)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206) -> V194 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V207 of {'Idris.Prelude.Types.Left', E122} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V209) -> begin (V280 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V210) -> fun (V211) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V212) -> fun (V213) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V214, V215)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V216) -> fun (V217) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V220, V221)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V222) -> fun (V223) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V222, V223)) end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V224, V225)) end end}}, V216, V217)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V228) -> fun (V229) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V230, V231)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V232) -> fun (V233) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V234, V235)) end end}}, V226, V227)) end end}}, V210, V211)) end end, fun (V236) -> fun (V237) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V238, V239)) end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V240, V241)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V242) -> fun (V243) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V246, V247)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V248) -> fun (V249) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V250, V251)) end end}}, V242, V243)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V254, V255)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V256, V257)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V258) -> fun (V259) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V260, V261)) end end}}, V252, V253)) end end}}, V236, V237)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141} -> (fun (V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279) -> V268 end(E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V280 of {'Idris.Prelude.Types.Left', E142} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V282) -> begin (V359 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V283) -> fun (V284) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V285) -> fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__ModuleIdent'(V285, V286, V287)) end end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__ModuleIdent'(V288, V289)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V290) -> fun (V291) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V292) -> fun (V293) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V292, V293)) end end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V294, V295)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V296) -> fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V296, V297, V298)) end end end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V299, V300)) end end}}, V290, V291)) end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V303) -> fun (V304) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V303, V304)) end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V305, V306)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V307) -> fun (V308) -> fun (V309) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V307, V308, V309)) end end end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V310, V311)) end end}}, V301, V302)) end end}}, V283, V284)) end end, fun (V312) -> fun (V313) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V314) -> fun (V315) -> fun (V316) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__ModuleIdent'(V314, V315, V316)) end end end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__ModuleIdent'(V317, V318)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V319) -> fun (V320) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V321) -> fun (V322) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V321, V322)) end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V323, V324)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V325) -> fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V325, V326, V327)) end end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V328, V329)) end end}}, V319, V320)) end end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V332) -> fun (V333) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V332, V333)) end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V334, V335)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V336) -> fun (V337) -> fun (V338) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V336, V337, V338)) end end end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V339, V340)) end end}}, V330, V331)) end end}}, V312, V313)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161} -> (fun (V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358) -> V348 end(E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V359 of {'Idris.Prelude.Types.Left', E162} -> (fun (V360) -> {'Idris.Prelude.Types.Left', V360} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V361) -> begin (V380 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181} -> (fun (V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379) -> V370 end(E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V380 of {'Idris.Prelude.Types.Left', E182} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V382) -> begin (V401 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201} -> (fun (V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400) -> V392 end(E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V401 of {'Idris.Prelude.Types.Left', E202} -> (fun (V402) -> {'Idris.Prelude.Types.Left', V402} end(E202)); {'Idris.Prelude.Types.Right', E203} -> (fun (V403) -> begin (V427 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V404) -> fun (V405) -> fun (V406) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V404, V405, V406)) end end end, fun (V407) -> fun (V408) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V407, V408)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221} -> (fun (V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426) -> V419 end(E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V427 of {'Idris.Prelude.Types.Left', E222} -> (fun (V428) -> {'Idris.Prelude.Types.Left', V428} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V429) -> begin (V453 = (('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V430) -> fun (V431) -> fun (V432) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__PairNames'(V430, V431, V432)) end end end, fun (V433) -> fun (V434) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__PairNames'(V433, V434)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241} -> (fun (V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452) -> V446 end(E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V453 of {'Idris.Prelude.Types.Left', E242} -> (fun (V454) -> {'Idris.Prelude.Types.Left', V454} end(E242)); {'Idris.Prelude.Types.Right', E243} -> (fun (V455) -> begin (V479 = (('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V456) -> fun (V457) -> fun (V458) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RewriteNames'(V456, V457, V458)) end end end, fun (V459) -> fun (V460) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RewriteNames'(V459, V460)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261} -> (fun (V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478) -> V473 end(E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V479 of {'Idris.Prelude.Types.Left', E262} -> (fun (V480) -> {'Idris.Prelude.Types.Left', V480} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V481) -> begin (V500 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__PrimNames'(V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281} -> (fun (V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499) -> V495 end(E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V500 of {'Idris.Prelude.Types.Left', E282} -> (fun (V501) -> {'Idris.Prelude.Types.Left', V501} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V502) -> begin (V559 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V503) -> fun (V504) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V505) -> fun (V506) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V505, V506)) end end, fun (V507) -> fun (V508) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V507, V508)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V509) -> fun (V510) -> fun (V511) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V512) -> fun (V513) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V512, V513)) end end, fun (V514) -> fun (V515) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V514, V515)) end end}, V509, V510, V511)) end end end, fun (V516) -> fun (V517) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V518) -> fun (V519) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V518, V519)) end end, fun (V520) -> fun (V521) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V520, V521)) end end}, V516, V517)) end end}}, V503, V504)) end end, fun (V522) -> fun (V523) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V524) -> fun (V525) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V524, V525)) end end, fun (V526) -> fun (V527) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V526, V527)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V528) -> fun (V529) -> fun (V530) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V531) -> fun (V532) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V531, V532)) end end, fun (V533) -> fun (V534) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V533, V534)) end end}, V528, V529, V530)) end end end, fun (V535) -> fun (V536) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V537) -> fun (V538) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V537, V538)) end end, fun (V539) -> fun (V540) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V539, V540)) end end}, V535, V536)) end end}}, V522, V523)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301} -> (fun (V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558) -> V555 end(E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V559 of {'Idris.Prelude.Types.Left', E302} -> (fun (V560) -> {'Idris.Prelude.Types.Left', V560} end(E302)); {'Idris.Prelude.Types.Right', E303} -> (fun (V561) -> begin (V634 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V562) -> fun (V563) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V564) -> fun (V565) -> fun (V566) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V564, V565, V566)) end end end, fun (V567) -> fun (V568) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V567, V568)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V569) -> fun (V570) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V571) -> fun (V572) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V571, V572)) end end, fun (V573) -> fun (V574) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V573, V574)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V575) -> fun (V576) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V575, V576)) end end, fun (V577) -> fun (V578) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V577, V578)) end end}}, V569, V570)) end end, fun (V579) -> fun (V580) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V581) -> fun (V582) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V581, V582)) end end, fun (V583) -> fun (V584) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V583, V584)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V585) -> fun (V586) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V585, V586)) end end, fun (V587) -> fun (V588) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V587, V588)) end end}}, V579, V580)) end end}}, V562, V563)) end end, fun (V589) -> fun (V590) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V591) -> fun (V592) -> fun (V593) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V591, V592, V593)) end end end, fun (V594) -> fun (V595) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V594, V595)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V596) -> fun (V597) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V598) -> fun (V599) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V598, V599)) end end, fun (V600) -> fun (V601) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V600, V601)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V602) -> fun (V603) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V602, V603)) end end, fun (V604) -> fun (V605) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V604, V605)) end end}}, V596, V597)) end end, fun (V606) -> fun (V607) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V608) -> fun (V609) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V608, V609)) end end, fun (V610) -> fun (V611) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V610, V611)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V612) -> fun (V613) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V612, V613)) end end, fun (V614) -> fun (V615) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V614, V615)) end end}}, V606, V607)) end end}}, V589, V590)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321} -> (fun (V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633) -> V631 end(E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V634 of {'Idris.Prelude.Types.Left', E322} -> (fun (V635) -> {'Idris.Prelude.Types.Left', V635} end(E322)); {'Idris.Prelude.Types.Right', E323} -> (fun (V636) -> begin (V675 = ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V637) -> fun (V638) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V639) -> fun (V640) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V639, V640)) end end, fun (V641) -> fun (V642) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V641, V642)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V643) -> fun (V644) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Transform'(V643, V644)) end end, fun (V645) -> fun (V646) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Transform'(V645, V646)) end end}}, V637, V638)) end end, fun (V647) -> fun (V648) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V649) -> fun (V650) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V649, V650)) end end, fun (V651) -> fun (V652) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V651, V652)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V653) -> fun (V654) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Transform'(V653, V654)) end end, fun (V655) -> fun (V656) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Transform'(V655, V656)) end end}}, V647, V648)) end end}, V3, case V12 of {'Idris.Core.Binary.MkTTCFile', E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341} -> (fun (V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674) -> V673 end(E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V675 of {'Idris.Prelude.Types.Left', E342} -> (fun (V676) -> {'Idris.Prelude.Types.Left', V676} end(E342)); {'Idris.Prelude.Types.Right', E343} -> (fun (V677) -> case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1)) of {'Idris.Utils.Binary.dn--un--__mkTTC', E344, E345} -> (fun (V678, V679) -> (((V678(V3))(case V12 of {'Idris.Core.Binary.MkTTCFile', E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363} -> (fun (V680, V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694, V695, V696, V697) -> V697 end(E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end(E344, E345)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateTransforms'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> begin (V22 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V10, V11)) end end}, V5, V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Transform'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Transform'(V17, V18)) end end}, V6, V7))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('nested--14192-8131--in--un--addT'(V5, V6, V4, V0, V14, V21, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> (('un--updateTransforms'(V0, V4))(V7)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateRewrite'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V42 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, V36, V37, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', V1, V38)), V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePrims'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V42 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, V36, V37, V38, ('un--updatePrimNames'(V1, V39)), V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePrimNames'(V0, V1) -> case V1 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Core.Options.MkPrimNs', ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', case V0 of {'Idris.Core.Options.MkPrimNs', E3, E4, E5} -> (fun (V5, V6, V7) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', case V0 of {'Idris.Core.Options.MkPrimNs', E6, E7, E8} -> (fun (V8, V9, V10) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', case V0 of {'Idris.Core.Options.MkPrimNs', E9, E10, E11} -> (fun (V11, V12, V13) -> V13 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updatePair'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V42 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V11 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V33, V34, V35, V36, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(Maybe $a)'('erased', V1, V37)), V38, V39, V40, V41}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateNameDirectives'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V39 = begin (V38 = ('erlang':'put'(V0, case V11 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V5, V6, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> (('un--updateNameDirectives'(V0, V4))(V7)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateCGDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V85 = ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__Namespace'(V11, V12)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq__CG'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq__CG'(V17, V18)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V21, V22)) end end}, V13, V14)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq__CG'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq__CG'(V27, V28)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V31, V32)) end end}, V23, V24)) end end}, V7, V8)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__Namespace'(V37, V38)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq__CG'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq__CG'(V43, V44)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V47, V48)) end end}, V39, V40)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq__CG'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq__CG'(V53, V54)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V57, V58)) end end}, V49, V50)) end end}, V33, V34)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V78 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V112 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> {'Idris.Core.Context.MkDefs', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V85, V106, V107, V108, V109, V110, V111} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V112} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--ttcVersion'() -> 43.
'un--stringToBuffer'(V0) -> begin (V1 = ('Idris.Idris2.Erlang.Data.Buffer':'un--stringByteLength'(V0))), fun (V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E2} -> (fun (V34) -> begin (V63 = begin (V62 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, V34, 0, V0))(V2))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E3} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V65) -> {'Idris.Prelude.Types.Right', V34} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Unable to create buffer"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--readTTCFile'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V9, <<"TT2"/utf8>>)) of 0 -> ('Idris.Idris2.Utils.Binary':'un--corrupt'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V9)))))))), V6)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V5, V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = (('un--checkTTCVersion'(V3, V19, ('un--ttcVersion'())))(V6))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V5, V6))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V50 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V28, V29, V30)) end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V31, V32)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V33, V34, V35)) end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V36, V37)) end end}}, V26, V27)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V40, V41, V42)) end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V43, V44)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V45, V46, V47)) end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V48, V49)) end end}}, V38, V39)) end end}, V5, V6))), case V50 of {'Idris.Prelude.Types.Left', E12} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V52) -> begin (V73 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V53) -> fun (V54) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V57, V58)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V59) -> fun (V60) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Binary'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Binary'(V61, V62)) end end}}, V53, V54)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V67, V68)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V69) -> fun (V70) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Binary'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Binary'(V71, V72)) end end}}, V63, V64)) end end}, V5, V6))), case V73 of {'Idris.Prelude.Types.Left', E14} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V75) -> begin (V80 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V78, V79)) end end}, V5, V6))), case V80 of {'Idris.Prelude.Types.Left', E16} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V82) -> begin (V103 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V83) -> fun (V84) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V87, V88)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V89) -> fun (V90) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V91, V92)) end end}}, V83, V84)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V97, V98)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V99) -> fun (V100) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V101, V102)) end end}}, V93, V94)) end end}, V5, V6))), case V103 of {'Idris.Prelude.Types.Left', E18} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V105) -> begin (V158 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V106) -> fun (V107) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V110, V111)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V112) -> fun (V113) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V116, V117)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V118) -> fun (V119) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V120, V121)) end end}}, V112, V113)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V126, V127)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V128) -> fun (V129) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V130, V131)) end end}}, V122, V123)) end end}}, V106, V107)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V136, V137)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V138) -> fun (V139) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V140, V141)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V142, V143)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V144) -> fun (V145) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V146, V147)) end end}}, V138, V139)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V152, V153)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V154) -> fun (V155) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V154, V155)) end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V156, V157)) end end}}, V148, V149)) end end}}, V132, V133)) end end}, V5, V6))), case V158 of {'Idris.Prelude.Types.Left', E20} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V160) -> begin (V219 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V161) -> fun (V162) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__ModuleIdent'(V163, V164, V165)) end end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__ModuleIdent'(V166, V167)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V168) -> fun (V169) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V170) -> fun (V171) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V172, V173)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V174, V175, V176)) end end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V177, V178)) end end}}, V168, V169)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V181) -> fun (V182) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V183, V184)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V185, V186, V187)) end end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V188, V189)) end end}}, V179, V180)) end end}}, V161, V162)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__ModuleIdent'(V192, V193, V194)) end end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__ModuleIdent'(V195, V196)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V197) -> fun (V198) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V199) -> fun (V200) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V201, V202)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V203) -> fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V203, V204, V205)) end end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V206, V207)) end end}}, V197, V198)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V210) -> fun (V211) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Bool'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Bool'(V212, V213)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V214) -> fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V214, V215, V216)) end end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V217, V218)) end end}}, V208, V209)) end end}}, V190, V191)) end end}, V5, V6))), case V219 of {'Idris.Prelude.Types.Left', E22} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V221) -> begin (V222 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V5, V6))), case V222 of {'Idris.Prelude.Types.Left', E24} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V224) -> begin (V225 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V5, V6))), case V225 of {'Idris.Prelude.Types.Left', E26} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V227) -> begin (V233 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V228, V229, V230)) end end end, fun (V231) -> fun (V232) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V231, V232)) end end}, V5, V6))), case V233 of {'Idris.Prelude.Types.Left', E28} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V235) -> begin (V241 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__PairNames'(V236, V237, V238)) end end end, fun (V239) -> fun (V240) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__PairNames'(V239, V240)) end end}, V5, V6))), case V241 of {'Idris.Prelude.Types.Left', E30} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V243) -> begin (V249 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(Maybe $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V244) -> fun (V245) -> fun (V246) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__RewriteNames'(V244, V245, V246)) end end end, fun (V247) -> fun (V248) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__RewriteNames'(V247, V248)) end end}, V5, V6))), case V249 of {'Idris.Prelude.Types.Left', E32} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V251) -> begin (V252 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__PrimNames'(V5, V6))), case V252 of {'Idris.Prelude.Types.Left', E34} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V254) -> begin (V293 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V255) -> fun (V256) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V257, V258)) end end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V259, V260)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V261) -> fun (V262) -> fun (V263) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V264) -> fun (V265) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V264, V265)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V266, V267)) end end}, V261, V262, V263)) end end end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V270) -> fun (V271) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V270, V271)) end end, fun (V272) -> fun (V273) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V272, V273)) end end}, V268, V269)) end end}}, V255, V256)) end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V276, V277)) end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V278, V279)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V280) -> fun (V281) -> fun (V282) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V283) -> fun (V284) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V283, V284)) end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V285, V286)) end end}, V280, V281, V282)) end end end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V289) -> fun (V290) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V289, V290)) end end, fun (V291) -> fun (V292) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V291, V292)) end end}, V287, V288)) end end}}, V274, V275)) end end}, V5, V6))), case V293 of {'Idris.Prelude.Types.Left', E36} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V295) -> begin (V350 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V296) -> fun (V297) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V298, V299, V300)) end end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V301, V302)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V303) -> fun (V304) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V305) -> fun (V306) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V305, V306)) end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V307, V308)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V309) -> fun (V310) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V309, V310)) end end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V311, V312)) end end}}, V303, V304)) end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V315) -> fun (V316) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V315, V316)) end end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V317, V318)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V319) -> fun (V320) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V319, V320)) end end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V321, V322)) end end}}, V313, V314)) end end}}, V296, V297)) end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V325) -> fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V325, V326, V327)) end end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V328, V329)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V330) -> fun (V331) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V332) -> fun (V333) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V332, V333)) end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V334, V335)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V336) -> fun (V337) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V336, V337)) end end, fun (V338) -> fun (V339) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V338, V339)) end end}}, V330, V331)) end end, fun (V340) -> fun (V341) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V342) -> fun (V343) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__CG'(V342, V343)) end end, fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__CG'(V344, V345)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V346) -> fun (V347) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__String'(V346, V347)) end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V348, V349)) end end}}, V340, V341)) end end}}, V323, V324)) end end}, V5, V6))), case V350 of {'Idris.Prelude.Types.Left', E38} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V352) -> begin (V373 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V353) -> fun (V354) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V355) -> fun (V356) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V355, V356)) end end, fun (V357) -> fun (V358) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V357, V358)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V359) -> fun (V360) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Transform'(V359, V360)) end end, fun (V361) -> fun (V362) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Transform'(V361, V362)) end end}}, V353, V354)) end end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V365) -> fun (V366) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Name'(V365, V366)) end end, fun (V367) -> fun (V368) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Name'(V367, V368)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V369) -> fun (V370) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Transform'(V369, V370)) end end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Transform'(V371, V372)) end end}}, V363, V364)) end end}, V5, V6))), case V373 of {'Idris.Prelude.Types.Left', E40} -> (fun (V374) -> {'Idris.Prelude.Types.Left', V374} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V375) -> begin (V378 = case V1 of {'Idris.Utils.Binary.dn--un--__mkTTC', E42, E43} -> (fun (V376, V377) -> ((V377(V5))(V6)) end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V378 of {'Idris.Prelude.Types.Left', E44} -> (fun (V379) -> {'Idris.Prelude.Types.Left', V379} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V380) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V19, V25, V52, V75, V82, V105, V160, V221, V224, V227, V235, V243, V251, V254, V295, V352, V375, V380}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readImportHashes'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Utils.Binary':'un--readFromFile'(V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, V6, V1))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V10) -> begin (V11 = ('un--getImportHashes'(V0, V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', V13} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end end, V1)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', []} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readIFaceHash'(V0, V1) -> begin (V2 = (('un--escriptReadFromFile'(V0))(V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Utils.Binary.Bin'}, V4, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V0))), ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V9) -> begin (V10 = ('un--getHash'(V8, V7, V9))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', V12} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end end, V1)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readFromTTC'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V7))), (('case--readFromTTC-8632'('erased', V1, V9, V8, V7, V6, V5, V4, V3, V2, V14, V15, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Bool'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Bool'(V26, V27)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__Namespace'(V30, V31)) end end}, V22, V23)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Bool'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Bool'(V36, V37)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__Namespace'(V40, V41)) end end}, V32, V33)) end end}, V16, V17)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V46, V47)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Bool'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Bool'(V52, V53)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__Namespace'(V56, V57)) end end}, V48, V49)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Bool'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Bool'(V62, V63)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__Namespace'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__Namespace'(V66, V67)) end end}, V58, V59)) end end}, V42, V43)) end end}, {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V6, V9}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V68) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V68)) end, case V14 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94) -> V87 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V10)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readEscriptFile'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Utils.Escript':'un--getEscriptPath'(V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Just', E2} -> (fun (V6) -> begin (V8 = begin (V7 = ('Idris.Idris2.Utils.Escript':'un--openArchive'(V6, V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E5} -> (fun (V11) -> begin (V13 = begin (V12 = ('Idris.Idris2.Utils.Escript':'un--readFile'(V11, V0, V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> case V15 of {'Idris.Prelude.Types.Just', E8} -> (fun (V16) -> begin (V18 = begin (V17 = ('Idris.Idris2.Utils.Escript':'un--closeArchive'(V11, V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Right', V16} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to read file"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to open archive"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<": Unable to find Escript path"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSaveDefs'(V0, V1, V2) -> case V0 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', V1} end; [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V2 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> begin (V37 = {'Idris.Prelude.Types.Just', V36}), (('case--case block in getSaveDefs-7223'(V4, V5, V2, V1, V36, V37, case V36 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V55 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getSaveDefs'(V5, V1, V2))(V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNSas'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V3, V6} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImportHashes'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V5, <<"TT2"/utf8>>)) of 0 -> ('Idris.Idris2.Utils.Binary':'un--corrupt'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V5)))))))), V2)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = (('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'())))(V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V1, V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(List $a)'('erased', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V18) -> fun (V19) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V20, V21, V22)) end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V23, V24)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V28, V29)) end end}}, V18, V19)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC__Namespace'(V32, V33, V34)) end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC__Namespace'(V35, V36)) end end}, {'Idris.Utils.Binary.dn--un--__mkTTC', fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Utils.Binary':'dn--un--toBuf_TTC__Int'(V37, V38, V39)) end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V40, V41)) end end}}, V30, V31)) end end}, V1, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getHash'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V5, <<"TT2"/utf8>>)) of 0 -> ('Idris.Idris2.Utils.Binary':'un--corrupt'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V5)))))))), V2)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = (('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'())))(V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> ('Idris.Idris2.Utils.Binary':'dn--un--fromBuf_TTC__Int'(V1, V2)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escriptReadFromFile'(V0) -> case V0 of {'Idris.Core.Directory.LocalFile', E0} -> (fun (V1) -> fun (V2) -> begin (V4 = begin (V3 = ('Idris.Idris2.Utils.Binary':'un--readFromFile'(V1, V2))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V8))))))}, V2)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.Directory.EscriptFile', E5} -> (fun (V9) -> fun (V10) -> begin (V11 = ('un--readEscriptFile'(V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = (('un--stringToBuffer'(V13))(V10))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V45 = begin (V44 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, V16))(V10))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E10} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Utils.Binary.MkBin', V16, 0, V47, V47}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkTTCVersion'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V1, V2)) of 0 -> fun (V3) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.TTCError', {'Idris.Core.Core.Format', V0, V1, V2}}, V3)) end; 1 -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addTypeHint'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> begin (V15 = begin (V8 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V3))(V7))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> ('Idris.Idris2.Core.Context.Log':'un--logC'(V0, <<"ttc.read"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V10)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V13))))))} end, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V3, V5, V6, 0, V7)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addGlobalDef'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V4, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> begin (V72 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V41) -> fun (V42) -> begin (V69 = (('Idris.Idris2.Core.Context':'un--decode'(case V10 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V43 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V41)), 1, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V41))))(V42))), case V69 of {'Idris.Prelude.Types.Left', E58} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V71}} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V39))(V6))), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> begin (V75 = (('case--addGlobalDef-7580'(V4, V5, V2, V1, V0, V10, V39, V74, ('nested--13520-7489--in--un--completeDef'(V4, V5, V2, V1, V0, V74))))(V6))), case V75 of {'Idris.Prelude.Types.Left', E62} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V77) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Context':'un--addContextAlias'(V0, ('Idris.Idris2.Core.Name':'un--asName'(V1, V79, V4)), V4, V80)) end end end, V2))(V6)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addAutoHint'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V11, V12)) end end}, V2, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V42 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V15, V3, V24)), V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
