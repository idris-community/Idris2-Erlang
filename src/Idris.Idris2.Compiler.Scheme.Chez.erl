-module('Idris.Idris2.Compiler.Scheme.Chez').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--executeExpr-3606'/4,
  'case--case block in case block in compileExpr-3495'/19,
  'case--case block in case block in compileExpr-3380'/19,
  'case--case block in compileExpr-3337'/20,
  'case--compileExpr-3258'/10,
  'case--case block in makeShWindows-3177'/7,
  'case--makeShWindows-3150'/6,
  'case--makeSh-3105'/4,
  'case--compileToSO-3027'/7,
  'case--compileToSS-2866'/22,
  'case--schFgnDef-2404'/15,
  'case--mkStruct-2248'/6,
  'case--useCC-1941'/9,
  'case--schemeCall-1897'/5,
  'case--cCall-1817'/14,
  'case--case block in cCall-1764'/10,
  'case--cCall-1712'/10,
  'case--showChezChar-636'/2,
  'case--schHeader-592'/3,
  'case--findLibs,isLib-472'/4,
  'case--findChez-457'/1,
  'nested--11636-2195--in--un--showFld'/4,
  'nested--10818-1462--in--un--notWorld'/9,
  'nested--10818-1458--in--un--mkNs'/10,
  'nested--10818-1461--in--un--mkFun'/11,
  'nested--9861-466--in--un--isLib'/3,
  'nested--9907-511--in--un--escape'/3,
  'nested--10818-1463--in--un--callback'/11,
  'nested--10818-1464--in--un--buildArg'/9,
  'nested--10818-1459--in--un--applyLams'/10,
  'un--useCC'/7,
  'un--startChezWinSh'/3,
  'un--startChezCmd'/3,
  'un--startChez'/2,
  'un--showChezString'/1,
  'un--showChezChar'/1,
  'un--schemeCall'/4,
  'un--schHeader'/2,
  'un--schFooter'/0,
  'un--schFgnDef'/7,
  'un--pathLookup'/1,
  'un--mkStruct'/2,
  'un--mkArgs'/2,
  'un--makeShWindows'/4,
  'un--makeSh'/4,
  'un--handleRet'/2,
  'un--getFgnCall'/5,
  'un--findLibs'/2,
  'un--findChez'/1,
  'un--executeExpr'/4,
  'un--escapeString'/1,
  'un--compileToSS'/5,
  'un--compileToSO'/4,
  'un--compileLibrary'/6,
  'un--compileExpr'/6,
  'un--codegenChez'/0,
  'un--chezString'/1,
  'un--chezExtPrim'/3,
  'un--cftySpec'/2,
  'un--cCall'/8
]).
'case--executeExpr-3606'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E1} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"compileExpr returned Nothing"/utf8>>}, V37)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in compileExpr-3495'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V5 of 0 -> V12; 1 -> V11; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in compileExpr-3380'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V5 of 0 -> V12; 1 -> V11; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in compileExpr-3337'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> ('un--makeShWindows'(V15, V18, V6, case V5 of 0 -> V12; 1 -> V11; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 1 -> fun (V20) -> ('un--makeSh'(V18, V6, case V5 of 0 -> V12; 1 -> V11; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileExpr-3258'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Utils.Path':'un--</>'(V6, ('Idris.Idris2.Utils.Path':'un--<.>'(V0, <<"ss"/utf8>>))))), begin (V12 = ('Idris.Idris2.Utils.Path':'un--</>'(V6, ('Idris.Idris2.Utils.Path':'un--<.>'(V0, <<"so"/utf8>>))))), begin (V13 = ('Idris.Idris2.Utils.Path':'un--</>'(V10, ('Idris.Idris2.Utils.Path':'un--</>'(V2, V11))))), begin (V14 = ('Idris.Idris2.Utils.Path':'un--</>'(V10, ('Idris.Idris2.Utils.Path':'un--</>'(V2, V12))))), fun (V15) -> begin (V17 = begin (V16 = ('un--findChez'(V15))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E1} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V19) -> begin (V20 = ('un--compileToSS'(V4, V7, V1, V13, V15))), case V20 of {'Idris.Prelude.Types.Left', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V22) -> begin (V24 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V4, fun () -> <<"Make SO"/utf8>> end, case V5 of 0 -> ('un--compileToSO'(V4, V19, V7, V13)); 1 -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15))), case V24 of {'Idris.Prelude.Types.Left', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Utils.Path':'un--</>'(V2, V0))), begin (V29 = begin (V28 = {'Idris.Prelude.Types.Just', V10}), (('case--case block in compileExpr-3337'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V28, V11, V12, V13, V14, V19, V22, V26, V27, ('Idris.Idris2.System.Info':'un--isWindows'())))(V15)) end), case V29 of {'Idris.Prelude.Types.Left', E7} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V31) -> begin (V60 = begin (V59 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, V27, 493))(V15))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E9} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V27}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V63) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V63)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in makeShWindows-3177'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Right', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V2, V9}, V10)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeShWindows-3150'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Right', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V7) -> begin (V36 = begin (V35 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V2, ('un--startChezWinSh'(V3, V1, V0))))(V7))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E1} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> case V39 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V2, V40}, V7)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V4, V41}, V42)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeSh-3105'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V2, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileToSO-3027'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Right', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V4, 493))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E1} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V39) -> begin (V68 = begin (V67 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> V46 end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), begin (V54 = (V51(V52))), (V53(V54)) end end end end end end end}, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), ((V58(V60))(V59)) end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V62(V63))), (V64(V63)) end end end end}, fun (V65) -> fun (V66) -> V66 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" --script \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V4, <<"\x{22}"/utf8>>))))))))(V8))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E3} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V4, V71}, V72)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileToSS-2866'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Prelude.Types.Right', E0} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V23) -> begin (V52 = begin (V51 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, V0, 493))(V23))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E1} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E3} -> (fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V55}, V56)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--schFgnDef-2404'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V48 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(case V21 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V22 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))(V17))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V58, V59, V60)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V61, V62)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V12)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V13, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(define "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V50)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" (lambda ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V63) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V63)) end, V10)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V16, <<"))\x{a}"/utf8>>))))))))))))))))}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkStruct-2248'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V3))} end; 1 -> fun (V19) -> begin (V21 = begin (V20 = ('erlang':'put'(V2, [V1 | V4]))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('nested--11636-2195--in--un--showFld'(V0, V1, V2, V24)) end, V0, []))(V19))), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V35, V36, V37)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V38, V39)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(define-ftype "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" (struct\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, V27)), <<"))\x{a}"/utf8>>))))))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--useCC-1941'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V10, V11) -> case V10 of <<"scheme,chez"/utf8>> -> case V11 of [E3 | E4] -> (fun (V12, V13) -> case V13 of [] -> fun (V14) -> begin (V16 = (('un--schemeCall'(V4, V12, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V15)) end, V3)), V2))(V14))), case V16 of {'Idris.Prelude.Types.Left', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<""/utf8>>, V18}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E3, E4)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end; <<"scheme"/utf8>> -> case V11 of [E7 | E8] -> (fun (V19, V20) -> case V20 of [] -> fun (V21) -> begin (V23 = (('un--schemeCall'(V4, V19, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V22)) end, V3)), V2))(V21))), case V23 of {'Idris.Prelude.Types.Left', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<""/utf8>>, V25}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E7, E8)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end; <<"C"/utf8>> -> case V11 of [E11 | E12] -> (fun (V26, V27) -> case V27 of [E13 | E14] -> (fun (V28, V29) -> case V29 of [] -> ('un--cCall'(V7, V6, V5, V4, V26, V28, V3, V2)); [E15 | E16] -> (fun (V30, V31) -> case V31 of [] -> ('un--cCall'(V7, V6, V5, V4, V26, V28, V3, V2)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E15, E16)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E13, E14)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E11, E12)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end; _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E1, E2)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end end(E0)); _ -> ('un--useCC'(V7, V6, V5, V4, V1, V3, V2)) end.
'case--schemeCall-1897'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Core.CompileExpr.CFIORes', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(V4))} end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V4} end end.
'case--cCall-1817'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V0 of {'Idris.Core.CompileExpr.CFIORes', E0} -> (fun (V14) -> ('un--handleRet'(V11, V13)) end(E0)); _ -> V13 end.
'case--case block in cCall-1764'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = (('Idris.Idris2.Compiler.Common':'un--copyLib'({'Idris.Builtin.MkPair', ('Idris.Idris2.Utils.Path':'un--</>'(V5, V10)), V11}))(V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'put'(V6, [V2 | V8]))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(load-shared-object \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--escapeString'(V10)), <<"\x{22})\x{a}"/utf8>>))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cCall-1712'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end; 1 -> fun (V11) -> begin (V12 = (('Idris.Idris2.Compiler.Common':'un--locate'(V7, V2))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> begin (V17 = (('Idris.Idris2.Compiler.Common':'un--copyLib'({'Idris.Builtin.MkPair', ('Idris.Idris2.Utils.Path':'un--</>'(V5, V15)), V16}))(V11))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'put'(V6, [V2 | V8]))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(load-shared-object \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--escapeString'(V15)), <<"\x{22})\x{a}"/utf8>>))))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showChezChar-636'(V0, V1) -> case V1 of 0 -> fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}x"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Char_Int'(V0)))), <<";"/utf8>>)))), V2)) end; 1 -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V0, V3)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--schHeader-592'(V0, V1, V2) -> case V2 of 0 -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"#!"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<" --script\x{a}\x{a}"/utf8>>)))); 1 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findLibs,isLib-472'(V0, V1, V2, V3) -> case V3 of 0 -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.Strings':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + (1 + (1 + 0))), ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V2)), V2))))}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findChez-457'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> fun (V2) -> V1 end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> ('un--pathLookup'(V3)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11636-2195--in--un--showFld'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('un--cftySpec'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V4, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V9, <<"]"/utf8>>))))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10818-1462--in--un--notWorld'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> 1 end()); _ -> 0 end.
'nested--10818-1458--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> []; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> [{'Idris.Prelude.Types.Nothing'} | ('nested--10818-1458--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))] end()); _ -> [{'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"cb"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(V8))))} | ('nested--10818-1458--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, ((V8 + 1) rem 9223372036854775808), V11))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10818-1461--in--un--mkFun'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('nested--10818-1458--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, 0, V8))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(lambda ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V12) -> V12 end, V11)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--10818-1459--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11)), <<")"/utf8>>)))))))) end.
'nested--9861-466--in--un--isLib'(V0, V1, V2) -> ('case--findLibs,isLib-472'(V0, V1, V2, ('Idris.Idris2.Data.Strings':'un--isPrefixOf'(<<"lib"/utf8>>, V2)))).
'nested--9907-511--in--un--escape'(V0, V1, V2) -> case V1 of $\x{22} -> [$\x{5c} | [$\x{22} | V2]]; $\x{5c} -> [$\x{5c} | [$\x{5c} | V2]]; _ -> [V1 | V2] end.
'nested--10818-1463--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.CompileExpr.CFFun', E4, E5} -> (fun (V11, V12) -> ('nested--10818-1463--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V11 | V9], V12)) end(E4, E5)); _ -> begin (V13 = ('Idris.Idris2.Data.List':'un--reverse'('erased', V9))), fun (V14) -> begin (V17 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V15) -> ('un--cftySpec'(V4, V15)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V16) -> ('nested--10818-1462--in--un--notWorld'(V0, V1, V2, V3, V4, V5, V6, V7, V16)) end, V13)), []))(V14))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = (('un--cftySpec'(V4, V10))(V14))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(let ([c-code (foreign-callable #f "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--10818-1461--in--un--mkFun'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V10, V8)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V19)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V22, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")])"/utf8>>, <<" (lock-object c-code) (foreign-callable-entry-point c-code))"/utf8>>))))))))))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'nested--10818-1464--in--un--buildArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Core.CompileExpr.CFFun', E2, E3} -> (fun (V11, V12) -> ('nested--10818-1463--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9)), [V11 | []], V12)) end(E2, E3)); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(car "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9)), <<")"/utf8>>))))} end end()); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9))} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10818-1459--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> V8; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10818-1459--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V8, <<" #f)"/utf8>>)))), V11)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> ('nested--10818-1459--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V8, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V12, <<")"/utf8>>)))))))), V11)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--useCC'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NoForeignCC', V3}, V7)) end; [E0 | E1] -> (fun (V8, V9) -> ('case--useCC-1941'(V8, V9, V6, V5, V3, V2, V1, V0, ('Idris.Idris2.Compiler.Common':'un--parseCC'(V8)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--startChezWinSh'(V0, V1, V2) -> ('Idris.Idris2.Data.Strings':'un--unlines'([<<"#!/bin/sh"/utf8>> | [<<"DIR=\x{22}`realpath \x{22}$0\x{22}`\x{22}"/utf8>> | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"CHEZ=$(cygpath \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<"\x{22})"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"export PATH=\x{22}`dirname \x{22}$DIR\x{22}`/\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<"\x{22}:$PATH\x{22}"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}$CHEZ\x{22} --script \x{22}$(dirname \x{22}$DIR\x{22})/"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, <<"\x{22} \x{22}$@\x{22}"/utf8>>)))) | []]]]]])).
'un--startChezCmd'(V0, V1, V2) -> ('Idris.Idris2.Data.Strings':'un--unlines'([<<"@echo off"/utf8>> | [<<"set APPDIR=%~dp0"/utf8>> | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"set PATH=%APPDIR%\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<";%PATH%"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22} --script \x{22}%APPDIR%/"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, <<"\x{22} %*"/utf8>>)))))))) | []]]]])).
'un--startChez'(V0, V1) -> ('Idris.Idris2.Data.Strings':'un--unlines'([<<"#!/bin/sh"/utf8>> | [<<""/utf8>> | [<<"case `uname -s` in            "/utf8>> | [<<"    OpenBSD|FreeBSD|NetBSD)   "/utf8>> | [<<"        DIR=\x{22}`grealpath $0`\x{22}"/utf8>> | [<<"        ;;                    "/utf8>> | [<<"                              "/utf8>> | [<<"    *)                        "/utf8>> | [<<"        DIR=\x{22}`realpath $0`\x{22} "/utf8>> | [<<"        ;;                    "/utf8>> | [<<"esac                          "/utf8>> | [<<""/utf8>> | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"export LD_LIBRARY_PATH=\x{22}`dirname \x{22}$DIR\x{22}`/\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V0, <<"\x{22}:$LD_LIBRARY_PATH\x{22}"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{22}`dirname \x{22}$DIR\x{22}`\x{22}/\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<"\x{22} \x{22}$@\x{22}"/utf8>>)))) | []]]]]]]]]]]]]]])).
'un--showChezString'(V0) -> case V0 of [] -> fun (V1) -> V1 end; [E0 | E1] -> (fun (V2, V3) -> case V2 of $\x{22} -> fun (V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}\x{22}"/utf8>>, (('un--showChezString'(V3))(V4)))) end; _ -> fun (V5) -> (('un--showChezChar'(V2))((('un--showChezString'(V3))(V5)))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showChezChar'(V0) -> case V0 of $\x{5c} -> fun (V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{5c}\x{5c}"/utf8>>, V1)) end; _ -> ('case--showChezChar-636'(V0, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(126)))) end)))) end.
'un--schemeCall'(V0, V1, V2, V3) -> begin (V5 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V4)) end, V2)))), <<")"/utf8>>))))))))), case V3 of {'Idris.Core.CompileExpr.CFIORes', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(V5))} end end(E0)); _ -> fun (V8) -> {'Idris.Prelude.Types.Right', V5} end end end.
'un--schHeader'(V0, V1) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('case--schHeader-592'(V1, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(('Idris.Idris2.System.Info':'un--os'()), <<"windows"/utf8>>)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"; @generated\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(import (chezscheme))\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(case (machine-type)\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  [(i3le ti3le a6le ta6le) (load-shared-object \x{22}libc.so.6\x{22})]\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  [(i3osx ti3osx a6osx ta6osx) (load-shared-object \x{22}libc.dylib\x{22})]\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  [(i3nt ti3nt a6nt ta6nt) (load-shared-object \x{22}msvcrt.dll\x{22})"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"                           (load-shared-object \x{22}ws2_32.dll\x{22})]\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"  [else (load-shared-object \x{22}libc.so\x{22})])\x{a}\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(load-shared-object \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--escapeString'(V2)), <<"\x{22})"/utf8>>)))) end, V1)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{a}"/utf8>>, <<"(let ()\x{a}"/utf8>>)))))))))))))))))))))).
'un--schFooter'() -> <<"(collect 4)\x{a}(blodwen-run-finalisers))\x{a}"/utf8>>.
'un--schFgnDef'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.MkNmForeign', E0, E1, E2} -> (fun (V7, V8, V9) -> begin (V10 = ('un--mkArgs'(0, V8))), begin (V12 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V11)) end, V10))), begin (V15 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V13)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V14) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V14)) end, V10))))), fun (V16) -> begin (V18 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> ('un--mkStruct'(V2, V17)) end, V8, []))(V16))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> begin (V21 = (('un--mkStruct'(V2, V9))(V16))), case V21 of {'Idris.Prelude.Types.Left', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V23) -> begin (V24 = (('un--useCC'(V0, V1, V3, V4, V7, ('Idris.Idris2.Data.List':'un--zip'('erased', 'erased', V15, V8)), V9))(V16))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V27, V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E11} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V32) -> begin (V59 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(case V32 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V33 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))(V16))), case V59 of {'Idris.Prelude.Types.Left', E39} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V27, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V69, V70, V71)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V72, V73)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V20)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V23, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(define "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V61)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" (lambda ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V74) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V74)) end, V12)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V28, <<"))\x{a}"/utf8>>))))))))))))))))}} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E0, E1, E2)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<""/utf8>>, <<""/utf8>>}} end end.
'un--pathLookup'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"PATH"/utf8>>))(V0))), begin (V30 = ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Data.Strings':'un--split'(fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Char'(V29, ('Idris.Idris2.Utils.Path':'un--pathSeparator'()))) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> <<"/usr/bin:/usr/local/bin"/utf8>> end, V28))))))), begin (V33 = ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__List'('erased', 'erased', V30, fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__List'('erased', 'erased', [<<"chez"/utf8>> | [<<"chezscheme9.5"/utf8>> | [<<"scheme"/utf8>> | [<<"scheme.exe"/utf8>> | []]]]], fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V31, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"/"/utf8>>, V32)))))) end)) end))), begin (V34 = (('Idris.Idris2.Compiler.Scheme.Common':'un--firstExists'(V33))(V0))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> <<"/usr/bin/env scheme"/utf8>> end, V34)) end end end end.
'un--mkStruct'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CFStruct', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V7 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('un--mkStruct'(V0, V5)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V6)) end, V3)), []))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> (('case--mkStruct-2248'(V3, V2, V0, V9, V13, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V16, V17)) end end}, V2, V13))))(V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E6} -> (fun (V18) -> ('un--mkStruct'(V0, V18)) end(E6)); {'Idris.Core.CompileExpr.CFFun', E7, E8} -> (fun (V19, V20) -> fun (V21) -> begin (V22 = (('un--mkStruct'(V0, V19))(V21))), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> (('un--mkStruct'(V0, V20))(V21)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'un--mkArgs'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> [{'Idris.Builtin.MkPair', {'Idris.Core.Name.MN', <<"farg"/utf8>>, V0}, 1} | ('un--mkArgs'(V0, V3))] end()); _ -> [{'Idris.Builtin.MkPair', {'Idris.Core.Name.MN', <<"farg"/utf8>>, V0}, 0} | ('un--mkArgs'(((V0 + 1) rem 9223372036854775808), V3))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeShWindows'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, <<".cmd"/utf8>>))), fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4, ('un--startChezCmd'(V0, V2, V3))))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Right', E2} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkUnit'} -> (fun () -> begin (V66 = begin (V65 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, V1, ('un--startChezWinSh'(V0, V2, V3))))(V5))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E3} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V68) -> case V68 of {'Idris.Prelude.Types.Right', E5} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V70) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V70}, V5)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V4, V71}, V5)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--makeSh'(V0, V1, V2, V3) -> begin (V32 = begin (V31 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V0, ('un--startChez'(V1, V2))))(V3))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Right', E2} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V36}, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--handleRet'(V0, V1) -> case V0 of <<"void"/utf8>> -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(('Idris.Idris2.Compiler.Scheme.Common':'un--schConstructor'(fun (V2) -> ('un--chezString'(V2)) end, {'Idris.Core.Name.UN', <<""/utf8>>}, {'Idris.Prelude.Types.Just', 0}, [])))))))); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(V1)) end.
'un--getFgnCall'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> ('un--schFgnDef'(V0, V1, V2, V3, V7, V5, V8)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findLibs'(V0, V1) -> begin (V3 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V2) -> ('nested--9861-466--in--un--isLib'(V1, V0, ('Idris.Idris2.Data.Strings':'un--trim'(V2)))) end, V1))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Compiler.Common':'un--locate'(V0, V4)) end, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V7, V8)) end end}, V3)), [])) end.
'un--findChez'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"CHEZ"/utf8>>))(V0))), case V28 of {'Idris.Prelude.Types.Just', E0} -> (fun (V29) -> V29 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--pathLookup'(V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = (('un--compileExpr'(1, V0, V1, V1, V2, <<"_tmpchez"/utf8>>))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> begin (V36 = begin (V35 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V7))(V3))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"compileExpr returned Nothing"/utf8>>}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escapeString'(V0) -> ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', fun (V1) -> fun (V2) -> ('nested--9907-511--in--un--escape'(V0, V1, V2)) end end, [], ('Idris.Idris2.Prelude.Types':'un--unpack'(V0)))))).
'un--compileToSS'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Idris.Core.Options.Chez'}, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = (('un--findLibs'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V8)) end, V7))))(V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Compiler.Common':'un--copyLib'(V12)) end, V11))(V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, {'Idris.Compiler.Common.Cases'}, V2, V4))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V24 = case V18 of {'Idris.Compiler.Common.MkCompileData', E8, E9, E10, E11, E12} -> (fun (V19, V20, V21, V22, V23) -> V20 end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V18 of {'Idris.Compiler.Common.MkCompileData', E13, E14, E15, E16, E17} -> (fun (V25, V26, V27, V28, V29) -> V25 end(E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V32 = begin (V31 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E18} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.Scheme.Chez.Loaded'}, [<<"libc"/utf8>> | [<<"libc 6"/utf8>> | []]], V4))), case V35 of {'Idris.Prelude.Types.Left', E20} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.Scheme.Chez.Structs'}, [], V4))), case V38 of {'Idris.Prelude.Types.Left', E22} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V40) -> begin (V42 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V41) -> ('un--getFgnCall'(V0, V37, V40, V1, V41)) end, V24, []))(V4))), case V42 of {'Idris.Prelude.Types.Left', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V44) -> begin (V50 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--getScheme'(V0, fun (V46) -> fun (V47) -> fun (V48) -> ('un--chezExtPrim'(V46, V47, V48)) end end end, fun (V49) -> ('un--chezString'(V49)) end, V45)) end, V24, []))(V4))), case V50 of {'Idris.Prelude.Types.Left', E26} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V52) -> begin (V54 = ('Idris.Idris2.Data.Strings':'un--fastAppend'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V53) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V53)) end, V44)), V52))))), begin (V59 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V55) -> fun (V56) -> fun (V57) -> ('un--chezExtPrim'(V55, V56, V57)) end end end, fun (V58) -> ('un--chezString'(V58)) end, 0, V30))(V4))), case V59 of {'Idris.Prelude.Types.Left', E28} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V61) -> begin (V63 = begin (V62 = ('un--findChez'(V4))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E30} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"chez/support.ss"/utf8>>, V4))), case V66 of {'Idris.Prelude.Types.Left', E32} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V68) -> begin (V70 = ('Idris.Idris2.Compiler.Common':'un--getExtraRuntime'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V69) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V69)) end, V7)), V4))), case V70 of {'Idris.Prelude.Types.Left', E34} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V72) -> begin (V87 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--schHeader'(V65, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V73)) end, V11)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V68, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V72, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V54, ('Idris.Idris2.Prelude.Types.Strings':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V77, V78, V79)) end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V82, V83, V84)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V85, V86)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V74) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V74)) end, V44)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V61, ('un--schFooter'())))))))))))))))), begin (V116 = begin (V115 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> V94 end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), begin (V102 = (V99(V100))), (V101(V102)) end end end end end end end}, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), ((V106(V108))(V107)) end end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V110(V111))), (V112(V111)) end end end end}, fun (V113) -> fun (V114) -> V114 end end}, V3, V87))(V4))), {'Idris.Prelude.Types.Right', V115} end), case V116 of {'Idris.Prelude.Types.Left', E36} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V118) -> case V118 of {'Idris.Prelude.Types.Right', E38} -> (fun (V119) -> case V119 of {'Idris.Builtin.MkUnit'} -> (fun () -> begin (V148 = begin (V147 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> V126 end end end, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), begin (V134 = (V131(V132))), (V133(V134)) end end end end end end end}, fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> begin (V140 = (V137(V139))), ((V138(V140))(V139)) end end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> begin (V144 = (V142(V143))), (V144(V143)) end end end end}, fun (V145) -> fun (V146) -> V146 end end}, V3, 493))(V4))), {'Idris.Prelude.Types.Right', V147} end), case V148 of {'Idris.Prelude.Types.Left', E39} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V150) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); {'Idris.Prelude.Types.Left', E41} -> (fun (V151) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V3, V151}, V4)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileToSO'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Utils.Path':'un--</>'(V2, <<"compileChez"/utf8>>))), begin (V5 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-program "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V3)), <<"))"/utf8>>))))), fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, V4, V5))(V6))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E0} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Right', E2} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkUnit'} -> (fun () -> begin (V67 = begin (V66 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, V4, 493))(V6))), {'Idris.Prelude.Types.Right', V66} end), case V67 of {'Idris.Prelude.Types.Left', E3} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V69) -> begin (V98 = begin (V97 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> V76 end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), begin (V84 = (V81(V82))), (V83(V84)) end end end end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), ((V88(V90))(V89)) end end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V92(V93))), (V94(V93)) end end end end}, fun (V95) -> fun (V96) -> V96 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" --script \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V4, <<"\x{22}"/utf8>>))))))))(V6))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E5} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V101) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V4, V101}, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--compileLibrary'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Compiling to library is not supported."/utf8>>))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, <<"_app"/utf8>>))), begin (V7 = ('Idris.Idris2.Utils.Path':'un--</>'(V3, V6))), fun (V8) -> begin (V10 = begin (V9 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(V7))(V8))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V41 = begin (V40 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}))(V8))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E2} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E4} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.Utils.Path':'un--</>'(V6, ('Idris.Idris2.Utils.Path':'un--<.>'(V5, <<"ss"/utf8>>))))), begin (V46 = ('Idris.Idris2.Utils.Path':'un--</>'(V6, ('Idris.Idris2.Utils.Path':'un--<.>'(V5, <<"so"/utf8>>))))), begin (V47 = ('Idris.Idris2.Utils.Path':'un--</>'(V44, ('Idris.Idris2.Utils.Path':'un--</>'(V3, V45))))), begin (V48 = ('Idris.Idris2.Utils.Path':'un--</>'(V44, ('Idris.Idris2.Utils.Path':'un--</>'(V3, V46))))), begin (V50 = begin (V49 = ('un--findChez'(V8))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E5} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V52) -> begin (V53 = ('un--compileToSS'(V1, V7, V4, V47, V8))), case V53 of {'Idris.Prelude.Types.Left', E7} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V55) -> begin (V57 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V1, fun () -> <<"Make SO"/utf8>> end, case V0 of 0 -> ('un--compileToSO'(V1, V52, V7, V47)); 1 -> fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V57 of {'Idris.Prelude.Types.Left', E9} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Utils.Path':'un--</>'(V3, V5))), begin (V62 = begin (V61 = {'Idris.Prelude.Types.Just', V44}), (('case--case block in compileExpr-3337'(V5, V4, V3, V2, V1, V0, V6, V7, V12, V44, V61, V45, V46, V47, V48, V52, V55, V59, V60, ('Idris.Idris2.System.Info':'un--isWindows'())))(V8)) end), case V62 of {'Idris.Prelude.Types.Left', E11} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V64) -> begin (V93 = begin (V92 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V67, V68, V69)) end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> V71 end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), begin (V79 = (V76(V77))), (V78(V79)) end end end end end end end}, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V82(V84))), ((V83(V85))(V84)) end end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V87(V88))), (V89(V88)) end end end end}, fun (V90) -> fun (V91) -> V91 end end}, V60, 493))(V8))), {'Idris.Prelude.Types.Right', V92} end), case V93 of {'Idris.Prelude.Types.Left', E13} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V60}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--codegenChez'() -> {'Idris.Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('un--compileExpr'(0, V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('un--executeExpr'(V5, V6, V7, V8)) end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V9, V10, V11, V12, V13, V14)) end end end end end end}.
'un--chezString'(V0) -> ('Idris.Idris2.Prelude.Types':'un--strCons'($\x{22}, (('un--showChezString'(('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<"\x{22}"/utf8>>)))).
'un--chezExtPrim'(V0, V1, V2) -> case V1 of {'Idris.Compiler.Scheme.Common.GetField'} -> (fun () -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Core.CompileExpr.NmPrimVal', E12, E13} -> (fun (V5, V6) -> case V6 of {'Idris.Core.TT.Str', E24} -> (fun (V7) -> case V4 of [E35 | E36] -> (fun (V8, V9) -> case V9 of [E47 | E48] -> (fun (V10, V11) -> case V11 of [E59 | E60] -> (fun (V12, V13) -> case V13 of [E71 | E72] -> (fun (V14, V15) -> case V14 of {'Idris.Core.CompileExpr.NmPrimVal', E83, E84} -> (fun (V16, V17) -> case V17 of {'Idris.Core.TT.Str', E95} -> (fun (V18) -> case V15 of [E106 | E107] -> (fun (V19, V20) -> case V20 of [] -> fun (V21) -> begin (V26 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V22) -> fun (V23) -> fun (V24) -> ('un--chezExtPrim'(V22, V23, V24)) end end end, fun (V25) -> ('un--chezString'(V25)) end, 0, V12))(V21))), case V26 of {'Idris.Prelude.Types.Left', E118} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(ftype-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V7, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V18, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V28, <<")"/utf8>>))))))))))))} end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of [E108 | E109] -> (fun (V29, V30) -> case V30 of [E110 | E111] -> (fun (V31, V32) -> case V32 of [E112 | E113] -> (fun (V33, V34) -> case V34 of [E114 | E115] -> (fun (V35, V36) -> case V36 of [E116 | E117] -> (fun (V37, V38) -> case V38 of [] -> fun (V39) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V40) -> fun (V41) -> fun (V42) -> ('un--chezExtPrim'(V40, V41, V42)) end end end, fun (V43) -> ('un--chezString'(V43)) end, V0, V1, V2)) end end(E116, E117)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V44) -> fun (V45) -> fun (V46) -> ('un--chezExtPrim'(V44, V45, V46)) end end end, fun (V47) -> ('un--chezString'(V47)) end, V0, V1, V2)) end end(E114, E115)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V48) -> fun (V49) -> fun (V50) -> ('un--chezExtPrim'(V48, V49, V50)) end end end, fun (V51) -> ('un--chezString'(V51)) end, V0, V1, V2)) end end(E112, E113)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V52) -> fun (V53) -> fun (V54) -> ('un--chezExtPrim'(V52, V53, V54)) end end end, fun (V55) -> ('un--chezString'(V55)) end, V0, V1, V2)) end end(E110, E111)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V56) -> fun (V57) -> fun (V58) -> ('un--chezExtPrim'(V56, V57, V58)) end end end, fun (V59) -> ('un--chezString'(V59)) end, V0, V1, V2)) end end(E108, E109)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V60) -> fun (V61) -> fun (V62) -> ('un--chezExtPrim'(V60, V61, V62)) end end end, fun (V63) -> ('un--chezString'(V63)) end, V0, V1, V2)) end end end(E106, E107)); _ -> case V4 of [E96 | E97] -> (fun (V64, V65) -> case V65 of [E98 | E99] -> (fun (V66, V67) -> case V67 of [E100 | E101] -> (fun (V68, V69) -> case V69 of [E102 | E103] -> (fun (V70, V71) -> case V71 of [E104 | E105] -> (fun (V72, V73) -> case V73 of [] -> fun (V74) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V75) -> fun (V76) -> fun (V77) -> ('un--chezExtPrim'(V75, V76, V77)) end end end, fun (V78) -> ('un--chezString'(V78)) end, V0, V1, V2)) end end(E104, E105)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V79) -> fun (V80) -> fun (V81) -> ('un--chezExtPrim'(V79, V80, V81)) end end end, fun (V82) -> ('un--chezString'(V82)) end, V0, V1, V2)) end end(E102, E103)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V83) -> fun (V84) -> fun (V85) -> ('un--chezExtPrim'(V83, V84, V85)) end end end, fun (V86) -> ('un--chezString'(V86)) end, V0, V1, V2)) end end(E100, E101)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V87) -> fun (V88) -> fun (V89) -> ('un--chezExtPrim'(V87, V88, V89)) end end end, fun (V90) -> ('un--chezString'(V90)) end, V0, V1, V2)) end end(E98, E99)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V91) -> fun (V92) -> fun (V93) -> ('un--chezExtPrim'(V91, V92, V93)) end end end, fun (V94) -> ('un--chezString'(V94)) end, V0, V1, V2)) end end(E96, E97)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V95) -> fun (V96) -> fun (V97) -> ('un--chezExtPrim'(V95, V96, V97)) end end end, fun (V98) -> ('un--chezString'(V98)) end, V0, V1, V2)) end end end(E95)); _ -> case V4 of [E85 | E86] -> (fun (V99, V100) -> case V100 of [E87 | E88] -> (fun (V101, V102) -> case V102 of [E89 | E90] -> (fun (V103, V104) -> case V104 of [E91 | E92] -> (fun (V105, V106) -> case V106 of [E93 | E94] -> (fun (V107, V108) -> case V108 of [] -> fun (V109) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V110) -> fun (V111) -> fun (V112) -> ('un--chezExtPrim'(V110, V111, V112)) end end end, fun (V113) -> ('un--chezString'(V113)) end, V0, V1, V2)) end end(E93, E94)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V114) -> fun (V115) -> fun (V116) -> ('un--chezExtPrim'(V114, V115, V116)) end end end, fun (V117) -> ('un--chezString'(V117)) end, V0, V1, V2)) end end(E91, E92)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V118) -> fun (V119) -> fun (V120) -> ('un--chezExtPrim'(V118, V119, V120)) end end end, fun (V121) -> ('un--chezString'(V121)) end, V0, V1, V2)) end end(E89, E90)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V122) -> fun (V123) -> fun (V124) -> ('un--chezExtPrim'(V122, V123, V124)) end end end, fun (V125) -> ('un--chezString'(V125)) end, V0, V1, V2)) end end(E87, E88)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V126) -> fun (V127) -> fun (V128) -> ('un--chezExtPrim'(V126, V127, V128)) end end end, fun (V129) -> ('un--chezString'(V129)) end, V0, V1, V2)) end end(E85, E86)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V130) -> fun (V131) -> fun (V132) -> ('un--chezExtPrim'(V130, V131, V132)) end end end, fun (V133) -> ('un--chezString'(V133)) end, V0, V1, V2)) end end end(E83, E84)); _ -> case V4 of [E73 | E74] -> (fun (V134, V135) -> case V135 of [E75 | E76] -> (fun (V136, V137) -> case V137 of [E77 | E78] -> (fun (V138, V139) -> case V139 of [E79 | E80] -> (fun (V140, V141) -> case V141 of [E81 | E82] -> (fun (V142, V143) -> case V143 of [] -> fun (V144) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V145) -> fun (V146) -> fun (V147) -> ('un--chezExtPrim'(V145, V146, V147)) end end end, fun (V148) -> ('un--chezString'(V148)) end, V0, V1, V2)) end end(E81, E82)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V149) -> fun (V150) -> fun (V151) -> ('un--chezExtPrim'(V149, V150, V151)) end end end, fun (V152) -> ('un--chezString'(V152)) end, V0, V1, V2)) end end(E79, E80)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V153) -> fun (V154) -> fun (V155) -> ('un--chezExtPrim'(V153, V154, V155)) end end end, fun (V156) -> ('un--chezString'(V156)) end, V0, V1, V2)) end end(E77, E78)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V157) -> fun (V158) -> fun (V159) -> ('un--chezExtPrim'(V157, V158, V159)) end end end, fun (V160) -> ('un--chezString'(V160)) end, V0, V1, V2)) end end(E75, E76)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V161) -> fun (V162) -> fun (V163) -> ('un--chezExtPrim'(V161, V162, V163)) end end end, fun (V164) -> ('un--chezString'(V164)) end, V0, V1, V2)) end end(E73, E74)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V165) -> fun (V166) -> fun (V167) -> ('un--chezExtPrim'(V165, V166, V167)) end end end, fun (V168) -> ('un--chezString'(V168)) end, V0, V1, V2)) end end end(E71, E72)); _ -> case V4 of [E61 | E62] -> (fun (V169, V170) -> case V170 of [E63 | E64] -> (fun (V171, V172) -> case V172 of [E65 | E66] -> (fun (V173, V174) -> case V174 of [E67 | E68] -> (fun (V175, V176) -> case V176 of [E69 | E70] -> (fun (V177, V178) -> case V178 of [] -> fun (V179) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V180) -> fun (V181) -> fun (V182) -> ('un--chezExtPrim'(V180, V181, V182)) end end end, fun (V183) -> ('un--chezString'(V183)) end, V0, V1, V2)) end end(E69, E70)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V184) -> fun (V185) -> fun (V186) -> ('un--chezExtPrim'(V184, V185, V186)) end end end, fun (V187) -> ('un--chezString'(V187)) end, V0, V1, V2)) end end(E67, E68)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V188) -> fun (V189) -> fun (V190) -> ('un--chezExtPrim'(V188, V189, V190)) end end end, fun (V191) -> ('un--chezString'(V191)) end, V0, V1, V2)) end end(E65, E66)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V192) -> fun (V193) -> fun (V194) -> ('un--chezExtPrim'(V192, V193, V194)) end end end, fun (V195) -> ('un--chezString'(V195)) end, V0, V1, V2)) end end(E63, E64)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V196) -> fun (V197) -> fun (V198) -> ('un--chezExtPrim'(V196, V197, V198)) end end end, fun (V199) -> ('un--chezString'(V199)) end, V0, V1, V2)) end end(E61, E62)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V200) -> fun (V201) -> fun (V202) -> ('un--chezExtPrim'(V200, V201, V202)) end end end, fun (V203) -> ('un--chezString'(V203)) end, V0, V1, V2)) end end end(E59, E60)); _ -> case V4 of [E49 | E50] -> (fun (V204, V205) -> case V205 of [E51 | E52] -> (fun (V206, V207) -> case V207 of [E53 | E54] -> (fun (V208, V209) -> case V209 of [E55 | E56] -> (fun (V210, V211) -> case V211 of [E57 | E58] -> (fun (V212, V213) -> case V213 of [] -> fun (V214) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V215) -> fun (V216) -> fun (V217) -> ('un--chezExtPrim'(V215, V216, V217)) end end end, fun (V218) -> ('un--chezString'(V218)) end, V0, V1, V2)) end end(E57, E58)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V219) -> fun (V220) -> fun (V221) -> ('un--chezExtPrim'(V219, V220, V221)) end end end, fun (V222) -> ('un--chezString'(V222)) end, V0, V1, V2)) end end(E55, E56)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V223) -> fun (V224) -> fun (V225) -> ('un--chezExtPrim'(V223, V224, V225)) end end end, fun (V226) -> ('un--chezString'(V226)) end, V0, V1, V2)) end end(E53, E54)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V227) -> fun (V228) -> fun (V229) -> ('un--chezExtPrim'(V227, V228, V229)) end end end, fun (V230) -> ('un--chezString'(V230)) end, V0, V1, V2)) end end(E51, E52)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V231) -> fun (V232) -> fun (V233) -> ('un--chezExtPrim'(V231, V232, V233)) end end end, fun (V234) -> ('un--chezString'(V234)) end, V0, V1, V2)) end end(E49, E50)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V235) -> fun (V236) -> fun (V237) -> ('un--chezExtPrim'(V235, V236, V237)) end end end, fun (V238) -> ('un--chezString'(V238)) end, V0, V1, V2)) end end end(E47, E48)); _ -> case V4 of [E37 | E38] -> (fun (V239, V240) -> case V240 of [E39 | E40] -> (fun (V241, V242) -> case V242 of [E41 | E42] -> (fun (V243, V244) -> case V244 of [E43 | E44] -> (fun (V245, V246) -> case V246 of [E45 | E46] -> (fun (V247, V248) -> case V248 of [] -> fun (V249) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V250) -> fun (V251) -> fun (V252) -> ('un--chezExtPrim'(V250, V251, V252)) end end end, fun (V253) -> ('un--chezString'(V253)) end, V0, V1, V2)) end end(E45, E46)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V254) -> fun (V255) -> fun (V256) -> ('un--chezExtPrim'(V254, V255, V256)) end end end, fun (V257) -> ('un--chezString'(V257)) end, V0, V1, V2)) end end(E43, E44)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V258) -> fun (V259) -> fun (V260) -> ('un--chezExtPrim'(V258, V259, V260)) end end end, fun (V261) -> ('un--chezString'(V261)) end, V0, V1, V2)) end end(E41, E42)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V262) -> fun (V263) -> fun (V264) -> ('un--chezExtPrim'(V262, V263, V264)) end end end, fun (V265) -> ('un--chezString'(V265)) end, V0, V1, V2)) end end(E39, E40)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V266) -> fun (V267) -> fun (V268) -> ('un--chezExtPrim'(V266, V267, V268)) end end end, fun (V269) -> ('un--chezString'(V269)) end, V0, V1, V2)) end end(E37, E38)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V270) -> fun (V271) -> fun (V272) -> ('un--chezExtPrim'(V270, V271, V272)) end end end, fun (V273) -> ('un--chezString'(V273)) end, V0, V1, V2)) end end end(E35, E36)); _ -> case V4 of [E25 | E26] -> (fun (V274, V275) -> case V275 of [E27 | E28] -> (fun (V276, V277) -> case V277 of [E29 | E30] -> (fun (V278, V279) -> case V279 of [E31 | E32] -> (fun (V280, V281) -> case V281 of [E33 | E34] -> (fun (V282, V283) -> case V283 of [] -> fun (V284) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V285) -> fun (V286) -> fun (V287) -> ('un--chezExtPrim'(V285, V286, V287)) end end end, fun (V288) -> ('un--chezString'(V288)) end, V0, V1, V2)) end end(E33, E34)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V289) -> fun (V290) -> fun (V291) -> ('un--chezExtPrim'(V289, V290, V291)) end end end, fun (V292) -> ('un--chezString'(V292)) end, V0, V1, V2)) end end(E31, E32)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V293) -> fun (V294) -> fun (V295) -> ('un--chezExtPrim'(V293, V294, V295)) end end end, fun (V296) -> ('un--chezString'(V296)) end, V0, V1, V2)) end end(E29, E30)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V297) -> fun (V298) -> fun (V299) -> ('un--chezExtPrim'(V297, V298, V299)) end end end, fun (V300) -> ('un--chezString'(V300)) end, V0, V1, V2)) end end(E27, E28)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V301) -> fun (V302) -> fun (V303) -> ('un--chezExtPrim'(V301, V302, V303)) end end end, fun (V304) -> ('un--chezString'(V304)) end, V0, V1, V2)) end end(E25, E26)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V305) -> fun (V306) -> fun (V307) -> ('un--chezExtPrim'(V305, V306, V307)) end end end, fun (V308) -> ('un--chezString'(V308)) end, V0, V1, V2)) end end end(E24)); _ -> case V4 of [E14 | E15] -> (fun (V309, V310) -> case V310 of [E16 | E17] -> (fun (V311, V312) -> case V312 of [E18 | E19] -> (fun (V313, V314) -> case V314 of [E20 | E21] -> (fun (V315, V316) -> case V316 of [E22 | E23] -> (fun (V317, V318) -> case V318 of [] -> fun (V319) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V320) -> fun (V321) -> fun (V322) -> ('un--chezExtPrim'(V320, V321, V322)) end end end, fun (V323) -> ('un--chezString'(V323)) end, V0, V1, V2)) end end(E22, E23)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V324) -> fun (V325) -> fun (V326) -> ('un--chezExtPrim'(V324, V325, V326)) end end end, fun (V327) -> ('un--chezString'(V327)) end, V0, V1, V2)) end end(E20, E21)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V328) -> fun (V329) -> fun (V330) -> ('un--chezExtPrim'(V328, V329, V330)) end end end, fun (V331) -> ('un--chezString'(V331)) end, V0, V1, V2)) end end(E18, E19)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V332) -> fun (V333) -> fun (V334) -> ('un--chezExtPrim'(V332, V333, V334)) end end end, fun (V335) -> ('un--chezString'(V335)) end, V0, V1, V2)) end end(E16, E17)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V336) -> fun (V337) -> fun (V338) -> ('un--chezExtPrim'(V336, V337, V338)) end end end, fun (V339) -> ('un--chezString'(V339)) end, V0, V1, V2)) end end(E14, E15)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V340) -> fun (V341) -> fun (V342) -> ('un--chezExtPrim'(V340, V341, V342)) end end end, fun (V343) -> ('un--chezString'(V343)) end, V0, V1, V2)) end end end(E12, E13)); _ -> case V4 of [E2 | E3] -> (fun (V344, V345) -> case V345 of [E4 | E5] -> (fun (V346, V347) -> case V347 of [E6 | E7] -> (fun (V348, V349) -> case V349 of [E8 | E9] -> (fun (V350, V351) -> case V351 of [E10 | E11] -> (fun (V352, V353) -> case V353 of [] -> fun (V354) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V355) -> fun (V356) -> fun (V357) -> ('un--chezExtPrim'(V355, V356, V357)) end end end, fun (V358) -> ('un--chezString'(V358)) end, V0, V1, V2)) end end(E10, E11)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V359) -> fun (V360) -> fun (V361) -> ('un--chezExtPrim'(V359, V360, V361)) end end end, fun (V362) -> ('un--chezString'(V362)) end, V0, V1, V2)) end end(E8, E9)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V363) -> fun (V364) -> fun (V365) -> ('un--chezExtPrim'(V363, V364, V365)) end end end, fun (V366) -> ('un--chezString'(V366)) end, V0, V1, V2)) end end(E6, E7)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V367) -> fun (V368) -> fun (V369) -> ('un--chezExtPrim'(V367, V368, V369)) end end end, fun (V370) -> ('un--chezString'(V370)) end, V0, V1, V2)) end end(E4, E5)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V371) -> fun (V372) -> fun (V373) -> ('un--chezExtPrim'(V371, V372, V373)) end end end, fun (V374) -> ('un--chezString'(V374)) end, V0, V1, V2)) end end(E2, E3)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V375) -> fun (V376) -> fun (V377) -> ('un--chezExtPrim'(V375, V376, V377)) end end end, fun (V378) -> ('un--chezString'(V378)) end, V0, V1, V2)) end end end(E0, E1)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V379) -> fun (V380) -> fun (V381) -> ('un--chezExtPrim'(V379, V380, V381)) end end end, fun (V382) -> ('un--chezString'(V382)) end, V0, V1, V2)) end end()); {'Idris.Compiler.Scheme.Common.SetField'} -> (fun () -> case V2 of [E120 | E121] -> (fun (V383, V384) -> case V383 of {'Idris.Core.CompileExpr.NmPrimVal', E136, E137} -> (fun (V385, V386) -> case V386 of {'Idris.Core.TT.Str', E152} -> (fun (V387) -> case V384 of [E167 | E168] -> (fun (V388, V389) -> case V389 of [E183 | E184] -> (fun (V390, V391) -> case V391 of [E199 | E200] -> (fun (V392, V393) -> case V393 of [E215 | E216] -> (fun (V394, V395) -> case V394 of {'Idris.Core.CompileExpr.NmPrimVal', E231, E232} -> (fun (V396, V397) -> case V397 of {'Idris.Core.TT.Str', E247} -> (fun (V398) -> case V395 of [E262 | E263] -> (fun (V399, V400) -> case V400 of [E278 | E279] -> (fun (V401, V402) -> case V402 of [E294 | E295] -> (fun (V403, V404) -> case V404 of [] -> fun (V405) -> begin (V410 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V406) -> fun (V407) -> fun (V408) -> ('un--chezExtPrim'(V406, V407, V408)) end end end, fun (V409) -> ('un--chezString'(V409)) end, 0, V392))(V405))), case V410 of {'Idris.Prelude.Types.Left', E310} -> (fun (V411) -> {'Idris.Prelude.Types.Left', V411} end(E310)); {'Idris.Prelude.Types.Right', E311} -> (fun (V412) -> begin (V417 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V413) -> fun (V414) -> fun (V415) -> ('un--chezExtPrim'(V413, V414, V415)) end end end, fun (V416) -> ('un--chezString'(V416)) end, 0, V401))(V405))), case V417 of {'Idris.Prelude.Types.Left', E312} -> (fun (V418) -> {'Idris.Prelude.Types.Left', V418} end(E312)); {'Idris.Prelude.Types.Right', E313} -> (fun (V419) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(ftype-set! "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V387, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V398, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V412, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V419, <<")"/utf8>>))))))))))))))))))} end(E313)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E311)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V384 of [E296 | E297] -> (fun (V420, V421) -> case V421 of [E298 | E299] -> (fun (V422, V423) -> case V423 of [E300 | E301] -> (fun (V424, V425) -> case V425 of [E302 | E303] -> (fun (V426, V427) -> case V427 of [E304 | E305] -> (fun (V428, V429) -> case V429 of [E306 | E307] -> (fun (V430, V431) -> case V431 of [E308 | E309] -> (fun (V432, V433) -> case V433 of [] -> fun (V434) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V435) -> fun (V436) -> fun (V437) -> ('un--chezExtPrim'(V435, V436, V437)) end end end, fun (V438) -> ('un--chezString'(V438)) end, V0, V1, V2)) end end(E308, E309)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V439) -> fun (V440) -> fun (V441) -> ('un--chezExtPrim'(V439, V440, V441)) end end end, fun (V442) -> ('un--chezString'(V442)) end, V0, V1, V2)) end end(E306, E307)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V443) -> fun (V444) -> fun (V445) -> ('un--chezExtPrim'(V443, V444, V445)) end end end, fun (V446) -> ('un--chezString'(V446)) end, V0, V1, V2)) end end(E304, E305)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V447) -> fun (V448) -> fun (V449) -> ('un--chezExtPrim'(V447, V448, V449)) end end end, fun (V450) -> ('un--chezString'(V450)) end, V0, V1, V2)) end end(E302, E303)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V451) -> fun (V452) -> fun (V453) -> ('un--chezExtPrim'(V451, V452, V453)) end end end, fun (V454) -> ('un--chezString'(V454)) end, V0, V1, V2)) end end(E300, E301)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V455) -> fun (V456) -> fun (V457) -> ('un--chezExtPrim'(V455, V456, V457)) end end end, fun (V458) -> ('un--chezString'(V458)) end, V0, V1, V2)) end end(E298, E299)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V459) -> fun (V460) -> fun (V461) -> ('un--chezExtPrim'(V459, V460, V461)) end end end, fun (V462) -> ('un--chezString'(V462)) end, V0, V1, V2)) end end(E296, E297)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V463) -> fun (V464) -> fun (V465) -> ('un--chezExtPrim'(V463, V464, V465)) end end end, fun (V466) -> ('un--chezString'(V466)) end, V0, V1, V2)) end end end(E294, E295)); _ -> case V384 of [E280 | E281] -> (fun (V467, V468) -> case V468 of [E282 | E283] -> (fun (V469, V470) -> case V470 of [E284 | E285] -> (fun (V471, V472) -> case V472 of [E286 | E287] -> (fun (V473, V474) -> case V474 of [E288 | E289] -> (fun (V475, V476) -> case V476 of [E290 | E291] -> (fun (V477, V478) -> case V478 of [E292 | E293] -> (fun (V479, V480) -> case V480 of [] -> fun (V481) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V482) -> fun (V483) -> fun (V484) -> ('un--chezExtPrim'(V482, V483, V484)) end end end, fun (V485) -> ('un--chezString'(V485)) end, V0, V1, V2)) end end(E292, E293)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V486) -> fun (V487) -> fun (V488) -> ('un--chezExtPrim'(V486, V487, V488)) end end end, fun (V489) -> ('un--chezString'(V489)) end, V0, V1, V2)) end end(E290, E291)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V490) -> fun (V491) -> fun (V492) -> ('un--chezExtPrim'(V490, V491, V492)) end end end, fun (V493) -> ('un--chezString'(V493)) end, V0, V1, V2)) end end(E288, E289)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V494) -> fun (V495) -> fun (V496) -> ('un--chezExtPrim'(V494, V495, V496)) end end end, fun (V497) -> ('un--chezString'(V497)) end, V0, V1, V2)) end end(E286, E287)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V498) -> fun (V499) -> fun (V500) -> ('un--chezExtPrim'(V498, V499, V500)) end end end, fun (V501) -> ('un--chezString'(V501)) end, V0, V1, V2)) end end(E284, E285)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V502) -> fun (V503) -> fun (V504) -> ('un--chezExtPrim'(V502, V503, V504)) end end end, fun (V505) -> ('un--chezString'(V505)) end, V0, V1, V2)) end end(E282, E283)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V506) -> fun (V507) -> fun (V508) -> ('un--chezExtPrim'(V506, V507, V508)) end end end, fun (V509) -> ('un--chezString'(V509)) end, V0, V1, V2)) end end(E280, E281)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V510) -> fun (V511) -> fun (V512) -> ('un--chezExtPrim'(V510, V511, V512)) end end end, fun (V513) -> ('un--chezString'(V513)) end, V0, V1, V2)) end end end(E278, E279)); _ -> case V384 of [E264 | E265] -> (fun (V514, V515) -> case V515 of [E266 | E267] -> (fun (V516, V517) -> case V517 of [E268 | E269] -> (fun (V518, V519) -> case V519 of [E270 | E271] -> (fun (V520, V521) -> case V521 of [E272 | E273] -> (fun (V522, V523) -> case V523 of [E274 | E275] -> (fun (V524, V525) -> case V525 of [E276 | E277] -> (fun (V526, V527) -> case V527 of [] -> fun (V528) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V529) -> fun (V530) -> fun (V531) -> ('un--chezExtPrim'(V529, V530, V531)) end end end, fun (V532) -> ('un--chezString'(V532)) end, V0, V1, V2)) end end(E276, E277)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V533) -> fun (V534) -> fun (V535) -> ('un--chezExtPrim'(V533, V534, V535)) end end end, fun (V536) -> ('un--chezString'(V536)) end, V0, V1, V2)) end end(E274, E275)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V537) -> fun (V538) -> fun (V539) -> ('un--chezExtPrim'(V537, V538, V539)) end end end, fun (V540) -> ('un--chezString'(V540)) end, V0, V1, V2)) end end(E272, E273)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V541) -> fun (V542) -> fun (V543) -> ('un--chezExtPrim'(V541, V542, V543)) end end end, fun (V544) -> ('un--chezString'(V544)) end, V0, V1, V2)) end end(E270, E271)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V545) -> fun (V546) -> fun (V547) -> ('un--chezExtPrim'(V545, V546, V547)) end end end, fun (V548) -> ('un--chezString'(V548)) end, V0, V1, V2)) end end(E268, E269)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V549) -> fun (V550) -> fun (V551) -> ('un--chezExtPrim'(V549, V550, V551)) end end end, fun (V552) -> ('un--chezString'(V552)) end, V0, V1, V2)) end end(E266, E267)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V553) -> fun (V554) -> fun (V555) -> ('un--chezExtPrim'(V553, V554, V555)) end end end, fun (V556) -> ('un--chezString'(V556)) end, V0, V1, V2)) end end(E264, E265)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V557) -> fun (V558) -> fun (V559) -> ('un--chezExtPrim'(V557, V558, V559)) end end end, fun (V560) -> ('un--chezString'(V560)) end, V0, V1, V2)) end end end(E262, E263)); _ -> case V384 of [E248 | E249] -> (fun (V561, V562) -> case V562 of [E250 | E251] -> (fun (V563, V564) -> case V564 of [E252 | E253] -> (fun (V565, V566) -> case V566 of [E254 | E255] -> (fun (V567, V568) -> case V568 of [E256 | E257] -> (fun (V569, V570) -> case V570 of [E258 | E259] -> (fun (V571, V572) -> case V572 of [E260 | E261] -> (fun (V573, V574) -> case V574 of [] -> fun (V575) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V576) -> fun (V577) -> fun (V578) -> ('un--chezExtPrim'(V576, V577, V578)) end end end, fun (V579) -> ('un--chezString'(V579)) end, V0, V1, V2)) end end(E260, E261)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V580) -> fun (V581) -> fun (V582) -> ('un--chezExtPrim'(V580, V581, V582)) end end end, fun (V583) -> ('un--chezString'(V583)) end, V0, V1, V2)) end end(E258, E259)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V584) -> fun (V585) -> fun (V586) -> ('un--chezExtPrim'(V584, V585, V586)) end end end, fun (V587) -> ('un--chezString'(V587)) end, V0, V1, V2)) end end(E256, E257)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V588) -> fun (V589) -> fun (V590) -> ('un--chezExtPrim'(V588, V589, V590)) end end end, fun (V591) -> ('un--chezString'(V591)) end, V0, V1, V2)) end end(E254, E255)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V592) -> fun (V593) -> fun (V594) -> ('un--chezExtPrim'(V592, V593, V594)) end end end, fun (V595) -> ('un--chezString'(V595)) end, V0, V1, V2)) end end(E252, E253)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V596) -> fun (V597) -> fun (V598) -> ('un--chezExtPrim'(V596, V597, V598)) end end end, fun (V599) -> ('un--chezString'(V599)) end, V0, V1, V2)) end end(E250, E251)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V600) -> fun (V601) -> fun (V602) -> ('un--chezExtPrim'(V600, V601, V602)) end end end, fun (V603) -> ('un--chezString'(V603)) end, V0, V1, V2)) end end(E248, E249)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V604) -> fun (V605) -> fun (V606) -> ('un--chezExtPrim'(V604, V605, V606)) end end end, fun (V607) -> ('un--chezString'(V607)) end, V0, V1, V2)) end end end(E247)); _ -> case V384 of [E233 | E234] -> (fun (V608, V609) -> case V609 of [E235 | E236] -> (fun (V610, V611) -> case V611 of [E237 | E238] -> (fun (V612, V613) -> case V613 of [E239 | E240] -> (fun (V614, V615) -> case V615 of [E241 | E242] -> (fun (V616, V617) -> case V617 of [E243 | E244] -> (fun (V618, V619) -> case V619 of [E245 | E246] -> (fun (V620, V621) -> case V621 of [] -> fun (V622) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V623) -> fun (V624) -> fun (V625) -> ('un--chezExtPrim'(V623, V624, V625)) end end end, fun (V626) -> ('un--chezString'(V626)) end, V0, V1, V2)) end end(E245, E246)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V627) -> fun (V628) -> fun (V629) -> ('un--chezExtPrim'(V627, V628, V629)) end end end, fun (V630) -> ('un--chezString'(V630)) end, V0, V1, V2)) end end(E243, E244)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V631) -> fun (V632) -> fun (V633) -> ('un--chezExtPrim'(V631, V632, V633)) end end end, fun (V634) -> ('un--chezString'(V634)) end, V0, V1, V2)) end end(E241, E242)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V635) -> fun (V636) -> fun (V637) -> ('un--chezExtPrim'(V635, V636, V637)) end end end, fun (V638) -> ('un--chezString'(V638)) end, V0, V1, V2)) end end(E239, E240)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V639) -> fun (V640) -> fun (V641) -> ('un--chezExtPrim'(V639, V640, V641)) end end end, fun (V642) -> ('un--chezString'(V642)) end, V0, V1, V2)) end end(E237, E238)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V643) -> fun (V644) -> fun (V645) -> ('un--chezExtPrim'(V643, V644, V645)) end end end, fun (V646) -> ('un--chezString'(V646)) end, V0, V1, V2)) end end(E235, E236)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V647) -> fun (V648) -> fun (V649) -> ('un--chezExtPrim'(V647, V648, V649)) end end end, fun (V650) -> ('un--chezString'(V650)) end, V0, V1, V2)) end end(E233, E234)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V651) -> fun (V652) -> fun (V653) -> ('un--chezExtPrim'(V651, V652, V653)) end end end, fun (V654) -> ('un--chezString'(V654)) end, V0, V1, V2)) end end end(E231, E232)); _ -> case V384 of [E217 | E218] -> (fun (V655, V656) -> case V656 of [E219 | E220] -> (fun (V657, V658) -> case V658 of [E221 | E222] -> (fun (V659, V660) -> case V660 of [E223 | E224] -> (fun (V661, V662) -> case V662 of [E225 | E226] -> (fun (V663, V664) -> case V664 of [E227 | E228] -> (fun (V665, V666) -> case V666 of [E229 | E230] -> (fun (V667, V668) -> case V668 of [] -> fun (V669) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V670) -> fun (V671) -> fun (V672) -> ('un--chezExtPrim'(V670, V671, V672)) end end end, fun (V673) -> ('un--chezString'(V673)) end, V0, V1, V2)) end end(E229, E230)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V674) -> fun (V675) -> fun (V676) -> ('un--chezExtPrim'(V674, V675, V676)) end end end, fun (V677) -> ('un--chezString'(V677)) end, V0, V1, V2)) end end(E227, E228)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V678) -> fun (V679) -> fun (V680) -> ('un--chezExtPrim'(V678, V679, V680)) end end end, fun (V681) -> ('un--chezString'(V681)) end, V0, V1, V2)) end end(E225, E226)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V682) -> fun (V683) -> fun (V684) -> ('un--chezExtPrim'(V682, V683, V684)) end end end, fun (V685) -> ('un--chezString'(V685)) end, V0, V1, V2)) end end(E223, E224)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V686) -> fun (V687) -> fun (V688) -> ('un--chezExtPrim'(V686, V687, V688)) end end end, fun (V689) -> ('un--chezString'(V689)) end, V0, V1, V2)) end end(E221, E222)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V690) -> fun (V691) -> fun (V692) -> ('un--chezExtPrim'(V690, V691, V692)) end end end, fun (V693) -> ('un--chezString'(V693)) end, V0, V1, V2)) end end(E219, E220)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V694) -> fun (V695) -> fun (V696) -> ('un--chezExtPrim'(V694, V695, V696)) end end end, fun (V697) -> ('un--chezString'(V697)) end, V0, V1, V2)) end end(E217, E218)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V698) -> fun (V699) -> fun (V700) -> ('un--chezExtPrim'(V698, V699, V700)) end end end, fun (V701) -> ('un--chezString'(V701)) end, V0, V1, V2)) end end end(E215, E216)); _ -> case V384 of [E201 | E202] -> (fun (V702, V703) -> case V703 of [E203 | E204] -> (fun (V704, V705) -> case V705 of [E205 | E206] -> (fun (V706, V707) -> case V707 of [E207 | E208] -> (fun (V708, V709) -> case V709 of [E209 | E210] -> (fun (V710, V711) -> case V711 of [E211 | E212] -> (fun (V712, V713) -> case V713 of [E213 | E214] -> (fun (V714, V715) -> case V715 of [] -> fun (V716) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V717) -> fun (V718) -> fun (V719) -> ('un--chezExtPrim'(V717, V718, V719)) end end end, fun (V720) -> ('un--chezString'(V720)) end, V0, V1, V2)) end end(E213, E214)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V721) -> fun (V722) -> fun (V723) -> ('un--chezExtPrim'(V721, V722, V723)) end end end, fun (V724) -> ('un--chezString'(V724)) end, V0, V1, V2)) end end(E211, E212)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V725) -> fun (V726) -> fun (V727) -> ('un--chezExtPrim'(V725, V726, V727)) end end end, fun (V728) -> ('un--chezString'(V728)) end, V0, V1, V2)) end end(E209, E210)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V729) -> fun (V730) -> fun (V731) -> ('un--chezExtPrim'(V729, V730, V731)) end end end, fun (V732) -> ('un--chezString'(V732)) end, V0, V1, V2)) end end(E207, E208)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V733) -> fun (V734) -> fun (V735) -> ('un--chezExtPrim'(V733, V734, V735)) end end end, fun (V736) -> ('un--chezString'(V736)) end, V0, V1, V2)) end end(E205, E206)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V737) -> fun (V738) -> fun (V739) -> ('un--chezExtPrim'(V737, V738, V739)) end end end, fun (V740) -> ('un--chezString'(V740)) end, V0, V1, V2)) end end(E203, E204)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V741) -> fun (V742) -> fun (V743) -> ('un--chezExtPrim'(V741, V742, V743)) end end end, fun (V744) -> ('un--chezString'(V744)) end, V0, V1, V2)) end end(E201, E202)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V745) -> fun (V746) -> fun (V747) -> ('un--chezExtPrim'(V745, V746, V747)) end end end, fun (V748) -> ('un--chezString'(V748)) end, V0, V1, V2)) end end end(E199, E200)); _ -> case V384 of [E185 | E186] -> (fun (V749, V750) -> case V750 of [E187 | E188] -> (fun (V751, V752) -> case V752 of [E189 | E190] -> (fun (V753, V754) -> case V754 of [E191 | E192] -> (fun (V755, V756) -> case V756 of [E193 | E194] -> (fun (V757, V758) -> case V758 of [E195 | E196] -> (fun (V759, V760) -> case V760 of [E197 | E198] -> (fun (V761, V762) -> case V762 of [] -> fun (V763) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V764) -> fun (V765) -> fun (V766) -> ('un--chezExtPrim'(V764, V765, V766)) end end end, fun (V767) -> ('un--chezString'(V767)) end, V0, V1, V2)) end end(E197, E198)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V768) -> fun (V769) -> fun (V770) -> ('un--chezExtPrim'(V768, V769, V770)) end end end, fun (V771) -> ('un--chezString'(V771)) end, V0, V1, V2)) end end(E195, E196)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V772) -> fun (V773) -> fun (V774) -> ('un--chezExtPrim'(V772, V773, V774)) end end end, fun (V775) -> ('un--chezString'(V775)) end, V0, V1, V2)) end end(E193, E194)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V776) -> fun (V777) -> fun (V778) -> ('un--chezExtPrim'(V776, V777, V778)) end end end, fun (V779) -> ('un--chezString'(V779)) end, V0, V1, V2)) end end(E191, E192)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V780) -> fun (V781) -> fun (V782) -> ('un--chezExtPrim'(V780, V781, V782)) end end end, fun (V783) -> ('un--chezString'(V783)) end, V0, V1, V2)) end end(E189, E190)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V784) -> fun (V785) -> fun (V786) -> ('un--chezExtPrim'(V784, V785, V786)) end end end, fun (V787) -> ('un--chezString'(V787)) end, V0, V1, V2)) end end(E187, E188)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V788) -> fun (V789) -> fun (V790) -> ('un--chezExtPrim'(V788, V789, V790)) end end end, fun (V791) -> ('un--chezString'(V791)) end, V0, V1, V2)) end end(E185, E186)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V792) -> fun (V793) -> fun (V794) -> ('un--chezExtPrim'(V792, V793, V794)) end end end, fun (V795) -> ('un--chezString'(V795)) end, V0, V1, V2)) end end end(E183, E184)); _ -> case V384 of [E169 | E170] -> (fun (V796, V797) -> case V797 of [E171 | E172] -> (fun (V798, V799) -> case V799 of [E173 | E174] -> (fun (V800, V801) -> case V801 of [E175 | E176] -> (fun (V802, V803) -> case V803 of [E177 | E178] -> (fun (V804, V805) -> case V805 of [E179 | E180] -> (fun (V806, V807) -> case V807 of [E181 | E182] -> (fun (V808, V809) -> case V809 of [] -> fun (V810) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V811) -> fun (V812) -> fun (V813) -> ('un--chezExtPrim'(V811, V812, V813)) end end end, fun (V814) -> ('un--chezString'(V814)) end, V0, V1, V2)) end end(E181, E182)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V815) -> fun (V816) -> fun (V817) -> ('un--chezExtPrim'(V815, V816, V817)) end end end, fun (V818) -> ('un--chezString'(V818)) end, V0, V1, V2)) end end(E179, E180)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V819) -> fun (V820) -> fun (V821) -> ('un--chezExtPrim'(V819, V820, V821)) end end end, fun (V822) -> ('un--chezString'(V822)) end, V0, V1, V2)) end end(E177, E178)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V823) -> fun (V824) -> fun (V825) -> ('un--chezExtPrim'(V823, V824, V825)) end end end, fun (V826) -> ('un--chezString'(V826)) end, V0, V1, V2)) end end(E175, E176)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V827) -> fun (V828) -> fun (V829) -> ('un--chezExtPrim'(V827, V828, V829)) end end end, fun (V830) -> ('un--chezString'(V830)) end, V0, V1, V2)) end end(E173, E174)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V831) -> fun (V832) -> fun (V833) -> ('un--chezExtPrim'(V831, V832, V833)) end end end, fun (V834) -> ('un--chezString'(V834)) end, V0, V1, V2)) end end(E171, E172)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V835) -> fun (V836) -> fun (V837) -> ('un--chezExtPrim'(V835, V836, V837)) end end end, fun (V838) -> ('un--chezString'(V838)) end, V0, V1, V2)) end end(E169, E170)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V839) -> fun (V840) -> fun (V841) -> ('un--chezExtPrim'(V839, V840, V841)) end end end, fun (V842) -> ('un--chezString'(V842)) end, V0, V1, V2)) end end end(E167, E168)); _ -> case V384 of [E153 | E154] -> (fun (V843, V844) -> case V844 of [E155 | E156] -> (fun (V845, V846) -> case V846 of [E157 | E158] -> (fun (V847, V848) -> case V848 of [E159 | E160] -> (fun (V849, V850) -> case V850 of [E161 | E162] -> (fun (V851, V852) -> case V852 of [E163 | E164] -> (fun (V853, V854) -> case V854 of [E165 | E166] -> (fun (V855, V856) -> case V856 of [] -> fun (V857) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V858) -> fun (V859) -> fun (V860) -> ('un--chezExtPrim'(V858, V859, V860)) end end end, fun (V861) -> ('un--chezString'(V861)) end, V0, V1, V2)) end end(E165, E166)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V862) -> fun (V863) -> fun (V864) -> ('un--chezExtPrim'(V862, V863, V864)) end end end, fun (V865) -> ('un--chezString'(V865)) end, V0, V1, V2)) end end(E163, E164)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V866) -> fun (V867) -> fun (V868) -> ('un--chezExtPrim'(V866, V867, V868)) end end end, fun (V869) -> ('un--chezString'(V869)) end, V0, V1, V2)) end end(E161, E162)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V870) -> fun (V871) -> fun (V872) -> ('un--chezExtPrim'(V870, V871, V872)) end end end, fun (V873) -> ('un--chezString'(V873)) end, V0, V1, V2)) end end(E159, E160)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V874) -> fun (V875) -> fun (V876) -> ('un--chezExtPrim'(V874, V875, V876)) end end end, fun (V877) -> ('un--chezString'(V877)) end, V0, V1, V2)) end end(E157, E158)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V878) -> fun (V879) -> fun (V880) -> ('un--chezExtPrim'(V878, V879, V880)) end end end, fun (V881) -> ('un--chezString'(V881)) end, V0, V1, V2)) end end(E155, E156)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V882) -> fun (V883) -> fun (V884) -> ('un--chezExtPrim'(V882, V883, V884)) end end end, fun (V885) -> ('un--chezString'(V885)) end, V0, V1, V2)) end end(E153, E154)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V886) -> fun (V887) -> fun (V888) -> ('un--chezExtPrim'(V886, V887, V888)) end end end, fun (V889) -> ('un--chezString'(V889)) end, V0, V1, V2)) end end end(E152)); _ -> case V384 of [E138 | E139] -> (fun (V890, V891) -> case V891 of [E140 | E141] -> (fun (V892, V893) -> case V893 of [E142 | E143] -> (fun (V894, V895) -> case V895 of [E144 | E145] -> (fun (V896, V897) -> case V897 of [E146 | E147] -> (fun (V898, V899) -> case V899 of [E148 | E149] -> (fun (V900, V901) -> case V901 of [E150 | E151] -> (fun (V902, V903) -> case V903 of [] -> fun (V904) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V905) -> fun (V906) -> fun (V907) -> ('un--chezExtPrim'(V905, V906, V907)) end end end, fun (V908) -> ('un--chezString'(V908)) end, V0, V1, V2)) end end(E150, E151)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V909) -> fun (V910) -> fun (V911) -> ('un--chezExtPrim'(V909, V910, V911)) end end end, fun (V912) -> ('un--chezString'(V912)) end, V0, V1, V2)) end end(E148, E149)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V913) -> fun (V914) -> fun (V915) -> ('un--chezExtPrim'(V913, V914, V915)) end end end, fun (V916) -> ('un--chezString'(V916)) end, V0, V1, V2)) end end(E146, E147)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V917) -> fun (V918) -> fun (V919) -> ('un--chezExtPrim'(V917, V918, V919)) end end end, fun (V920) -> ('un--chezString'(V920)) end, V0, V1, V2)) end end(E144, E145)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V921) -> fun (V922) -> fun (V923) -> ('un--chezExtPrim'(V921, V922, V923)) end end end, fun (V924) -> ('un--chezString'(V924)) end, V0, V1, V2)) end end(E142, E143)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V925) -> fun (V926) -> fun (V927) -> ('un--chezExtPrim'(V925, V926, V927)) end end end, fun (V928) -> ('un--chezString'(V928)) end, V0, V1, V2)) end end(E140, E141)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V929) -> fun (V930) -> fun (V931) -> ('un--chezExtPrim'(V929, V930, V931)) end end end, fun (V932) -> ('un--chezString'(V932)) end, V0, V1, V2)) end end(E138, E139)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V933) -> fun (V934) -> fun (V935) -> ('un--chezExtPrim'(V933, V934, V935)) end end end, fun (V936) -> ('un--chezString'(V936)) end, V0, V1, V2)) end end end(E136, E137)); _ -> case V384 of [E122 | E123] -> (fun (V937, V938) -> case V938 of [E124 | E125] -> (fun (V939, V940) -> case V940 of [E126 | E127] -> (fun (V941, V942) -> case V942 of [E128 | E129] -> (fun (V943, V944) -> case V944 of [E130 | E131] -> (fun (V945, V946) -> case V946 of [E132 | E133] -> (fun (V947, V948) -> case V948 of [E134 | E135] -> (fun (V949, V950) -> case V950 of [] -> fun (V951) -> {'Idris.Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V952) -> fun (V953) -> fun (V954) -> ('un--chezExtPrim'(V952, V953, V954)) end end end, fun (V955) -> ('un--chezString'(V955)) end, V0, V1, V2)) end end(E134, E135)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V956) -> fun (V957) -> fun (V958) -> ('un--chezExtPrim'(V956, V957, V958)) end end end, fun (V959) -> ('un--chezString'(V959)) end, V0, V1, V2)) end end(E132, E133)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V960) -> fun (V961) -> fun (V962) -> ('un--chezExtPrim'(V960, V961, V962)) end end end, fun (V963) -> ('un--chezString'(V963)) end, V0, V1, V2)) end end(E130, E131)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V964) -> fun (V965) -> fun (V966) -> ('un--chezExtPrim'(V964, V965, V966)) end end end, fun (V967) -> ('un--chezString'(V967)) end, V0, V1, V2)) end end(E128, E129)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V968) -> fun (V969) -> fun (V970) -> ('un--chezExtPrim'(V968, V969, V970)) end end end, fun (V971) -> ('un--chezString'(V971)) end, V0, V1, V2)) end end(E126, E127)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V972) -> fun (V973) -> fun (V974) -> ('un--chezExtPrim'(V972, V973, V974)) end end end, fun (V975) -> ('un--chezString'(V975)) end, V0, V1, V2)) end end(E124, E125)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V976) -> fun (V977) -> fun (V978) -> ('un--chezExtPrim'(V976, V977, V978)) end end end, fun (V979) -> ('un--chezString'(V979)) end, V0, V1, V2)) end end(E122, E123)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V980) -> fun (V981) -> fun (V982) -> ('un--chezExtPrim'(V980, V981, V982)) end end end, fun (V983) -> ('un--chezString'(V983)) end, V0, V1, V2)) end end end(E120, E121)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V984) -> fun (V985) -> fun (V986) -> ('un--chezExtPrim'(V984, V985, V986)) end end end, fun (V987) -> ('un--chezString'(V987)) end, V0, V1, V2)) end end()); {'Idris.Compiler.Scheme.Common.SysCodegen'} -> (fun () -> case V2 of [] -> fun (V988) -> {'Idris.Prelude.Types.Right', <<"\x{22}chez\x{22}"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V989) -> fun (V990) -> fun (V991) -> ('un--chezExtPrim'(V989, V990, V991)) end end end, fun (V992) -> ('un--chezString'(V992)) end, V0, V1, V2)) end end()); {'Idris.Compiler.Scheme.Common.OnCollect'} -> (fun () -> case V2 of [E314 | E315] -> (fun (V993, V994) -> case V994 of [E316 | E317] -> (fun (V995, V996) -> case V996 of [E318 | E319] -> (fun (V997, V998) -> case V998 of [E320 | E321] -> (fun (V999, V1000) -> case V1000 of [] -> fun (V1001) -> begin (V1006 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1002) -> fun (V1003) -> fun (V1004) -> ('un--chezExtPrim'(V1002, V1003, V1004)) end end end, fun (V1005) -> ('un--chezString'(V1005)) end, 0, V995))(V1001))), case V1006 of {'Idris.Prelude.Types.Left', E322} -> (fun (V1007) -> {'Idris.Prelude.Types.Left', V1007} end(E322)); {'Idris.Prelude.Types.Right', E323} -> (fun (V1008) -> begin (V1013 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1009) -> fun (V1010) -> fun (V1011) -> ('un--chezExtPrim'(V1009, V1010, V1011)) end end end, fun (V1012) -> ('un--chezString'(V1012)) end, 0, V997))(V1001))), case V1013 of {'Idris.Prelude.Types.Left', E324} -> (fun (V1014) -> {'Idris.Prelude.Types.Left', V1014} end(E324)); {'Idris.Prelude.Types.Right', E325} -> (fun (V1015) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(blodwen-register-object "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1008, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1015, <<")"/utf8>>))))))))))} end(E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1016) -> fun (V1017) -> fun (V1018) -> ('un--chezExtPrim'(V1016, V1017, V1018)) end end end, fun (V1019) -> ('un--chezString'(V1019)) end, V0, V1, V2)) end end(E320, E321)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1020) -> fun (V1021) -> fun (V1022) -> ('un--chezExtPrim'(V1020, V1021, V1022)) end end end, fun (V1023) -> ('un--chezString'(V1023)) end, V0, V1, V2)) end end(E318, E319)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1024) -> fun (V1025) -> fun (V1026) -> ('un--chezExtPrim'(V1024, V1025, V1026)) end end end, fun (V1027) -> ('un--chezString'(V1027)) end, V0, V1, V2)) end end(E316, E317)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1028) -> fun (V1029) -> fun (V1030) -> ('un--chezExtPrim'(V1028, V1029, V1030)) end end end, fun (V1031) -> ('un--chezString'(V1031)) end, V0, V1, V2)) end end(E314, E315)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1032) -> fun (V1033) -> fun (V1034) -> ('un--chezExtPrim'(V1032, V1033, V1034)) end end end, fun (V1035) -> ('un--chezString'(V1035)) end, V0, V1, V2)) end end()); {'Idris.Compiler.Scheme.Common.OnCollectAny'} -> (fun () -> case V2 of [E326 | E327] -> (fun (V1036, V1037) -> case V1037 of [E328 | E329] -> (fun (V1038, V1039) -> case V1039 of [E330 | E331] -> (fun (V1040, V1041) -> case V1041 of [] -> fun (V1042) -> begin (V1047 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1043) -> fun (V1044) -> fun (V1045) -> ('un--chezExtPrim'(V1043, V1044, V1045)) end end end, fun (V1046) -> ('un--chezString'(V1046)) end, 0, V1036))(V1042))), case V1047 of {'Idris.Prelude.Types.Left', E332} -> (fun (V1048) -> {'Idris.Prelude.Types.Left', V1048} end(E332)); {'Idris.Prelude.Types.Right', E333} -> (fun (V1049) -> begin (V1054 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1050) -> fun (V1051) -> fun (V1052) -> ('un--chezExtPrim'(V1050, V1051, V1052)) end end end, fun (V1053) -> ('un--chezString'(V1053)) end, 0, V1038))(V1042))), case V1054 of {'Idris.Prelude.Types.Left', E334} -> (fun (V1055) -> {'Idris.Prelude.Types.Left', V1055} end(E334)); {'Idris.Prelude.Types.Right', E335} -> (fun (V1056) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--mkWorld'(('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(blodwen-register-object "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1049, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1056, <<")"/utf8>>))))))))))} end(E335)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E333)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1057) -> fun (V1058) -> fun (V1059) -> ('un--chezExtPrim'(V1057, V1058, V1059)) end end end, fun (V1060) -> ('un--chezString'(V1060)) end, V0, V1, V2)) end end(E330, E331)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1061) -> fun (V1062) -> fun (V1063) -> ('un--chezExtPrim'(V1061, V1062, V1063)) end end end, fun (V1064) -> ('un--chezString'(V1064)) end, V0, V1, V2)) end end(E328, E329)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1065) -> fun (V1066) -> fun (V1067) -> ('un--chezExtPrim'(V1065, V1066, V1067)) end end end, fun (V1068) -> ('un--chezString'(V1068)) end, V0, V1, V2)) end end(E326, E327)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1069) -> fun (V1070) -> fun (V1071) -> ('un--chezExtPrim'(V1069, V1070, V1071)) end end end, fun (V1072) -> ('un--chezString'(V1072)) end, V0, V1, V2)) end end()); {'Idris.Compiler.Scheme.Common.MakeFuture'} -> (fun () -> case V2 of [E336 | E337] -> (fun (V1073, V1074) -> case V1074 of [E338 | E339] -> (fun (V1075, V1076) -> case V1076 of [] -> fun (V1077) -> begin (V1082 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1078) -> fun (V1079) -> fun (V1080) -> ('un--chezExtPrim'(V1078, V1079, V1080)) end end end, fun (V1081) -> ('un--chezString'(V1081)) end, 0, V1075))(V1077))), case V1082 of {'Idris.Prelude.Types.Left', E340} -> (fun (V1083) -> {'Idris.Prelude.Types.Left', V1083} end(E340)); {'Idris.Prelude.Types.Right', E341} -> (fun (V1084) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(blodwen-make-future "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V1084, <<")"/utf8>>))))} end(E341)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1085) -> fun (V1086) -> fun (V1087) -> ('un--chezExtPrim'(V1085, V1086, V1087)) end end end, fun (V1088) -> ('un--chezString'(V1088)) end, V0, V1, V2)) end end(E338, E339)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1089) -> fun (V1090) -> fun (V1091) -> ('un--chezExtPrim'(V1089, V1090, V1091)) end end end, fun (V1092) -> ('un--chezString'(V1092)) end, V0, V1, V2)) end end(E336, E337)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1093) -> fun (V1094) -> fun (V1095) -> ('un--chezExtPrim'(V1093, V1094, V1095)) end end end, fun (V1096) -> ('un--chezString'(V1096)) end, V0, V1, V2)) end end()); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1097) -> fun (V1098) -> fun (V1099) -> ('un--chezExtPrim'(V1097, V1098, V1099)) end end end, fun (V1100) -> ('un--chezString'(V1100)) end, V0, V1, V2)) end.
'un--cftySpec'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', <<"void"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', <<"int"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', <<"unsigned-8"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', <<"unsigned-16"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', <<"unsigned-32"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', <<"unsigned-64"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', <<"string"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', <<"double"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', <<"char"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', <<"void*"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', <<"void*"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', <<"u8*"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V14, V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', <<"void*"/utf8>>} end end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V17) -> ('un--cftySpec'(V0, V17)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"(* "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V18, <<")"/utf8>>))))} end end(E3, E4)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Can\x{27}t pass argument of type "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show__CFType'(V1)), <<" to foreign function"/utf8>>))))}, V21)) end end.
'un--cCall'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.CompileExpr.CFIORes', E11} -> (fun (V8) -> case V8 of {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Can\x{27}t return GCPtr from a foreign function"/utf8>>}, V9)) end end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Can\x{27}t return Buffer from a foreign function"/utf8>>}, V10)) end end()); _ -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E12} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V15) -> begin (V20 = (('case--cCall-1712'(V7, V6, V5, V4, V3, V2, V1, V0, V15, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V18, V19)) end end}, V5, V15))))(V11))), case V20 of {'Idris.Prelude.Types.Left', E14} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V22) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> ('un--cftySpec'(V3, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V23)))) end, V6, []))(V11))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> begin (V27 = (('un--cftySpec'(V3, V7))(V11))), case V27 of {'Idris.Prelude.Types.Left', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V29) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V30) -> ('nested--10818-1464--in--un--buildArg'(V7, V6, V5, V4, V3, V2, V1, V0, V30)) end, V6, []))(V11))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((foreign-procedure #f "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V29, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V33)), <<")"/utf8>>))))))))))))))))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V22, case V7 of {'Idris.Core.CompileExpr.CFIORes', E22} -> (fun (V35) -> ('un--handleRet'(V29, V34)) end(E22)); _ -> V34 end}} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E11)); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Can\x{27}t return GCPtr from a foreign function"/utf8>>}, V36)) end end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Can\x{27}t return Buffer from a foreign function"/utf8>>}, V37)) end end()); _ -> fun (V38) -> begin (V40 = begin (V39 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E0} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V42) -> begin (V47 = (('case--cCall-1712'(V7, V6, V5, V4, V3, V2, V1, V0, V42, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(V45, V46)) end end}, V5, V42))))(V38))), case V47 of {'Idris.Prelude.Types.Left', E2} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V49) -> begin (V51 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V50) -> ('un--cftySpec'(V3, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V50)))) end, V6, []))(V38))), case V51 of {'Idris.Prelude.Types.Left', E4} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V53) -> begin (V54 = (('un--cftySpec'(V3, V7))(V38))), case V54 of {'Idris.Prelude.Types.Left', E6} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V56) -> begin (V58 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V57) -> ('nested--10818-1464--in--un--buildArg'(V7, V6, V5, V4, V3, V2, V1, V0, V57)) end, V6, []))(V38))), case V58 of {'Idris.Prelude.Types.Left', E8} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"((foreign-procedure #f "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V53)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V56, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V60)), <<")"/utf8>>))))))))))))))))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V49, case V7 of {'Idris.Core.CompileExpr.CFIORes', E10} -> (fun (V62) -> ('un--handleRet'(V56, V61)) end(E10)); _ -> V61 end}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
