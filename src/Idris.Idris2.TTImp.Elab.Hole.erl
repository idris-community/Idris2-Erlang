-module('Idris.Idris2.TTImp.Elab.Hole').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkHole-7337'/20,
  'case--checkHole-7288'/19,
  'case--case block in checkHole-7080'/18,
  'case--checkHole-7031'/15,
  'case--case block in mkPrecise-6950'/10,
  'case--mkPrecise-6927'/8,
  'un--mkPrecise'/3,
  'un--checkHole'/12
]).
'case--case block in checkHole-7337'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V20}, V22))), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V15, V22))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V15, V22))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V21, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V14))}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkHole-7288'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V20 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V11, V9, V3, V7, V13, V15, V14, V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V23, V24) -> begin (V25 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V23}, V19))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V15, V19))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V15, V19))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V24, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V14))}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V34) -> begin (V35 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V15)), <<" already defined"/utf8>>)) end))(V34))), case V35 of {'Idris.Prelude.Types.Left', E0} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V3, V15}, V34)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in checkHole-7080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V24 = begin (V21 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V1))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('un--mkPrecise'('erased', V11, V23))(V20)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V18}, V20))), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V12, V20))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V12, V20))), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V19, V1}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkHole-7031'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V1))(V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V4))), begin (V20 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V11, V9, V3, V7, V19, V12, V18, V15))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V23, V24) -> begin (V28 = begin (V25 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V1))(V15))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> (('un--mkPrecise'('erased', V11, V27))(V15)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E10} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V23}, V15))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V12, V15))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V12, V15))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V24, V1}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V12)), <<" already defined"/utf8>>)) end))(V40))), case V41 of {'Idris.Prelude.Types.Left', E0} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V43) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V3, V12}, V40)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in mkPrecise-6950'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Context.MkHoleFlags', E0, E1} -> (fun (V10, V11) -> {'Idris.Core.Context.MkHoleFlags', V10, 0} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkPrecise-6927'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', V8, case V9 of {'Idris.Core.Context.MkHoleFlags', E2, E3} -> (fun (V10, V11) -> {'Idris.Core.Context.MkHoleFlags', V10, 0} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mkPrecise'(V0, V1, V2) -> case V2 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V3, V4, V5) -> case V4 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V6, V7, V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V7}, fun (V10) -> case V10 of {'Idris.Core.Context.Hole', E6, E7} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', V11, case V12 of {'Idris.Core.Context.MkHoleFlags', E8, E9} -> (fun (V13, V14) -> {'Idris.Core.Context.MkHoleFlags', V13, 0} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V9)) end end(E3, E4, E5)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E52} -> (fun (V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, {'Idris.Core.Name.UN', V10}))(V13))), case V14 of {'Idris.Prelude.Types.Left', E53} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E55} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V20) -> begin (V47 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V20 of {'Idris.Core.Context.MkDefs', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V21 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V47 of {'Idris.Prelude.Types.Left', E83} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V49) -> case V49 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V50 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V12))(V13))), case V50 of {'Idris.Prelude.Types.Left', E87} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V8))), begin (V54 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V1, V3, V9, V5, V53, V16, V52, V13))), case V54 of {'Idris.Prelude.Types.Left', E89} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V56) -> case V56 of {'Idris.Builtin.MkPair', E91, E92} -> (fun (V57, V58) -> begin (V62 = begin (V59 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V12))(V13))), case V59 of {'Idris.Prelude.Types.Left', E93} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V61) -> (('un--mkPrecise'('erased', V1, V61))(V13)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E95} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V1, V2, {'Idris.Core.Name.Resolved', V57}, V13))), case V65 of {'Idris.Prelude.Types.Left', E97} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V16, V13))), case V68 of {'Idris.Prelude.Types.Left', E99} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V70) -> begin (V71 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V4, V16, V13))), case V71 of {'Idris.Prelude.Types.Left', E101} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V58, V12}} end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V74 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V16)), <<" already defined"/utf8>>)) end))(V13))), case V74 of {'Idris.Prelude.Types.Left', E85} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V9, V16}, V13)) end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E52)); _ -> fun (V77) -> begin (V78 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"type_of_"/utf8>>, V10)), V77))), case V78 of {'Idris.Prelude.Types.Left', E0} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V80) -> begin (V81 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V8))), begin (V86 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V82) -> fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V82, V83)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V84, V85)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V81, V80, {'Idris.Core.TT.TType', V9}, V77))), case V86 of {'Idris.Prelude.Types.Left', E2} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V88) -> begin (V89 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, {'Idris.Core.Name.UN', V10}))(V77))), case V89 of {'Idris.Prelude.Types.Left', E4} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V91) -> begin (V93 = begin (V92 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V92} end), case V93 of {'Idris.Prelude.Types.Left', E6} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V95) -> begin (V99 = begin (V96 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V95, V81, V88))(V77))), case V96 of {'Idris.Prelude.Types.Left', E8} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V98) -> (('un--mkPrecise'('erased', V1, V98))(V77)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V99 of {'Idris.Prelude.Types.Left', E10} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V101) -> begin (V128 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V91, case V95 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V102 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V77))), case V128 of {'Idris.Prelude.Types.Left', E38} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V130) -> case V130 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V131 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V1, V3, V9, V5, V81, V91, V88, V77))), case V131 of {'Idris.Prelude.Types.Left', E42} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V133) -> case V133 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V134, V135) -> begin (V136 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V1, V2, {'Idris.Core.Name.Resolved', V134}, V77))), case V136 of {'Idris.Prelude.Types.Left', E46} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V138) -> begin (V139 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V91, V77))), case V139 of {'Idris.Prelude.Types.Left', E48} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V141) -> begin (V142 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V4, V91, V77))), case V142 of {'Idris.Prelude.Types.Left', E50} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V135, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V88))}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V145 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V91)), <<" already defined"/utf8>>)) end))(V77))), case V145 of {'Idris.Prelude.Types.Left', E40} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V147) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V9, V91}, V77)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
