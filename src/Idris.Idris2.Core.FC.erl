-module('Idris.Idris2.Core.FC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--mergeFC-7195'/7,
  'nested--2626-7325--in--un--prettyPos'/3,
  'dn--un--show_Show__FC'/1,
  'dn--un--showPrec_Show__FC'/2,
  'dn--un--pretty_Pretty__FC'/2,
  'dn--un--prettyPrec_Pretty__FC'/3,
  'dn--un--__Impl_Show_FC'/0,
  'dn--un--__Impl_Pretty_FC'/0,
  'dn--un--__Impl_Eq_FC'/0,
  'dn--un--==_Eq__FC'/2,
  'dn--un--/=_Eq__FC'/2,
  'un--within'/2,
  'un--toplevelFC'/0,
  'un--startPos'/1,
  'un--showPos'/1,
  'un--onLine'/2,
  'un--mergeFC'/2,
  'un--file'/1,
  'un--endPos'/1,
  'un--emptyFC'/0,
  'un--boundToFC'/3,
  'un--FilePos'/0,
  'un--FileName'/0
]).
'case--mergeFC-7195'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Core.FC.MkFC', V2, ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V9, V10)) end end}, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V23, V24)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V27, V28)) end end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V41, V42)) end end}, V1, V4)), ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V45, V46)) end end}, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V59, V60)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V63, V64)) end end}, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V77, V78)) end end}, V0, V3))}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2626-7325--in--un--prettyPos'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', ((V3 + 1) rem 9223372036854775808))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', ((V4 + 1) rem 9223372036854775808))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__FC'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--file'(V0)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('un--showPos'(('un--startPos'(V0)))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"--"/utf8>>, ('un--showPos'(('un--endPos'(V0)))))))))))).
'dn--un--showPrec_Show__FC'(V0, V1) -> ('dn--un--show_Show__FC'(V1)).
'dn--un--pretty_Pretty__FC'(V0, V1) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('un--file'(V1)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('nested--2626-7325--in--un--prettyPos'('erased', V1, ('un--startPos'(V1)))))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"--"/utf8>>)))), ('nested--2626-7325--in--un--prettyPos'('erased', V1, ('un--endPos'(V1)))))).
'dn--un--prettyPrec_Pretty__FC'(V0, V1, V2) -> ('dn--un--pretty_Pretty__FC'('erased', V2)).
'dn--un--__Impl_Show_FC'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__FC'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__FC'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_FC'() -> {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty__FC'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty__FC'('erased', V3, V4)) end end end}.
'dn--un--__Impl_Eq_FC'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq__FC'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq__FC'(V2, V3)) end end}.
'dn--un--==_Eq__FC'(V0, V1) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.FC.MkFC', E3, E4, E5} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V2, V5)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V14, V15)) end end}, V3, V6)), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V18, V19)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V22, V23)) end end}, V4, V7)) end)) end)) end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> case V1 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq__FC'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq__FC'(V0, V1)))).
'un--within'(V0, V1) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.FC.MkFC', E2, E3, E4} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V9, V10)) end end}, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V23, V24)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V27, V28)) end end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V41, V42)) end end}, {'Idris.Builtin.MkPair', V2, V3}, V5)), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V45, V46)) end end}, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V59, V60)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__Int'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__Int'(V63, V64)) end end}, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord__Int'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Int'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord__Int'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord__Int'(V77, V78)) end end}, {'Idris.Builtin.MkPair', V2, V3}, V6)) end)) end(E2, E3, E4)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--toplevelFC'() -> {'Idris.Core.FC.MkFC', <<"(toplevel)"/utf8>>, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}.
'un--startPos'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> V2 end(E0, E1, E2)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> {'Idris.Builtin.MkPair', 0, 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showPos'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(((V1 + 1) rem 9223372036854775808))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(((V2 + 1) rem 9223372036854775808))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--onLine'(V0, V1) -> case V1 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V2, V3, V4) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord__Int'(V0, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)))), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord__Int'(V0, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V4)))) end)) end(E0, E1, E2)); _ -> 1 end.
'un--mergeFC'(V0, V1) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.FC.MkFC', E3, E4, E5} -> (fun (V5, V6, V7) -> ('case--mergeFC-7195'(V4, V3, V2, V7, V6, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(V2, V5)))) end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--file'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> <<""/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--endPos'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> V3 end(E0, E1, E2)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> {'Idris.Builtin.MkPair', 0, 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emptyFC'() -> {'Idris.Core.FC.EmptyFC'}.
'un--boundToFC'(V0, V1, V2) -> {'Idris.Core.FC.MkFC', V1, ('Idris.Idris2.Text.Bounded':'un--start'('erased', V2)), ('Idris.Idris2.Text.Bounded':'un--end'('erased', V2))}.
'un--FilePos'() -> {'Idris.Builtin.Pair', {'Idris.Int'}, {'Idris.Int'}}.
'un--FileName'() -> {'Idris.String'}.
