-module('Idris.Idris2.TTImp.Elab.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--bindReq,notLets-7692'/12,
  'case--bindNotReq-7590'/14,
  'case--bindNotReq-7524'/12,
  'case--wrapErrorC-7423'/4,
  'case--case block in case block in updateErasable-7387'/8,
  'case--case block in updateErasable-7339'/6,
  'case--updateErasable-7320'/4,
  'case--case block in findErasedFrom-7191'/17,
  'case--case block in findErasedFrom-7116'/15,
  'case--findErasedFrom-7080'/12,
  'case--detagSafe-6963'/8,
  'nested--8300-7673--in--un--notLets'/9,
  'nested--7450-6919--in--un--notErased'/10,
  'un--wrapErrorC'/3,
  'un--updateErasable'/3,
  'un--plicit'/2,
  'un--findErasedFrom'/4,
  'un--findErased'/3,
  'un--detagSafe'/3,
  'un--bindReq'/7,
  'un--bindNotReq'/8
]).
'case--bindReq,notLets-7692'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> ('nested--8300-7673--in--un--notLets'(V0, V1, V2, V3, V4, 'erased', V10, V7, V8)); 1 -> ('nested--8300-7673--in--un--notLets'(V0, V1, V2, V3, V4, 'erased', [V6 | V10], V7, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bindNotReq-7590'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', V14, ('Idris.Idris2.Core.TT':'un--refToLocal'('erased', {'Idris.Core.Name.MN', <<"arg"/utf8>>, V8}, V0, V15))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--bindNotReq-7524'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> {'Idris.Builtin.MkPair', V12, ('Idris.Idris2.Core.TT':'un--refToLocal'('erased', {'Idris.Core.Name.MN', <<"arg"/utf8>>, V6}, V0, V13))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--wrapErrorC-7423'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> V4 end; 1 -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'un--wrapError'('erased', V1, V5, V6)) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in updateErasable-7387'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V5, V6, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateErasable-7339'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> fun (V8) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V0, case V3 of {'Idris.Core.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkGlobalDef', V9, V10, V11, V6, V7, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V30 of {'Idris.Prelude.Types.Left', E23} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateErasable-7320'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V27 = ('un--findErased'(V1, case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V8 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V27 of {'Idris.Prelude.Types.Left', E22} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V30, V31) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V0, case V4 of {'Idris.Core.Context.MkGlobalDef', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkGlobalDef', V32, V33, V34, V30, V31, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V53 of {'Idris.Prelude.Types.Left', E47} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findErasedFrom-7191'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> {'Idris.Builtin.MkPair', [V8 | V11], V15}; 1 -> {'Idris.Builtin.MkPair', V11, V15}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findErasedFrom-7116'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> [V8 | V12]; 1 -> V12; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findErasedFrom-7080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = (('un--detagSafe'(V0, V9, V3))(V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = case V17 of 0 -> [V8 | V13]; 1 -> V13; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', begin (V19 = {'Idris.Builtin.MkPair', V12, V13}), ('case--case block in findErasedFrom-7191'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V13, V19, V17, V18, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V26, V27)) end end}}, V4)))) end} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--detagSafe-6963'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E9} -> (fun (V17) -> fun (V18) -> begin (V20 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V6, [], V5, V19)) end, V3, []))(V18))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('nested--7450-6919--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, 0, V17, V22))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', 1} end end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', 1} end end end(E0)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 1} end end.
'nested--8300-7673--in--un--notLets'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> V6; [E0 | E1] -> (fun (V9, V10) -> case V8 of {'Idris.Core.Env.::', E2, E3} -> (fun (V11, V12) -> ('case--bindReq,notLets-7692'(V0, V1, V2, V3, V4, 'erased', V9, V10, V12, V11, V6, ('Idris.Idris2.Core.TT':'un--isLet'('erased', V11)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7450-6919--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> 0; _ -> case V9 of [] -> 1; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Core.Value.NErased', E2, E3} -> (fun (V12, V13) -> case V13 of 0 -> ('nested--7450-6919--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(V7, (1 + 0))), V8, V11)); _ -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V16, V17)) end end}, V7, V8)), fun () -> ('nested--7450-6919--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(V7, (1 + 0))), V8, V11)) end)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V20, V21)) end end}, V7, V8)), fun () -> ('nested--7450-6919--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(V7, (1 + 0))), V8, V11)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--wrapErrorC'(V0, V1, V2) -> ('case--wrapErrorC-7423'('erased', V2, V1, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq__ElabOpt'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq__ElabOpt'(V5, V6)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V1)))).
'un--updateErasable'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> begin (V58 = ('un--findErased'(V0, case V36 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V39 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V58 of {'Idris.Prelude.Types.Left', E52} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V60) -> case V60 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V61, V62) -> begin (V84 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V1, case V36 of {'Idris.Core.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> {'Idris.Core.Context.MkGlobalDef', V63, V64, V65, V61, V62, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V84 of {'Idris.Prelude.Types.Left', E77} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--plicit'(V0, V1) -> case V1 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Core.TT':'un--forgetDef'('erased', 'erased', V4)) end(E0, E1, E2, E3)); {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('Idris.Idris2.Core.TT':'un--forgetDef'('erased', 'erased', V8)) end(E4, E5, E6, E7)); _ -> {'Idris.Core.TT.Explicit'} end.
'un--findErasedFrom'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V21 = (((V7(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V4, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V19, V20)) end end}}, V9))}))))(V12))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> begin (V24 = (('un--findErasedFrom'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2)), V23))(V12))), case V24 of {'Idris.Prelude.Types.Left', E10} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V27, V28) -> begin (V29 = (('un--detagSafe'(V0, V1, V11))(V12))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = case V31 of 0 -> [V2 | V28]; 1 -> V28; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', begin (V33 = {'Idris.Builtin.MkPair', V27, V28}), ('case--case block in findErasedFrom-7191'(V0, V8, V10, V11, V9, V7, V5, V4, V2, V1, V23, V27, V28, V33, V31, V32, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V36, V37)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V40, V41)) end end}}, V9)))) end} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], []}} end end end(E0, E1, E2, E3)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], []}} end end.
'un--findErased'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V6, {'Idris.Core.Env.Nil'}, V1))(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> (('un--findErasedFrom'(V0, V6, 0, V9))(V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--detagSafe'(V0, V1, V2) -> case V2 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V35 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V4, case V1 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V9 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V35 of {'Idris.Prelude.Types.Left', E31} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E33} -> (fun (V38) -> case V38 of {'Idris.Core.Context.TCon', E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46) -> case V46 of {'Idris.Prelude.Types.Just', E42} -> (fun (V47) -> begin (V49 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, [], V1, V48)) end, V7, []))(V8))), case V49 of {'Idris.Prelude.Types.Left', E43} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V51) -> {'Idris.Prelude.Types.Right', ('nested--7450-6919--in--un--notErased'(V3, V5, V6, V7, V4, V1, V0, 0, V47, V51))} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E34, E35, E36, E37, E38, E39, E40, E41)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E33)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> fun (V52) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--bindReq'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.TT.SubRefl'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', ('nested--8300-7673--in--un--notLets'(V1, V6, V5, V3, V2, 'erased', [], V1, V3)), ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V1, V2, V3, V6))}})) end()); _ -> case V1 of [E0 | E1] -> (fun (V7, V8) -> case V3 of {'Idris.Core.Env.::', E2, E3} -> (fun (V9, V10) -> case V4 of {'Idris.Core.TT.KeepCons', E4} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Core.TT':'un--shrinkBinder'('erased', 'erased', V9, V11)), fun (V12) -> ('un--bindReq'('erased', V8, V2, V10, V11, [{'Idris.Builtin.MkPair', ('un--plicit'('erased', V9)), V7} | V5], {'Idris.Core.TT.Bind', V2, V7, {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'('erased', V9)), ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V9)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V12))}, V6})) end)) end(E4)); {'Idris.Core.TT.DropCons', E5} -> (fun (V13) -> ('un--bindReq'('erased', V8, V2, V10, V13, V5, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindNotReq'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V1 of [] -> case V4 of {'Idris.Core.Env.Nil'} -> (fun () -> case V5 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.MkPair', V6, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V7))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V8, V9) -> case V4 of {'Idris.Core.Env.::', E2, E3} -> (fun (V10, V11) -> case V5 of {'Idris.Core.TT.SubRefl'} -> (fun () -> begin (V12 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'('erased', 'erased', {'Idris.Core.TT.Ref', V2, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"arg"/utf8>>, V3}}, V7))), begin (V13 = [V8 | V9]), ('case--bindNotReq-7524'(V8, V9, V11, V10, V7, V6, V3, V2, V13, 'erased', V12, ('un--bindNotReq'('erased', V9, V2, ((1 + V3) rem 9223372036854775808), V11, {'Idris.Core.TT.SubRefl'}, V6, V12)))) end end end()); {'Idris.Core.TT.KeepCons', E4} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'('erased', 'erased', {'Idris.Core.TT.Ref', V2, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"arg"/utf8>>, V3}}, V7))), begin (V16 = [V8 | V9]), ('case--bindNotReq-7590'(V8, V9, 'erased', V11, V10, V14, V7, V6, V3, V2, V16, 'erased', V15, ('un--bindNotReq'('erased', V9, V2, ((1 + V3) rem 9223372036854775808), V11, V14, V6, V15)))) end end end(E4)); {'Idris.Core.TT.DropCons', E5} -> (fun (V17) -> ('un--bindNotReq'('erased', V9, V2, V3, V11, V17, [{'Idris.Builtin.MkPair', ('un--plicit'('erased', V10)), V8} | V6], {'Idris.Core.TT.Bind', V2, V8, {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'('erased', V10)), ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V10)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V10))}, V7})) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
