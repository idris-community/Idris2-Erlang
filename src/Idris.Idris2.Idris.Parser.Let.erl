-module('Idris.Idris2.Idris.Parser.Let').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in mkDoLets,buildDoLets-649'/11,
  'case--mkDoLets,buildDoLets-629'/6,
  'case--mkLets,buildLets-592'/5,
  'nested--9040-495--in--un--mkLet'/6,
  'nested--9040-494--in--un--groups'/5,
  'nested--9126-581--in--un--buildLets'/3,
  'nested--9166-616--in--un--buildDoLets'/3,
  'un--mkLets'/3,
  'un--mkDoLets'/2,
  'un--letFactory'/5,
  'un--LetDecl'/0
]).
'case--case block in mkDoLets,buildDoLets-649'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> {'Idris.Idris.Syntax.DoLet', V4, {'Idris.Core.Name.UN', V5}, V9, V8, V7}; 1 -> {'Idris.Idris.Syntax.DoLetPat', V4, {'Idris.Idris.Syntax.PRef', V6, {'Idris.Core.Name.UN', V5}}, V8, V7, []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkDoLets,buildDoLets-629'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Parser.Let.MkLetBinder', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> case V7 of {'Idris.Idris.Syntax.PRef', E5, E6} -> (fun (V11, V12) -> case V12 of {'Idris.Core.Name.UN', E7} -> (fun (V13) -> case V10 of [] -> [('case--case block in mkDoLets,buildDoLets-649'(V0, V1, V2, V3, V4, V13, V11, V9, V8, V6, ('Idris.Idris2.Utils.String':'un--lowerFirst'(V13)))) | ('nested--9166-616--in--un--buildDoLets'(V0, V1, V3))]; _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--9166-616--in--un--buildDoLets'(V0, V1, V3))] end end(E7)); _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--9166-616--in--un--buildDoLets'(V0, V1, V3))] end end(E5, E6)); _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--9166-616--in--un--buildDoLets'(V0, V1, V3))] end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkLets,buildLets-592'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Parser.Let.MkLetBinder', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V1))), {'Idris.Idris.Syntax.PLet', V10, V5, V6, V7, V8, ('nested--9126-581--in--un--buildLets'(V0, V2, V3)), V9} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9040-495--in--un--mkLet'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> (V4(('Idris.Idris2.Data.List1':'un--forget'('erased', V6)))) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V10 = ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', case V7 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V8, V9) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Data.List1':'un--last'('erased', V7))))), (V3(('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V13, V14)) end end end end, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable__List1'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable__List1'('erased', 'erased', V22, V23, V24)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V25, V26)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V27) -> case V27 of {'Idris.Text.Bounded.MkBounded', E4, E5, E6, E7, E8, E9} -> (fun (V28, V29, V30, V31, V32, V33) -> V28 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))(V7)), V10)))) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9040-494--in--un--groups'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Data.Either':'un--compress'('erased', 'erased', ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Data.List1':'dn--un--map_Functor__List1'('erased', 'erased', fun (V5) -> case case V5 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V15, V16)) end end end end, V12, V5))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V20, V21)) end end end end, V17, V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)))))).
'nested--9126-581--in--un--buildLets'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> ('case--mkLets,buildLets-592'(V0, V3, V4, V2, case V3 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9, V10) -> V5 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9166-616--in--un--buildDoLets'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V1, V3))), ('case--mkDoLets,buildDoLets-629'(V0, V1, V3, V4, V5, case V3 of {'Idris.Text.Bounded.MkBounded', E2, E3, E4, E5, E6, E7} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkLets'(V0, V1, V2) -> ('un--letFactory'('erased', fun (V3) -> fun (V4) -> ('nested--9126-581--in--un--buildLets'(V0, V3, V4)) end end, fun (V5) -> fun (V6) -> {'Idris.Idris.Syntax.PLocal', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V5)), case V5 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> V7 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6} end end, V1, V2)).
'un--mkDoLets'(V0, V1) -> ('un--letFactory'('erased', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('nested--9166-616--in--un--buildDoLets'(V1, V0, V2)), V3)) end end, fun (V4) -> fun (V5) -> [{'Idris.Idris.Syntax.DoLetLocal', ('Idris.Idris2.Core.FC':'un--boundToFC'('erased', V0, V4)), case V4 of {'Idris.Text.Bounded.MkBounded', E0, E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | V5] end end, V1, [])).
'un--letFactory'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', fun (V5) -> ('nested--9040-495--in--un--mkLet'('erased', V4, V3, V2, V1, V5)) end, V4, ('nested--9040-494--in--un--groups'('erased', V4, V3, V2, V1)))).
'un--LetDecl'() -> {'Idris.Prelude.Types.List', {'Idris.Idris.Syntax.PDecl'}}.
