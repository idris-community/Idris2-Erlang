-module('Idris.Idris2.Idris.DocString').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getContents,visible-4040'/6,
  'case--case block in case block in summarise-3906'/10,
  'case--case block in summarise-3877'/8,
  'case--summarise-3859'/6,
  'case--case block in getDocsFor-3751'/11,
  'case--getDocsFor-3706'/7,
  'case--getDocsFor,showDoc-3600'/8,
  'case--case block in case block in getDocsFor,getExtra-3431'/17,
  'case--case block in getDocsFor,getExtra-3348'/8,
  'case--getDocsFor,getExtra-3329'/8,
  'case--getDocsFor,getIFaceDoc-3251'/12,
  'case--getDocsFor,getIFaceDoc-3186'/8,
  'case--getDocsFor,getIFaceDoc-3111'/13,
  'case--getDocsFor,getIFaceDoc-3040'/10,
  'case--getDocsFor,getIFaceDoc-2977'/7,
  'case--getDocsFor,getMethDoc-2878'/11,
  'case--getDocsFor,getImplDoc-2785'/7,
  'case--case block in getDocsFor,getConstructorDoc-2666'/10,
  'case--getDocsFor,getConstructorDoc-2639'/7,
  'case--getDocsFor,showTotal-2586'/7,
  'case--addDocStringNS-2540'/8,
  'case--addDocStringNS-2492'/6,
  'case--addDocString-2463'/6,
  'nested--12121-4028--in--un--visible'/6,
  'nested--10514-2565--in--un--showTotal'/6,
  'nested--10514-2571--in--un--showDoc'/5,
  'nested--10514-2564--in--un--indent'/5,
  'nested--12121-4029--in--un--inNS'/4,
  'nested--10514-2568--in--un--getMethDoc'/5,
  'nested--10514-2567--in--un--getImplDoc'/6,
  'nested--10514-2569--in--un--getIFaceDoc'/5,
  'nested--10514-2570--in--un--getExtra'/7,
  'nested--10514-2566--in--un--getConstructorDoc'/6,
  'un--summarise'/4,
  'un--getDocsFor'/5,
  'un--getContents'/4,
  'un--addDocStringNS'/6,
  'un--addDocString'/5
]).
'case--getContents,visible-4040'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Visibility'(case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V17 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Private'}))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V29) -> {'Idris.Prelude.Types.Right', 1} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in summarise-3906'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> {'Idris.Prelude.Types.Just', V10} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in summarise-3877'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V9 of [] -> ('case--case block in case block in summarise-3906'(V0, V1, V2, V3, V4, V5, V6, V10, V11, ('Idris.Idris2.Data.Strings':'un--lines'(V11)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--summarise-3859'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V17 = begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in summarise-3877'(V0, V1, V2, V3, V4, V6, V7, ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V0, case V3 of {'Idris.Idris.Syntax.MkSyntax', E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V12 end(E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), fun (V18) -> begin (V40 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V2, [], V4, {'Idris.Core.Env.Nil'}, case V6 of {'Idris.Core.Context.MkGlobalDef', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V21 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V2, V1, {'Idris.Core.Env.Nil'}, V42, V18))), case V43 of {'Idris.Prelude.Types.Left', E33} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V0)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V45)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V46) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}"/utf8>>, V46)) end end, V17))))))))} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> fun (V47) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'case--case block in getDocsFor-3751'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V13) -> ('nested--10514-2571--in--un--showDoc'(V0, V1, V2, V3, V13)) end, V10, [])) end(E0, E1)); [] -> fun (V14) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"No documentation for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V0)))) | []]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsFor-3706'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [E0 | E1] -> (fun (V7, V8) -> begin (V9 = [V7 | V8]), begin (V10 = [V7 | V8]), ('case--case block in getDocsFor-3751'(V0, V1, V2, V3, V4, V5, V8, V7, V9, V10, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V19, V20, V21)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V22, V23)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V24) -> ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V24, case V4 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V29 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V11)) end, V10)))))) end end end(E0, E1)); _ -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V34)) end end.
'case--getDocsFor,showDoc-3600'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V6, {'Idris.Core.Env.Nil'}, case V8 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V12 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--aliasName'(V3, V4, V9))), case V34 of {'Idris.Prelude.Types.Left', E24} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V33, V9))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V36)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V39)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('nested--10514-2564--in--un--indent'(V0, V1, V2, V3, V5))))))))))), begin (V41 = ('nested--10514-2570--in--un--getExtra'(V0, V1, V2, V3, V4, V8, V9))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V40, V43))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V4}, V44)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getDocsFor,getExtra-3431'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> fun (V17) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end; _ -> fun (V18) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}Constructors:\x{a}"/utf8>>, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V26, V27, V28)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V29, V30)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V16))))} end end.
'case--case block in getDocsFor,getExtra-3348'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', ('nested--10514-2565--in--un--showTotal'(V0, V1, V2, V3, V5, case V4 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V24 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42) -> fun (V43) -> begin (V55 = begin (V50 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Name'(V48, V49)) end end}, V44, V45)) end end, V41, []))(V43))), case V50 of {'Idris.Prelude.Types.Left', E34} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V52) -> (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V53) -> fun (V54) -> ('nested--10514-2566--in--un--getConstructorDoc'(V0, V1, V2, V3, V53, V54)) end end, V52, []))(V43)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E36} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V57) -> (('case--case block in case block in getDocsFor,getExtra-3431'(V0, V1, V2, V3, V4, V5, V6, V35, V36, V37, V38, V39, V40, V42, V41, V57, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V58) -> V58 end, V57))))(V43)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27, E28, E29, E30, E31, E32, E33)); _ -> fun (V59) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'case--getDocsFor,getExtra-3329'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> ('case--case block in getDocsFor,getExtra-3348'(V0, V1, V2, V3, V4, V5, V6, case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); [E21 | E22] -> (fun (V29, V30) -> case V30 of [] -> ('nested--10514-2569--in--un--getIFaceDoc'(V0, V1, V2, V3, V29)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end end(E21, E22)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'case--getDocsFor,getIFaceDoc-3251'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> fun (V18) -> ('nested--10514-2567--in--un--getImplDoc'(V0, V1, V2, V3, V17, V18)) end end, V16, [])) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsFor,getIFaceDoc-3186'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end; _ -> fun (V9) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> fun (V11) -> ('Idris.Idris2.Idris.Resugar':'un--pterm'(V3, V2, V10, V11)) end end, V7, []))(V9))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Constraints: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V15)) end, V14)))), <<"\x{a}"/utf8>>))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--getDocsFor,getIFaceDoc-3111'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}Implementations:\x{a}"/utf8>>, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V20, V21, V22)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V23, V24)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V12)))) end.
'case--getDocsFor,getIFaceDoc-3040'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}Methods:\x{a}"/utf8>>, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V17, V18, V19)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V20, V21)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'())}}))(V9)))) end.
'case--getDocsFor,getIFaceDoc-2977'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Parameters: "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V7)) end, V6)))), <<"\x{a}"/utf8>>)))) end.
'case--getDocsFor,getMethDoc-2878'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> case V12 of [] -> fun (V15) -> begin (V16 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V3, V2, V8, V15))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V13)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V18)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V19) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__TotalReq'(V19)))) end end, V7)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('nested--10514-2564--in--un--indent'(V0, V1, V2, V3, V14))))))))))))}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E2, E3)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getDocsFor,getImplDoc-2785'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V5, {'Idris.Core.Env.Nil'}, case V7 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V11 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V32, V8))), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('nested--10514-2564--in--un--indent'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V35)), <<"\x{a}"/utf8>>))))}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getDocsFor,getConstructorDoc-2666'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V11 of [] -> fun (V14) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V5, {'Idris.Core.Env.Nil'}, case V6 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V17 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V36 of {'Idris.Prelude.Types.Left', E25} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V38, V14))), case V39 of {'Idris.Prelude.Types.Left', E27} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V12)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V41)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('nested--10514-2564--in--un--indent'(V0, V1, V2, V3, V13))))))))))}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E2, E3)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getDocsFor,getConstructorDoc-2639'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> begin (V13 = {'Idris.Prelude.Types.Just', V7}), (('case--case block in getDocsFor,getConstructorDoc-2666'(V0, V1, V2, V3, V4, V5, V7, V13, V12, ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V4, case V12 of {'Idris.Idris.Syntax.MkSyntax', E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V8)) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsFor,showTotal-2586'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Unchecked'} -> (fun () -> <<""/utf8>> end()); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}Totality: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show__Totality'(V4)))) end.
'case--addDocStringNS-2540'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Idris.Syntax.MkSyntax', V8, V9, V10, V11, ('Idris.Idris2.Data.ANameMap':'un--addName'('erased', V6, V0, V12)), ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V6, {'Idris.Builtin.MkUnit'}, V13)), V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDocStringNS-2492'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V6, V7) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V6, V2)), V7} end(E0, E1)); _ -> {'Idris.Core.Name.NS', V2, V5} end.
'case--addDocString-2463'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Idris.Syntax.MkSyntax', V6, V7, V8, V9, ('Idris.Idris2.Data.ANameMap':'un--addName'('erased', V4, V0, V10)), ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V4, {'Idris.Builtin.MkUnit'}, V11)), V12, V13, V14} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12121-4028--in--un--visible'(V0, V1, V2, V3, V4, V5) -> begin (V32 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V32 of {'Idris.Prelude.Types.Left', E26} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Just', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq__Visibility'(case V35 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V45 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Private'}))} end(E28)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10514-2565--in--un--showTotal'(V0, V1, V2, V3, V4, V5) -> ('case--getDocsFor,showTotal-2586'(V0, V1, V2, V3, V5, V4, case V5 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V6, V7) -> V6 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--10514-2571--in--un--showDoc'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V38 of {'Idris.Prelude.Types.Left', E30} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E32} -> (fun (V41) -> begin (V63 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V11, {'Idris.Core.Env.Nil'}, case V41 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V44 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V63 of {'Idris.Prelude.Types.Left', E54} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Context':'un--aliasName'(V3, V5, V7))), case V66 of {'Idris.Prelude.Types.Left', E56} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V65, V7))), case V69 of {'Idris.Prelude.Types.Left', E58} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V68)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V71)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('nested--10514-2564--in--un--indent'(V0, V1, V2, V3, V6))))))))))), begin (V73 = ('nested--10514-2570--in--un--getExtra'(V0, V1, V2, V3, V5, V41, V7))), case V73 of {'Idris.Prelude.Types.Left', E60} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V75) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V72, V75))} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V5}, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10514-2564--in--un--indent'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Data.Strings':'un--unlines'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{9}"/utf8>>, V5)) end, ('Idris.Idris2.Data.Strings':'un--lines'(V4)))))).
'nested--12121-4029--in--un--inNS'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V0, V4)) end(E2)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'nested--10514-2568--in--un--getMethDoc'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> (('case--getDocsFor,getMethDoc-2878'(V0, V1, V2, V3, V11, V5, V7, V9, V12, V17, ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V5, case V17 of {'Idris.Idris.Syntax.MkSyntax', E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V22 end(E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V13)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10514-2567--in--un--getImplDoc'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E30} -> (fun (V39) -> begin (V61 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V9, {'Idris.Core.Env.Nil'}, case V39 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V42 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V61 of {'Idris.Prelude.Types.Left', E52} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V63, V5))), case V64 of {'Idris.Prelude.Types.Left', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('nested--10514-2564--in--un--indent'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V66)), <<"\x{a}"/utf8>>))))}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10514-2569--in--un--getIFaceDoc'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V13 = ('case--getDocsFor,getIFaceDoc-2977'(V0, V1, V2, V3, V5, V6, case V6 of {'Idris.Idris.Syntax.MkIFaceInfo', E2, E3, E4, E5, E6, E7} -> (fun (V7, V8, V9, V10, V11, V12) -> V9 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V14) -> begin (V21 = (('case--getDocsFor,getIFaceDoc-3186'(V0, V1, V2, V3, V5, V6, V13, case V6 of {'Idris.Idris.Syntax.MkIFaceInfo', E8, E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19, V20) -> V18 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('nested--10514-2568--in--un--getMethDoc'(V0, V1, V2, V3, V24)) end, case V6 of {'Idris.Idris.Syntax.MkIFaceInfo', E16, E17, E18, E19, E20, E21} -> (fun (V25, V26, V27, V28, V29, V30) -> V29 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V14))), case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> begin (V35 = ('case--getDocsFor,getIFaceDoc-3040'(V0, V1, V2, V3, V5, V6, V13, V23, V33, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V34) -> V34 end, V33))))), begin (V36 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V3, V1, 1, V5, V14))), case V36 of {'Idris.Prelude.Types.Left', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V38) -> begin (V41 = (('case--getDocsFor,getIFaceDoc-3251'(V0, V1, V2, V3, V5, V6, V13, V23, V33, V35, V38, case V38 of {'Idris.Core.Context.MkSearchData', E26, E27} -> (fun (V39, V40) -> V40 end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> begin (V45 = ('case--getDocsFor,getIFaceDoc-3111'(V0, V1, V2, V3, V5, V6, V13, V23, V33, V35, V38, V43, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V44) -> V44 end, V43))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V13, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V23, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V35, V45))))))} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10514-2570--in--un--getExtra'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('case--getDocsFor,getExtra-3329'(V0, V1, V2, V3, V5, V4, V10, ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V4, case V10 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10514-2566--in--un--getConstructorDoc'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E30} -> (fun (V39) -> begin (V41 = begin (V40 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in getDocsFor,getConstructorDoc-2666'(V0, V1, V2, V3, V4, V9, V39, V44, V43, ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V4, case V43 of {'Idris.Idris.Syntax.MkSyntax', E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V49 end(E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V5)) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--summarise'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E30} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E32} -> (fun (V41) -> begin (V52 = begin (V42 = {'Idris.Prelude.Types.Just', V41}), ('case--case block in summarise-3877'(V2, V1, V0, V7, V11, V41, V42, ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V2, case V7 of {'Idris.Idris.Syntax.MkSyntax', E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V47 end(E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), begin (V74 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V11, {'Idris.Core.Env.Nil'}, case V41 of {'Idris.Core.Context.MkGlobalDef', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V55 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V74 of {'Idris.Prelude.Types.Left', E63} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V76, V3))), case V77 of {'Idris.Prelude.Types.Left', E65} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V2)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V79)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V80) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}"/utf8>>, V80)) end end, V52))))))))} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32)); _ -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDocsFor'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V3, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V41) -> case V41 of [E32 | E33] -> (fun (V42, V43) -> begin (V44 = [V42 | V43]), begin (V45 = [V42 | V43]), (('case--case block in getDocsFor-3751'(V3, V2, V1, V0, V8, V12, V43, V42, V44, V45, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V54, V55, V56)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V57, V58)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}, fun (V59) -> ('Idris.Idris2.Data.ANameMap':'un--lookupName'('erased', V59, case V8 of {'Idris.Idris.Syntax.MkSyntax', E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V64 end(E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)) end, V45))))))(V4)) end end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V3}, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContents'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V34 = (('Idris.Idris2.Core.Context':'un--allNames'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> begin (V38 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V37) -> ('nested--12121-4029--in--un--inNS'(V2, V1, V0, V37)) end, V36))), begin (V41 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V39) -> fun (V40) -> ('nested--12121-4028--in--un--visible'(V2, V1, V0, V7, V39, V40)) end end, V38))(V3))), case V41 of {'Idris.Prelude.Types.Left', E30} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V43) -> (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V44) -> fun (V45) -> ('un--summarise'(V0, V1, V44, V45)) end end, ('Idris.Idris2.Data.List':'un--sort'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V48, V49)) end end}, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord__Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord__Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord__Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord__Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord__Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord__Name'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord__Name'(V62, V63)) end end}, V43)), []))(V3)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocStringNS'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V3))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V11 = case V8 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V9, V10) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V2)), V10} end(E2, E3)); _ -> {'Idris.Core.Name.NS', V2, V8} end), begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V25 = ('erlang':'put'(V1, case V15 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> {'Idris.Idris.Syntax.MkSyntax', V16, V17, V18, V19, ('Idris.Idris2.Data.ANameMap':'un--addName'('erased', V11, V4, V20)), ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V11, {'Idris.Builtin.MkUnit'}, V21)), V22, V23, V24} end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V25} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocString'(V0, V1, V2, V3, V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V21 = ('erlang':'put'(V1, case V11 of {'Idris.Idris.Syntax.MkSyntax', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.Syntax.MkSyntax', V12, V13, V14, V15, ('Idris.Idris2.Data.ANameMap':'un--addName'('erased', V7, V3, V16)), ('Idris.Idris2.Data.NameMap':'un--insert'('erased', V7, {'Idris.Builtin.MkUnit'}, V17)), V18, V19, V20} end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
